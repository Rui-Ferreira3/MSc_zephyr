/*
 * Generated by gen_defines.py
 *
 * DTS input file:
 *   veerwolf_nexys.dts.pre.tmp
 *
 * Directories with bindings:
 *   /home/rui/SweRVolf/fusesoc_libraries/swervolf/zephyr/dts/bindings, $ZEPHYR_BASE/dts/bindings
 *
 * Node dependency ordering (ordinal and path):
 *   0   /
 *   1   /aliases
 *   2   /chosen
 *   3   /memory@0
 *   4   /cpus
 *   5   /cpus/cpu@0
 *   6   /leds
 *   7   /soc
 *   8   /soc/gpio@80001010
 *   9   /leds/led
 *   10  /soc/interrupt-controller@f00c0000
 *   11  /soc/uart@80002000
 *   12  /soc/spi@80001040
 *   13  /soc/spi@80001040/flash@0
 *
 * Definitions derived from these nodes in dependency order are next,
 * followed by /chosen nodes.
 */

/*
 * Devicetree node: /
 *
 * Node identifier: DT_N
 */

/* Node's full path: */
#define DT_N_PATH "/"

/* Node's name with unit-address: */
#define DT_N_FULL_NAME "/"
#define DT_N_FOREACH_CHILD(fn) fn(DT_N_S_cpus) fn(DT_N_S_soc) fn(DT_N_S_aliases) fn(DT_N_S_chosen) fn(DT_N_S_memory_0) fn(DT_N_S_leds)
#define DT_N_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_memory_0, __VA_ARGS__) fn(DT_N_S_leds, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_cpus) fn(DT_N_S_soc) fn(DT_N_S_aliases) fn(DT_N_S_chosen) fn(DT_N_S_memory_0) fn(DT_N_S_leds) 
#define DT_N_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_memory_0, __VA_ARGS__) fn(DT_N_S_leds, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_ORD 0

/* Ordinals for what this node depends on directly: */
#define DT_N_REQUIRES_ORDS /* nothing */

/* Ordinals for what depends directly on this node: */
#define DT_N_SUPPORTS_ORDS \
	1, /* /aliases */ \
	2, /* /chosen */ \
	3, /* /memory@0 */ \
	4, /* /cpus */ \
	6, /* /leds */ \
	7, /* /soc */

/* Existence and alternate IDs: */
#define DT_N_EXISTS 1
#define DT_N_INST_0_chipsalliance_veerwolf_nexys DT_N

/* Macros for properties that are special in the specification: */
#define DT_N_REG_NUM 0
#define DT_N_IRQ_NUM 0
#define DT_N_COMPAT_MATCHES_chipsalliance_veerwolf_nexys 1
#define DT_N_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_P_compatible {"ChipsAlliance,Veerwolf-Nexys"}
#define DT_N_P_compatible_IDX_0 "ChipsAlliance,Veerwolf-Nexys"
#define DT_N_P_compatible_IDX_0_EXISTS 1
#define DT_N_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N, compatible, 0)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N, compatible, 0, __VA_ARGS__)
#define DT_N_P_compatible_LEN 1
#define DT_N_P_compatible_EXISTS 1

/*
 * Devicetree node: /aliases
 *
 * Node identifier: DT_N_S_aliases
 */

/* Node's full path: */
#define DT_N_S_aliases_PATH "/aliases"

/* Node's name with unit-address: */
#define DT_N_S_aliases_FULL_NAME "aliases"

/* Node parent (/) identifier: */
#define DT_N_S_aliases_PARENT DT_N
#define DT_N_S_aliases_FOREACH_CHILD(fn) 
#define DT_N_S_aliases_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_aliases_ORD 1

/* Ordinals for what this node depends on directly: */
#define DT_N_S_aliases_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_aliases_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_aliases_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_aliases_REG_NUM 0
#define DT_N_S_aliases_IRQ_NUM 0
#define DT_N_S_aliases_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_aliases_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /chosen
 *
 * Node identifier: DT_N_S_chosen
 */

/* Node's full path: */
#define DT_N_S_chosen_PATH "/chosen"

/* Node's name with unit-address: */
#define DT_N_S_chosen_FULL_NAME "chosen"

/* Node parent (/) identifier: */
#define DT_N_S_chosen_PARENT DT_N
#define DT_N_S_chosen_FOREACH_CHILD(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_chosen_ORD 2

/* Ordinals for what this node depends on directly: */
#define DT_N_S_chosen_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_chosen_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_chosen_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_chosen_REG_NUM 0
#define DT_N_S_chosen_IRQ_NUM 0
#define DT_N_S_chosen_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_chosen_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /memory@0
 *
 * Node identifier: DT_N_S_memory_0
 *
 * Binding (compatible = mmio-sram):
 *   $ZEPHYR_BASE/dts/bindings/sram/mmio-sram.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_memory_0_PATH "/memory@0"

/* Node's name with unit-address: */
#define DT_N_S_memory_0_FULL_NAME "memory@0"

/* Node parent (/) identifier: */
#define DT_N_S_memory_0_PARENT DT_N
#define DT_N_S_memory_0_FOREACH_CHILD(fn) 
#define DT_N_S_memory_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_memory_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_memory_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_memory_0_ORD 3

/* Ordinals for what this node depends on directly: */
#define DT_N_S_memory_0_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_memory_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_memory_0_EXISTS 1
#define DT_N_INST_0_mmio_sram DT_N_S_memory_0
#define DT_N_NODELABEL_sram   DT_N_S_memory_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_memory_0_REG_NUM 1
#define DT_N_S_memory_0_REG_IDX_0_EXISTS 1
#define DT_N_S_memory_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_memory_0_REG_IDX_0_VAL_SIZE 8388608 /* 0x800000 */
#define DT_N_S_memory_0_IRQ_NUM 0
#define DT_N_S_memory_0_COMPAT_MATCHES_mmio_sram 1
#define DT_N_S_memory_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_memory_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_memory_0_P_reg {0 /* 0x0 */, 8388608 /* 0x800000 */}
#define DT_N_S_memory_0_P_reg_IDX_0 0
#define DT_N_S_memory_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_memory_0_P_reg_IDX_1 8388608
#define DT_N_S_memory_0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_memory_0_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_memory_0, reg, 0) \
	fn(DT_N_S_memory_0, reg, 1)
#define DT_N_S_memory_0_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_memory_0, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_memory_0, reg, 1, __VA_ARGS__)
#define DT_N_S_memory_0_P_reg_EXISTS 1
#define DT_N_S_memory_0_P_compatible {"mmio-sram"}
#define DT_N_S_memory_0_P_compatible_IDX_0 "mmio-sram"
#define DT_N_S_memory_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_memory_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_memory_0, compatible, 0)
#define DT_N_S_memory_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_memory_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_memory_0_P_compatible_LEN 1
#define DT_N_S_memory_0_P_compatible_EXISTS 1
#define DT_N_S_memory_0_P_wakeup_source 0
#define DT_N_S_memory_0_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /cpus
 *
 * Node identifier: DT_N_S_cpus
 */

/* Node's full path: */
#define DT_N_S_cpus_PATH "/cpus"

/* Node's name with unit-address: */
#define DT_N_S_cpus_FULL_NAME "cpus"

/* Node parent (/) identifier: */
#define DT_N_S_cpus_PARENT DT_N
#define DT_N_S_cpus_FOREACH_CHILD(fn) fn(DT_N_S_cpus_S_cpu_0)
#define DT_N_S_cpus_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_cpus_S_cpu_0) 
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_ORD 4

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_SUPPORTS_ORDS \
	5, /* /cpus/cpu@0 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_REG_NUM 0
#define DT_N_S_cpus_IRQ_NUM 0
#define DT_N_S_cpus_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /cpus/cpu@0
 *
 * Node identifier: DT_N_S_cpus_S_cpu_0
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_0_PATH "/cpus/cpu@0"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_0_FULL_NAME "cpu@0"

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_cpu_0_PARENT DT_N_S_cpus
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_0_ORD 5

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_0_REQUIRES_ORDS \
	4, /* /cpus */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_0_EXISTS 1
#define DT_N_INST_0_chipsalliance_veer_eh1_v1_2 DT_N_S_cpus_S_cpu_0
#define DT_N_INST_0_riscv                       DT_N_S_cpus_S_cpu_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_0_REG_NUM 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_cpus_S_cpu_0_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_0_COMPAT_MATCHES_chipsalliance_veer_eh1_v1_2 1
#define DT_N_S_cpus_S_cpu_0_COMPAT_MATCHES_riscv 1
#define DT_N_S_cpus_S_cpu_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_0_P_compatible {"ChipsAlliance,VeeR-EH1-v1.2", "riscv"}
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0 "ChipsAlliance,VeeR-EH1-v1.2"
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_1 "riscv"
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_1_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, compatible, 0) \
	fn(DT_N_S_cpus_S_cpu_0, compatible, 1)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, compatible, 0, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_0, compatible, 1, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_compatible_LEN 2
#define DT_N_S_cpus_S_cpu_0_P_compatible_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg {0 /* 0x0 */}
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0 0
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, reg, 0)
#define DT_N_S_cpus_S_cpu_0_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, reg, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_reg_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_status "okay"
#define DT_N_S_cpus_S_cpu_0_P_status_STRING_TOKEN okay
#define DT_N_S_cpus_S_cpu_0_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_cpus_S_cpu_0_P_status_ENUM_IDX 1
#define DT_N_S_cpus_S_cpu_0_P_status_ENUM_TOKEN okay
#define DT_N_S_cpus_S_cpu_0_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_cpus_S_cpu_0_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, status, 0) \
	fn(DT_N_S_cpus_S_cpu_0, status, 1) \
	fn(DT_N_S_cpus_S_cpu_0, status, 2) \
	fn(DT_N_S_cpus_S_cpu_0, status, 3)
#define DT_N_S_cpus_S_cpu_0_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, status, 0, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_0, status, 1, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_0, status, 2, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_0, status, 3, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_status_EXISTS 1

/*
 * Devicetree node: /leds
 *
 * Node identifier: DT_N_S_leds
 *
 * Binding (compatible = gpio-leds):
 *   $ZEPHYR_BASE/dts/bindings/gpio/gpio-leds.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_leds_PATH "/leds"

/* Node's name with unit-address: */
#define DT_N_S_leds_FULL_NAME "leds"

/* Node parent (/) identifier: */
#define DT_N_S_leds_PARENT DT_N
#define DT_N_S_leds_FOREACH_CHILD(fn) fn(DT_N_S_leds_S_led)
#define DT_N_S_leds_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_leds_S_led, __VA_ARGS__)
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_leds_S_led) 
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_leds_S_led, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_S_leds_ORD 6

/* Ordinals for what this node depends on directly: */
#define DT_N_S_leds_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_leds_SUPPORTS_ORDS \
	9, /* /leds/led */

/* Existence and alternate IDs: */
#define DT_N_S_leds_EXISTS 1
#define DT_N_INST_0_gpio_leds DT_N_S_leds

/* Macros for properties that are special in the specification: */
#define DT_N_S_leds_REG_NUM 0
#define DT_N_S_leds_IRQ_NUM 0
#define DT_N_S_leds_COMPAT_MATCHES_gpio_leds 1
#define DT_N_S_leds_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_leds_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /soc
 *
 * Node identifier: DT_N_S_soc
 */

/* Node's full path: */
#define DT_N_S_soc_PATH "/soc"

/* Node's name with unit-address: */
#define DT_N_S_soc_FULL_NAME "soc"

/* Node parent (/) identifier: */
#define DT_N_S_soc_PARENT DT_N
#define DT_N_S_soc_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_interrupt_controller_f00c0000) fn(DT_N_S_soc_S_uart_80002000) fn(DT_N_S_soc_S_spi_80001040) fn(DT_N_S_soc_S_gpio_80001010)
#define DT_N_S_soc_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_f00c0000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_80002000, __VA_ARGS__) fn(DT_N_S_soc_S_spi_80001040, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_80001010, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_interrupt_controller_f00c0000) fn(DT_N_S_soc_S_uart_80002000) fn(DT_N_S_soc_S_spi_80001040) fn(DT_N_S_soc_S_gpio_80001010) 
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_f00c0000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_80002000, __VA_ARGS__) fn(DT_N_S_soc_S_spi_80001040, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_80001010, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_ORD 7

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_SUPPORTS_ORDS \
	8, /* /soc/gpio@80001010 */ \
	10, /* /soc/interrupt-controller@f00c0000 */ \
	11, /* /soc/uart@80002000 */ \
	12, /* /soc/spi@80001040 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_EXISTS 1
#define DT_N_INST_0_chipsalliance_veerwolf_soc DT_N_S_soc
#define DT_N_INST_0_simple_bus                 DT_N_S_soc

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_REG_NUM 0
#define DT_N_S_soc_IRQ_NUM 0
#define DT_N_S_soc_COMPAT_MATCHES_chipsalliance_veerwolf_soc 1
#define DT_N_S_soc_COMPAT_MATCHES_simple_bus 1
#define DT_N_S_soc_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_P_compatible {"ChipsAlliance,VeeRwolf-soc", "simple-bus"}
#define DT_N_S_soc_P_compatible_IDX_0 "ChipsAlliance,VeeRwolf-soc"
#define DT_N_S_soc_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_P_compatible_IDX_1 "simple-bus"
#define DT_N_S_soc_P_compatible_IDX_1_EXISTS 1
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc, compatible, 0) \
	fn(DT_N_S_soc, compatible, 1)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc, compatible, 0, __VA_ARGS__) \
	fn(DT_N_S_soc, compatible, 1, __VA_ARGS__)
#define DT_N_S_soc_P_compatible_LEN 2
#define DT_N_S_soc_P_compatible_EXISTS 1

/*
 * Devicetree node: /soc/gpio@80001010
 *
 * Node identifier: DT_N_S_soc_S_gpio_80001010
 *
 * Binding (compatible = veerwolf,gpio):
 *   /home/rui/SweRVolf/fusesoc_libraries/swervolf/zephyr/dts/bindings/gpio/veerwolf,gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_80001010_PATH "/soc/gpio@80001010"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_80001010_FULL_NAME "gpio@80001010"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_80001010_PARENT DT_N_S_soc
#define DT_N_S_soc_S_gpio_80001010_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_80001010_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_80001010_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_80001010_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_80001010_ORD 8

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_80001010_REQUIRES_ORDS \
	7, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_80001010_SUPPORTS_ORDS \
	9, /* /leds/led */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_80001010_EXISTS 1
#define DT_N_INST_0_veerwolf_gpio DT_N_S_soc_S_gpio_80001010
#define DT_N_NODELABEL_gpio_led0  DT_N_S_soc_S_gpio_80001010

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_80001010_REG_NUM 1
#define DT_N_S_soc_S_gpio_80001010_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_80001010_REG_IDX_0_VAL_ADDRESS 2147487760 /* 0x80001010 */
#define DT_N_S_soc_S_gpio_80001010_REG_IDX_0_VAL_SIZE 16 /* 0x10 */
#define DT_N_S_soc_S_gpio_80001010_IRQ_NUM 0
#define DT_N_S_soc_S_gpio_80001010_COMPAT_MATCHES_veerwolf_gpio 1
#define DT_N_S_soc_S_gpio_80001010_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_80001010_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_80001010_P_reg {2147487760 /* 0x80001010 */, 16 /* 0x10 */}
#define DT_N_S_soc_S_gpio_80001010_P_reg_IDX_0 2147487760
#define DT_N_S_soc_S_gpio_80001010_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_80001010_P_reg_IDX_1 16
#define DT_N_S_soc_S_gpio_80001010_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_80001010_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_80001010, reg, 0) \
	fn(DT_N_S_soc_S_gpio_80001010, reg, 1)
#define DT_N_S_soc_S_gpio_80001010_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_80001010, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_80001010, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_80001010_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_80001010_P_label "LED0"
#define DT_N_S_soc_S_gpio_80001010_P_label_STRING_TOKEN LED0
#define DT_N_S_soc_S_gpio_80001010_P_label_STRING_UPPER_TOKEN LED0
#define DT_N_S_soc_S_gpio_80001010_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_80001010, label, 0) \
	fn(DT_N_S_soc_S_gpio_80001010, label, 1) \
	fn(DT_N_S_soc_S_gpio_80001010, label, 2) \
	fn(DT_N_S_soc_S_gpio_80001010, label, 3)
#define DT_N_S_soc_S_gpio_80001010_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_80001010, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_80001010, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_80001010, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_80001010, label, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_80001010_P_label_EXISTS 1
#define DT_N_S_soc_S_gpio_80001010_P_ngpios 32
#define DT_N_S_soc_S_gpio_80001010_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_80001010_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_80001010_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_80001010_P_status "okay"
#define DT_N_S_soc_S_gpio_80001010_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_80001010_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_80001010_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_80001010_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_gpio_80001010_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_80001010_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_80001010, status, 0) \
	fn(DT_N_S_soc_S_gpio_80001010, status, 1) \
	fn(DT_N_S_soc_S_gpio_80001010, status, 2) \
	fn(DT_N_S_soc_S_gpio_80001010, status, 3)
#define DT_N_S_soc_S_gpio_80001010_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_80001010, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_80001010, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_80001010, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_80001010, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_80001010_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_80001010_P_compatible {"veerwolf,gpio"}
#define DT_N_S_soc_S_gpio_80001010_P_compatible_IDX_0 "veerwolf,gpio"
#define DT_N_S_soc_S_gpio_80001010_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_80001010_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_80001010, compatible, 0)
#define DT_N_S_soc_S_gpio_80001010_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_80001010, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_80001010_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_80001010_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_80001010_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_80001010_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /leds/led
 *
 * Node identifier: DT_N_S_leds_S_led
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_leds_S_led_PATH "/leds/led"

/* Node's name with unit-address: */
#define DT_N_S_leds_S_led_FULL_NAME "led"

/* Node parent (/leds) identifier: */
#define DT_N_S_leds_S_led_PARENT DT_N_S_leds
#define DT_N_S_leds_S_led_FOREACH_CHILD(fn) 
#define DT_N_S_leds_S_led_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_leds_S_led_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_leds_S_led_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_leds_S_led_ORD 9

/* Ordinals for what this node depends on directly: */
#define DT_N_S_leds_S_led_REQUIRES_ORDS \
	6, /* /leds */ \
	8, /* /soc/gpio@80001010 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_leds_S_led_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_leds_S_led_EXISTS 1
#define DT_N_ALIAS_led0      DT_N_S_leds_S_led
#define DT_N_NODELABEL_led_0 DT_N_S_leds_S_led

/* Macros for properties that are special in the specification: */
#define DT_N_S_leds_S_led_REG_NUM 0
#define DT_N_S_leds_S_led_IRQ_NUM 0
#define DT_N_S_leds_S_led_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_leds_S_led_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_leds_S_led_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_leds_S_led_P_gpios_IDX_0_PH DT_N_S_soc_S_gpio_80001010
#define DT_N_S_leds_S_led_P_gpios_IDX_0_VAL_pin 0
#define DT_N_S_leds_S_led_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_leds_S_led_P_gpios_IDX_0_VAL_flags 0
#define DT_N_S_leds_S_led_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_leds_S_led_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds_S_led, gpios, 0)
#define DT_N_S_leds_S_led_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds_S_led, gpios, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_P_gpios_LEN 1
#define DT_N_S_leds_S_led_P_gpios_EXISTS 1
#define DT_N_S_leds_S_led_P_label "Red LED"
#define DT_N_S_leds_S_led_P_label_STRING_TOKEN Red_LED
#define DT_N_S_leds_S_led_P_label_STRING_UPPER_TOKEN RED_LED
#define DT_N_S_leds_S_led_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds_S_led, label, 0) \
	fn(DT_N_S_leds_S_led, label, 1) \
	fn(DT_N_S_leds_S_led, label, 2) \
	fn(DT_N_S_leds_S_led, label, 3) \
	fn(DT_N_S_leds_S_led, label, 4) \
	fn(DT_N_S_leds_S_led, label, 5) \
	fn(DT_N_S_leds_S_led, label, 6)
#define DT_N_S_leds_S_led_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds_S_led, label, 0, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led, label, 1, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led, label, 2, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led, label, 3, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led, label, 4, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led, label, 5, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led, label, 6, __VA_ARGS__)
#define DT_N_S_leds_S_led_P_label_EXISTS 1

/*
 * Devicetree node: /soc/interrupt-controller@f00c0000
 *
 * Node identifier: DT_N_S_soc_S_interrupt_controller_f00c0000
 *
 * Binding (compatible = swerv,pic):
 *   $ZEPHYR_BASE/dts/bindings/interrupt-controller/swerv,pic.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_interrupt_controller_f00c0000_PATH "/soc/interrupt-controller@f00c0000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_interrupt_controller_f00c0000_FULL_NAME "interrupt-controller@f00c0000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_interrupt_controller_f00c0000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_interrupt_controller_f00c0000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_interrupt_controller_f00c0000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_interrupt_controller_f00c0000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_interrupt_controller_f00c0000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_interrupt_controller_f00c0000_ORD 10

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_interrupt_controller_f00c0000_REQUIRES_ORDS \
	7, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_interrupt_controller_f00c0000_SUPPORTS_ORDS \
	11, /* /soc/uart@80002000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_interrupt_controller_f00c0000_EXISTS 1
#define DT_N_INST_0_swerv_pic DT_N_S_soc_S_interrupt_controller_f00c0000
#define DT_N_NODELABEL_pic    DT_N_S_soc_S_interrupt_controller_f00c0000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_interrupt_controller_f00c0000_REG_NUM 1
#define DT_N_S_soc_S_interrupt_controller_f00c0000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_f00c0000_REG_IDX_0_VAL_ADDRESS 4027318272 /* 0xf00c0000 */
#define DT_N_S_soc_S_interrupt_controller_f00c0000_REG_IDX_0_VAL_SIZE 8192 /* 0x2000 */
#define DT_N_S_soc_S_interrupt_controller_f00c0000_REG_NAME_reg_VAL_ADDRESS DT_N_S_soc_S_interrupt_controller_f00c0000_REG_IDX_0_VAL_ADDRESS
#define DT_N_S_soc_S_interrupt_controller_f00c0000_REG_NAME_reg_VAL_SIZE DT_N_S_soc_S_interrupt_controller_f00c0000_REG_IDX_0_VAL_SIZE
#define DT_N_S_soc_S_interrupt_controller_f00c0000_IRQ_NUM 0
#define DT_N_S_soc_S_interrupt_controller_f00c0000_COMPAT_MATCHES_swerv_pic 1
#define DT_N_S_soc_S_interrupt_controller_f00c0000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_interrupt_controller_f00c0000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_interrupt_controller_f00c0000_P_reg {4027318272 /* 0xf00c0000 */, 8192 /* 0x2000 */}
#define DT_N_S_soc_S_interrupt_controller_f00c0000_P_reg_IDX_0 4027318272
#define DT_N_S_soc_S_interrupt_controller_f00c0000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_f00c0000_P_reg_IDX_1 8192
#define DT_N_S_soc_S_interrupt_controller_f00c0000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_f00c0000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_interrupt_controller_f00c0000, reg, 0) \
	fn(DT_N_S_soc_S_interrupt_controller_f00c0000, reg, 1)
#define DT_N_S_soc_S_interrupt_controller_f00c0000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_f00c0000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_f00c0000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_f00c0000_P_reg_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_f00c0000_P_riscv_max_priority 15
#define DT_N_S_soc_S_interrupt_controller_f00c0000_P_riscv_max_priority_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_f00c0000_P_interrupt_controller 1
#define DT_N_S_soc_S_interrupt_controller_f00c0000_P_interrupt_controller_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_f00c0000_P_compatible {"swerv,pic"}
#define DT_N_S_soc_S_interrupt_controller_f00c0000_P_compatible_IDX_0 "swerv,pic"
#define DT_N_S_soc_S_interrupt_controller_f00c0000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_f00c0000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_interrupt_controller_f00c0000, compatible, 0)
#define DT_N_S_soc_S_interrupt_controller_f00c0000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_f00c0000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_f00c0000_P_compatible_LEN 1
#define DT_N_S_soc_S_interrupt_controller_f00c0000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_f00c0000_P_reg_names {"reg"}
#define DT_N_S_soc_S_interrupt_controller_f00c0000_P_reg_names_IDX_0 "reg"
#define DT_N_S_soc_S_interrupt_controller_f00c0000_P_reg_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_f00c0000_P_reg_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_interrupt_controller_f00c0000, reg_names, 0)
#define DT_N_S_soc_S_interrupt_controller_f00c0000_P_reg_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_f00c0000, reg_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_f00c0000_P_reg_names_LEN 1
#define DT_N_S_soc_S_interrupt_controller_f00c0000_P_reg_names_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_f00c0000_P_wakeup_source 0
#define DT_N_S_soc_S_interrupt_controller_f00c0000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/uart@80002000
 *
 * Node identifier: DT_N_S_soc_S_uart_80002000
 *
 * Binding (compatible = ns16550):
 *   $ZEPHYR_BASE/dts/bindings/serial/ns16550.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_80002000_PATH "/soc/uart@80002000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_80002000_FULL_NAME "uart@80002000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_80002000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_uart_80002000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_80002000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_80002000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_uart_80002000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_80002000_ORD 11

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_80002000_REQUIRES_ORDS \
	7, /* /soc */ \
	10, /* /soc/interrupt-controller@f00c0000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_80002000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_80002000_EXISTS 1
#define DT_N_INST_0_ns16550  DT_N_S_soc_S_uart_80002000
#define DT_N_NODELABEL_uart0 DT_N_S_soc_S_uart_80002000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_uart_80002000_REG_NUM 1
#define DT_N_S_soc_S_uart_80002000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_80002000_REG_IDX_0_VAL_ADDRESS 2147491840 /* 0x80002000 */
#define DT_N_S_soc_S_uart_80002000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_uart_80002000_REG_NAME_control_VAL_ADDRESS DT_N_S_soc_S_uart_80002000_REG_IDX_0_VAL_ADDRESS
#define DT_N_S_soc_S_uart_80002000_REG_NAME_control_VAL_SIZE DT_N_S_soc_S_uart_80002000_REG_IDX_0_VAL_SIZE
#define DT_N_S_soc_S_uart_80002000_IRQ_NUM 1
#define DT_N_S_soc_S_uart_80002000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_80002000_IRQ_IDX_0_VAL_irq 12
#define DT_N_S_soc_S_uart_80002000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_80002000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_80002000_IRQ_IDX_0_VAL_priority 15
#define DT_N_S_soc_S_uart_80002000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_uart_80002000_COMPAT_MATCHES_ns16550 1
#define DT_N_S_soc_S_uart_80002000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_uart_80002000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_uart_80002000_P_reg {2147491840 /* 0x80002000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_uart_80002000_P_reg_IDX_0 2147491840
#define DT_N_S_soc_S_uart_80002000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_80002000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_uart_80002000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_80002000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_80002000, reg, 0) \
	fn(DT_N_S_soc_S_uart_80002000, reg, 1)
#define DT_N_S_soc_S_uart_80002000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_80002000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_80002000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_80002000_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_80002000_P_clock_frequency 50000000
#define DT_N_S_soc_S_uart_80002000_P_clock_frequency_EXISTS 1
#define DT_N_S_soc_S_uart_80002000_P_current_speed 115200
#define DT_N_S_soc_S_uart_80002000_P_current_speed_EXISTS 1
#define DT_N_S_soc_S_uart_80002000_P_label "uart0"
#define DT_N_S_soc_S_uart_80002000_P_label_STRING_TOKEN uart0
#define DT_N_S_soc_S_uart_80002000_P_label_STRING_UPPER_TOKEN UART0
#define DT_N_S_soc_S_uart_80002000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_80002000, label, 0) \
	fn(DT_N_S_soc_S_uart_80002000, label, 1) \
	fn(DT_N_S_soc_S_uart_80002000, label, 2) \
	fn(DT_N_S_soc_S_uart_80002000, label, 3) \
	fn(DT_N_S_soc_S_uart_80002000, label, 4)
#define DT_N_S_soc_S_uart_80002000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_80002000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_80002000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_80002000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_80002000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_80002000, label, 4, __VA_ARGS__)
#define DT_N_S_soc_S_uart_80002000_P_label_EXISTS 1
#define DT_N_S_soc_S_uart_80002000_P_hw_flow_control 0
#define DT_N_S_soc_S_uart_80002000_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_80002000_P_status "okay"
#define DT_N_S_soc_S_uart_80002000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_uart_80002000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_uart_80002000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_uart_80002000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_uart_80002000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_uart_80002000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_80002000, status, 0) \
	fn(DT_N_S_soc_S_uart_80002000, status, 1) \
	fn(DT_N_S_soc_S_uart_80002000, status, 2) \
	fn(DT_N_S_soc_S_uart_80002000, status, 3)
#define DT_N_S_soc_S_uart_80002000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_80002000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_80002000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_80002000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_80002000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_uart_80002000_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_80002000_P_compatible {"ns16550"}
#define DT_N_S_soc_S_uart_80002000_P_compatible_IDX_0 "ns16550"
#define DT_N_S_soc_S_uart_80002000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_80002000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_80002000, compatible, 0)
#define DT_N_S_soc_S_uart_80002000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_80002000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_80002000_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_80002000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_80002000_P_reg_names {"control"}
#define DT_N_S_soc_S_uart_80002000_P_reg_names_IDX_0 "control"
#define DT_N_S_soc_S_uart_80002000_P_reg_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_80002000_P_reg_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_80002000, reg_names, 0)
#define DT_N_S_soc_S_uart_80002000_P_reg_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_80002000, reg_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_80002000_P_reg_names_LEN 1
#define DT_N_S_soc_S_uart_80002000_P_reg_names_EXISTS 1
#define DT_N_S_soc_S_uart_80002000_P_interrupts {12 /* 0xc */, 15 /* 0xf */}
#define DT_N_S_soc_S_uart_80002000_P_interrupts_IDX_0 12
#define DT_N_S_soc_S_uart_80002000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_80002000_P_interrupts_IDX_1 15
#define DT_N_S_soc_S_uart_80002000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_80002000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_80002000, interrupts, 0) \
	fn(DT_N_S_soc_S_uart_80002000, interrupts, 1)
#define DT_N_S_soc_S_uart_80002000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_80002000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_80002000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_80002000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_uart_80002000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_f00c0000
#define DT_N_S_soc_S_uart_80002000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_f00c0000
#define DT_N_S_soc_S_uart_80002000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_f00c0000
#define DT_N_S_soc_S_uart_80002000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_80002000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_uart_80002000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_uart_80002000_P_wakeup_source 0
#define DT_N_S_soc_S_uart_80002000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/spi@80001040
 *
 * Node identifier: DT_N_S_soc_S_spi_80001040
 *
 * Binding (compatible = opencores,spi-simple):
 *   $ZEPHYR_BASE/dts/bindings/spi/opencores,spi-simple.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_spi_80001040_PATH "/soc/spi@80001040"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_spi_80001040_FULL_NAME "spi@80001040"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_spi_80001040_PARENT DT_N_S_soc
#define DT_N_S_soc_S_spi_80001040_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_spi_80001040_S_flash_0)
#define DT_N_S_soc_S_spi_80001040_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_80001040_S_flash_0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_80001040_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_spi_80001040_S_flash_0) 
#define DT_N_S_soc_S_spi_80001040_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_80001040_S_flash_0, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_spi_80001040_ORD 12

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_spi_80001040_REQUIRES_ORDS \
	7, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_spi_80001040_SUPPORTS_ORDS \
	13, /* /soc/spi@80001040/flash@0 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_spi_80001040_EXISTS 1
#define DT_N_INST_0_opencores_spi_simple DT_N_S_soc_S_spi_80001040
#define DT_N_NODELABEL_spi0              DT_N_S_soc_S_spi_80001040

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_spi_80001040_REG_NUM 1
#define DT_N_S_soc_S_spi_80001040_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_80001040_REG_IDX_0_VAL_ADDRESS 2147487808 /* 0x80001040 */
#define DT_N_S_soc_S_spi_80001040_REG_IDX_0_VAL_SIZE 64 /* 0x40 */
#define DT_N_S_soc_S_spi_80001040_REG_NAME_control_VAL_ADDRESS DT_N_S_soc_S_spi_80001040_REG_IDX_0_VAL_ADDRESS
#define DT_N_S_soc_S_spi_80001040_REG_NAME_control_VAL_SIZE DT_N_S_soc_S_spi_80001040_REG_IDX_0_VAL_SIZE
#define DT_N_S_soc_S_spi_80001040_IRQ_NUM 0
#define DT_N_S_soc_S_spi_80001040_COMPAT_MATCHES_opencores_spi_simple 1
#define DT_N_S_soc_S_spi_80001040_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_spi_80001040_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_spi_80001040_P_reg {2147487808 /* 0x80001040 */, 64 /* 0x40 */}
#define DT_N_S_soc_S_spi_80001040_P_reg_IDX_0 2147487808
#define DT_N_S_soc_S_spi_80001040_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_80001040_P_reg_IDX_1 64
#define DT_N_S_soc_S_spi_80001040_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_80001040_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_80001040, reg, 0) \
	fn(DT_N_S_soc_S_spi_80001040, reg, 1)
#define DT_N_S_soc_S_spi_80001040_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_80001040, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_80001040, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_spi_80001040_P_reg_EXISTS 1
#define DT_N_S_soc_S_spi_80001040_P_label "SPI0"
#define DT_N_S_soc_S_spi_80001040_P_label_STRING_TOKEN SPI0
#define DT_N_S_soc_S_spi_80001040_P_label_STRING_UPPER_TOKEN SPI0
#define DT_N_S_soc_S_spi_80001040_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_80001040, label, 0) \
	fn(DT_N_S_soc_S_spi_80001040, label, 1) \
	fn(DT_N_S_soc_S_spi_80001040, label, 2) \
	fn(DT_N_S_soc_S_spi_80001040, label, 3)
#define DT_N_S_soc_S_spi_80001040_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_80001040, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_80001040, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_80001040, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_80001040, label, 3, __VA_ARGS__)
#define DT_N_S_soc_S_spi_80001040_P_label_EXISTS 1
#define DT_N_S_soc_S_spi_80001040_P_status "okay"
#define DT_N_S_soc_S_spi_80001040_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_spi_80001040_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_spi_80001040_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_spi_80001040_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_spi_80001040_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_spi_80001040_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_80001040, status, 0) \
	fn(DT_N_S_soc_S_spi_80001040, status, 1) \
	fn(DT_N_S_soc_S_spi_80001040, status, 2) \
	fn(DT_N_S_soc_S_spi_80001040, status, 3)
#define DT_N_S_soc_S_spi_80001040_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_80001040, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_80001040, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_80001040, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_80001040, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_spi_80001040_P_status_EXISTS 1
#define DT_N_S_soc_S_spi_80001040_P_compatible {"opencores,spi-simple"}
#define DT_N_S_soc_S_spi_80001040_P_compatible_IDX_0 "opencores,spi-simple"
#define DT_N_S_soc_S_spi_80001040_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_80001040_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_80001040, compatible, 0)
#define DT_N_S_soc_S_spi_80001040_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_80001040, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_80001040_P_compatible_LEN 1
#define DT_N_S_soc_S_spi_80001040_P_compatible_EXISTS 1
#define DT_N_S_soc_S_spi_80001040_P_reg_names {"control"}
#define DT_N_S_soc_S_spi_80001040_P_reg_names_IDX_0 "control"
#define DT_N_S_soc_S_spi_80001040_P_reg_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_80001040_P_reg_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_80001040, reg_names, 0)
#define DT_N_S_soc_S_spi_80001040_P_reg_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_80001040, reg_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_80001040_P_reg_names_LEN 1
#define DT_N_S_soc_S_spi_80001040_P_reg_names_EXISTS 1
#define DT_N_S_soc_S_spi_80001040_P_wakeup_source 0
#define DT_N_S_soc_S_spi_80001040_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/spi@80001040/flash@0
 *
 * Node identifier: DT_N_S_soc_S_spi_80001040_S_flash_0
 *
 * Binding (compatible = jedec,spi-nor):
 *   $ZEPHYR_BASE/dts/bindings/mtd/jedec,spi-nor.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_spi_80001040_S_flash_0_PATH "/soc/spi@80001040/flash@0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_spi_80001040_S_flash_0_FULL_NAME "flash@0"

/* Node parent (/soc/spi@80001040) identifier: */
#define DT_N_S_soc_S_spi_80001040_S_flash_0_PARENT DT_N_S_soc_S_spi_80001040
#define DT_N_S_soc_S_spi_80001040_S_flash_0_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_spi_80001040_S_flash_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_spi_80001040_S_flash_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_spi_80001040_S_flash_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_spi_80001040_S_flash_0_ORD 13

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_spi_80001040_S_flash_0_REQUIRES_ORDS \
	12, /* /soc/spi@80001040 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_spi_80001040_S_flash_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_spi_80001040_S_flash_0_EXISTS 1
#define DT_N_INST_0_jedec_spi_nor DT_N_S_soc_S_spi_80001040_S_flash_0
#define DT_N_NODELABEL_flash0     DT_N_S_soc_S_spi_80001040_S_flash_0

/* Bus info (controller: '/soc/spi@80001040', type: 'spi') */
#define DT_N_S_soc_S_spi_80001040_S_flash_0_BUS_spi 1
#define DT_N_S_soc_S_spi_80001040_S_flash_0_BUS DT_N_S_soc_S_spi_80001040

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_spi_80001040_S_flash_0_REG_NUM 1
#define DT_N_S_soc_S_spi_80001040_S_flash_0_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_80001040_S_flash_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_soc_S_spi_80001040_S_flash_0_IRQ_NUM 0
#define DT_N_S_soc_S_spi_80001040_S_flash_0_COMPAT_MATCHES_jedec_spi_nor 1
#define DT_N_S_soc_S_spi_80001040_S_flash_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_spi_80001040_S_flash_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_spi_80001040_S_flash_0_P_reg {0 /* 0x0 */}
#define DT_N_S_soc_S_spi_80001040_S_flash_0_P_reg_IDX_0 0
#define DT_N_S_soc_S_spi_80001040_S_flash_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_80001040_S_flash_0_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_80001040_S_flash_0, reg, 0)
#define DT_N_S_soc_S_spi_80001040_S_flash_0_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_80001040_S_flash_0, reg, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_80001040_S_flash_0_P_reg_EXISTS 1
#define DT_N_S_soc_S_spi_80001040_S_flash_0_P_spi_max_frequency 2000000
#define DT_N_S_soc_S_spi_80001040_S_flash_0_P_spi_max_frequency_EXISTS 1
#define DT_N_S_soc_S_spi_80001040_S_flash_0_P_label "FLASH0"
#define DT_N_S_soc_S_spi_80001040_S_flash_0_P_label_STRING_TOKEN FLASH0
#define DT_N_S_soc_S_spi_80001040_S_flash_0_P_label_STRING_UPPER_TOKEN FLASH0
#define DT_N_S_soc_S_spi_80001040_S_flash_0_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_80001040_S_flash_0, label, 0) \
	fn(DT_N_S_soc_S_spi_80001040_S_flash_0, label, 1) \
	fn(DT_N_S_soc_S_spi_80001040_S_flash_0, label, 2) \
	fn(DT_N_S_soc_S_spi_80001040_S_flash_0, label, 3) \
	fn(DT_N_S_soc_S_spi_80001040_S_flash_0, label, 4) \
	fn(DT_N_S_soc_S_spi_80001040_S_flash_0, label, 5)
#define DT_N_S_soc_S_spi_80001040_S_flash_0_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_80001040_S_flash_0, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_80001040_S_flash_0, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_80001040_S_flash_0, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_80001040_S_flash_0, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_80001040_S_flash_0, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_80001040_S_flash_0, label, 5, __VA_ARGS__)
#define DT_N_S_soc_S_spi_80001040_S_flash_0_P_label_EXISTS 1
#define DT_N_S_soc_S_spi_80001040_S_flash_0_P_compatible {"jedec,spi-nor"}
#define DT_N_S_soc_S_spi_80001040_S_flash_0_P_compatible_IDX_0 "jedec,spi-nor"
#define DT_N_S_soc_S_spi_80001040_S_flash_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_80001040_S_flash_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_80001040_S_flash_0, compatible, 0)
#define DT_N_S_soc_S_spi_80001040_S_flash_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_80001040_S_flash_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_80001040_S_flash_0_P_compatible_LEN 1
#define DT_N_S_soc_S_spi_80001040_S_flash_0_P_compatible_EXISTS 1
#define DT_N_S_soc_S_spi_80001040_S_flash_0_P_wakeup_source 0
#define DT_N_S_soc_S_spi_80001040_S_flash_0_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_spi_80001040_S_flash_0_P_requires_ulbpr 0
#define DT_N_S_soc_S_spi_80001040_S_flash_0_P_requires_ulbpr_EXISTS 1
#define DT_N_S_soc_S_spi_80001040_S_flash_0_P_has_dpd 0
#define DT_N_S_soc_S_spi_80001040_S_flash_0_P_has_dpd_EXISTS 1
#define DT_N_S_soc_S_spi_80001040_S_flash_0_P_jedec_id {1 /* 0x1 */, 32 /* 0x20 */, 24 /* 0x18 */}
#define DT_N_S_soc_S_spi_80001040_S_flash_0_P_jedec_id_IDX_0 1
#define DT_N_S_soc_S_spi_80001040_S_flash_0_P_jedec_id_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_80001040_S_flash_0_P_jedec_id_IDX_1 32
#define DT_N_S_soc_S_spi_80001040_S_flash_0_P_jedec_id_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_80001040_S_flash_0_P_jedec_id_IDX_2 24
#define DT_N_S_soc_S_spi_80001040_S_flash_0_P_jedec_id_IDX_2_EXISTS 1
#define DT_N_S_soc_S_spi_80001040_S_flash_0_P_jedec_id_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_80001040_S_flash_0, jedec_id, 0) \
	fn(DT_N_S_soc_S_spi_80001040_S_flash_0, jedec_id, 1) \
	fn(DT_N_S_soc_S_spi_80001040_S_flash_0, jedec_id, 2)
#define DT_N_S_soc_S_spi_80001040_S_flash_0_P_jedec_id_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_80001040_S_flash_0, jedec_id, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_80001040_S_flash_0, jedec_id, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_80001040_S_flash_0, jedec_id, 2, __VA_ARGS__)
#define DT_N_S_soc_S_spi_80001040_S_flash_0_P_jedec_id_LEN 3
#define DT_N_S_soc_S_spi_80001040_S_flash_0_P_jedec_id_EXISTS 1
#define DT_N_S_soc_S_spi_80001040_S_flash_0_P_size 16777216
#define DT_N_S_soc_S_spi_80001040_S_flash_0_P_size_EXISTS 1

/*
 * Chosen nodes
 */
#define DT_CHOSEN_zephyr_console           DT_N_S_soc_S_uart_80002000
#define DT_CHOSEN_zephyr_console_EXISTS    1
#define DT_CHOSEN_zephyr_shell_uart        DT_N_S_soc_S_uart_80002000
#define DT_CHOSEN_zephyr_shell_uart_EXISTS 1
#define DT_CHOSEN_zephyr_sram              DT_N_S_memory_0
#define DT_CHOSEN_zephyr_sram_EXISTS       1

/*
 * Macros for compatibles with status "okay" nodes
 */
#define DT_COMPAT_HAS_OKAY_chipsalliance_veerwolf_nexys 1
#define DT_COMPAT_HAS_OKAY_chipsalliance_veer_eh1_v1_2 1
#define DT_COMPAT_HAS_OKAY_riscv 1
#define DT_COMPAT_HAS_OKAY_chipsalliance_veerwolf_soc 1
#define DT_COMPAT_HAS_OKAY_simple_bus 1
#define DT_COMPAT_HAS_OKAY_swerv_pic 1
#define DT_COMPAT_HAS_OKAY_ns16550 1
#define DT_COMPAT_HAS_OKAY_opencores_spi_simple 1
#define DT_COMPAT_HAS_OKAY_jedec_spi_nor 1
#define DT_COMPAT_HAS_OKAY_veerwolf_gpio 1
#define DT_COMPAT_HAS_OKAY_mmio_sram 1
#define DT_COMPAT_HAS_OKAY_gpio_leds 1

/*
 * Macros for status "okay" instances of each compatible
 */
#define DT_N_INST_chipsalliance_veerwolf_nexys_NUM_OKAY 1
#define DT_N_INST_chipsalliance_veer_eh1_v1_2_NUM_OKAY 1
#define DT_N_INST_riscv_NUM_OKAY 1
#define DT_N_INST_chipsalliance_veerwolf_soc_NUM_OKAY 1
#define DT_N_INST_simple_bus_NUM_OKAY 1
#define DT_N_INST_swerv_pic_NUM_OKAY 1
#define DT_N_INST_ns16550_NUM_OKAY 1
#define DT_N_INST_opencores_spi_simple_NUM_OKAY 1
#define DT_N_INST_jedec_spi_nor_NUM_OKAY 1
#define DT_N_INST_veerwolf_gpio_NUM_OKAY 1
#define DT_N_INST_mmio_sram_NUM_OKAY 1
#define DT_N_INST_gpio_leds_NUM_OKAY 1
#define DT_FOREACH_OKAY_chipsalliance_veerwolf_nexys(fn) fn(DT_N)
#define DT_FOREACH_OKAY_VARGS_chipsalliance_veerwolf_nexys(fn, ...) fn(DT_N, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_chipsalliance_veerwolf_nexys(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_chipsalliance_veerwolf_nexys(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_chipsalliance_veer_eh1_v1_2(fn) fn(DT_N_S_cpus_S_cpu_0)
#define DT_FOREACH_OKAY_VARGS_chipsalliance_veer_eh1_v1_2(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_chipsalliance_veer_eh1_v1_2(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_chipsalliance_veer_eh1_v1_2(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_riscv(fn) fn(DT_N_S_cpus_S_cpu_0)
#define DT_FOREACH_OKAY_VARGS_riscv(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_riscv(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_riscv(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_chipsalliance_veerwolf_soc(fn) fn(DT_N_S_soc)
#define DT_FOREACH_OKAY_VARGS_chipsalliance_veerwolf_soc(fn, ...) fn(DT_N_S_soc, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_chipsalliance_veerwolf_soc(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_chipsalliance_veerwolf_soc(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_simple_bus(fn) fn(DT_N_S_soc)
#define DT_FOREACH_OKAY_VARGS_simple_bus(fn, ...) fn(DT_N_S_soc, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_simple_bus(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_simple_bus(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_swerv_pic(fn) fn(DT_N_S_soc_S_interrupt_controller_f00c0000)
#define DT_FOREACH_OKAY_VARGS_swerv_pic(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_f00c0000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_swerv_pic(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_swerv_pic(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_ns16550(fn) fn(DT_N_S_soc_S_uart_80002000)
#define DT_FOREACH_OKAY_VARGS_ns16550(fn, ...) fn(DT_N_S_soc_S_uart_80002000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_ns16550(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_ns16550(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_opencores_spi_simple(fn) fn(DT_N_S_soc_S_spi_80001040)
#define DT_FOREACH_OKAY_VARGS_opencores_spi_simple(fn, ...) fn(DT_N_S_soc_S_spi_80001040, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_opencores_spi_simple(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_opencores_spi_simple(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_jedec_spi_nor(fn) fn(DT_N_S_soc_S_spi_80001040_S_flash_0)
#define DT_FOREACH_OKAY_VARGS_jedec_spi_nor(fn, ...) fn(DT_N_S_soc_S_spi_80001040_S_flash_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_jedec_spi_nor(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_jedec_spi_nor(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_veerwolf_gpio(fn) fn(DT_N_S_soc_S_gpio_80001010)
#define DT_FOREACH_OKAY_VARGS_veerwolf_gpio(fn, ...) fn(DT_N_S_soc_S_gpio_80001010, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_veerwolf_gpio(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_veerwolf_gpio(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_mmio_sram(fn) fn(DT_N_S_memory_0)
#define DT_FOREACH_OKAY_VARGS_mmio_sram(fn, ...) fn(DT_N_S_memory_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_mmio_sram(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_mmio_sram(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_gpio_leds(fn) fn(DT_N_S_leds)
#define DT_FOREACH_OKAY_VARGS_gpio_leds(fn, ...) fn(DT_N_S_leds, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_gpio_leds(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_gpio_leds(fn, ...) fn(0, __VA_ARGS__)

/*
 * Bus information for status "okay" nodes of each compatible
 */
#define DT_COMPAT_jedec_spi_nor_BUS_spi 1
