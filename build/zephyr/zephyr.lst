
zephyr.elf:     file format elf32-littleriscv


Disassembly of section vector:

00000000 <__start>:

	/*
	 * Set mtvec (Machine Trap-Vector Base-Address Register)
	 * to __irq_wrapper.
	 */
	la t0, __irq_wrapper
   0:	00000297          	auipc	t0,0x0
   4:	03028293          	addi	t0,t0,48 # 30 <__irq_wrapper>
	csrw mtvec, t0
   8:	30529073          	csrw	mtvec,t0
	/*
	* To avoid having to hardcode the main clock frequency,
	* we read the actual value from register 0x8000103c
	* and store to z_clock_hw_cycles_per_sec
	*/
	li	t0, 0x80001000
   c:	800012b7          	lui	t0,0x80001
	lw	t1, 0x3c(t0)
  10:	03c2a303          	lw	t1,60(t0) # 8000103c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000103d>
	la	t0, z_clock_hw_cycles_per_sec
  14:	0002f297          	auipc	t0,0x2f
  18:	c8428293          	addi	t0,t0,-892 # 2ec98 <z_clock_hw_cycles_per_sec>
	sw	t1, 0(t0)
  1c:	0062a023          	sw	t1,0(t0)

	/* Jump to __initialize */
	tail __initialize
  20:	1d80606f          	j	61f8 <__initialize>

Disassembly of section exceptions:

00000030 <__irq_wrapper>:
	 * Save caller-saved registers on current thread stack.
	 * NOTE: need to be updated to account for floating-point registers
	 * floating-point registers should be accounted for when corresponding
	 * config variable is set
	 */
	STORE_CALLER_SAVED()
  30:	fb010113          	addi	sp,sp,-80
  34:	00112023          	sw	ra,0(sp)
  38:	00412223          	sw	tp,4(sp)
  3c:	00512423          	sw	t0,8(sp)
  40:	00612623          	sw	t1,12(sp)
  44:	00712823          	sw	t2,16(sp)
  48:	01c12a23          	sw	t3,20(sp)
  4c:	01d12c23          	sw	t4,24(sp)
  50:	01e12e23          	sw	t5,28(sp)
  54:	03f12023          	sw	t6,32(sp)
  58:	02a12223          	sw	a0,36(sp)
  5c:	02b12423          	sw	a1,40(sp)
  60:	02c12623          	sw	a2,44(sp)
  64:	02d12823          	sw	a3,48(sp)
  68:	02e12a23          	sw	a4,52(sp)
  6c:	02f12c23          	sw	a5,56(sp)
  70:	03012e23          	sw	a6,60(sp)
  74:	05112023          	sw	a7,64(sp)

skip_store_fp_caller_saved:
#endif /* CONFIG_FPU && CONFIG_FPU_SHARING */

	/* Save MEPC register */
	csrr t0, mepc
  78:	341022f3          	csrr	t0,mepc
	RV_OP_STOREREG t0, __z_arch_esf_t_mepc_OFFSET(sp)
  7c:	04512223          	sw	t0,68(sp)

	/* Save SOC-specific MSTATUS register */
	csrr t0, mstatus
  80:	300022f3          	csrr	t0,mstatus
	RV_OP_STOREREG t0, __z_arch_esf_t_mstatus_OFFSET(sp)
  84:	04512423          	sw	t0,72(sp)
	 * SOCs (like pulpino or riscv-qemu), the MSB is never set to indicate
	 * interrupt. Hence, check for interrupt/exception via the __soc_is_irq
	 * function (that needs to be implemented by each SOC). The result is
	 * returned via register a0 (1: interrupt, 0 exception)
	 */
	jal ra, __soc_is_irq
  88:	228000ef          	jal	ra,2b0 <__soc_is_irq>

	/* If a0 != 0, jump to is_interrupt */
	addi t1, x0, 0
  8c:	00000313          	li	t1,0
	bnez a0, is_interrupt
  90:	02051e63          	bnez	a0,cc <is_interrupt>
	/*
	 * If the exception is the result of an ECALL, check whether to
	 * perform a context-switch or an IRQ offload. Otherwise call _Fault
	 * to report the exception.
	 */
	csrr t0, mcause
  94:	342022f3          	csrr	t0,mcause
	li t2, SOC_MCAUSE_EXP_MASK
  98:	800003b7          	lui	t2,0x80000
  9c:	fff38393          	addi	t2,t2,-1 # 7fffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000000>
	and t0, t0, t2
  a0:	0072f2b3          	and	t0,t0,t2
	li t1, SOC_MCAUSE_ECALL_EXP
  a4:	00b00313          	li	t1,11

	/*
	 * If mcause == SOC_MCAUSE_ECALL_EXP, handle system call from
	 * kernel thread.
	 */
	beq t0, t1, is_kernel_syscall
  a8:	00628a63          	beq	t0,t1,bc <is_kernel_syscall>
	 * Stack pointer is pointing to a z_arch_esf_t structure, pass it
	 * to _Fault (via register a0).
	 * If _Fault shall return, set return address to
	 * no_reschedule to restore stack.
	 */
	addi a0, sp, 0
  ac:	00010513          	mv	a0,sp
	RV_OP_LOADREG t1, _kernel_offset_to_current(t0)
	RV_OP_LOADREG t0, _thread_offset_to_priv_stack_start(t1)
	RV_OP_STOREREG sp, _thread_offset_to_user_sp(t1) /* Update user SP */
	addi sp, t0, CONFIG_PRIVILEGED_STACK_SIZE
#else
	la ra, no_reschedule
  b0:	00000097          	auipc	ra,0x0
  b4:	19408093          	addi	ra,ra,404 # 244 <no_reschedule>
#endif /* CONFIG_USERSPACE */

	tail _Fault
  b8:	0f80606f          	j	61b0 <_Fault>

000000bc <is_kernel_syscall>:
	 * again upon exiting the ISR.
	 *
	 * It's safe to always increment by 4, even with compressed
	 * instructions, because the ecall instruction is always 4 bytes.
	 */
	RV_OP_LOADREG t0, __z_arch_esf_t_mepc_OFFSET(sp)
  bc:	04412283          	lw	t0,68(sp)
	addi t0, t0, 4
  c0:	00428293          	addi	t0,t0,4
	RV_OP_STOREREG t0, __z_arch_esf_t_mepc_OFFSET(sp)
  c4:	04512223          	sw	t0,68(sp)
	j z_riscv_user_mode_enter_syscall
#endif /* CONFIG_USERSPACE */
	/*
	 * Go to reschedule to handle context-switch
	 */
	j reschedule
  c8:	0800006f          	j	148 <reschedule>

000000cc <is_interrupt>:
	 * Save current thread stack pointer and switch
	 * stack pointer to interrupt stack.
	 */

	/* Save thread stack pointer to temp register t0 */
	addi t0, sp, 0
  cc:	00010293          	mv	t0,sp

	/* Switch to interrupt stack */
	la t2, _kernel
  d0:	0000e397          	auipc	t2,0xe
  d4:	bb838393          	addi	t2,t2,-1096 # dc88 <_kernel>
	RV_OP_LOADREG sp, _kernel_offset_to_irq_stack(t2)
  d8:	0043a103          	lw	sp,4(t2)

	/*
	 * Save thread stack pointer on interrupt stack
	 * In RISC-V, stack pointer needs to be 16-byte aligned
	 */
	addi sp, sp, -16
  dc:	ff010113          	addi	sp,sp,-16
	RV_OP_STOREREG t0, 0x00(sp)
  e0:	00512023          	sw	t0,0(sp)

000000e4 <on_irq_stack>:
	la t2, _kernel
#endif /* !CONFIG_USERSPACE && !CONFIG_PMP_STACK_GUARD */

on_irq_stack:
	/* Increment _kernel.cpus[0].nested variable */
	lw t3, _kernel_offset_to_nested(t2)
  e4:	0003ae03          	lw	t3,0(t2)
	addi t3, t3, 1
  e8:	001e0e13          	addi	t3,t3,1
	sw t3, _kernel_offset_to_nested(t2)
  ec:	01c3a023          	sw	t3,0(t2)
#ifdef CONFIG_TRACING_ISR
	call sys_trace_isr_enter
#endif

	/* Get IRQ causing interrupt */
	csrr a0, mcause
  f0:	34202573          	csrr	a0,mcause
	li t0, SOC_MCAUSE_EXP_MASK
  f4:	800002b7          	lui	t0,0x80000
  f8:	fff28293          	addi	t0,t0,-1 # 7fffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000000>
	and a0, a0, t0
  fc:	00557533          	and	a0,a0,t0

	/*
	 * Clear pending IRQ generating the interrupt at SOC level
	 * Pass IRQ number to __soc_handle_irq via register a0
	 */
	jal ra, __soc_handle_irq
 100:	1a0000ef          	jal	ra,2a0 <__soc_handle_irq>

	/*
	 * Call corresponding registered function in _sw_isr_table.
	 * (table is 2-word wide, we should shift index accordingly)
	 */
	la t0, _sw_isr_table
 104:	0002f297          	auipc	t0,0x2f
 108:	b9c28293          	addi	t0,t0,-1124 # 2eca0 <_sw_isr_table>
	slli a0, a0, (RV_REGSHIFT + 1)
 10c:	00351513          	slli	a0,a0,0x3
	add t0, t0, a0
 110:	00a282b3          	add	t0,t0,a0

	/* Load argument in a0 register */
	RV_OP_LOADREG a0, 0x00(t0)
 114:	0002a503          	lw	a0,0(t0)

	/* Load ISR function address in register t1 */
	RV_OP_LOADREG t1, RV_REGSIZE(t0)
 118:	0042a303          	lw	t1,4(t0)

	/* Call ISR function */
	jalr ra, t1
 11c:	000300e7          	jalr	t1

00000120 <on_thread_stack>:

on_thread_stack:
	/* Get reference to _kernel */
	la t1, _kernel
 120:	0000e317          	auipc	t1,0xe
 124:	b6830313          	addi	t1,t1,-1176 # dc88 <_kernel>

	/* Decrement _kernel.cpus[0].nested variable */
	lw t2, _kernel_offset_to_nested(t1)
 128:	00032383          	lw	t2,0(t1)
	addi t2, t2, -1
 12c:	fff38393          	addi	t2,t2,-1
	sw t2, _kernel_offset_to_nested(t1)
 130:	00732023          	sw	t2,0(t1)

#if !defined(CONFIG_USERSPACE) && !defined(CONFIG_PMP_STACK_GUARD)
	/* Restore thread stack pointer */
	RV_OP_LOADREG t0, 0x00(sp)
 134:	00012283          	lw	t0,0(sp)
	addi sp, t0, 0
 138:	00028113          	mv	sp,t0
	/*
	 * Check if we need to perform a reschedule
	 */

	/* Get pointer to _kernel.current */
	RV_OP_LOADREG t2, _kernel_offset_to_current(t1)
 13c:	00832383          	lw	t2,8(t1)

	/*
	 * Check if next thread to schedule is current thread.
	 * If yes do not perform a reschedule
	 */
	RV_OP_LOADREG t3, _kernel_offset_to_ready_q_cache(t1)
 140:	01832e03          	lw	t3,24(t1)
	beq t3, t2, no_reschedule
 144:	107e0063          	beq	t3,t2,244 <no_reschedule>

00000148 <reschedule>:
	 * Note:
	 *   Sometimes this code is execute back-to-back before the target thread
	 *   has a chance to run. If this happens, the current thread and the
	 *   target thread will be the same.
	 */
	la t0, _kernel
 148:	0000e297          	auipc	t0,0xe
 14c:	b4028293          	addi	t0,t0,-1216 # dc88 <_kernel>
	RV_OP_LOADREG t2, _kernel_offset_to_current(t0)
 150:	0082a383          	lw	t2,8(t0)
	RV_OP_LOADREG t3, _kernel_offset_to_ready_q_cache(t0)
 154:	0182ae03          	lw	t3,24(t0)
	beq t2, t3, no_reschedule
 158:	0fc38663          	beq	t2,t3,244 <no_reschedule>

#if CONFIG_INSTRUMENT_THREAD_SWITCHING
	call z_thread_mark_switched_out
#endif
	/* Get reference to _kernel */
	la t0, _kernel
 15c:	0000e297          	auipc	t0,0xe
 160:	b2c28293          	addi	t0,t0,-1236 # dc88 <_kernel>

	/* Get pointer to _kernel.current */
	RV_OP_LOADREG t1, _kernel_offset_to_current(t0)
 164:	0082a303          	lw	t1,8(t0)

	/*
	 * Save callee-saved registers of current kernel thread
	 * prior to handle context-switching
	 */
	STORE_CALLEE_SAVED(t1)
 168:	02832e23          	sw	s0,60(t1)
 16c:	04932023          	sw	s1,64(t1)
 170:	05232223          	sw	s2,68(t1)
 174:	05332423          	sw	s3,72(t1)
 178:	05432623          	sw	s4,76(t1)
 17c:	05532823          	sw	s5,80(t1)
 180:	05632a23          	sw	s6,84(t1)
 184:	05732c23          	sw	s7,88(t1)
 188:	05832e23          	sw	s8,92(t1)
 18c:	07932023          	sw	s9,96(t1)
 190:	07a32223          	sw	s10,100(t1)
 194:	07b32423          	sw	s11,104(t1)

00000198 <skip_callee_saved_reg>:

	/*
	 * Save stack pointer of current thread and set the default return value
	 * of z_swap to _k_neg_eagain for the thread.
	 */
	RV_OP_STOREREG sp, _thread_offset_to_sp(t1)
 198:	02232c23          	sw	sp,56(t1)
	la t2, _k_neg_eagain
 19c:	0000d397          	auipc	t2,0xd
 1a0:	eb838393          	addi	t2,t2,-328 # d054 <_k_neg_eagain>
	lw t3, 0x00(t2)
 1a4:	0003ae03          	lw	t3,0(t2)
	sw t3, _thread_offset_to_swap_return_value(t1)
 1a8:	0bc32023          	sw	t3,160(t1)

	/* Get next thread to schedule. */
	RV_OP_LOADREG t1, _kernel_offset_to_ready_q_cache(t0)
 1ac:	0182a303          	lw	t1,24(t0)

	/*
	 * Set _kernel.current to new thread loaded in t1
	 */
	RV_OP_STOREREG t1, _kernel_offset_to_current(t0)
 1b0:	0062a423          	sw	t1,8(t0)

	/* Switch to new thread stack */
	RV_OP_LOADREG sp, _thread_offset_to_sp(t1)
 1b4:	03832103          	lw	sp,56(t1)

	/* Restore callee-saved registers of new thread */
	LOAD_CALLEE_SAVED(t1)
 1b8:	03c32403          	lw	s0,60(t1)
 1bc:	04032483          	lw	s1,64(t1)
 1c0:	04432903          	lw	s2,68(t1)
 1c4:	04832983          	lw	s3,72(t1)
 1c8:	04c32a03          	lw	s4,76(t1)
 1cc:	05032a83          	lw	s5,80(t1)
 1d0:	05432b03          	lw	s6,84(t1)
 1d4:	05832b83          	lw	s7,88(t1)
 1d8:	05c32c03          	lw	s8,92(t1)
 1dc:	06032c83          	lw	s9,96(t1)
 1e0:	06432d03          	lw	s10,100(t1)
 1e4:	06832d83          	lw	s11,104(t1)
	addi a0, sp, __z_arch_esf_t_soc_context_OFFSET
	jal ra, __soc_restore_context
#endif /* CONFIG_RISCV_SOC_CONTEXT_SAVE */

	/* Restore MEPC register */
	RV_OP_LOADREG t0, __z_arch_esf_t_mepc_OFFSET(sp)
 1e8:	04412283          	lw	t0,68(sp)
	csrw mepc, t0
 1ec:	34129073          	csrw	mepc,t0

	/* Restore SOC-specific MSTATUS register */
	RV_OP_LOADREG t0, __z_arch_esf_t_mstatus_OFFSET(sp)
 1f0:	04812283          	lw	t0,72(sp)
	csrw mstatus, t0
 1f4:	30029073          	csrw	mstatus,t0

skip_load_fp_caller_saved_resched:
#endif /* CONFIG_FPU && CONFIG_FPU_SHARING */

	/* Restore caller-saved registers from thread stack */
	LOAD_CALLER_SAVED()
 1f8:	00012083          	lw	ra,0(sp)
 1fc:	00412203          	lw	tp,4(sp)
 200:	00812283          	lw	t0,8(sp)
 204:	00c12303          	lw	t1,12(sp)
 208:	01012383          	lw	t2,16(sp)
 20c:	01412e03          	lw	t3,20(sp)
 210:	01812e83          	lw	t4,24(sp)
 214:	01c12f03          	lw	t5,28(sp)
 218:	02012f83          	lw	t6,32(sp)
 21c:	02412503          	lw	a0,36(sp)
 220:	02812583          	lw	a1,40(sp)
 224:	02c12603          	lw	a2,44(sp)
 228:	03012683          	lw	a3,48(sp)
 22c:	03412703          	lw	a4,52(sp)
 230:	03812783          	lw	a5,56(sp)
 234:	03c12803          	lw	a6,60(sp)
 238:	04012883          	lw	a7,64(sp)
 23c:	05010113          	addi	sp,sp,80

	/* Call SOC_ERET to exit ISR */
	SOC_ERET
 240:	30200073          	mret

00000244 <no_reschedule>:
	addi a0, sp, __z_arch_esf_t_soc_context_OFFSET
	jal ra, __soc_restore_context
#endif /* CONFIG_RISCV_SOC_CONTEXT_SAVE */

	/* Restore MEPC register */
	RV_OP_LOADREG t0, __z_arch_esf_t_mepc_OFFSET(sp)
 244:	04412283          	lw	t0,68(sp)
	csrw mepc, t0
 248:	34129073          	csrw	mepc,t0

	/* Restore SOC-specific MSTATUS register */
	RV_OP_LOADREG t0, __z_arch_esf_t_mstatus_OFFSET(sp)
 24c:	04812283          	lw	t0,72(sp)
	csrw mstatus, t0
 250:	30029073          	csrw	mstatus,t0

skip_load_fp_caller_saved:
#endif /* CONFIG_FPU && CONFIG_FPU_SHARING */

	/* Restore caller-saved registers from thread stack */
	LOAD_CALLER_SAVED()
 254:	00012083          	lw	ra,0(sp)
 258:	00412203          	lw	tp,4(sp)
 25c:	00812283          	lw	t0,8(sp)
 260:	00c12303          	lw	t1,12(sp)
 264:	01012383          	lw	t2,16(sp)
 268:	01412e03          	lw	t3,20(sp)
 26c:	01812e83          	lw	t4,24(sp)
 270:	01c12f03          	lw	t5,28(sp)
 274:	02012f83          	lw	t6,32(sp)
 278:	02412503          	lw	a0,36(sp)
 27c:	02812583          	lw	a1,40(sp)
 280:	02c12603          	lw	a2,44(sp)
 284:	03012683          	lw	a3,48(sp)
 288:	03412703          	lw	a4,52(sp)
 28c:	03812783          	lw	a5,56(sp)
 290:	03c12803          	lw	a6,60(sp)
 294:	04012883          	lw	a7,64(sp)
 298:	05010113          	addi	sp,sp,80

#ifdef CONFIG_PMP_STACK_GUARD
	csrrw sp, mscratch, sp
#endif /* CONFIG_PMP_STACK_GUARD */
	/* Call SOC_ERET to exit ISR */
	SOC_ERET
 29c:	30200073          	mret

000002a0 <__soc_handle_irq>:
 * SOC-specific function to handle pending IRQ number generating the interrupt.
 * Exception number is given as parameter via register a0.
 */
SECTION_FUNC(exception.other, __soc_handle_irq)
	/* Clear exception number from CSR mip register */
	li t1, 1
 2a0:	00100313          	li	t1,1
	sll t0, t1, a0
 2a4:	00a312b3          	sll	t0,t1,a0
	csrrc t1, mip, t0
 2a8:	3442b373          	csrrc	t1,mip,t0

	/* Return */
	jalr x0, ra
 2ac:	00008067          	ret

000002b0 <__soc_is_irq>:
 * return 1 (interrupt) or 0 (exception)
 *
 */
SECTION_FUNC(exception.other, __soc_is_irq)
	/* Read mcause and check if interrupt bit is set */
	csrr t0, mcause
 2b0:	342022f3          	csrr	t0,mcause
	li t1, SOC_MCAUSE_IRQ_MASK
 2b4:	80000337          	lui	t1,0x80000
	and t0, t0, t1
 2b8:	0062f2b3          	and	t0,t0,t1

	/* If interrupt bit is not set, return with 0 */
	addi a0, x0, 0
 2bc:	00000513          	li	a0,0
	beqz t0, not_interrupt
 2c0:	00028463          	beqz	t0,2c8 <not_interrupt>
	addi a0, a0, 1
 2c4:	00150513          	addi	a0,a0,1

000002c8 <not_interrupt>:

not_interrupt:
	/* return */
	jalr x0, ra
 2c8:	00008067          	ret

000002cc <arch_swap>:
 * key is stored in a0 register
 */
SECTION_FUNC(exception.other, arch_swap)

	/* Make a system call to perform context switch */
	ecall
 2cc:	00000073          	ecall
	 * Prior to unlocking irq, load return value of
	 * arch_swap to temp register t2 (from
	 * _thread_offset_to_swap_return_value). Normally, it should be -EAGAIN,
	 * unless someone has previously called arch_thread_return_value_set(..).
	 */
	la t0, _kernel
 2d0:	0000e297          	auipc	t0,0xe
 2d4:	9b828293          	addi	t0,t0,-1608 # dc88 <_kernel>

	/* Get pointer to _kernel.current */
	RV_OP_LOADREG t1, _kernel_offset_to_current(t0)
 2d8:	0082a303          	lw	t1,8(t0)

	/* Load return value of arch_swap function in temp register t2 */
	lw t2, _thread_offset_to_swap_return_value(t1)
 2dc:	0a032383          	lw	t2,160(t1) # 800000a0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800000a1>

	/*
	 * Unlock irq, following IRQ lock state in a0 register.
	 * Use atomic instruction csrrs to do so.
	 */
	andi a0, a0, MSTATUS_IEN
 2e0:	00857513          	andi	a0,a0,8
	csrrs t0, mstatus, a0
 2e4:	300522f3          	csrrs	t0,mstatus,a0

	/* Set value of return register a0 to value of register t2 */
	addi a0, t2, 0
 2e8:	00038513          	mv	a0,t2

	/* Return */
	jalr x0, ra
 2ec:	00008067          	ret

Disassembly of section text:

000002f0 <__clzsi2>:
     2f0:	000107b7          	lui	a5,0x10
     2f4:	02f57a63          	bgeu	a0,a5,328 <__clzsi2+0x38>
     2f8:	0ff00793          	li	a5,255
     2fc:	00a7b7b3          	sltu	a5,a5,a0
     300:	00379793          	slli	a5,a5,0x3
     304:	0000d737          	lui	a4,0xd
     308:	02000693          	li	a3,32
     30c:	40f686b3          	sub	a3,a3,a5
     310:	00f55533          	srl	a0,a0,a5
     314:	05c70793          	addi	a5,a4,92 # d05c <__clz_tab>
     318:	00a78533          	add	a0,a5,a0
     31c:	00054503          	lbu	a0,0(a0)
     320:	40a68533          	sub	a0,a3,a0
     324:	00008067          	ret
     328:	01000737          	lui	a4,0x1000
     32c:	01000793          	li	a5,16
     330:	fce56ae3          	bltu	a0,a4,304 <__clzsi2+0x14>
     334:	01800793          	li	a5,24
     338:	fcdff06f          	j	304 <__clzsi2+0x14>

0000033c <__ctzsi2>:
     33c:	40a007b3          	neg	a5,a0
     340:	00a7f533          	and	a0,a5,a0
     344:	000107b7          	lui	a5,0x10
     348:	02f57863          	bgeu	a0,a5,378 <__ctzsi2+0x3c>
     34c:	0ff00793          	li	a5,255
     350:	00a7b7b3          	sltu	a5,a5,a0
     354:	00379793          	slli	a5,a5,0x3
     358:	0000d737          	lui	a4,0xd
     35c:	00f55533          	srl	a0,a0,a5
     360:	05c70713          	addi	a4,a4,92 # d05c <__clz_tab>
     364:	00a70533          	add	a0,a4,a0
     368:	00054503          	lbu	a0,0(a0)
     36c:	fff78793          	addi	a5,a5,-1 # ffff <kheap__system_heap+0x154f>
     370:	00f50533          	add	a0,a0,a5
     374:	00008067          	ret
     378:	01000737          	lui	a4,0x1000
     37c:	01000793          	li	a5,16
     380:	fce56ce3          	bltu	a0,a4,358 <__ctzsi2+0x1c>
     384:	01800793          	li	a5,24
     388:	fd1ff06f          	j	358 <__ctzsi2+0x1c>

0000038c <__udivdi3>:
     38c:	00050893          	mv	a7,a0
     390:	00058793          	mv	a5,a1
     394:	00060813          	mv	a6,a2
     398:	00068513          	mv	a0,a3
     39c:	00088313          	mv	t1,a7
     3a0:	28069463          	bnez	a3,628 <CONFIG_MAIN_STACK_SIZE+0x228>
     3a4:	0000d6b7          	lui	a3,0xd
     3a8:	05c68693          	addi	a3,a3,92 # d05c <__clz_tab>
     3ac:	0ec5f663          	bgeu	a1,a2,498 <CONFIG_MAIN_STACK_SIZE+0x98>
     3b0:	00010737          	lui	a4,0x10
     3b4:	0ce67863          	bgeu	a2,a4,484 <CONFIG_MAIN_STACK_SIZE+0x84>
     3b8:	0ff00713          	li	a4,255
     3bc:	00c73733          	sltu	a4,a4,a2
     3c0:	00371713          	slli	a4,a4,0x3
     3c4:	00e65533          	srl	a0,a2,a4
     3c8:	00a686b3          	add	a3,a3,a0
     3cc:	0006c683          	lbu	a3,0(a3)
     3d0:	02000513          	li	a0,32
     3d4:	00e68733          	add	a4,a3,a4
     3d8:	40e506b3          	sub	a3,a0,a4
     3dc:	00e50c63          	beq	a0,a4,3f4 <__udivdi3+0x68>
     3e0:	00d795b3          	sll	a1,a5,a3
     3e4:	00e8d733          	srl	a4,a7,a4
     3e8:	00d61833          	sll	a6,a2,a3
     3ec:	00b765b3          	or	a1,a4,a1
     3f0:	00d89333          	sll	t1,a7,a3
     3f4:	01085893          	srli	a7,a6,0x10
     3f8:	0315d6b3          	divu	a3,a1,a7
     3fc:	01081613          	slli	a2,a6,0x10
     400:	01065613          	srli	a2,a2,0x10
     404:	01035793          	srli	a5,t1,0x10
     408:	0315f733          	remu	a4,a1,a7
     40c:	00068513          	mv	a0,a3
     410:	02d605b3          	mul	a1,a2,a3
     414:	01071713          	slli	a4,a4,0x10
     418:	00f767b3          	or	a5,a4,a5
     41c:	00b7fe63          	bgeu	a5,a1,438 <CONFIG_MAIN_STACK_SIZE+0x38>
     420:	010787b3          	add	a5,a5,a6
     424:	fff68513          	addi	a0,a3,-1
     428:	0107e863          	bltu	a5,a6,438 <CONFIG_MAIN_STACK_SIZE+0x38>
     42c:	00b7f663          	bgeu	a5,a1,438 <CONFIG_MAIN_STACK_SIZE+0x38>
     430:	ffe68513          	addi	a0,a3,-2
     434:	010787b3          	add	a5,a5,a6
     438:	40b787b3          	sub	a5,a5,a1
     43c:	0317f733          	remu	a4,a5,a7
     440:	01031313          	slli	t1,t1,0x10
     444:	01035313          	srli	t1,t1,0x10
     448:	0317d7b3          	divu	a5,a5,a7
     44c:	01071713          	slli	a4,a4,0x10
     450:	00676333          	or	t1,a4,t1
     454:	02f606b3          	mul	a3,a2,a5
     458:	00078613          	mv	a2,a5
     45c:	00d37c63          	bgeu	t1,a3,474 <CONFIG_MAIN_STACK_SIZE+0x74>
     460:	00680333          	add	t1,a6,t1
     464:	fff78613          	addi	a2,a5,-1
     468:	01036663          	bltu	t1,a6,474 <CONFIG_MAIN_STACK_SIZE+0x74>
     46c:	00d37463          	bgeu	t1,a3,474 <CONFIG_MAIN_STACK_SIZE+0x74>
     470:	ffe78613          	addi	a2,a5,-2
     474:	01051513          	slli	a0,a0,0x10
     478:	00c56533          	or	a0,a0,a2
     47c:	00000593          	li	a1,0
     480:	0e40006f          	j	564 <CONFIG_MAIN_STACK_SIZE+0x164>
     484:	01000537          	lui	a0,0x1000
     488:	01000713          	li	a4,16
     48c:	f2a66ce3          	bltu	a2,a0,3c4 <__udivdi3+0x38>
     490:	01800713          	li	a4,24
     494:	f31ff06f          	j	3c4 <__udivdi3+0x38>
     498:	00061663          	bnez	a2,4a4 <CONFIG_MAIN_STACK_SIZE+0xa4>
     49c:	00100713          	li	a4,1
     4a0:	02c75833          	divu	a6,a4,a2
     4a4:	00010737          	lui	a4,0x10
     4a8:	0ce87063          	bgeu	a6,a4,568 <CONFIG_MAIN_STACK_SIZE+0x168>
     4ac:	0ff00713          	li	a4,255
     4b0:	01077463          	bgeu	a4,a6,4b8 <CONFIG_MAIN_STACK_SIZE+0xb8>
     4b4:	00800513          	li	a0,8
     4b8:	00a85733          	srl	a4,a6,a0
     4bc:	00e686b3          	add	a3,a3,a4
     4c0:	0006c703          	lbu	a4,0(a3)
     4c4:	02000613          	li	a2,32
     4c8:	00a70733          	add	a4,a4,a0
     4cc:	40e606b3          	sub	a3,a2,a4
     4d0:	0ae61663          	bne	a2,a4,57c <CONFIG_MAIN_STACK_SIZE+0x17c>
     4d4:	410787b3          	sub	a5,a5,a6
     4d8:	00100593          	li	a1,1
     4dc:	01085893          	srli	a7,a6,0x10
     4e0:	01081613          	slli	a2,a6,0x10
     4e4:	01065613          	srli	a2,a2,0x10
     4e8:	01035713          	srli	a4,t1,0x10
     4ec:	0317f6b3          	remu	a3,a5,a7
     4f0:	0317d7b3          	divu	a5,a5,a7
     4f4:	01069693          	slli	a3,a3,0x10
     4f8:	00e6e733          	or	a4,a3,a4
     4fc:	02f60e33          	mul	t3,a2,a5
     500:	00078513          	mv	a0,a5
     504:	01c77e63          	bgeu	a4,t3,520 <CONFIG_MAIN_STACK_SIZE+0x120>
     508:	01070733          	add	a4,a4,a6
     50c:	fff78513          	addi	a0,a5,-1
     510:	01076863          	bltu	a4,a6,520 <CONFIG_MAIN_STACK_SIZE+0x120>
     514:	01c77663          	bgeu	a4,t3,520 <CONFIG_MAIN_STACK_SIZE+0x120>
     518:	ffe78513          	addi	a0,a5,-2
     51c:	01070733          	add	a4,a4,a6
     520:	41c70733          	sub	a4,a4,t3
     524:	031777b3          	remu	a5,a4,a7
     528:	01031313          	slli	t1,t1,0x10
     52c:	01035313          	srli	t1,t1,0x10
     530:	03175733          	divu	a4,a4,a7
     534:	01079793          	slli	a5,a5,0x10
     538:	0067e333          	or	t1,a5,t1
     53c:	02e606b3          	mul	a3,a2,a4
     540:	00070613          	mv	a2,a4
     544:	00d37c63          	bgeu	t1,a3,55c <CONFIG_MAIN_STACK_SIZE+0x15c>
     548:	00680333          	add	t1,a6,t1
     54c:	fff70613          	addi	a2,a4,-1 # ffff <kheap__system_heap+0x154f>
     550:	01036663          	bltu	t1,a6,55c <CONFIG_MAIN_STACK_SIZE+0x15c>
     554:	00d37463          	bgeu	t1,a3,55c <CONFIG_MAIN_STACK_SIZE+0x15c>
     558:	ffe70613          	addi	a2,a4,-2
     55c:	01051513          	slli	a0,a0,0x10
     560:	00c56533          	or	a0,a0,a2
     564:	00008067          	ret
     568:	01000737          	lui	a4,0x1000
     56c:	01000513          	li	a0,16
     570:	f4e864e3          	bltu	a6,a4,4b8 <CONFIG_MAIN_STACK_SIZE+0xb8>
     574:	01800513          	li	a0,24
     578:	f41ff06f          	j	4b8 <CONFIG_MAIN_STACK_SIZE+0xb8>
     57c:	00d81833          	sll	a6,a6,a3
     580:	00e7d533          	srl	a0,a5,a4
     584:	00d89333          	sll	t1,a7,a3
     588:	00d797b3          	sll	a5,a5,a3
     58c:	00e8d733          	srl	a4,a7,a4
     590:	01085893          	srli	a7,a6,0x10
     594:	00f76633          	or	a2,a4,a5
     598:	03157733          	remu	a4,a0,a7
     59c:	01081793          	slli	a5,a6,0x10
     5a0:	0107d793          	srli	a5,a5,0x10
     5a4:	01065593          	srli	a1,a2,0x10
     5a8:	03155533          	divu	a0,a0,a7
     5ac:	01071713          	slli	a4,a4,0x10
     5b0:	00b76733          	or	a4,a4,a1
     5b4:	02a786b3          	mul	a3,a5,a0
     5b8:	00050593          	mv	a1,a0
     5bc:	00d77e63          	bgeu	a4,a3,5d8 <CONFIG_MAIN_STACK_SIZE+0x1d8>
     5c0:	01070733          	add	a4,a4,a6
     5c4:	fff50593          	addi	a1,a0,-1 # ffffff <__data_region_end+0xfd10ff>
     5c8:	01076863          	bltu	a4,a6,5d8 <CONFIG_MAIN_STACK_SIZE+0x1d8>
     5cc:	00d77663          	bgeu	a4,a3,5d8 <CONFIG_MAIN_STACK_SIZE+0x1d8>
     5d0:	ffe50593          	addi	a1,a0,-2
     5d4:	01070733          	add	a4,a4,a6
     5d8:	40d706b3          	sub	a3,a4,a3
     5dc:	0316f733          	remu	a4,a3,a7
     5e0:	01061613          	slli	a2,a2,0x10
     5e4:	01065613          	srli	a2,a2,0x10
     5e8:	0316d6b3          	divu	a3,a3,a7
     5ec:	01071713          	slli	a4,a4,0x10
     5f0:	02d78533          	mul	a0,a5,a3
     5f4:	00c767b3          	or	a5,a4,a2
     5f8:	00068713          	mv	a4,a3
     5fc:	00a7fe63          	bgeu	a5,a0,618 <CONFIG_MAIN_STACK_SIZE+0x218>
     600:	010787b3          	add	a5,a5,a6
     604:	fff68713          	addi	a4,a3,-1
     608:	0107e863          	bltu	a5,a6,618 <CONFIG_MAIN_STACK_SIZE+0x218>
     60c:	00a7f663          	bgeu	a5,a0,618 <CONFIG_MAIN_STACK_SIZE+0x218>
     610:	ffe68713          	addi	a4,a3,-2
     614:	010787b3          	add	a5,a5,a6
     618:	01059593          	slli	a1,a1,0x10
     61c:	40a787b3          	sub	a5,a5,a0
     620:	00e5e5b3          	or	a1,a1,a4
     624:	eb9ff06f          	j	4dc <CONFIG_MAIN_STACK_SIZE+0xdc>
     628:	18d5e663          	bltu	a1,a3,7b4 <CONFIG_MAIN_STACK_SIZE+0x3b4>
     62c:	00010737          	lui	a4,0x10
     630:	04e6f463          	bgeu	a3,a4,678 <CONFIG_MAIN_STACK_SIZE+0x278>
     634:	0ff00713          	li	a4,255
     638:	00d735b3          	sltu	a1,a4,a3
     63c:	00359593          	slli	a1,a1,0x3
     640:	0000d737          	lui	a4,0xd
     644:	00b6d533          	srl	a0,a3,a1
     648:	05c70713          	addi	a4,a4,92 # d05c <__clz_tab>
     64c:	00a70733          	add	a4,a4,a0
     650:	00074703          	lbu	a4,0(a4)
     654:	02000513          	li	a0,32
     658:	00b70733          	add	a4,a4,a1
     65c:	40e505b3          	sub	a1,a0,a4
     660:	02e51663          	bne	a0,a4,68c <CONFIG_MAIN_STACK_SIZE+0x28c>
     664:	00100513          	li	a0,1
     668:	eef6eee3          	bltu	a3,a5,564 <CONFIG_MAIN_STACK_SIZE+0x164>
     66c:	00c8b533          	sltu	a0,a7,a2
     670:	00154513          	xori	a0,a0,1
     674:	ef1ff06f          	j	564 <CONFIG_MAIN_STACK_SIZE+0x164>
     678:	01000737          	lui	a4,0x1000
     67c:	01000593          	li	a1,16
     680:	fce6e0e3          	bltu	a3,a4,640 <CONFIG_MAIN_STACK_SIZE+0x240>
     684:	01800593          	li	a1,24
     688:	fb9ff06f          	j	640 <CONFIG_MAIN_STACK_SIZE+0x240>
     68c:	00e65833          	srl	a6,a2,a4
     690:	00b696b3          	sll	a3,a3,a1
     694:	00d86833          	or	a6,a6,a3
     698:	00e7de33          	srl	t3,a5,a4
     69c:	01085e93          	srli	t4,a6,0x10
     6a0:	03de76b3          	remu	a3,t3,t4
     6a4:	00b797b3          	sll	a5,a5,a1
     6a8:	00e8d733          	srl	a4,a7,a4
     6ac:	00b61333          	sll	t1,a2,a1
     6b0:	00f76633          	or	a2,a4,a5
     6b4:	01081793          	slli	a5,a6,0x10
     6b8:	0107d793          	srli	a5,a5,0x10
     6bc:	01065713          	srli	a4,a2,0x10
     6c0:	03de5e33          	divu	t3,t3,t4
     6c4:	01069693          	slli	a3,a3,0x10
     6c8:	00e6e733          	or	a4,a3,a4
     6cc:	03c78f33          	mul	t5,a5,t3
     6d0:	000e0513          	mv	a0,t3
     6d4:	01e77e63          	bgeu	a4,t5,6f0 <CONFIG_MAIN_STACK_SIZE+0x2f0>
     6d8:	01070733          	add	a4,a4,a6
     6dc:	fffe0513          	addi	a0,t3,-1
     6e0:	01076863          	bltu	a4,a6,6f0 <CONFIG_MAIN_STACK_SIZE+0x2f0>
     6e4:	01e77663          	bgeu	a4,t5,6f0 <CONFIG_MAIN_STACK_SIZE+0x2f0>
     6e8:	ffee0513          	addi	a0,t3,-2
     6ec:	01070733          	add	a4,a4,a6
     6f0:	41e70733          	sub	a4,a4,t5
     6f4:	03d776b3          	remu	a3,a4,t4
     6f8:	03d75733          	divu	a4,a4,t4
     6fc:	01069693          	slli	a3,a3,0x10
     700:	02e78e33          	mul	t3,a5,a4
     704:	01061793          	slli	a5,a2,0x10
     708:	0107d793          	srli	a5,a5,0x10
     70c:	00f6e7b3          	or	a5,a3,a5
     710:	00070613          	mv	a2,a4
     714:	01c7fe63          	bgeu	a5,t3,730 <CONFIG_MAIN_STACK_SIZE+0x330>
     718:	010787b3          	add	a5,a5,a6
     71c:	fff70613          	addi	a2,a4,-1 # ffffff <__data_region_end+0xfd10ff>
     720:	0107e863          	bltu	a5,a6,730 <CONFIG_MAIN_STACK_SIZE+0x330>
     724:	01c7f663          	bgeu	a5,t3,730 <CONFIG_MAIN_STACK_SIZE+0x330>
     728:	ffe70613          	addi	a2,a4,-2
     72c:	010787b3          	add	a5,a5,a6
     730:	01051513          	slli	a0,a0,0x10
     734:	00010eb7          	lui	t4,0x10
     738:	00c56533          	or	a0,a0,a2
     73c:	fffe8693          	addi	a3,t4,-1 # ffff <kheap__system_heap+0x154f>
     740:	00d57833          	and	a6,a0,a3
     744:	01055613          	srli	a2,a0,0x10
     748:	00d376b3          	and	a3,t1,a3
     74c:	01035313          	srli	t1,t1,0x10
     750:	41c787b3          	sub	a5,a5,t3
     754:	02d80e33          	mul	t3,a6,a3
     758:	02d606b3          	mul	a3,a2,a3
     75c:	010e5713          	srli	a4,t3,0x10
     760:	02680833          	mul	a6,a6,t1
     764:	00d80833          	add	a6,a6,a3
     768:	01070733          	add	a4,a4,a6
     76c:	02660633          	mul	a2,a2,t1
     770:	00d77463          	bgeu	a4,a3,778 <CONFIG_MAIN_STACK_SIZE+0x378>
     774:	01d60633          	add	a2,a2,t4
     778:	01075693          	srli	a3,a4,0x10
     77c:	00c68633          	add	a2,a3,a2
     780:	02c7e663          	bltu	a5,a2,7ac <CONFIG_MAIN_STACK_SIZE+0x3ac>
     784:	cec79ce3          	bne	a5,a2,47c <CONFIG_MAIN_STACK_SIZE+0x7c>
     788:	000107b7          	lui	a5,0x10
     78c:	fff78793          	addi	a5,a5,-1 # ffff <kheap__system_heap+0x154f>
     790:	00f77733          	and	a4,a4,a5
     794:	01071713          	slli	a4,a4,0x10
     798:	00fe7e33          	and	t3,t3,a5
     79c:	00b898b3          	sll	a7,a7,a1
     7a0:	01c70733          	add	a4,a4,t3
     7a4:	00000593          	li	a1,0
     7a8:	dae8fee3          	bgeu	a7,a4,564 <CONFIG_MAIN_STACK_SIZE+0x164>
     7ac:	fff50513          	addi	a0,a0,-1
     7b0:	ccdff06f          	j	47c <CONFIG_MAIN_STACK_SIZE+0x7c>
     7b4:	00000593          	li	a1,0
     7b8:	00000513          	li	a0,0
     7bc:	da9ff06f          	j	564 <CONFIG_MAIN_STACK_SIZE+0x164>

000007c0 <__umoddi3>:
     7c0:	00050e93          	mv	t4,a0
     7c4:	00058313          	mv	t1,a1
     7c8:	00060813          	mv	a6,a2
     7cc:	00068793          	mv	a5,a3
     7d0:	22069a63          	bnez	a3,a04 <CONFIG_ISR_STACK_SIZE+0x204>
     7d4:	0000d737          	lui	a4,0xd
     7d8:	05c70713          	addi	a4,a4,92 # d05c <__clz_tab>
     7dc:	0cc5fc63          	bgeu	a1,a2,8b4 <CONFIG_ISR_STACK_SIZE+0xb4>
     7e0:	000106b7          	lui	a3,0x10
     7e4:	0ad67e63          	bgeu	a2,a3,8a0 <CONFIG_ISR_STACK_SIZE+0xa0>
     7e8:	0ff00693          	li	a3,255
     7ec:	00c6f463          	bgeu	a3,a2,7f4 <__umoddi3+0x34>
     7f0:	00800793          	li	a5,8
     7f4:	00f656b3          	srl	a3,a2,a5
     7f8:	00d70733          	add	a4,a4,a3
     7fc:	00074703          	lbu	a4,0(a4)
     800:	00f707b3          	add	a5,a4,a5
     804:	02000713          	li	a4,32
     808:	40f708b3          	sub	a7,a4,a5
     80c:	00f70c63          	beq	a4,a5,824 <CONFIG_ISR_STACK_SIZE+0x24>
     810:	011315b3          	sll	a1,t1,a7
     814:	00fed7b3          	srl	a5,t4,a5
     818:	01161833          	sll	a6,a2,a7
     81c:	00b7e5b3          	or	a1,a5,a1
     820:	011e9533          	sll	a0,t4,a7
     824:	01085693          	srli	a3,a6,0x10
     828:	02d5f7b3          	remu	a5,a1,a3
     82c:	01081613          	slli	a2,a6,0x10
     830:	01065613          	srli	a2,a2,0x10
     834:	01055713          	srli	a4,a0,0x10
     838:	02d5d5b3          	divu	a1,a1,a3
     83c:	01079793          	slli	a5,a5,0x10
     840:	00e7e733          	or	a4,a5,a4
     844:	02b605b3          	mul	a1,a2,a1
     848:	00b77a63          	bgeu	a4,a1,85c <CONFIG_ISR_STACK_SIZE+0x5c>
     84c:	01070733          	add	a4,a4,a6
     850:	01076663          	bltu	a4,a6,85c <CONFIG_ISR_STACK_SIZE+0x5c>
     854:	00b77463          	bgeu	a4,a1,85c <CONFIG_ISR_STACK_SIZE+0x5c>
     858:	01070733          	add	a4,a4,a6
     85c:	40b70733          	sub	a4,a4,a1
     860:	02d777b3          	remu	a5,a4,a3
     864:	01051513          	slli	a0,a0,0x10
     868:	01055513          	srli	a0,a0,0x10
     86c:	02d75733          	divu	a4,a4,a3
     870:	01079793          	slli	a5,a5,0x10
     874:	00a7e533          	or	a0,a5,a0
     878:	02e60733          	mul	a4,a2,a4
     87c:	00e57a63          	bgeu	a0,a4,890 <CONFIG_ISR_STACK_SIZE+0x90>
     880:	01050533          	add	a0,a0,a6
     884:	01056663          	bltu	a0,a6,890 <CONFIG_ISR_STACK_SIZE+0x90>
     888:	00e57463          	bgeu	a0,a4,890 <CONFIG_ISR_STACK_SIZE+0x90>
     88c:	01050533          	add	a0,a0,a6
     890:	40e50533          	sub	a0,a0,a4
     894:	01155533          	srl	a0,a0,a7
     898:	00000593          	li	a1,0
     89c:	00008067          	ret
     8a0:	010006b7          	lui	a3,0x1000
     8a4:	01000793          	li	a5,16
     8a8:	f4d666e3          	bltu	a2,a3,7f4 <__umoddi3+0x34>
     8ac:	01800793          	li	a5,24
     8b0:	f45ff06f          	j	7f4 <__umoddi3+0x34>
     8b4:	00061663          	bnez	a2,8c0 <CONFIG_ISR_STACK_SIZE+0xc0>
     8b8:	00100693          	li	a3,1
     8bc:	02c6d833          	divu	a6,a3,a2
     8c0:	000106b7          	lui	a3,0x10
     8c4:	12d87663          	bgeu	a6,a3,9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>
     8c8:	0ff00693          	li	a3,255
     8cc:	0106f463          	bgeu	a3,a6,8d4 <CONFIG_ISR_STACK_SIZE+0xd4>
     8d0:	00800793          	li	a5,8
     8d4:	00f856b3          	srl	a3,a6,a5
     8d8:	00d70733          	add	a4,a4,a3
     8dc:	00074603          	lbu	a2,0(a4)
     8e0:	410305b3          	sub	a1,t1,a6
     8e4:	00f60633          	add	a2,a2,a5
     8e8:	02000793          	li	a5,32
     8ec:	40c788b3          	sub	a7,a5,a2
     8f0:	08c78663          	beq	a5,a2,97c <CONFIG_ISR_STACK_SIZE+0x17c>
     8f4:	01181833          	sll	a6,a6,a7
     8f8:	00c357b3          	srl	a5,t1,a2
     8fc:	011315b3          	sll	a1,t1,a7
     900:	01085313          	srli	t1,a6,0x10
     904:	00ced633          	srl	a2,t4,a2
     908:	00b66633          	or	a2,a2,a1
     90c:	01081593          	slli	a1,a6,0x10
     910:	0105d593          	srli	a1,a1,0x10
     914:	011e9533          	sll	a0,t4,a7
     918:	0267d6b3          	divu	a3,a5,t1
     91c:	0267f733          	remu	a4,a5,t1
     920:	01065793          	srli	a5,a2,0x10
     924:	02d586b3          	mul	a3,a1,a3
     928:	01071713          	slli	a4,a4,0x10
     92c:	00f76733          	or	a4,a4,a5
     930:	00d77a63          	bgeu	a4,a3,944 <CONFIG_ISR_STACK_SIZE+0x144>
     934:	01070733          	add	a4,a4,a6
     938:	01076663          	bltu	a4,a6,944 <CONFIG_ISR_STACK_SIZE+0x144>
     93c:	00d77463          	bgeu	a4,a3,944 <CONFIG_ISR_STACK_SIZE+0x144>
     940:	01070733          	add	a4,a4,a6
     944:	40d706b3          	sub	a3,a4,a3
     948:	0266f733          	remu	a4,a3,t1
     94c:	01061613          	slli	a2,a2,0x10
     950:	01065613          	srli	a2,a2,0x10
     954:	0266d6b3          	divu	a3,a3,t1
     958:	01071713          	slli	a4,a4,0x10
     95c:	02d586b3          	mul	a3,a1,a3
     960:	00c765b3          	or	a1,a4,a2
     964:	00d5fa63          	bgeu	a1,a3,978 <CONFIG_ISR_STACK_SIZE+0x178>
     968:	010585b3          	add	a1,a1,a6
     96c:	0105e663          	bltu	a1,a6,978 <CONFIG_ISR_STACK_SIZE+0x178>
     970:	00d5f463          	bgeu	a1,a3,978 <CONFIG_ISR_STACK_SIZE+0x178>
     974:	010585b3          	add	a1,a1,a6
     978:	40d585b3          	sub	a1,a1,a3
     97c:	01085693          	srli	a3,a6,0x10
     980:	02d5f733          	remu	a4,a1,a3
     984:	01081793          	slli	a5,a6,0x10
     988:	0107d793          	srli	a5,a5,0x10
     98c:	01055613          	srli	a2,a0,0x10
     990:	02d5d5b3          	divu	a1,a1,a3
     994:	01071713          	slli	a4,a4,0x10
     998:	00c76733          	or	a4,a4,a2
     99c:	02b785b3          	mul	a1,a5,a1
     9a0:	00b77a63          	bgeu	a4,a1,9b4 <CONFIG_ISR_STACK_SIZE+0x1b4>
     9a4:	01070733          	add	a4,a4,a6
     9a8:	01076663          	bltu	a4,a6,9b4 <CONFIG_ISR_STACK_SIZE+0x1b4>
     9ac:	00b77463          	bgeu	a4,a1,9b4 <CONFIG_ISR_STACK_SIZE+0x1b4>
     9b0:	01070733          	add	a4,a4,a6
     9b4:	40b705b3          	sub	a1,a4,a1
     9b8:	02d5f733          	remu	a4,a1,a3
     9bc:	01051513          	slli	a0,a0,0x10
     9c0:	01055513          	srli	a0,a0,0x10
     9c4:	02d5d5b3          	divu	a1,a1,a3
     9c8:	02b785b3          	mul	a1,a5,a1
     9cc:	01071793          	slli	a5,a4,0x10
     9d0:	00a7e533          	or	a0,a5,a0
     9d4:	00b57a63          	bgeu	a0,a1,9e8 <CONFIG_ISR_STACK_SIZE+0x1e8>
     9d8:	01050533          	add	a0,a0,a6
     9dc:	01056663          	bltu	a0,a6,9e8 <CONFIG_ISR_STACK_SIZE+0x1e8>
     9e0:	00b57463          	bgeu	a0,a1,9e8 <CONFIG_ISR_STACK_SIZE+0x1e8>
     9e4:	01050533          	add	a0,a0,a6
     9e8:	40b50533          	sub	a0,a0,a1
     9ec:	ea9ff06f          	j	894 <CONFIG_ISR_STACK_SIZE+0x94>
     9f0:	010006b7          	lui	a3,0x1000
     9f4:	01000793          	li	a5,16
     9f8:	ecd86ee3          	bltu	a6,a3,8d4 <CONFIG_ISR_STACK_SIZE+0xd4>
     9fc:	01800793          	li	a5,24
     a00:	ed5ff06f          	j	8d4 <CONFIG_ISR_STACK_SIZE+0xd4>
     a04:	e8d5ece3          	bltu	a1,a3,89c <CONFIG_ISR_STACK_SIZE+0x9c>
     a08:	000107b7          	lui	a5,0x10
     a0c:	04f6f863          	bgeu	a3,a5,a5c <CONFIG_ISR_STACK_SIZE+0x25c>
     a10:	0ff00893          	li	a7,255
     a14:	00d8b7b3          	sltu	a5,a7,a3
     a18:	00379793          	slli	a5,a5,0x3
     a1c:	0000d737          	lui	a4,0xd
     a20:	00f6d833          	srl	a6,a3,a5
     a24:	05c70713          	addi	a4,a4,92 # d05c <__clz_tab>
     a28:	01070733          	add	a4,a4,a6
     a2c:	00074883          	lbu	a7,0(a4)
     a30:	00f888b3          	add	a7,a7,a5
     a34:	02000793          	li	a5,32
     a38:	41178833          	sub	a6,a5,a7
     a3c:	03179a63          	bne	a5,a7,a70 <CONFIG_ISR_STACK_SIZE+0x270>
     a40:	0066e463          	bltu	a3,t1,a48 <CONFIG_ISR_STACK_SIZE+0x248>
     a44:	e4ceece3          	bltu	t4,a2,89c <CONFIG_ISR_STACK_SIZE+0x9c>
     a48:	40ce8533          	sub	a0,t4,a2
     a4c:	40d305b3          	sub	a1,t1,a3
     a50:	00aebeb3          	sltu	t4,t4,a0
     a54:	41d585b3          	sub	a1,a1,t4
     a58:	e45ff06f          	j	89c <CONFIG_ISR_STACK_SIZE+0x9c>
     a5c:	01000737          	lui	a4,0x1000
     a60:	01000793          	li	a5,16
     a64:	fae6ece3          	bltu	a3,a4,a1c <CONFIG_ISR_STACK_SIZE+0x21c>
     a68:	01800793          	li	a5,24
     a6c:	fb1ff06f          	j	a1c <CONFIG_ISR_STACK_SIZE+0x21c>
     a70:	011657b3          	srl	a5,a2,a7
     a74:	010696b3          	sll	a3,a3,a6
     a78:	00d7ee33          	or	t3,a5,a3
     a7c:	01135f33          	srl	t5,t1,a7
     a80:	011ed7b3          	srl	a5,t4,a7
     a84:	010e9533          	sll	a0,t4,a6
     a88:	010e5e93          	srli	t4,t3,0x10
     a8c:	010315b3          	sll	a1,t1,a6
     a90:	03df5333          	divu	t1,t5,t4
     a94:	00b7e7b3          	or	a5,a5,a1
     a98:	010e1593          	slli	a1,t3,0x10
     a9c:	0105d593          	srli	a1,a1,0x10
     aa0:	0107d713          	srli	a4,a5,0x10
     aa4:	01061633          	sll	a2,a2,a6
     aa8:	03df76b3          	remu	a3,t5,t4
     aac:	02658f33          	mul	t5,a1,t1
     ab0:	01069693          	slli	a3,a3,0x10
     ab4:	00e6e733          	or	a4,a3,a4
     ab8:	00030693          	mv	a3,t1
     abc:	01e77e63          	bgeu	a4,t5,ad8 <CONFIG_ISR_STACK_SIZE+0x2d8>
     ac0:	01c70733          	add	a4,a4,t3
     ac4:	fff30693          	addi	a3,t1,-1
     ac8:	01c76863          	bltu	a4,t3,ad8 <CONFIG_ISR_STACK_SIZE+0x2d8>
     acc:	01e77663          	bgeu	a4,t5,ad8 <CONFIG_ISR_STACK_SIZE+0x2d8>
     ad0:	ffe30693          	addi	a3,t1,-2
     ad4:	01c70733          	add	a4,a4,t3
     ad8:	41e70733          	sub	a4,a4,t5
     adc:	03d77333          	remu	t1,a4,t4
     ae0:	01079793          	slli	a5,a5,0x10
     ae4:	0107d793          	srli	a5,a5,0x10
     ae8:	03d75733          	divu	a4,a4,t4
     aec:	01031313          	slli	t1,t1,0x10
     af0:	00f36333          	or	t1,t1,a5
     af4:	02e585b3          	mul	a1,a1,a4
     af8:	00070793          	mv	a5,a4
     afc:	00b37e63          	bgeu	t1,a1,b18 <CONFIG_ISR_STACK_SIZE+0x318>
     b00:	01c30333          	add	t1,t1,t3
     b04:	fff70793          	addi	a5,a4,-1 # ffffff <__data_region_end+0xfd10ff>
     b08:	01c36863          	bltu	t1,t3,b18 <CONFIG_ISR_STACK_SIZE+0x318>
     b0c:	00b37663          	bgeu	t1,a1,b18 <CONFIG_ISR_STACK_SIZE+0x318>
     b10:	ffe70793          	addi	a5,a4,-2
     b14:	01c30333          	add	t1,t1,t3
     b18:	01069693          	slli	a3,a3,0x10
     b1c:	00010f37          	lui	t5,0x10
     b20:	00f6e6b3          	or	a3,a3,a5
     b24:	40b305b3          	sub	a1,t1,a1
     b28:	ffff0313          	addi	t1,t5,-1 # ffff <kheap__system_heap+0x154f>
     b2c:	0066feb3          	and	t4,a3,t1
     b30:	01065713          	srli	a4,a2,0x10
     b34:	0106d693          	srli	a3,a3,0x10
     b38:	00667333          	and	t1,a2,t1
     b3c:	026e87b3          	mul	a5,t4,t1
     b40:	02668333          	mul	t1,a3,t1
     b44:	02ee8eb3          	mul	t4,t4,a4
     b48:	02e686b3          	mul	a3,a3,a4
     b4c:	006e8eb3          	add	t4,t4,t1
     b50:	0107d713          	srli	a4,a5,0x10
     b54:	01d70733          	add	a4,a4,t4
     b58:	00677463          	bgeu	a4,t1,b60 <CONFIG_ISR_STACK_SIZE+0x360>
     b5c:	01e686b3          	add	a3,a3,t5
     b60:	01075313          	srli	t1,a4,0x10
     b64:	00d306b3          	add	a3,t1,a3
     b68:	00010337          	lui	t1,0x10
     b6c:	fff30313          	addi	t1,t1,-1 # ffff <kheap__system_heap+0x154f>
     b70:	00677733          	and	a4,a4,t1
     b74:	01071713          	slli	a4,a4,0x10
     b78:	0067f7b3          	and	a5,a5,t1
     b7c:	00f707b3          	add	a5,a4,a5
     b80:	00d5e663          	bltu	a1,a3,b8c <CONFIG_ISR_STACK_SIZE+0x38c>
     b84:	00d59e63          	bne	a1,a3,ba0 <CONFIG_ISR_STACK_SIZE+0x3a0>
     b88:	00f57c63          	bgeu	a0,a5,ba0 <CONFIG_ISR_STACK_SIZE+0x3a0>
     b8c:	40c78633          	sub	a2,a5,a2
     b90:	00c7b7b3          	sltu	a5,a5,a2
     b94:	01c787b3          	add	a5,a5,t3
     b98:	40f686b3          	sub	a3,a3,a5
     b9c:	00060793          	mv	a5,a2
     ba0:	40f507b3          	sub	a5,a0,a5
     ba4:	00f53533          	sltu	a0,a0,a5
     ba8:	40d585b3          	sub	a1,a1,a3
     bac:	40a585b3          	sub	a1,a1,a0
     bb0:	011598b3          	sll	a7,a1,a7
     bb4:	0107d533          	srl	a0,a5,a6
     bb8:	00a8e533          	or	a0,a7,a0
     bbc:	0105d5b3          	srl	a1,a1,a6
     bc0:	cddff06f          	j	89c <CONFIG_ISR_STACK_SIZE+0x9c>

00000bc4 <__divdf3>:
     bc4:	fd010113          	addi	sp,sp,-48
     bc8:	03212023          	sw	s2,32(sp)
     bcc:	0145d913          	srli	s2,a1,0x14
     bd0:	02912223          	sw	s1,36(sp)
     bd4:	01312e23          	sw	s3,28(sp)
     bd8:	01412c23          	sw	s4,24(sp)
     bdc:	01612823          	sw	s6,16(sp)
     be0:	01812423          	sw	s8,8(sp)
     be4:	00c59493          	slli	s1,a1,0xc
     be8:	02112623          	sw	ra,44(sp)
     bec:	02812423          	sw	s0,40(sp)
     bf0:	01512a23          	sw	s5,20(sp)
     bf4:	01712623          	sw	s7,12(sp)
     bf8:	7ff97913          	andi	s2,s2,2047
     bfc:	00050a13          	mv	s4,a0
     c00:	00060b13          	mv	s6,a2
     c04:	00068c13          	mv	s8,a3
     c08:	00c4d493          	srli	s1,s1,0xc
     c0c:	01f5d993          	srli	s3,a1,0x1f
     c10:	0a090063          	beqz	s2,cb0 <__divdf3+0xec>
     c14:	7ff00793          	li	a5,2047
     c18:	0ef90e63          	beq	s2,a5,d14 <__divdf3+0x150>
     c1c:	01d55a93          	srli	s5,a0,0x1d
     c20:	00349493          	slli	s1,s1,0x3
     c24:	009ae4b3          	or	s1,s5,s1
     c28:	00800ab7          	lui	s5,0x800
     c2c:	0154eab3          	or	s5,s1,s5
     c30:	00351413          	slli	s0,a0,0x3
     c34:	c0190913          	addi	s2,s2,-1023
     c38:	00000b93          	li	s7,0
     c3c:	00cc1513          	slli	a0,s8,0xc
     c40:	00c55493          	srli	s1,a0,0xc
     c44:	014c5513          	srli	a0,s8,0x14
     c48:	7ff57593          	andi	a1,a0,2047
     c4c:	01fc5c13          	srli	s8,s8,0x1f
     c50:	10058063          	beqz	a1,d50 <__divdf3+0x18c>
     c54:	7ff00793          	li	a5,2047
     c58:	16f58263          	beq	a1,a5,dbc <__divdf3+0x1f8>
     c5c:	00349513          	slli	a0,s1,0x3
     c60:	01db5793          	srli	a5,s6,0x1d
     c64:	00a7e533          	or	a0,a5,a0
     c68:	008004b7          	lui	s1,0x800
     c6c:	009564b3          	or	s1,a0,s1
     c70:	003b1f93          	slli	t6,s6,0x3
     c74:	c0158513          	addi	a0,a1,-1023
     c78:	00000793          	li	a5,0
     c7c:	002b9713          	slli	a4,s7,0x2
     c80:	00f76733          	or	a4,a4,a5
     c84:	fff70713          	addi	a4,a4,-1
     c88:	00e00613          	li	a2,14
     c8c:	0189c6b3          	xor	a3,s3,s8
     c90:	40a905b3          	sub	a1,s2,a0
     c94:	16e66063          	bltu	a2,a4,df4 <__divdf3+0x230>
     c98:	0000d637          	lui	a2,0xd
     c9c:	00271713          	slli	a4,a4,0x2
     ca0:	15c60613          	addi	a2,a2,348 # d15c <__clz_tab+0x100>
     ca4:	00c70733          	add	a4,a4,a2
     ca8:	00072703          	lw	a4,0(a4)
     cac:	00070067          	jr	a4
     cb0:	00a4eab3          	or	s5,s1,a0
     cb4:	060a8e63          	beqz	s5,d30 <__divdf3+0x16c>
     cb8:	04048063          	beqz	s1,cf8 <__divdf3+0x134>
     cbc:	00048513          	mv	a0,s1
     cc0:	e30ff0ef          	jal	ra,2f0 <__clzsi2>
     cc4:	ff550793          	addi	a5,a0,-11
     cc8:	01c00713          	li	a4,28
     ccc:	02f74c63          	blt	a4,a5,d04 <__divdf3+0x140>
     cd0:	01d00a93          	li	s5,29
     cd4:	ff850413          	addi	s0,a0,-8
     cd8:	40fa8ab3          	sub	s5,s5,a5
     cdc:	008494b3          	sll	s1,s1,s0
     ce0:	015a5ab3          	srl	s5,s4,s5
     ce4:	009aeab3          	or	s5,s5,s1
     ce8:	008a1433          	sll	s0,s4,s0
     cec:	c0d00593          	li	a1,-1011
     cf0:	40a58933          	sub	s2,a1,a0
     cf4:	f45ff06f          	j	c38 <__divdf3+0x74>
     cf8:	df8ff0ef          	jal	ra,2f0 <__clzsi2>
     cfc:	02050513          	addi	a0,a0,32
     d00:	fc5ff06f          	j	cc4 <__divdf3+0x100>
     d04:	fd850493          	addi	s1,a0,-40
     d08:	009a1ab3          	sll	s5,s4,s1
     d0c:	00000413          	li	s0,0
     d10:	fddff06f          	j	cec <__divdf3+0x128>
     d14:	00a4eab3          	or	s5,s1,a0
     d18:	020a8463          	beqz	s5,d40 <__divdf3+0x17c>
     d1c:	00050413          	mv	s0,a0
     d20:	00048a93          	mv	s5,s1
     d24:	7ff00913          	li	s2,2047
     d28:	00300b93          	li	s7,3
     d2c:	f11ff06f          	j	c3c <__divdf3+0x78>
     d30:	00000413          	li	s0,0
     d34:	00000913          	li	s2,0
     d38:	00100b93          	li	s7,1
     d3c:	f01ff06f          	j	c3c <__divdf3+0x78>
     d40:	00000413          	li	s0,0
     d44:	7ff00913          	li	s2,2047
     d48:	00200b93          	li	s7,2
     d4c:	ef1ff06f          	j	c3c <__divdf3+0x78>
     d50:	0164efb3          	or	t6,s1,s6
     d54:	080f8063          	beqz	t6,dd4 <__divdf3+0x210>
     d58:	04048263          	beqz	s1,d9c <__divdf3+0x1d8>
     d5c:	00048513          	mv	a0,s1
     d60:	d90ff0ef          	jal	ra,2f0 <__clzsi2>
     d64:	00050593          	mv	a1,a0
     d68:	ff558793          	addi	a5,a1,-11
     d6c:	01c00713          	li	a4,28
     d70:	02f74e63          	blt	a4,a5,dac <__divdf3+0x1e8>
     d74:	01d00693          	li	a3,29
     d78:	ff858f93          	addi	t6,a1,-8
     d7c:	40f686b3          	sub	a3,a3,a5
     d80:	01f49533          	sll	a0,s1,t6
     d84:	00db56b3          	srl	a3,s6,a3
     d88:	00a6e4b3          	or	s1,a3,a0
     d8c:	01fb1fb3          	sll	t6,s6,t6
     d90:	c0d00693          	li	a3,-1011
     d94:	40b68533          	sub	a0,a3,a1
     d98:	ee1ff06f          	j	c78 <__divdf3+0xb4>
     d9c:	000b0513          	mv	a0,s6
     da0:	d50ff0ef          	jal	ra,2f0 <__clzsi2>
     da4:	02050593          	addi	a1,a0,32
     da8:	fc1ff06f          	j	d68 <__divdf3+0x1a4>
     dac:	fd858513          	addi	a0,a1,-40
     db0:	00ab14b3          	sll	s1,s6,a0
     db4:	00000f93          	li	t6,0
     db8:	fd9ff06f          	j	d90 <__divdf3+0x1cc>
     dbc:	0164efb3          	or	t6,s1,s6
     dc0:	020f8263          	beqz	t6,de4 <__divdf3+0x220>
     dc4:	000b0f93          	mv	t6,s6
     dc8:	7ff00513          	li	a0,2047
     dcc:	00300793          	li	a5,3
     dd0:	eadff06f          	j	c7c <__divdf3+0xb8>
     dd4:	00000493          	li	s1,0
     dd8:	00000513          	li	a0,0
     ddc:	00100793          	li	a5,1
     de0:	e9dff06f          	j	c7c <__divdf3+0xb8>
     de4:	00000493          	li	s1,0
     de8:	7ff00513          	li	a0,2047
     dec:	00200793          	li	a5,2
     df0:	e8dff06f          	j	c7c <__divdf3+0xb8>
     df4:	0154e663          	bltu	s1,s5,e00 <__divdf3+0x23c>
     df8:	349a9e63          	bne	s5,s1,1154 <__divdf3+0x590>
     dfc:	35f46c63          	bltu	s0,t6,1154 <__divdf3+0x590>
     e00:	01fa9613          	slli	a2,s5,0x1f
     e04:	00145713          	srli	a4,s0,0x1
     e08:	01f41793          	slli	a5,s0,0x1f
     e0c:	001ada93          	srli	s5,s5,0x1
     e10:	00e66433          	or	s0,a2,a4
     e14:	00849513          	slli	a0,s1,0x8
     e18:	018fd893          	srli	a7,t6,0x18
     e1c:	00a8e8b3          	or	a7,a7,a0
     e20:	01055513          	srli	a0,a0,0x10
     e24:	02aade33          	divu	t3,s5,a0
     e28:	01089e93          	slli	t4,a7,0x10
     e2c:	010ede93          	srli	t4,t4,0x10
     e30:	01045713          	srli	a4,s0,0x10
     e34:	008f9313          	slli	t1,t6,0x8
     e38:	02aafab3          	remu	s5,s5,a0
     e3c:	000e0613          	mv	a2,t3
     e40:	03ce8833          	mul	a6,t4,t3
     e44:	010a9a93          	slli	s5,s5,0x10
     e48:	01576733          	or	a4,a4,s5
     e4c:	01077e63          	bgeu	a4,a6,e68 <__divdf3+0x2a4>
     e50:	01170733          	add	a4,a4,a7
     e54:	fffe0613          	addi	a2,t3,-1
     e58:	01176863          	bltu	a4,a7,e68 <__divdf3+0x2a4>
     e5c:	01077663          	bgeu	a4,a6,e68 <__divdf3+0x2a4>
     e60:	ffee0613          	addi	a2,t3,-2
     e64:	01170733          	add	a4,a4,a7
     e68:	41070733          	sub	a4,a4,a6
     e6c:	02a75e33          	divu	t3,a4,a0
     e70:	01041413          	slli	s0,s0,0x10
     e74:	01045413          	srli	s0,s0,0x10
     e78:	02a77733          	remu	a4,a4,a0
     e7c:	000e0293          	mv	t0,t3
     e80:	03ce8833          	mul	a6,t4,t3
     e84:	01071713          	slli	a4,a4,0x10
     e88:	00e46733          	or	a4,s0,a4
     e8c:	01077e63          	bgeu	a4,a6,ea8 <__divdf3+0x2e4>
     e90:	01170733          	add	a4,a4,a7
     e94:	fffe0293          	addi	t0,t3,-1
     e98:	01176863          	bltu	a4,a7,ea8 <__divdf3+0x2e4>
     e9c:	01077663          	bgeu	a4,a6,ea8 <__divdf3+0x2e4>
     ea0:	ffee0293          	addi	t0,t3,-2
     ea4:	01170733          	add	a4,a4,a7
     ea8:	41070433          	sub	s0,a4,a6
     eac:	01061613          	slli	a2,a2,0x10
     eb0:	00010837          	lui	a6,0x10
     eb4:	005662b3          	or	t0,a2,t0
     eb8:	fff80e13          	addi	t3,a6,-1 # ffff <kheap__system_heap+0x154f>
     ebc:	0102d613          	srli	a2,t0,0x10
     ec0:	01c2f733          	and	a4,t0,t3
     ec4:	01035f13          	srli	t5,t1,0x10
     ec8:	01c37e33          	and	t3,t1,t3
     ecc:	02ee03b3          	mul	t2,t3,a4
     ed0:	03c604b3          	mul	s1,a2,t3
     ed4:	02ef0733          	mul	a4,t5,a4
     ed8:	03e60fb3          	mul	t6,a2,t5
     edc:	00970633          	add	a2,a4,s1
     ee0:	0103d713          	srli	a4,t2,0x10
     ee4:	00c70733          	add	a4,a4,a2
     ee8:	00977463          	bgeu	a4,s1,ef0 <__divdf3+0x32c>
     eec:	010f8fb3          	add	t6,t6,a6
     ef0:	01075613          	srli	a2,a4,0x10
     ef4:	01f60633          	add	a2,a2,t6
     ef8:	00010fb7          	lui	t6,0x10
     efc:	ffff8f93          	addi	t6,t6,-1 # ffff <kheap__system_heap+0x154f>
     f00:	01f77833          	and	a6,a4,t6
     f04:	01081813          	slli	a6,a6,0x10
     f08:	01f3f3b3          	and	t2,t2,t6
     f0c:	00780833          	add	a6,a6,t2
     f10:	00c46863          	bltu	s0,a2,f20 <__divdf3+0x35c>
     f14:	00028493          	mv	s1,t0
     f18:	04c41463          	bne	s0,a2,f60 <__divdf3+0x39c>
     f1c:	0507f263          	bgeu	a5,a6,f60 <__divdf3+0x39c>
     f20:	006787b3          	add	a5,a5,t1
     f24:	0067b733          	sltu	a4,a5,t1
     f28:	01170733          	add	a4,a4,a7
     f2c:	00e40433          	add	s0,s0,a4
     f30:	fff28493          	addi	s1,t0,-1
     f34:	0088e663          	bltu	a7,s0,f40 <__divdf3+0x37c>
     f38:	02889463          	bne	a7,s0,f60 <__divdf3+0x39c>
     f3c:	0267e263          	bltu	a5,t1,f60 <__divdf3+0x39c>
     f40:	00c46663          	bltu	s0,a2,f4c <__divdf3+0x388>
     f44:	00861e63          	bne	a2,s0,f60 <__divdf3+0x39c>
     f48:	0107fc63          	bgeu	a5,a6,f60 <__divdf3+0x39c>
     f4c:	006787b3          	add	a5,a5,t1
     f50:	0067b733          	sltu	a4,a5,t1
     f54:	01170733          	add	a4,a4,a7
     f58:	ffe28493          	addi	s1,t0,-2
     f5c:	00e40433          	add	s0,s0,a4
     f60:	41078833          	sub	a6,a5,a6
     f64:	40c40433          	sub	s0,s0,a2
     f68:	0107b7b3          	sltu	a5,a5,a6
     f6c:	40f40433          	sub	s0,s0,a5
     f70:	fff00f93          	li	t6,-1
     f74:	12888463          	beq	a7,s0,109c <__divdf3+0x4d8>
     f78:	02a45fb3          	divu	t6,s0,a0
     f7c:	01085713          	srli	a4,a6,0x10
     f80:	02a47433          	remu	s0,s0,a0
     f84:	000f8613          	mv	a2,t6
     f88:	03fe87b3          	mul	a5,t4,t6
     f8c:	01041413          	slli	s0,s0,0x10
     f90:	00876433          	or	s0,a4,s0
     f94:	00f47e63          	bgeu	s0,a5,fb0 <__divdf3+0x3ec>
     f98:	01140433          	add	s0,s0,a7
     f9c:	ffff8613          	addi	a2,t6,-1
     fa0:	01146863          	bltu	s0,a7,fb0 <__divdf3+0x3ec>
     fa4:	00f47663          	bgeu	s0,a5,fb0 <__divdf3+0x3ec>
     fa8:	ffef8613          	addi	a2,t6,-2
     fac:	01140433          	add	s0,s0,a7
     fb0:	40f40433          	sub	s0,s0,a5
     fb4:	02a45733          	divu	a4,s0,a0
     fb8:	01081813          	slli	a6,a6,0x10
     fbc:	01085813          	srli	a6,a6,0x10
     fc0:	02a47433          	remu	s0,s0,a0
     fc4:	00070793          	mv	a5,a4
     fc8:	02ee8eb3          	mul	t4,t4,a4
     fcc:	01041413          	slli	s0,s0,0x10
     fd0:	00886433          	or	s0,a6,s0
     fd4:	01d47e63          	bgeu	s0,t4,ff0 <__divdf3+0x42c>
     fd8:	01140433          	add	s0,s0,a7
     fdc:	fff70793          	addi	a5,a4,-1
     fe0:	01146863          	bltu	s0,a7,ff0 <__divdf3+0x42c>
     fe4:	01d47663          	bgeu	s0,t4,ff0 <__divdf3+0x42c>
     fe8:	ffe70793          	addi	a5,a4,-2
     fec:	01140433          	add	s0,s0,a7
     ff0:	01061613          	slli	a2,a2,0x10
     ff4:	00f66633          	or	a2,a2,a5
     ff8:	01061793          	slli	a5,a2,0x10
     ffc:	0107d793          	srli	a5,a5,0x10
    1000:	01065713          	srli	a4,a2,0x10
    1004:	02ef0833          	mul	a6,t5,a4
    1008:	41d40433          	sub	s0,s0,t4
    100c:	02ff0f33          	mul	t5,t5,a5
    1010:	03c78eb3          	mul	t4,a5,t3
    1014:	03c70e33          	mul	t3,a4,t3
    1018:	010ed793          	srli	a5,t4,0x10
    101c:	01cf0f33          	add	t5,t5,t3
    1020:	01e787b3          	add	a5,a5,t5
    1024:	01c7f663          	bgeu	a5,t3,1030 <__divdf3+0x46c>
    1028:	00010737          	lui	a4,0x10
    102c:	00e80833          	add	a6,a6,a4
    1030:	0107d713          	srli	a4,a5,0x10
    1034:	01070733          	add	a4,a4,a6
    1038:	00010837          	lui	a6,0x10
    103c:	fff80813          	addi	a6,a6,-1 # ffff <kheap__system_heap+0x154f>
    1040:	0107f533          	and	a0,a5,a6
    1044:	01051513          	slli	a0,a0,0x10
    1048:	010efeb3          	and	t4,t4,a6
    104c:	01d50533          	add	a0,a0,t4
    1050:	00e46863          	bltu	s0,a4,1060 <__divdf3+0x49c>
    1054:	24e41463          	bne	s0,a4,129c <__divdf3+0x6d8>
    1058:	00060f93          	mv	t6,a2
    105c:	04050063          	beqz	a0,109c <__divdf3+0x4d8>
    1060:	00888433          	add	s0,a7,s0
    1064:	fff60f93          	addi	t6,a2,-1
    1068:	03146463          	bltu	s0,a7,1090 <__divdf3+0x4cc>
    106c:	00e46663          	bltu	s0,a4,1078 <__divdf3+0x4b4>
    1070:	22e41463          	bne	s0,a4,1298 <__divdf3+0x6d4>
    1074:	02a37063          	bgeu	t1,a0,1094 <__divdf3+0x4d0>
    1078:	00131793          	slli	a5,t1,0x1
    107c:	0067b333          	sltu	t1,a5,t1
    1080:	011308b3          	add	a7,t1,a7
    1084:	ffe60f93          	addi	t6,a2,-2
    1088:	01140433          	add	s0,s0,a7
    108c:	00078313          	mv	t1,a5
    1090:	00e41463          	bne	s0,a4,1098 <__divdf3+0x4d4>
    1094:	00650463          	beq	a0,t1,109c <__divdf3+0x4d8>
    1098:	001fef93          	ori	t6,t6,1
    109c:	3ff58793          	addi	a5,a1,1023
    10a0:	10f05a63          	blez	a5,11b4 <__divdf3+0x5f0>
    10a4:	007ff713          	andi	a4,t6,7
    10a8:	02070063          	beqz	a4,10c8 <__divdf3+0x504>
    10ac:	00fff713          	andi	a4,t6,15
    10b0:	00400613          	li	a2,4
    10b4:	00c70a63          	beq	a4,a2,10c8 <__divdf3+0x504>
    10b8:	004f8613          	addi	a2,t6,4
    10bc:	01f63fb3          	sltu	t6,a2,t6
    10c0:	01f484b3          	add	s1,s1,t6
    10c4:	00060f93          	mv	t6,a2
    10c8:	01000737          	lui	a4,0x1000
    10cc:	00e4f733          	and	a4,s1,a4
    10d0:	00070a63          	beqz	a4,10e4 <__divdf3+0x520>
    10d4:	ff0007b7          	lui	a5,0xff000
    10d8:	fff78793          	addi	a5,a5,-1 # feffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xff000000>
    10dc:	00f4f4b3          	and	s1,s1,a5
    10e0:	40058793          	addi	a5,a1,1024
    10e4:	7fe00713          	li	a4,2046
    10e8:	0af74063          	blt	a4,a5,1188 <__divdf3+0x5c4>
    10ec:	003fdf93          	srli	t6,t6,0x3
    10f0:	01d49713          	slli	a4,s1,0x1d
    10f4:	01f76733          	or	a4,a4,t6
    10f8:	0034d513          	srli	a0,s1,0x3
    10fc:	01479793          	slli	a5,a5,0x14
    1100:	7ff00637          	lui	a2,0x7ff00
    1104:	00c51513          	slli	a0,a0,0xc
    1108:	02c12083          	lw	ra,44(sp)
    110c:	02812403          	lw	s0,40(sp)
    1110:	00c7f7b3          	and	a5,a5,a2
    1114:	00c55513          	srli	a0,a0,0xc
    1118:	00a7e533          	or	a0,a5,a0
    111c:	01f69693          	slli	a3,a3,0x1f
    1120:	00d567b3          	or	a5,a0,a3
    1124:	02412483          	lw	s1,36(sp)
    1128:	02012903          	lw	s2,32(sp)
    112c:	01c12983          	lw	s3,28(sp)
    1130:	01812a03          	lw	s4,24(sp)
    1134:	01412a83          	lw	s5,20(sp)
    1138:	01012b03          	lw	s6,16(sp)
    113c:	00c12b83          	lw	s7,12(sp)
    1140:	00812c03          	lw	s8,8(sp)
    1144:	00070513          	mv	a0,a4
    1148:	00078593          	mv	a1,a5
    114c:	03010113          	addi	sp,sp,48
    1150:	00008067          	ret
    1154:	fff58593          	addi	a1,a1,-1
    1158:	00000793          	li	a5,0
    115c:	cb9ff06f          	j	e14 <__divdf3+0x250>
    1160:	00098693          	mv	a3,s3
    1164:	000a8493          	mv	s1,s5
    1168:	00040f93          	mv	t6,s0
    116c:	000b8793          	mv	a5,s7
    1170:	00300713          	li	a4,3
    1174:	0ee78a63          	beq	a5,a4,1268 <__divdf3+0x6a4>
    1178:	00100713          	li	a4,1
    117c:	10e78063          	beq	a5,a4,127c <__divdf3+0x6b8>
    1180:	00200713          	li	a4,2
    1184:	f0e79ce3          	bne	a5,a4,109c <__divdf3+0x4d8>
    1188:	00000513          	li	a0,0
    118c:	00000713          	li	a4,0
    1190:	7ff00793          	li	a5,2047
    1194:	f69ff06f          	j	10fc <__divdf3+0x538>
    1198:	000c0693          	mv	a3,s8
    119c:	fd5ff06f          	j	1170 <__divdf3+0x5ac>
    11a0:	000804b7          	lui	s1,0x80
    11a4:	00000f93          	li	t6,0
    11a8:	00000693          	li	a3,0
    11ac:	00300793          	li	a5,3
    11b0:	fc1ff06f          	j	1170 <__divdf3+0x5ac>
    11b4:	00100513          	li	a0,1
    11b8:	40f50533          	sub	a0,a0,a5
    11bc:	03800713          	li	a4,56
    11c0:	0aa74e63          	blt	a4,a0,127c <__divdf3+0x6b8>
    11c4:	01f00713          	li	a4,31
    11c8:	06a74663          	blt	a4,a0,1234 <__divdf3+0x670>
    11cc:	41e58593          	addi	a1,a1,1054
    11d0:	00b497b3          	sll	a5,s1,a1
    11d4:	00afd733          	srl	a4,t6,a0
    11d8:	00bf95b3          	sll	a1,t6,a1
    11dc:	00e7e7b3          	or	a5,a5,a4
    11e0:	00b035b3          	snez	a1,a1
    11e4:	00b7e7b3          	or	a5,a5,a1
    11e8:	00a4d533          	srl	a0,s1,a0
    11ec:	0077f713          	andi	a4,a5,7
    11f0:	02070063          	beqz	a4,1210 <__divdf3+0x64c>
    11f4:	00f7f713          	andi	a4,a5,15
    11f8:	00400613          	li	a2,4
    11fc:	00c70a63          	beq	a4,a2,1210 <__divdf3+0x64c>
    1200:	00478713          	addi	a4,a5,4
    1204:	00f737b3          	sltu	a5,a4,a5
    1208:	00f50533          	add	a0,a0,a5
    120c:	00070793          	mv	a5,a4
    1210:	00800737          	lui	a4,0x800
    1214:	00e57733          	and	a4,a0,a4
    1218:	06071863          	bnez	a4,1288 <__divdf3+0x6c4>
    121c:	01d51713          	slli	a4,a0,0x1d
    1220:	0037d793          	srli	a5,a5,0x3
    1224:	00f76733          	or	a4,a4,a5
    1228:	00355513          	srli	a0,a0,0x3
    122c:	00000793          	li	a5,0
    1230:	ecdff06f          	j	10fc <__divdf3+0x538>
    1234:	fe100713          	li	a4,-31
    1238:	40f707b3          	sub	a5,a4,a5
    123c:	02000613          	li	a2,32
    1240:	00f4d7b3          	srl	a5,s1,a5
    1244:	00000713          	li	a4,0
    1248:	00c50663          	beq	a0,a2,1254 <__divdf3+0x690>
    124c:	43e58713          	addi	a4,a1,1086
    1250:	00e49733          	sll	a4,s1,a4
    1254:	01f76733          	or	a4,a4,t6
    1258:	00e03733          	snez	a4,a4
    125c:	00e7e7b3          	or	a5,a5,a4
    1260:	00000513          	li	a0,0
    1264:	f89ff06f          	j	11ec <__divdf3+0x628>
    1268:	00080537          	lui	a0,0x80
    126c:	00000713          	li	a4,0
    1270:	7ff00793          	li	a5,2047
    1274:	00000693          	li	a3,0
    1278:	e85ff06f          	j	10fc <__divdf3+0x538>
    127c:	00000513          	li	a0,0
    1280:	00000713          	li	a4,0
    1284:	fa9ff06f          	j	122c <__divdf3+0x668>
    1288:	00000513          	li	a0,0
    128c:	00000713          	li	a4,0
    1290:	00100793          	li	a5,1
    1294:	e69ff06f          	j	10fc <__divdf3+0x538>
    1298:	000f8613          	mv	a2,t6
    129c:	00060f93          	mv	t6,a2
    12a0:	df9ff06f          	j	1098 <__divdf3+0x4d4>

000012a4 <__gedf2>:
    12a4:	00100737          	lui	a4,0x100
    12a8:	fff70713          	addi	a4,a4,-1 # fffff <__data_region_end+0xd10ff>
    12ac:	0145d813          	srli	a6,a1,0x14
    12b0:	00b778b3          	and	a7,a4,a1
    12b4:	00050793          	mv	a5,a0
    12b8:	00050313          	mv	t1,a0
    12bc:	7ff87813          	andi	a6,a6,2047
    12c0:	01f5d513          	srli	a0,a1,0x1f
    12c4:	7ff00e93          	li	t4,2047
    12c8:	0146d593          	srli	a1,a3,0x14
    12cc:	00d77733          	and	a4,a4,a3
    12d0:	00060e13          	mv	t3,a2
    12d4:	7ff5f593          	andi	a1,a1,2047
    12d8:	01f6d693          	srli	a3,a3,0x1f
    12dc:	01d81a63          	bne	a6,t4,12f0 <__gedf2+0x4c>
    12e0:	00f8eeb3          	or	t4,a7,a5
    12e4:	080e8a63          	beqz	t4,1378 <__gedf2+0xd4>
    12e8:	ffe00513          	li	a0,-2
    12ec:	00008067          	ret
    12f0:	01d59663          	bne	a1,t4,12fc <__gedf2+0x58>
    12f4:	00c76eb3          	or	t4,a4,a2
    12f8:	fe0e98e3          	bnez	t4,12e8 <__gedf2+0x44>
    12fc:	08081063          	bnez	a6,137c <__gedf2+0xd8>
    1300:	00f8e7b3          	or	a5,a7,a5
    1304:	0017b793          	seqz	a5,a5
    1308:	00059663          	bnez	a1,1314 <__gedf2+0x70>
    130c:	00c76633          	or	a2,a4,a2
    1310:	04060c63          	beqz	a2,1368 <__gedf2+0xc4>
    1314:	00079c63          	bnez	a5,132c <__gedf2+0x88>
    1318:	00d51463          	bne	a0,a3,1320 <__gedf2+0x7c>
    131c:	0305d063          	bge	a1,a6,133c <__gedf2+0x98>
    1320:	04050063          	beqz	a0,1360 <__gedf2+0xbc>
    1324:	fff00513          	li	a0,-1
    1328:	00008067          	ret
    132c:	fff00513          	li	a0,-1
    1330:	00068a63          	beqz	a3,1344 <__gedf2+0xa0>
    1334:	00068513          	mv	a0,a3
    1338:	00008067          	ret
    133c:	00b85663          	bge	a6,a1,1348 <__gedf2+0xa4>
    1340:	fe0502e3          	beqz	a0,1324 <__gedf2+0x80>
    1344:	00008067          	ret
    1348:	fd176ce3          	bltu	a4,a7,1320 <__gedf2+0x7c>
    134c:	02e89263          	bne	a7,a4,1370 <__gedf2+0xcc>
    1350:	fc6e68e3          	bltu	t3,t1,1320 <__gedf2+0x7c>
    1354:	ffc366e3          	bltu	t1,t3,1340 <__gedf2+0x9c>
    1358:	00000513          	li	a0,0
    135c:	00008067          	ret
    1360:	00100513          	li	a0,1
    1364:	00008067          	ret
    1368:	fe0798e3          	bnez	a5,1358 <__gedf2+0xb4>
    136c:	fb5ff06f          	j	1320 <__gedf2+0x7c>
    1370:	fce8e8e3          	bltu	a7,a4,1340 <__gedf2+0x9c>
    1374:	fe5ff06f          	j	1358 <__gedf2+0xb4>
    1378:	f7058ee3          	beq	a1,a6,12f4 <__gedf2+0x50>
    137c:	f8059ee3          	bnez	a1,1318 <__gedf2+0x74>
    1380:	00000793          	li	a5,0
    1384:	f89ff06f          	j	130c <__gedf2+0x68>

00001388 <__muldf3>:
    1388:	fd010113          	addi	sp,sp,-48
    138c:	01312e23          	sw	s3,28(sp)
    1390:	0145d993          	srli	s3,a1,0x14
    1394:	02812423          	sw	s0,40(sp)
    1398:	02912223          	sw	s1,36(sp)
    139c:	01412c23          	sw	s4,24(sp)
    13a0:	01512a23          	sw	s5,20(sp)
    13a4:	01712623          	sw	s7,12(sp)
    13a8:	00c59493          	slli	s1,a1,0xc
    13ac:	02112623          	sw	ra,44(sp)
    13b0:	03212023          	sw	s2,32(sp)
    13b4:	01612823          	sw	s6,16(sp)
    13b8:	7ff9f993          	andi	s3,s3,2047
    13bc:	00050413          	mv	s0,a0
    13c0:	00060b93          	mv	s7,a2
    13c4:	00068a93          	mv	s5,a3
    13c8:	00c4d493          	srli	s1,s1,0xc
    13cc:	01f5da13          	srli	s4,a1,0x1f
    13d0:	0a098263          	beqz	s3,1474 <__muldf3+0xec>
    13d4:	7ff00793          	li	a5,2047
    13d8:	10f98063          	beq	s3,a5,14d8 <__muldf3+0x150>
    13dc:	01d55793          	srli	a5,a0,0x1d
    13e0:	00349493          	slli	s1,s1,0x3
    13e4:	0097e4b3          	or	s1,a5,s1
    13e8:	008007b7          	lui	a5,0x800
    13ec:	00f4e4b3          	or	s1,s1,a5
    13f0:	00351913          	slli	s2,a0,0x3
    13f4:	c0198993          	addi	s3,s3,-1023
    13f8:	00000b13          	li	s6,0
    13fc:	014ad513          	srli	a0,s5,0x14
    1400:	00ca9413          	slli	s0,s5,0xc
    1404:	7ff57513          	andi	a0,a0,2047
    1408:	00c45413          	srli	s0,s0,0xc
    140c:	01fada93          	srli	s5,s5,0x1f
    1410:	10050063          	beqz	a0,1510 <__muldf3+0x188>
    1414:	7ff00793          	li	a5,2047
    1418:	16f50063          	beq	a0,a5,1578 <__muldf3+0x1f0>
    141c:	01dbd793          	srli	a5,s7,0x1d
    1420:	00341413          	slli	s0,s0,0x3
    1424:	0087e433          	or	s0,a5,s0
    1428:	008007b7          	lui	a5,0x800
    142c:	00f46433          	or	s0,s0,a5
    1430:	c0150513          	addi	a0,a0,-1023 # 7fc01 <__data_region_end+0x50d01>
    1434:	003b9793          	slli	a5,s7,0x3
    1438:	00000713          	li	a4,0
    143c:	002b1693          	slli	a3,s6,0x2
    1440:	00e6e6b3          	or	a3,a3,a4
    1444:	00a98533          	add	a0,s3,a0
    1448:	fff68693          	addi	a3,a3,-1 # ffffff <__data_region_end+0xfd10ff>
    144c:	00e00813          	li	a6,14
    1450:	015a4633          	xor	a2,s4,s5
    1454:	00150593          	addi	a1,a0,1
    1458:	14d86c63          	bltu	a6,a3,15b0 <__muldf3+0x228>
    145c:	0000d537          	lui	a0,0xd
    1460:	00269693          	slli	a3,a3,0x2
    1464:	19850513          	addi	a0,a0,408 # d198 <__clz_tab+0x13c>
    1468:	00a686b3          	add	a3,a3,a0
    146c:	0006a683          	lw	a3,0(a3)
    1470:	00068067          	jr	a3
    1474:	00a4e933          	or	s2,s1,a0
    1478:	06090c63          	beqz	s2,14f0 <__muldf3+0x168>
    147c:	04048063          	beqz	s1,14bc <__muldf3+0x134>
    1480:	00048513          	mv	a0,s1
    1484:	e6dfe0ef          	jal	ra,2f0 <__clzsi2>
    1488:	ff550713          	addi	a4,a0,-11
    148c:	01c00793          	li	a5,28
    1490:	02e7cc63          	blt	a5,a4,14c8 <__muldf3+0x140>
    1494:	01d00793          	li	a5,29
    1498:	ff850913          	addi	s2,a0,-8
    149c:	40e787b3          	sub	a5,a5,a4
    14a0:	012494b3          	sll	s1,s1,s2
    14a4:	00f457b3          	srl	a5,s0,a5
    14a8:	0097e4b3          	or	s1,a5,s1
    14ac:	01241933          	sll	s2,s0,s2
    14b0:	c0d00993          	li	s3,-1011
    14b4:	40a989b3          	sub	s3,s3,a0
    14b8:	f41ff06f          	j	13f8 <__muldf3+0x70>
    14bc:	e35fe0ef          	jal	ra,2f0 <__clzsi2>
    14c0:	02050513          	addi	a0,a0,32
    14c4:	fc5ff06f          	j	1488 <__muldf3+0x100>
    14c8:	fd850493          	addi	s1,a0,-40
    14cc:	009414b3          	sll	s1,s0,s1
    14d0:	00000913          	li	s2,0
    14d4:	fddff06f          	j	14b0 <__muldf3+0x128>
    14d8:	00a4e933          	or	s2,s1,a0
    14dc:	02090263          	beqz	s2,1500 <__muldf3+0x178>
    14e0:	00050913          	mv	s2,a0
    14e4:	7ff00993          	li	s3,2047
    14e8:	00300b13          	li	s6,3
    14ec:	f11ff06f          	j	13fc <__muldf3+0x74>
    14f0:	00000493          	li	s1,0
    14f4:	00000993          	li	s3,0
    14f8:	00100b13          	li	s6,1
    14fc:	f01ff06f          	j	13fc <__muldf3+0x74>
    1500:	00000493          	li	s1,0
    1504:	7ff00993          	li	s3,2047
    1508:	00200b13          	li	s6,2
    150c:	ef1ff06f          	j	13fc <__muldf3+0x74>
    1510:	017467b3          	or	a5,s0,s7
    1514:	06078e63          	beqz	a5,1590 <__muldf3+0x208>
    1518:	04040063          	beqz	s0,1558 <__muldf3+0x1d0>
    151c:	00040513          	mv	a0,s0
    1520:	dd1fe0ef          	jal	ra,2f0 <__clzsi2>
    1524:	ff550693          	addi	a3,a0,-11
    1528:	01c00793          	li	a5,28
    152c:	02d7ce63          	blt	a5,a3,1568 <__muldf3+0x1e0>
    1530:	01d00713          	li	a4,29
    1534:	ff850793          	addi	a5,a0,-8
    1538:	40d70733          	sub	a4,a4,a3
    153c:	00f41433          	sll	s0,s0,a5
    1540:	00ebd733          	srl	a4,s7,a4
    1544:	00876433          	or	s0,a4,s0
    1548:	00fb97b3          	sll	a5,s7,a5
    154c:	c0d00713          	li	a4,-1011
    1550:	40a70533          	sub	a0,a4,a0
    1554:	ee5ff06f          	j	1438 <__muldf3+0xb0>
    1558:	000b8513          	mv	a0,s7
    155c:	d95fe0ef          	jal	ra,2f0 <__clzsi2>
    1560:	02050513          	addi	a0,a0,32
    1564:	fc1ff06f          	j	1524 <__muldf3+0x19c>
    1568:	fd850413          	addi	s0,a0,-40
    156c:	008b9433          	sll	s0,s7,s0
    1570:	00000793          	li	a5,0
    1574:	fd9ff06f          	j	154c <__muldf3+0x1c4>
    1578:	017467b3          	or	a5,s0,s7
    157c:	02078263          	beqz	a5,15a0 <__muldf3+0x218>
    1580:	000b8793          	mv	a5,s7
    1584:	7ff00513          	li	a0,2047
    1588:	00300713          	li	a4,3
    158c:	eb1ff06f          	j	143c <__muldf3+0xb4>
    1590:	00000413          	li	s0,0
    1594:	00000513          	li	a0,0
    1598:	00100713          	li	a4,1
    159c:	ea1ff06f          	j	143c <__muldf3+0xb4>
    15a0:	00000413          	li	s0,0
    15a4:	7ff00513          	li	a0,2047
    15a8:	00200713          	li	a4,2
    15ac:	e91ff06f          	j	143c <__muldf3+0xb4>
    15b0:	00010f37          	lui	t5,0x10
    15b4:	ffff0e93          	addi	t4,t5,-1 # ffff <kheap__system_heap+0x154f>
    15b8:	01095713          	srli	a4,s2,0x10
    15bc:	0107d893          	srli	a7,a5,0x10
    15c0:	01d97933          	and	s2,s2,t4
    15c4:	01d7f7b3          	and	a5,a5,t4
    15c8:	03288833          	mul	a6,a7,s2
    15cc:	02f906b3          	mul	a3,s2,a5
    15d0:	02f70fb3          	mul	t6,a4,a5
    15d4:	01f80333          	add	t1,a6,t6
    15d8:	0106d813          	srli	a6,a3,0x10
    15dc:	00680833          	add	a6,a6,t1
    15e0:	03170e33          	mul	t3,a4,a7
    15e4:	01f87463          	bgeu	a6,t6,15ec <__muldf3+0x264>
    15e8:	01ee0e33          	add	t3,t3,t5
    15ec:	01085393          	srli	t2,a6,0x10
    15f0:	01d87833          	and	a6,a6,t4
    15f4:	01d6f6b3          	and	a3,a3,t4
    15f8:	01045f13          	srli	t5,s0,0x10
    15fc:	01d472b3          	and	t0,s0,t4
    1600:	01081813          	slli	a6,a6,0x10
    1604:	00d80833          	add	a6,a6,a3
    1608:	02570eb3          	mul	t4,a4,t0
    160c:	025906b3          	mul	a3,s2,t0
    1610:	032f0933          	mul	s2,t5,s2
    1614:	01d90333          	add	t1,s2,t4
    1618:	0106d913          	srli	s2,a3,0x10
    161c:	00690933          	add	s2,s2,t1
    1620:	03e70733          	mul	a4,a4,t5
    1624:	01d97663          	bgeu	s2,t4,1630 <__muldf3+0x2a8>
    1628:	00010337          	lui	t1,0x10
    162c:	00670733          	add	a4,a4,t1
    1630:	01095e93          	srli	t4,s2,0x10
    1634:	000109b7          	lui	s3,0x10
    1638:	00ee8eb3          	add	t4,t4,a4
    163c:	fff98713          	addi	a4,s3,-1 # ffff <kheap__system_heap+0x154f>
    1640:	00e97933          	and	s2,s2,a4
    1644:	00e6f6b3          	and	a3,a3,a4
    1648:	0104d413          	srli	s0,s1,0x10
    164c:	01091913          	slli	s2,s2,0x10
    1650:	00e4f4b3          	and	s1,s1,a4
    1654:	02978733          	mul	a4,a5,s1
    1658:	00d90933          	add	s2,s2,a3
    165c:	012383b3          	add	t2,t2,s2
    1660:	02f40333          	mul	t1,s0,a5
    1664:	029886b3          	mul	a3,a7,s1
    1668:	028887b3          	mul	a5,a7,s0
    166c:	006688b3          	add	a7,a3,t1
    1670:	01075693          	srli	a3,a4,0x10
    1674:	011686b3          	add	a3,a3,a7
    1678:	0066f463          	bgeu	a3,t1,1680 <__muldf3+0x2f8>
    167c:	013787b3          	add	a5,a5,s3
    1680:	0106d893          	srli	a7,a3,0x10
    1684:	000109b7          	lui	s3,0x10
    1688:	00f88fb3          	add	t6,a7,a5
    168c:	fff98793          	addi	a5,s3,-1 # ffff <kheap__system_heap+0x154f>
    1690:	029288b3          	mul	a7,t0,s1
    1694:	00f6f6b3          	and	a3,a3,a5
    1698:	00f77733          	and	a4,a4,a5
    169c:	01069693          	slli	a3,a3,0x10
    16a0:	00e686b3          	add	a3,a3,a4
    16a4:	025407b3          	mul	a5,s0,t0
    16a8:	029f04b3          	mul	s1,t5,s1
    16ac:	028f0333          	mul	t1,t5,s0
    16b0:	00f484b3          	add	s1,s1,a5
    16b4:	0108d413          	srli	s0,a7,0x10
    16b8:	009404b3          	add	s1,s0,s1
    16bc:	00f4f463          	bgeu	s1,a5,16c4 <__muldf3+0x33c>
    16c0:	01330333          	add	t1,t1,s3
    16c4:	000107b7          	lui	a5,0x10
    16c8:	fff78793          	addi	a5,a5,-1 # ffff <kheap__system_heap+0x154f>
    16cc:	00f4f733          	and	a4,s1,a5
    16d0:	00f8f8b3          	and	a7,a7,a5
    16d4:	01071713          	slli	a4,a4,0x10
    16d8:	007e0e33          	add	t3,t3,t2
    16dc:	01170733          	add	a4,a4,a7
    16e0:	012e3933          	sltu	s2,t3,s2
    16e4:	01d70733          	add	a4,a4,t4
    16e8:	01270433          	add	s0,a4,s2
    16ec:	00de0e33          	add	t3,t3,a3
    16f0:	00de36b3          	sltu	a3,t3,a3
    16f4:	01f408b3          	add	a7,s0,t6
    16f8:	00d88f33          	add	t5,a7,a3
    16fc:	01d73733          	sltu	a4,a4,t4
    1700:	01243433          	sltu	s0,s0,s2
    1704:	00876433          	or	s0,a4,s0
    1708:	0104d493          	srli	s1,s1,0x10
    170c:	01f8b8b3          	sltu	a7,a7,t6
    1710:	00df36b3          	sltu	a3,t5,a3
    1714:	00940433          	add	s0,s0,s1
    1718:	00d8e6b3          	or	a3,a7,a3
    171c:	00d40433          	add	s0,s0,a3
    1720:	00640433          	add	s0,s0,t1
    1724:	017f5793          	srli	a5,t5,0x17
    1728:	00941413          	slli	s0,s0,0x9
    172c:	00f46433          	or	s0,s0,a5
    1730:	009e1793          	slli	a5,t3,0x9
    1734:	0107e7b3          	or	a5,a5,a6
    1738:	00f037b3          	snez	a5,a5
    173c:	017e5e13          	srli	t3,t3,0x17
    1740:	009f1713          	slli	a4,t5,0x9
    1744:	01c7e7b3          	or	a5,a5,t3
    1748:	00e7e7b3          	or	a5,a5,a4
    174c:	01000737          	lui	a4,0x1000
    1750:	00e47733          	and	a4,s0,a4
    1754:	10070663          	beqz	a4,1860 <__muldf3+0x4d8>
    1758:	0017d713          	srli	a4,a5,0x1
    175c:	0017f793          	andi	a5,a5,1
    1760:	00f767b3          	or	a5,a4,a5
    1764:	01f41713          	slli	a4,s0,0x1f
    1768:	00e7e7b3          	or	a5,a5,a4
    176c:	00145413          	srli	s0,s0,0x1
    1770:	3ff58693          	addi	a3,a1,1023
    1774:	0ed05a63          	blez	a3,1868 <__muldf3+0x4e0>
    1778:	0077f713          	andi	a4,a5,7
    177c:	02070063          	beqz	a4,179c <__muldf3+0x414>
    1780:	00f7f713          	andi	a4,a5,15
    1784:	00400513          	li	a0,4
    1788:	00a70a63          	beq	a4,a0,179c <__muldf3+0x414>
    178c:	00478713          	addi	a4,a5,4
    1790:	00f737b3          	sltu	a5,a4,a5
    1794:	00f40433          	add	s0,s0,a5
    1798:	00070793          	mv	a5,a4
    179c:	01000737          	lui	a4,0x1000
    17a0:	00e47733          	and	a4,s0,a4
    17a4:	00070a63          	beqz	a4,17b8 <__muldf3+0x430>
    17a8:	ff000737          	lui	a4,0xff000
    17ac:	fff70713          	addi	a4,a4,-1 # feffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xff000000>
    17b0:	00e47433          	and	s0,s0,a4
    17b4:	40058693          	addi	a3,a1,1024
    17b8:	7fe00713          	li	a4,2046
    17bc:	16d74a63          	blt	a4,a3,1930 <__muldf3+0x5a8>
    17c0:	0037d713          	srli	a4,a5,0x3
    17c4:	01d41793          	slli	a5,s0,0x1d
    17c8:	00e7e7b3          	or	a5,a5,a4
    17cc:	00345413          	srli	s0,s0,0x3
    17d0:	01469713          	slli	a4,a3,0x14
    17d4:	00c41413          	slli	s0,s0,0xc
    17d8:	7ff006b7          	lui	a3,0x7ff00
    17dc:	00d77733          	and	a4,a4,a3
    17e0:	00c45413          	srli	s0,s0,0xc
    17e4:	00876433          	or	s0,a4,s0
    17e8:	01f61613          	slli	a2,a2,0x1f
    17ec:	02c12083          	lw	ra,44(sp)
    17f0:	00c46733          	or	a4,s0,a2
    17f4:	02812403          	lw	s0,40(sp)
    17f8:	02412483          	lw	s1,36(sp)
    17fc:	02012903          	lw	s2,32(sp)
    1800:	01c12983          	lw	s3,28(sp)
    1804:	01812a03          	lw	s4,24(sp)
    1808:	01412a83          	lw	s5,20(sp)
    180c:	01012b03          	lw	s6,16(sp)
    1810:	00c12b83          	lw	s7,12(sp)
    1814:	00078513          	mv	a0,a5
    1818:	00070593          	mv	a1,a4
    181c:	03010113          	addi	sp,sp,48
    1820:	00008067          	ret
    1824:	000a0613          	mv	a2,s4
    1828:	00048413          	mv	s0,s1
    182c:	00090793          	mv	a5,s2
    1830:	000b0713          	mv	a4,s6
    1834:	00200693          	li	a3,2
    1838:	0ed70c63          	beq	a4,a3,1930 <__muldf3+0x5a8>
    183c:	00300693          	li	a3,3
    1840:	0cd70e63          	beq	a4,a3,191c <__muldf3+0x594>
    1844:	00100693          	li	a3,1
    1848:	f2d714e3          	bne	a4,a3,1770 <__muldf3+0x3e8>
    184c:	00000413          	li	s0,0
    1850:	00000793          	li	a5,0
    1854:	08c0006f          	j	18e0 <__muldf3+0x558>
    1858:	000a8613          	mv	a2,s5
    185c:	fd9ff06f          	j	1834 <__muldf3+0x4ac>
    1860:	00050593          	mv	a1,a0
    1864:	f0dff06f          	j	1770 <__muldf3+0x3e8>
    1868:	00100513          	li	a0,1
    186c:	40d50533          	sub	a0,a0,a3
    1870:	03800713          	li	a4,56
    1874:	fca74ce3          	blt	a4,a0,184c <__muldf3+0x4c4>
    1878:	01f00713          	li	a4,31
    187c:	06a74663          	blt	a4,a0,18e8 <__muldf3+0x560>
    1880:	41e58593          	addi	a1,a1,1054
    1884:	00b41733          	sll	a4,s0,a1
    1888:	00a7d6b3          	srl	a3,a5,a0
    188c:	00b797b3          	sll	a5,a5,a1
    1890:	00d76733          	or	a4,a4,a3
    1894:	00f037b3          	snez	a5,a5
    1898:	00f767b3          	or	a5,a4,a5
    189c:	00a45433          	srl	s0,s0,a0
    18a0:	0077f713          	andi	a4,a5,7
    18a4:	02070063          	beqz	a4,18c4 <__muldf3+0x53c>
    18a8:	00f7f713          	andi	a4,a5,15
    18ac:	00400693          	li	a3,4
    18b0:	00d70a63          	beq	a4,a3,18c4 <__muldf3+0x53c>
    18b4:	00478713          	addi	a4,a5,4
    18b8:	00f737b3          	sltu	a5,a4,a5
    18bc:	00f40433          	add	s0,s0,a5
    18c0:	00070793          	mv	a5,a4
    18c4:	00800737          	lui	a4,0x800
    18c8:	00e47733          	and	a4,s0,a4
    18cc:	06071a63          	bnez	a4,1940 <__muldf3+0x5b8>
    18d0:	01d41713          	slli	a4,s0,0x1d
    18d4:	0037d793          	srli	a5,a5,0x3
    18d8:	00f767b3          	or	a5,a4,a5
    18dc:	00345413          	srli	s0,s0,0x3
    18e0:	00000693          	li	a3,0
    18e4:	eedff06f          	j	17d0 <__muldf3+0x448>
    18e8:	fe100713          	li	a4,-31
    18ec:	40d70733          	sub	a4,a4,a3
    18f0:	02000813          	li	a6,32
    18f4:	00e45733          	srl	a4,s0,a4
    18f8:	00000693          	li	a3,0
    18fc:	01050663          	beq	a0,a6,1908 <__muldf3+0x580>
    1900:	43e58593          	addi	a1,a1,1086
    1904:	00b416b3          	sll	a3,s0,a1
    1908:	00f6e7b3          	or	a5,a3,a5
    190c:	00f037b3          	snez	a5,a5
    1910:	00f767b3          	or	a5,a4,a5
    1914:	00000413          	li	s0,0
    1918:	f89ff06f          	j	18a0 <__muldf3+0x518>
    191c:	00080437          	lui	s0,0x80
    1920:	00000793          	li	a5,0
    1924:	7ff00693          	li	a3,2047
    1928:	00000613          	li	a2,0
    192c:	ea5ff06f          	j	17d0 <__muldf3+0x448>
    1930:	00000413          	li	s0,0
    1934:	00000793          	li	a5,0
    1938:	7ff00693          	li	a3,2047
    193c:	e95ff06f          	j	17d0 <__muldf3+0x448>
    1940:	00000413          	li	s0,0
    1944:	00000793          	li	a5,0
    1948:	00100693          	li	a3,1
    194c:	e85ff06f          	j	17d0 <__muldf3+0x448>

00001950 <__subdf3>:
    1950:	00100837          	lui	a6,0x100
    1954:	fff80813          	addi	a6,a6,-1 # fffff <__data_region_end+0xd10ff>
    1958:	fe010113          	addi	sp,sp,-32
    195c:	00b877b3          	and	a5,a6,a1
    1960:	0145d713          	srli	a4,a1,0x14
    1964:	00d87833          	and	a6,a6,a3
    1968:	0146d313          	srli	t1,a3,0x14
    196c:	00812c23          	sw	s0,24(sp)
    1970:	00379793          	slli	a5,a5,0x3
    1974:	7ff77413          	andi	s0,a4,2047
    1978:	01d55713          	srli	a4,a0,0x1d
    197c:	00912a23          	sw	s1,20(sp)
    1980:	00f767b3          	or	a5,a4,a5
    1984:	01f5d493          	srli	s1,a1,0x1f
    1988:	01d65713          	srli	a4,a2,0x1d
    198c:	00351593          	slli	a1,a0,0x3
    1990:	00381813          	slli	a6,a6,0x3
    1994:	00112e23          	sw	ra,28(sp)
    1998:	01212823          	sw	s2,16(sp)
    199c:	01312623          	sw	s3,12(sp)
    19a0:	7ff37313          	andi	t1,t1,2047
    19a4:	7ff00513          	li	a0,2047
    19a8:	01f6d693          	srli	a3,a3,0x1f
    19ac:	01076733          	or	a4,a4,a6
    19b0:	00361613          	slli	a2,a2,0x3
    19b4:	00a31663          	bne	t1,a0,19c0 <__subdf3+0x70>
    19b8:	00c76533          	or	a0,a4,a2
    19bc:	00051463          	bnez	a0,19c4 <__subdf3+0x74>
    19c0:	0016c693          	xori	a3,a3,1
    19c4:	40640833          	sub	a6,s0,t1
    19c8:	2c969863          	bne	a3,s1,1c98 <__subdf3+0x348>
    19cc:	13005063          	blez	a6,1aec <__subdf3+0x19c>
    19d0:	04031063          	bnez	t1,1a10 <__subdf3+0xc0>
    19d4:	00c766b3          	or	a3,a4,a2
    19d8:	70068c63          	beqz	a3,20f0 <CONFIG_SRAM_SIZE+0xf0>
    19dc:	fff80513          	addi	a0,a6,-1
    19e0:	02051063          	bnez	a0,1a00 <__subdf3+0xb0>
    19e4:	00c58633          	add	a2,a1,a2
    19e8:	00b63533          	sltu	a0,a2,a1
    19ec:	00e787b3          	add	a5,a5,a4
    19f0:	00a787b3          	add	a5,a5,a0
    19f4:	00060593          	mv	a1,a2
    19f8:	00100413          	li	s0,1
    19fc:	0700006f          	j	1a6c <__subdf3+0x11c>
    1a00:	7ff00693          	li	a3,2047
    1a04:	02d81063          	bne	a6,a3,1a24 <__subdf3+0xd4>
    1a08:	7ff00413          	li	s0,2047
    1a0c:	2140006f          	j	1c20 <__subdf3+0x2d0>
    1a10:	7ff00693          	li	a3,2047
    1a14:	20d40663          	beq	s0,a3,1c20 <__subdf3+0x2d0>
    1a18:	008006b7          	lui	a3,0x800
    1a1c:	00d76733          	or	a4,a4,a3
    1a20:	00080513          	mv	a0,a6
    1a24:	03800693          	li	a3,56
    1a28:	0aa6cc63          	blt	a3,a0,1ae0 <__subdf3+0x190>
    1a2c:	01f00693          	li	a3,31
    1a30:	06a6ce63          	blt	a3,a0,1aac <__subdf3+0x15c>
    1a34:	02000813          	li	a6,32
    1a38:	40a80833          	sub	a6,a6,a0
    1a3c:	010716b3          	sll	a3,a4,a6
    1a40:	00a658b3          	srl	a7,a2,a0
    1a44:	01061633          	sll	a2,a2,a6
    1a48:	0116e6b3          	or	a3,a3,a7
    1a4c:	00c03633          	snez	a2,a2
    1a50:	00c6e633          	or	a2,a3,a2
    1a54:	00a75733          	srl	a4,a4,a0
    1a58:	00b60633          	add	a2,a2,a1
    1a5c:	00b63533          	sltu	a0,a2,a1
    1a60:	00f70733          	add	a4,a4,a5
    1a64:	00a707b3          	add	a5,a4,a0
    1a68:	00060593          	mv	a1,a2
    1a6c:	00800737          	lui	a4,0x800
    1a70:	00e7f733          	and	a4,a5,a4
    1a74:	1a070663          	beqz	a4,1c20 <__subdf3+0x2d0>
    1a78:	00140413          	addi	s0,s0,1 # 80001 <__data_region_end+0x51101>
    1a7c:	7ff00713          	li	a4,2047
    1a80:	5ce40a63          	beq	s0,a4,2054 <CONFIG_SRAM_SIZE+0x54>
    1a84:	ff800737          	lui	a4,0xff800
    1a88:	fff70713          	addi	a4,a4,-1 # ff7fffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xff800000>
    1a8c:	00e7f7b3          	and	a5,a5,a4
    1a90:	0015f513          	andi	a0,a1,1
    1a94:	0015d713          	srli	a4,a1,0x1
    1a98:	00a76533          	or	a0,a4,a0
    1a9c:	01f79593          	slli	a1,a5,0x1f
    1aa0:	00a5e5b3          	or	a1,a1,a0
    1aa4:	0017d793          	srli	a5,a5,0x1
    1aa8:	1780006f          	j	1c20 <__subdf3+0x2d0>
    1aac:	fe050693          	addi	a3,a0,-32
    1ab0:	02000893          	li	a7,32
    1ab4:	00d756b3          	srl	a3,a4,a3
    1ab8:	00000813          	li	a6,0
    1abc:	01150863          	beq	a0,a7,1acc <__subdf3+0x17c>
    1ac0:	04000813          	li	a6,64
    1ac4:	40a80533          	sub	a0,a6,a0
    1ac8:	00a71833          	sll	a6,a4,a0
    1acc:	00c86633          	or	a2,a6,a2
    1ad0:	00c03633          	snez	a2,a2
    1ad4:	00c6e633          	or	a2,a3,a2
    1ad8:	00000713          	li	a4,0
    1adc:	f7dff06f          	j	1a58 <__subdf3+0x108>
    1ae0:	00c76633          	or	a2,a4,a2
    1ae4:	00c03633          	snez	a2,a2
    1ae8:	ff1ff06f          	j	1ad8 <__subdf3+0x188>
    1aec:	0e080263          	beqz	a6,1bd0 <__subdf3+0x280>
    1af0:	40830533          	sub	a0,t1,s0
    1af4:	02041e63          	bnez	s0,1b30 <__subdf3+0x1e0>
    1af8:	00b7e6b3          	or	a3,a5,a1
    1afc:	52068c63          	beqz	a3,2034 <CONFIG_SRAM_SIZE+0x34>
    1b00:	fff50693          	addi	a3,a0,-1
    1b04:	00069c63          	bnez	a3,1b1c <__subdf3+0x1cc>
    1b08:	00c585b3          	add	a1,a1,a2
    1b0c:	00e787b3          	add	a5,a5,a4
    1b10:	00c5b633          	sltu	a2,a1,a2
    1b14:	00c787b3          	add	a5,a5,a2
    1b18:	ee1ff06f          	j	19f8 <__subdf3+0xa8>
    1b1c:	7ff00813          	li	a6,2047
    1b20:	03051263          	bne	a0,a6,1b44 <__subdf3+0x1f4>
    1b24:	00070793          	mv	a5,a4
    1b28:	00060593          	mv	a1,a2
    1b2c:	eddff06f          	j	1a08 <__subdf3+0xb8>
    1b30:	7ff00693          	li	a3,2047
    1b34:	fed308e3          	beq	t1,a3,1b24 <__subdf3+0x1d4>
    1b38:	008006b7          	lui	a3,0x800
    1b3c:	00d7e7b3          	or	a5,a5,a3
    1b40:	00050693          	mv	a3,a0
    1b44:	03800513          	li	a0,56
    1b48:	06d54e63          	blt	a0,a3,1bc4 <__subdf3+0x274>
    1b4c:	01f00513          	li	a0,31
    1b50:	04d54063          	blt	a0,a3,1b90 <__subdf3+0x240>
    1b54:	02000813          	li	a6,32
    1b58:	40d80833          	sub	a6,a6,a3
    1b5c:	01079533          	sll	a0,a5,a6
    1b60:	00d5d8b3          	srl	a7,a1,a3
    1b64:	010595b3          	sll	a1,a1,a6
    1b68:	01156533          	or	a0,a0,a7
    1b6c:	00b035b3          	snez	a1,a1
    1b70:	00b56533          	or	a0,a0,a1
    1b74:	00d7d7b3          	srl	a5,a5,a3
    1b78:	00c505b3          	add	a1,a0,a2
    1b7c:	00e787b3          	add	a5,a5,a4
    1b80:	00c5b633          	sltu	a2,a1,a2
    1b84:	00c787b3          	add	a5,a5,a2
    1b88:	00030413          	mv	s0,t1
    1b8c:	ee1ff06f          	j	1a6c <__subdf3+0x11c>
    1b90:	fe068513          	addi	a0,a3,-32 # 7fffe0 <__data_region_end+0x7d10e0>
    1b94:	02000893          	li	a7,32
    1b98:	00a7d833          	srl	a6,a5,a0
    1b9c:	00000513          	li	a0,0
    1ba0:	01168863          	beq	a3,a7,1bb0 <__subdf3+0x260>
    1ba4:	04000513          	li	a0,64
    1ba8:	40d50533          	sub	a0,a0,a3
    1bac:	00a79533          	sll	a0,a5,a0
    1bb0:	00b56533          	or	a0,a0,a1
    1bb4:	00a03533          	snez	a0,a0
    1bb8:	00a86533          	or	a0,a6,a0
    1bbc:	00000793          	li	a5,0
    1bc0:	fb9ff06f          	j	1b78 <__subdf3+0x228>
    1bc4:	00b7e533          	or	a0,a5,a1
    1bc8:	00a03533          	snez	a0,a0
    1bcc:	ff1ff06f          	j	1bbc <__subdf3+0x26c>
    1bd0:	00140693          	addi	a3,s0,1
    1bd4:	7fe6f513          	andi	a0,a3,2046
    1bd8:	08051863          	bnez	a0,1c68 <__subdf3+0x318>
    1bdc:	00b7e6b3          	or	a3,a5,a1
    1be0:	06041463          	bnez	s0,1c48 <__subdf3+0x2f8>
    1be4:	46068063          	beqz	a3,2044 <CONFIG_SRAM_SIZE+0x44>
    1be8:	00c766b3          	or	a3,a4,a2
    1bec:	02068a63          	beqz	a3,1c20 <__subdf3+0x2d0>
    1bf0:	00c58633          	add	a2,a1,a2
    1bf4:	00e787b3          	add	a5,a5,a4
    1bf8:	00b63533          	sltu	a0,a2,a1
    1bfc:	00a787b3          	add	a5,a5,a0
    1c00:	00800737          	lui	a4,0x800
    1c04:	00e7f733          	and	a4,a5,a4
    1c08:	00060593          	mv	a1,a2
    1c0c:	00070a63          	beqz	a4,1c20 <__subdf3+0x2d0>
    1c10:	ff800737          	lui	a4,0xff800
    1c14:	fff70713          	addi	a4,a4,-1 # ff7fffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xff800000>
    1c18:	00e7f7b3          	and	a5,a5,a4
    1c1c:	00100413          	li	s0,1
    1c20:	0075f713          	andi	a4,a1,7
    1c24:	42070c63          	beqz	a4,205c <CONFIG_SRAM_SIZE+0x5c>
    1c28:	00f5f713          	andi	a4,a1,15
    1c2c:	00400693          	li	a3,4
    1c30:	42d70663          	beq	a4,a3,205c <CONFIG_SRAM_SIZE+0x5c>
    1c34:	00458713          	addi	a4,a1,4
    1c38:	00b73533          	sltu	a0,a4,a1
    1c3c:	00a787b3          	add	a5,a5,a0
    1c40:	00070593          	mv	a1,a4
    1c44:	4180006f          	j	205c <CONFIG_SRAM_SIZE+0x5c>
    1c48:	ec068ee3          	beqz	a3,1b24 <__subdf3+0x1d4>
    1c4c:	00c76633          	or	a2,a4,a2
    1c50:	da060ce3          	beqz	a2,1a08 <__subdf3+0xb8>
    1c54:	00000493          	li	s1,0
    1c58:	004007b7          	lui	a5,0x400
    1c5c:	00000593          	li	a1,0
    1c60:	7ff00413          	li	s0,2047
    1c64:	3f80006f          	j	205c <CONFIG_SRAM_SIZE+0x5c>
    1c68:	7ff00513          	li	a0,2047
    1c6c:	3ea68263          	beq	a3,a0,2050 <CONFIG_SRAM_SIZE+0x50>
    1c70:	00c58633          	add	a2,a1,a2
    1c74:	00b63533          	sltu	a0,a2,a1
    1c78:	00e787b3          	add	a5,a5,a4
    1c7c:	00a787b3          	add	a5,a5,a0
    1c80:	01f79513          	slli	a0,a5,0x1f
    1c84:	00165613          	srli	a2,a2,0x1
    1c88:	00c565b3          	or	a1,a0,a2
    1c8c:	0017d793          	srli	a5,a5,0x1
    1c90:	00068413          	mv	s0,a3
    1c94:	f8dff06f          	j	1c20 <__subdf3+0x2d0>
    1c98:	0f005c63          	blez	a6,1d90 <__subdf3+0x440>
    1c9c:	08031e63          	bnez	t1,1d38 <__subdf3+0x3e8>
    1ca0:	00c766b3          	or	a3,a4,a2
    1ca4:	44068663          	beqz	a3,20f0 <CONFIG_SRAM_SIZE+0xf0>
    1ca8:	fff80513          	addi	a0,a6,-1
    1cac:	02051063          	bnez	a0,1ccc <__subdf3+0x37c>
    1cb0:	40c58633          	sub	a2,a1,a2
    1cb4:	00c5b533          	sltu	a0,a1,a2
    1cb8:	40e787b3          	sub	a5,a5,a4
    1cbc:	40a787b3          	sub	a5,a5,a0
    1cc0:	00060593          	mv	a1,a2
    1cc4:	00100413          	li	s0,1
    1cc8:	0540006f          	j	1d1c <__subdf3+0x3cc>
    1ccc:	7ff00693          	li	a3,2047
    1cd0:	d2d80ce3          	beq	a6,a3,1a08 <__subdf3+0xb8>
    1cd4:	03800693          	li	a3,56
    1cd8:	0aa6c663          	blt	a3,a0,1d84 <__subdf3+0x434>
    1cdc:	01f00693          	li	a3,31
    1ce0:	06a6c863          	blt	a3,a0,1d50 <__subdf3+0x400>
    1ce4:	02000813          	li	a6,32
    1ce8:	40a80833          	sub	a6,a6,a0
    1cec:	010716b3          	sll	a3,a4,a6
    1cf0:	00a658b3          	srl	a7,a2,a0
    1cf4:	01061633          	sll	a2,a2,a6
    1cf8:	0116e6b3          	or	a3,a3,a7
    1cfc:	00c03633          	snez	a2,a2
    1d00:	00c6e633          	or	a2,a3,a2
    1d04:	00a75733          	srl	a4,a4,a0
    1d08:	40c58633          	sub	a2,a1,a2
    1d0c:	00c5b533          	sltu	a0,a1,a2
    1d10:	40e78733          	sub	a4,a5,a4
    1d14:	40a707b3          	sub	a5,a4,a0
    1d18:	00060593          	mv	a1,a2
    1d1c:	00800937          	lui	s2,0x800
    1d20:	0127f733          	and	a4,a5,s2
    1d24:	ee070ee3          	beqz	a4,1c20 <__subdf3+0x2d0>
    1d28:	fff90913          	addi	s2,s2,-1 # 7fffff <__data_region_end+0x7d10ff>
    1d2c:	0127f933          	and	s2,a5,s2
    1d30:	00058993          	mv	s3,a1
    1d34:	2140006f          	j	1f48 <__subdf3+0x5f8>
    1d38:	7ff00693          	li	a3,2047
    1d3c:	eed402e3          	beq	s0,a3,1c20 <__subdf3+0x2d0>
    1d40:	008006b7          	lui	a3,0x800
    1d44:	00d76733          	or	a4,a4,a3
    1d48:	00080513          	mv	a0,a6
    1d4c:	f89ff06f          	j	1cd4 <__subdf3+0x384>
    1d50:	fe050693          	addi	a3,a0,-32
    1d54:	02000893          	li	a7,32
    1d58:	00d756b3          	srl	a3,a4,a3
    1d5c:	00000813          	li	a6,0
    1d60:	01150863          	beq	a0,a7,1d70 <__subdf3+0x420>
    1d64:	04000813          	li	a6,64
    1d68:	40a80533          	sub	a0,a6,a0
    1d6c:	00a71833          	sll	a6,a4,a0
    1d70:	00c86633          	or	a2,a6,a2
    1d74:	00c03633          	snez	a2,a2
    1d78:	00c6e633          	or	a2,a3,a2
    1d7c:	00000713          	li	a4,0
    1d80:	f89ff06f          	j	1d08 <__subdf3+0x3b8>
    1d84:	00c76633          	or	a2,a4,a2
    1d88:	00c03633          	snez	a2,a2
    1d8c:	ff1ff06f          	j	1d7c <__subdf3+0x42c>
    1d90:	0e080863          	beqz	a6,1e80 <__subdf3+0x530>
    1d94:	40830533          	sub	a0,t1,s0
    1d98:	04041263          	bnez	s0,1ddc <__subdf3+0x48c>
    1d9c:	00b7e833          	or	a6,a5,a1
    1da0:	34080c63          	beqz	a6,20f8 <CONFIG_SRAM_SIZE+0xf8>
    1da4:	fff50813          	addi	a6,a0,-1
    1da8:	00081e63          	bnez	a6,1dc4 <__subdf3+0x474>
    1dac:	40b605b3          	sub	a1,a2,a1
    1db0:	40f707b3          	sub	a5,a4,a5
    1db4:	00b63633          	sltu	a2,a2,a1
    1db8:	40c787b3          	sub	a5,a5,a2
    1dbc:	00068493          	mv	s1,a3
    1dc0:	f05ff06f          	j	1cc4 <__subdf3+0x374>
    1dc4:	7ff00893          	li	a7,2047
    1dc8:	03151463          	bne	a0,a7,1df0 <__subdf3+0x4a0>
    1dcc:	00070793          	mv	a5,a4
    1dd0:	00060593          	mv	a1,a2
    1dd4:	7ff00413          	li	s0,2047
    1dd8:	0d00006f          	j	1ea8 <__subdf3+0x558>
    1ddc:	7ff00813          	li	a6,2047
    1de0:	ff0306e3          	beq	t1,a6,1dcc <__subdf3+0x47c>
    1de4:	00800837          	lui	a6,0x800
    1de8:	0107e7b3          	or	a5,a5,a6
    1dec:	00050813          	mv	a6,a0
    1df0:	03800513          	li	a0,56
    1df4:	09054063          	blt	a0,a6,1e74 <__subdf3+0x524>
    1df8:	01f00513          	li	a0,31
    1dfc:	05054263          	blt	a0,a6,1e40 <__subdf3+0x4f0>
    1e00:	02000893          	li	a7,32
    1e04:	410888b3          	sub	a7,a7,a6
    1e08:	01179533          	sll	a0,a5,a7
    1e0c:	0105de33          	srl	t3,a1,a6
    1e10:	011595b3          	sll	a1,a1,a7
    1e14:	01c56533          	or	a0,a0,t3
    1e18:	00b035b3          	snez	a1,a1
    1e1c:	00b56533          	or	a0,a0,a1
    1e20:	0107d7b3          	srl	a5,a5,a6
    1e24:	40a605b3          	sub	a1,a2,a0
    1e28:	40f707b3          	sub	a5,a4,a5
    1e2c:	00b63633          	sltu	a2,a2,a1
    1e30:	40c787b3          	sub	a5,a5,a2
    1e34:	00030413          	mv	s0,t1
    1e38:	00068493          	mv	s1,a3
    1e3c:	ee1ff06f          	j	1d1c <__subdf3+0x3cc>
    1e40:	fe080513          	addi	a0,a6,-32 # 7fffe0 <__data_region_end+0x7d10e0>
    1e44:	02000e13          	li	t3,32
    1e48:	00a7d8b3          	srl	a7,a5,a0
    1e4c:	00000513          	li	a0,0
    1e50:	01c80863          	beq	a6,t3,1e60 <__subdf3+0x510>
    1e54:	04000513          	li	a0,64
    1e58:	41050533          	sub	a0,a0,a6
    1e5c:	00a79533          	sll	a0,a5,a0
    1e60:	00b56533          	or	a0,a0,a1
    1e64:	00a03533          	snez	a0,a0
    1e68:	00a8e533          	or	a0,a7,a0
    1e6c:	00000793          	li	a5,0
    1e70:	fb5ff06f          	j	1e24 <__subdf3+0x4d4>
    1e74:	00b7e533          	or	a0,a5,a1
    1e78:	00a03533          	snez	a0,a0
    1e7c:	ff1ff06f          	j	1e6c <__subdf3+0x51c>
    1e80:	00140513          	addi	a0,s0,1
    1e84:	7fe57513          	andi	a0,a0,2046
    1e88:	08051863          	bnez	a0,1f18 <__subdf3+0x5c8>
    1e8c:	00c76533          	or	a0,a4,a2
    1e90:	00b7e833          	or	a6,a5,a1
    1e94:	06041263          	bnez	s0,1ef8 <__subdf3+0x5a8>
    1e98:	00081c63          	bnez	a6,1eb0 <__subdf3+0x560>
    1e9c:	26050663          	beqz	a0,2108 <CONFIG_SRAM_SIZE+0x108>
    1ea0:	00070793          	mv	a5,a4
    1ea4:	00060593          	mv	a1,a2
    1ea8:	00068493          	mv	s1,a3
    1eac:	d75ff06f          	j	1c20 <__subdf3+0x2d0>
    1eb0:	d60508e3          	beqz	a0,1c20 <__subdf3+0x2d0>
    1eb4:	40c58833          	sub	a6,a1,a2
    1eb8:	0105b8b3          	sltu	a7,a1,a6
    1ebc:	40e78533          	sub	a0,a5,a4
    1ec0:	41150533          	sub	a0,a0,a7
    1ec4:	008008b7          	lui	a7,0x800
    1ec8:	011578b3          	and	a7,a0,a7
    1ecc:	00088c63          	beqz	a7,1ee4 <__subdf3+0x594>
    1ed0:	40b605b3          	sub	a1,a2,a1
    1ed4:	40f707b3          	sub	a5,a4,a5
    1ed8:	00b63633          	sltu	a2,a2,a1
    1edc:	40c787b3          	sub	a5,a5,a2
    1ee0:	fc9ff06f          	j	1ea8 <__subdf3+0x558>
    1ee4:	00a865b3          	or	a1,a6,a0
    1ee8:	22058863          	beqz	a1,2118 <CONFIG_SRAM_SIZE+0x118>
    1eec:	00050793          	mv	a5,a0
    1ef0:	00080593          	mv	a1,a6
    1ef4:	d2dff06f          	j	1c20 <__subdf3+0x2d0>
    1ef8:	00081c63          	bnez	a6,1f10 <__subdf3+0x5c0>
    1efc:	22050263          	beqz	a0,2120 <CONFIG_SRAM_SIZE+0x120>
    1f00:	00070793          	mv	a5,a4
    1f04:	00060593          	mv	a1,a2
    1f08:	00068493          	mv	s1,a3
    1f0c:	afdff06f          	j	1a08 <__subdf3+0xb8>
    1f10:	ae050ce3          	beqz	a0,1a08 <__subdf3+0xb8>
    1f14:	d41ff06f          	j	1c54 <__subdf3+0x304>
    1f18:	40c589b3          	sub	s3,a1,a2
    1f1c:	0135b533          	sltu	a0,a1,s3
    1f20:	40e78933          	sub	s2,a5,a4
    1f24:	40a90933          	sub	s2,s2,a0
    1f28:	00800537          	lui	a0,0x800
    1f2c:	00a97533          	and	a0,s2,a0
    1f30:	08050463          	beqz	a0,1fb8 <__subdf3+0x668>
    1f34:	40b609b3          	sub	s3,a2,a1
    1f38:	40f707b3          	sub	a5,a4,a5
    1f3c:	01363633          	sltu	a2,a2,s3
    1f40:	40c78933          	sub	s2,a5,a2
    1f44:	00068493          	mv	s1,a3
    1f48:	08090263          	beqz	s2,1fcc <__subdf3+0x67c>
    1f4c:	00090513          	mv	a0,s2
    1f50:	ba0fe0ef          	jal	ra,2f0 <__clzsi2>
    1f54:	ff850713          	addi	a4,a0,-8 # 7ffff8 <__data_region_end+0x7d10f8>
    1f58:	01f00793          	li	a5,31
    1f5c:	08e7c063          	blt	a5,a4,1fdc <__subdf3+0x68c>
    1f60:	02000793          	li	a5,32
    1f64:	40e787b3          	sub	a5,a5,a4
    1f68:	00e91933          	sll	s2,s2,a4
    1f6c:	00f9d7b3          	srl	a5,s3,a5
    1f70:	0127e7b3          	or	a5,a5,s2
    1f74:	00e995b3          	sll	a1,s3,a4
    1f78:	0a874463          	blt	a4,s0,2020 <CONFIG_SRAM_SIZE+0x20>
    1f7c:	40870733          	sub	a4,a4,s0
    1f80:	00170693          	addi	a3,a4,1
    1f84:	01f00613          	li	a2,31
    1f88:	06d64263          	blt	a2,a3,1fec <__subdf3+0x69c>
    1f8c:	02000713          	li	a4,32
    1f90:	40d70733          	sub	a4,a4,a3
    1f94:	00e79633          	sll	a2,a5,a4
    1f98:	00d5d533          	srl	a0,a1,a3
    1f9c:	00e595b3          	sll	a1,a1,a4
    1fa0:	00a66633          	or	a2,a2,a0
    1fa4:	00b035b3          	snez	a1,a1
    1fa8:	00b665b3          	or	a1,a2,a1
    1fac:	00d7d7b3          	srl	a5,a5,a3
    1fb0:	00000413          	li	s0,0
    1fb4:	c6dff06f          	j	1c20 <__subdf3+0x2d0>
    1fb8:	0129e5b3          	or	a1,s3,s2
    1fbc:	f80596e3          	bnez	a1,1f48 <__subdf3+0x5f8>
    1fc0:	00000793          	li	a5,0
    1fc4:	00000413          	li	s0,0
    1fc8:	1480006f          	j	2110 <CONFIG_SRAM_SIZE+0x110>
    1fcc:	00098513          	mv	a0,s3
    1fd0:	b20fe0ef          	jal	ra,2f0 <__clzsi2>
    1fd4:	02050513          	addi	a0,a0,32
    1fd8:	f7dff06f          	j	1f54 <__subdf3+0x604>
    1fdc:	fd850793          	addi	a5,a0,-40
    1fe0:	00f997b3          	sll	a5,s3,a5
    1fe4:	00000593          	li	a1,0
    1fe8:	f91ff06f          	j	1f78 <__subdf3+0x628>
    1fec:	fe170713          	addi	a4,a4,-31
    1ff0:	02000613          	li	a2,32
    1ff4:	00e7d733          	srl	a4,a5,a4
    1ff8:	00000513          	li	a0,0
    1ffc:	00c68863          	beq	a3,a2,200c <CONFIG_SRAM_SIZE+0xc>
    2000:	04000513          	li	a0,64
    2004:	40d50533          	sub	a0,a0,a3
    2008:	00a79533          	sll	a0,a5,a0
    200c:	00a5e533          	or	a0,a1,a0
    2010:	00a03533          	snez	a0,a0
    2014:	00a765b3          	or	a1,a4,a0
    2018:	00000793          	li	a5,0
    201c:	f95ff06f          	j	1fb0 <__subdf3+0x660>
    2020:	40e40433          	sub	s0,s0,a4
    2024:	ff800737          	lui	a4,0xff800
    2028:	fff70713          	addi	a4,a4,-1 # ff7fffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xff800000>
    202c:	00e7f7b3          	and	a5,a5,a4
    2030:	bf1ff06f          	j	1c20 <__subdf3+0x2d0>
    2034:	00070793          	mv	a5,a4
    2038:	00060593          	mv	a1,a2
    203c:	00050413          	mv	s0,a0
    2040:	be1ff06f          	j	1c20 <__subdf3+0x2d0>
    2044:	00070793          	mv	a5,a4
    2048:	00060593          	mv	a1,a2
    204c:	bd5ff06f          	j	1c20 <__subdf3+0x2d0>
    2050:	7ff00413          	li	s0,2047
    2054:	00000793          	li	a5,0
    2058:	00000593          	li	a1,0
    205c:	00800737          	lui	a4,0x800
    2060:	00e7f733          	and	a4,a5,a4
    2064:	00070e63          	beqz	a4,2080 <CONFIG_SRAM_SIZE+0x80>
    2068:	00140413          	addi	s0,s0,1
    206c:	7ff00713          	li	a4,2047
    2070:	0ce40063          	beq	s0,a4,2130 <CONFIG_SRAM_SIZE+0x130>
    2074:	ff800737          	lui	a4,0xff800
    2078:	fff70713          	addi	a4,a4,-1 # ff7fffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xff800000>
    207c:	00e7f7b3          	and	a5,a5,a4
    2080:	01d79713          	slli	a4,a5,0x1d
    2084:	0035d513          	srli	a0,a1,0x3
    2088:	00a76533          	or	a0,a4,a0
    208c:	7ff00713          	li	a4,2047
    2090:	0037d793          	srli	a5,a5,0x3
    2094:	00e41e63          	bne	s0,a4,20b0 <CONFIG_SRAM_SIZE+0xb0>
    2098:	00f56533          	or	a0,a0,a5
    209c:	00000793          	li	a5,0
    20a0:	00050863          	beqz	a0,20b0 <CONFIG_SRAM_SIZE+0xb0>
    20a4:	000807b7          	lui	a5,0x80
    20a8:	00000513          	li	a0,0
    20ac:	00000493          	li	s1,0
    20b0:	01441713          	slli	a4,s0,0x14
    20b4:	7ff006b7          	lui	a3,0x7ff00
    20b8:	00c79793          	slli	a5,a5,0xc
    20bc:	01c12083          	lw	ra,28(sp)
    20c0:	01812403          	lw	s0,24(sp)
    20c4:	00d77733          	and	a4,a4,a3
    20c8:	00c7d793          	srli	a5,a5,0xc
    20cc:	01f49493          	slli	s1,s1,0x1f
    20d0:	00f767b3          	or	a5,a4,a5
    20d4:	0097e733          	or	a4,a5,s1
    20d8:	01012903          	lw	s2,16(sp)
    20dc:	01412483          	lw	s1,20(sp)
    20e0:	00c12983          	lw	s3,12(sp)
    20e4:	00070593          	mv	a1,a4
    20e8:	02010113          	addi	sp,sp,32
    20ec:	00008067          	ret
    20f0:	00080413          	mv	s0,a6
    20f4:	b2dff06f          	j	1c20 <__subdf3+0x2d0>
    20f8:	00070793          	mv	a5,a4
    20fc:	00060593          	mv	a1,a2
    2100:	00050413          	mv	s0,a0
    2104:	da5ff06f          	j	1ea8 <__subdf3+0x558>
    2108:	00000793          	li	a5,0
    210c:	00000593          	li	a1,0
    2110:	00000493          	li	s1,0
    2114:	f49ff06f          	j	205c <CONFIG_SRAM_SIZE+0x5c>
    2118:	00000793          	li	a5,0
    211c:	ff5ff06f          	j	2110 <CONFIG_SRAM_SIZE+0x110>
    2120:	00000593          	li	a1,0
    2124:	00000493          	li	s1,0
    2128:	004007b7          	lui	a5,0x400
    212c:	b35ff06f          	j	1c60 <__subdf3+0x310>
    2130:	00000793          	li	a5,0
    2134:	00000593          	li	a1,0
    2138:	f49ff06f          	j	2080 <CONFIG_SRAM_SIZE+0x80>

0000213c <__floatunsidf>:
    213c:	ff010113          	addi	sp,sp,-16
    2140:	00812423          	sw	s0,8(sp)
    2144:	00112623          	sw	ra,12(sp)
    2148:	00050413          	mv	s0,a0
    214c:	06050263          	beqz	a0,21b0 <__floatunsidf+0x74>
    2150:	9a0fe0ef          	jal	ra,2f0 <__clzsi2>
    2154:	41e00713          	li	a4,1054
    2158:	00a00793          	li	a5,10
    215c:	40a70733          	sub	a4,a4,a0
    2160:	04a7c063          	blt	a5,a0,21a0 <__floatunsidf+0x64>
    2164:	00b00793          	li	a5,11
    2168:	40a787b3          	sub	a5,a5,a0
    216c:	01550513          	addi	a0,a0,21
    2170:	00f457b3          	srl	a5,s0,a5
    2174:	00a41433          	sll	s0,s0,a0
    2178:	00c12083          	lw	ra,12(sp)
    217c:	00040513          	mv	a0,s0
    2180:	00c79793          	slli	a5,a5,0xc
    2184:	00812403          	lw	s0,8(sp)
    2188:	01471713          	slli	a4,a4,0x14
    218c:	00c7d793          	srli	a5,a5,0xc
    2190:	00f766b3          	or	a3,a4,a5
    2194:	00068593          	mv	a1,a3
    2198:	01010113          	addi	sp,sp,16
    219c:	00008067          	ret
    21a0:	ff550793          	addi	a5,a0,-11
    21a4:	00f417b3          	sll	a5,s0,a5
    21a8:	00000413          	li	s0,0
    21ac:	fcdff06f          	j	2178 <__floatunsidf+0x3c>
    21b0:	00000793          	li	a5,0
    21b4:	00000713          	li	a4,0
    21b8:	fc1ff06f          	j	2178 <__floatunsidf+0x3c>

000021bc <__addsf3>:
    21bc:	00800737          	lui	a4,0x800
    21c0:	ff010113          	addi	sp,sp,-16
    21c4:	fff70713          	addi	a4,a4,-1 # 7fffff <__data_region_end+0x7d10ff>
    21c8:	00a777b3          	and	a5,a4,a0
    21cc:	00812423          	sw	s0,8(sp)
    21d0:	00912223          	sw	s1,4(sp)
    21d4:	01755413          	srli	s0,a0,0x17
    21d8:	01f55493          	srli	s1,a0,0x1f
    21dc:	0175d513          	srli	a0,a1,0x17
    21e0:	00b77733          	and	a4,a4,a1
    21e4:	0ff47413          	andi	s0,s0,255
    21e8:	0ff57513          	andi	a0,a0,255
    21ec:	00112623          	sw	ra,12(sp)
    21f0:	01212023          	sw	s2,0(sp)
    21f4:	01f5d593          	srli	a1,a1,0x1f
    21f8:	00379793          	slli	a5,a5,0x3
    21fc:	00371713          	slli	a4,a4,0x3
    2200:	40a406b3          	sub	a3,s0,a0
    2204:	18b49a63          	bne	s1,a1,2398 <__addsf3+0x1dc>
    2208:	0ad05063          	blez	a3,22a8 <__addsf3+0xec>
    220c:	02051663          	bnez	a0,2238 <__addsf3+0x7c>
    2210:	18070063          	beqz	a4,2390 <__addsf3+0x1d4>
    2214:	fff68613          	addi	a2,a3,-1 # 7fefffff <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7cf50f7f>
    2218:	00061863          	bnez	a2,2228 <__addsf3+0x6c>
    221c:	00e787b3          	add	a5,a5,a4
    2220:	00100413          	li	s0,1
    2224:	0500006f          	j	2274 <__addsf3+0xb8>
    2228:	0ff00593          	li	a1,255
    222c:	02b69063          	bne	a3,a1,224c <__addsf3+0x90>
    2230:	0ff00413          	li	s0,255
    2234:	1180006f          	j	234c <__addsf3+0x190>
    2238:	0ff00613          	li	a2,255
    223c:	10c40863          	beq	s0,a2,234c <__addsf3+0x190>
    2240:	04000637          	lui	a2,0x4000
    2244:	00c76733          	or	a4,a4,a2
    2248:	00068613          	mv	a2,a3
    224c:	01b00593          	li	a1,27
    2250:	00100693          	li	a3,1
    2254:	00c5ce63          	blt	a1,a2,2270 <__addsf3+0xb4>
    2258:	02000693          	li	a3,32
    225c:	40c686b3          	sub	a3,a3,a2
    2260:	00c755b3          	srl	a1,a4,a2
    2264:	00d71733          	sll	a4,a4,a3
    2268:	00e03733          	snez	a4,a4
    226c:	00e5e6b3          	or	a3,a1,a4
    2270:	00d787b3          	add	a5,a5,a3
    2274:	04000737          	lui	a4,0x4000
    2278:	00e7f733          	and	a4,a5,a4
    227c:	0c070863          	beqz	a4,234c <__addsf3+0x190>
    2280:	00140413          	addi	s0,s0,1
    2284:	0ff00713          	li	a4,255
    2288:	30e40263          	beq	s0,a4,258c <__addsf3+0x3d0>
    228c:	7e000737          	lui	a4,0x7e000
    2290:	0017f693          	andi	a3,a5,1
    2294:	fff70713          	addi	a4,a4,-1 # 7dffffff <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7b050f7f>
    2298:	0017d793          	srli	a5,a5,0x1
    229c:	00e7f7b3          	and	a5,a5,a4
    22a0:	00d7e7b3          	or	a5,a5,a3
    22a4:	0a80006f          	j	234c <__addsf3+0x190>
    22a8:	06068663          	beqz	a3,2314 <__addsf3+0x158>
    22ac:	408506b3          	sub	a3,a0,s0
    22b0:	02041063          	bnez	s0,22d0 <__addsf3+0x114>
    22b4:	2c078263          	beqz	a5,2578 <__addsf3+0x3bc>
    22b8:	fff68613          	addi	a2,a3,-1
    22bc:	f60600e3          	beqz	a2,221c <__addsf3+0x60>
    22c0:	0ff00593          	li	a1,255
    22c4:	02b69063          	bne	a3,a1,22e4 <__addsf3+0x128>
    22c8:	00070793          	mv	a5,a4
    22cc:	f65ff06f          	j	2230 <__addsf3+0x74>
    22d0:	0ff00613          	li	a2,255
    22d4:	fec50ae3          	beq	a0,a2,22c8 <__addsf3+0x10c>
    22d8:	04000637          	lui	a2,0x4000
    22dc:	00c7e7b3          	or	a5,a5,a2
    22e0:	00068613          	mv	a2,a3
    22e4:	01b00593          	li	a1,27
    22e8:	00100693          	li	a3,1
    22ec:	00c5ce63          	blt	a1,a2,2308 <__addsf3+0x14c>
    22f0:	02000693          	li	a3,32
    22f4:	40c686b3          	sub	a3,a3,a2
    22f8:	00c7d5b3          	srl	a1,a5,a2
    22fc:	00d797b3          	sll	a5,a5,a3
    2300:	00f037b3          	snez	a5,a5
    2304:	00f5e6b3          	or	a3,a1,a5
    2308:	00e687b3          	add	a5,a3,a4
    230c:	00050413          	mv	s0,a0
    2310:	f65ff06f          	j	2274 <__addsf3+0xb8>
    2314:	00140693          	addi	a3,s0,1
    2318:	0fe6f613          	andi	a2,a3,254
    231c:	06061263          	bnez	a2,2380 <__addsf3+0x1c4>
    2320:	04041463          	bnez	s0,2368 <__addsf3+0x1ac>
    2324:	24078e63          	beqz	a5,2580 <__addsf3+0x3c4>
    2328:	02070263          	beqz	a4,234c <__addsf3+0x190>
    232c:	00e787b3          	add	a5,a5,a4
    2330:	04000737          	lui	a4,0x4000
    2334:	00e7f733          	and	a4,a5,a4
    2338:	00070a63          	beqz	a4,234c <__addsf3+0x190>
    233c:	fc000737          	lui	a4,0xfc000
    2340:	fff70713          	addi	a4,a4,-1 # fbffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfc000000>
    2344:	00e7f7b3          	and	a5,a5,a4
    2348:	00100413          	li	s0,1
    234c:	0077f713          	andi	a4,a5,7
    2350:	24070063          	beqz	a4,2590 <__addsf3+0x3d4>
    2354:	00f7f713          	andi	a4,a5,15
    2358:	00400693          	li	a3,4
    235c:	22d70a63          	beq	a4,a3,2590 <__addsf3+0x3d4>
    2360:	00478793          	addi	a5,a5,4 # 400004 <__data_region_end+0x3d1104>
    2364:	22c0006f          	j	2590 <__addsf3+0x3d4>
    2368:	f60780e3          	beqz	a5,22c8 <__addsf3+0x10c>
    236c:	ec0702e3          	beqz	a4,2230 <__addsf3+0x74>
    2370:	00000493          	li	s1,0
    2374:	020007b7          	lui	a5,0x2000
    2378:	0ff00413          	li	s0,255
    237c:	2140006f          	j	2590 <__addsf3+0x3d4>
    2380:	0ff00613          	li	a2,255
    2384:	20c68263          	beq	a3,a2,2588 <__addsf3+0x3cc>
    2388:	00e787b3          	add	a5,a5,a4
    238c:	0017d793          	srli	a5,a5,0x1
    2390:	00068413          	mv	s0,a3
    2394:	fb9ff06f          	j	234c <__addsf3+0x190>
    2398:	08d05063          	blez	a3,2418 <__addsf3+0x25c>
    239c:	06051263          	bnez	a0,2400 <__addsf3+0x244>
    23a0:	fe0708e3          	beqz	a4,2390 <__addsf3+0x1d4>
    23a4:	fff68613          	addi	a2,a3,-1
    23a8:	00061863          	bnez	a2,23b8 <__addsf3+0x1fc>
    23ac:	40e787b3          	sub	a5,a5,a4
    23b0:	00100413          	li	s0,1
    23b4:	0340006f          	j	23e8 <__addsf3+0x22c>
    23b8:	0ff00593          	li	a1,255
    23bc:	e6b68ae3          	beq	a3,a1,2230 <__addsf3+0x74>
    23c0:	01b00593          	li	a1,27
    23c4:	00100693          	li	a3,1
    23c8:	00c5ce63          	blt	a1,a2,23e4 <__addsf3+0x228>
    23cc:	02000693          	li	a3,32
    23d0:	40c686b3          	sub	a3,a3,a2
    23d4:	00c755b3          	srl	a1,a4,a2
    23d8:	00d71733          	sll	a4,a4,a3
    23dc:	00e03733          	snez	a4,a4
    23e0:	00e5e6b3          	or	a3,a1,a4
    23e4:	40d787b3          	sub	a5,a5,a3
    23e8:	04000937          	lui	s2,0x4000
    23ec:	0127f733          	and	a4,a5,s2
    23f0:	f4070ee3          	beqz	a4,234c <__addsf3+0x190>
    23f4:	fff90913          	addi	s2,s2,-1 # 3ffffff <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1050f7f>
    23f8:	0127f933          	and	s2,a5,s2
    23fc:	1180006f          	j	2514 <__addsf3+0x358>
    2400:	0ff00613          	li	a2,255
    2404:	f4c404e3          	beq	s0,a2,234c <__addsf3+0x190>
    2408:	04000637          	lui	a2,0x4000
    240c:	00c76733          	or	a4,a4,a2
    2410:	00068613          	mv	a2,a3
    2414:	fadff06f          	j	23c0 <__addsf3+0x204>
    2418:	08068063          	beqz	a3,2498 <__addsf3+0x2dc>
    241c:	408506b3          	sub	a3,a0,s0
    2420:	02041863          	bnez	s0,2450 <__addsf3+0x294>
    2424:	1e078063          	beqz	a5,2604 <__addsf3+0x448>
    2428:	fff68613          	addi	a2,a3,-1
    242c:	00061863          	bnez	a2,243c <__addsf3+0x280>
    2430:	40f707b3          	sub	a5,a4,a5
    2434:	00058493          	mv	s1,a1
    2438:	f79ff06f          	j	23b0 <__addsf3+0x1f4>
    243c:	0ff00813          	li	a6,255
    2440:	03069263          	bne	a3,a6,2464 <__addsf3+0x2a8>
    2444:	00070793          	mv	a5,a4
    2448:	0ff00413          	li	s0,255
    244c:	06c0006f          	j	24b8 <__addsf3+0x2fc>
    2450:	0ff00613          	li	a2,255
    2454:	fec508e3          	beq	a0,a2,2444 <__addsf3+0x288>
    2458:	04000637          	lui	a2,0x4000
    245c:	00c7e7b3          	or	a5,a5,a2
    2460:	00068613          	mv	a2,a3
    2464:	01b00813          	li	a6,27
    2468:	00100693          	li	a3,1
    246c:	00c84e63          	blt	a6,a2,2488 <__addsf3+0x2cc>
    2470:	02000693          	li	a3,32
    2474:	40c686b3          	sub	a3,a3,a2
    2478:	00c7d833          	srl	a6,a5,a2
    247c:	00d797b3          	sll	a5,a5,a3
    2480:	00f037b3          	snez	a5,a5
    2484:	00f866b3          	or	a3,a6,a5
    2488:	40d707b3          	sub	a5,a4,a3
    248c:	00050413          	mv	s0,a0
    2490:	00058493          	mv	s1,a1
    2494:	f55ff06f          	j	23e8 <__addsf3+0x22c>
    2498:	00140693          	addi	a3,s0,1
    249c:	0fe6f693          	andi	a3,a3,254
    24a0:	04069e63          	bnez	a3,24fc <__addsf3+0x340>
    24a4:	04041263          	bnez	s0,24e8 <__addsf3+0x32c>
    24a8:	00079c63          	bnez	a5,24c0 <__addsf3+0x304>
    24ac:	00000493          	li	s1,0
    24b0:	0e070063          	beqz	a4,2590 <__addsf3+0x3d4>
    24b4:	00070793          	mv	a5,a4
    24b8:	00058493          	mv	s1,a1
    24bc:	e91ff06f          	j	234c <__addsf3+0x190>
    24c0:	e80706e3          	beqz	a4,234c <__addsf3+0x190>
    24c4:	40e786b3          	sub	a3,a5,a4
    24c8:	04000637          	lui	a2,0x4000
    24cc:	00c6f633          	and	a2,a3,a2
    24d0:	40f707b3          	sub	a5,a4,a5
    24d4:	fe0612e3          	bnez	a2,24b8 <__addsf3+0x2fc>
    24d8:	00000793          	li	a5,0
    24dc:	08068063          	beqz	a3,255c <__addsf3+0x3a0>
    24e0:	00068793          	mv	a5,a3
    24e4:	e69ff06f          	j	234c <__addsf3+0x190>
    24e8:	e80792e3          	bnez	a5,236c <__addsf3+0x1b0>
    24ec:	e80702e3          	beqz	a4,2370 <__addsf3+0x1b4>
    24f0:	00070793          	mv	a5,a4
    24f4:	00058493          	mv	s1,a1
    24f8:	d39ff06f          	j	2230 <__addsf3+0x74>
    24fc:	40e78933          	sub	s2,a5,a4
    2500:	040006b7          	lui	a3,0x4000
    2504:	00d976b3          	and	a3,s2,a3
    2508:	04068463          	beqz	a3,2550 <__addsf3+0x394>
    250c:	40f70933          	sub	s2,a4,a5
    2510:	00058493          	mv	s1,a1
    2514:	00090513          	mv	a0,s2
    2518:	dd9fd0ef          	jal	ra,2f0 <__clzsi2>
    251c:	ffb50513          	addi	a0,a0,-5
    2520:	00a91933          	sll	s2,s2,a0
    2524:	04854063          	blt	a0,s0,2564 <__addsf3+0x3a8>
    2528:	40850533          	sub	a0,a0,s0
    252c:	00150513          	addi	a0,a0,1
    2530:	02000413          	li	s0,32
    2534:	00a957b3          	srl	a5,s2,a0
    2538:	40a40533          	sub	a0,s0,a0
    253c:	00a91933          	sll	s2,s2,a0
    2540:	01203933          	snez	s2,s2
    2544:	0127e7b3          	or	a5,a5,s2
    2548:	00000413          	li	s0,0
    254c:	e01ff06f          	j	234c <__addsf3+0x190>
    2550:	fc0912e3          	bnez	s2,2514 <__addsf3+0x358>
    2554:	00000793          	li	a5,0
    2558:	00000413          	li	s0,0
    255c:	00000493          	li	s1,0
    2560:	0300006f          	j	2590 <__addsf3+0x3d4>
    2564:	fc0007b7          	lui	a5,0xfc000
    2568:	fff78793          	addi	a5,a5,-1 # fbffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfc000000>
    256c:	40a40433          	sub	s0,s0,a0
    2570:	00f977b3          	and	a5,s2,a5
    2574:	dd9ff06f          	j	234c <__addsf3+0x190>
    2578:	00070793          	mv	a5,a4
    257c:	e15ff06f          	j	2390 <__addsf3+0x1d4>
    2580:	00070793          	mv	a5,a4
    2584:	dc9ff06f          	j	234c <__addsf3+0x190>
    2588:	0ff00413          	li	s0,255
    258c:	00000793          	li	a5,0
    2590:	04000737          	lui	a4,0x4000
    2594:	00e7f733          	and	a4,a5,a4
    2598:	00070e63          	beqz	a4,25b4 <__addsf3+0x3f8>
    259c:	00140413          	addi	s0,s0,1
    25a0:	0ff00713          	li	a4,255
    25a4:	06e40663          	beq	s0,a4,2610 <__addsf3+0x454>
    25a8:	fc000737          	lui	a4,0xfc000
    25ac:	fff70713          	addi	a4,a4,-1 # fbffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfc000000>
    25b0:	00e7f7b3          	and	a5,a5,a4
    25b4:	0ff00713          	li	a4,255
    25b8:	0037d793          	srli	a5,a5,0x3
    25bc:	00e41863          	bne	s0,a4,25cc <__addsf3+0x410>
    25c0:	00078663          	beqz	a5,25cc <__addsf3+0x410>
    25c4:	004007b7          	lui	a5,0x400
    25c8:	00000493          	li	s1,0
    25cc:	7f800537          	lui	a0,0x7f800
    25d0:	01741413          	slli	s0,s0,0x17
    25d4:	00979793          	slli	a5,a5,0x9
    25d8:	00a47433          	and	s0,s0,a0
    25dc:	0097d793          	srli	a5,a5,0x9
    25e0:	00c12083          	lw	ra,12(sp)
    25e4:	00f467b3          	or	a5,s0,a5
    25e8:	00812403          	lw	s0,8(sp)
    25ec:	01f49513          	slli	a0,s1,0x1f
    25f0:	00012903          	lw	s2,0(sp)
    25f4:	00412483          	lw	s1,4(sp)
    25f8:	00a7e533          	or	a0,a5,a0
    25fc:	01010113          	addi	sp,sp,16
    2600:	00008067          	ret
    2604:	00070793          	mv	a5,a4
    2608:	00068413          	mv	s0,a3
    260c:	eadff06f          	j	24b8 <__addsf3+0x2fc>
    2610:	00000793          	li	a5,0
    2614:	fa1ff06f          	j	25b4 <__addsf3+0x3f8>

00002618 <__divsf3>:
    2618:	fe010113          	addi	sp,sp,-32
    261c:	00912a23          	sw	s1,20(sp)
    2620:	01755493          	srli	s1,a0,0x17
    2624:	01212823          	sw	s2,16(sp)
    2628:	01312623          	sw	s3,12(sp)
    262c:	01412423          	sw	s4,8(sp)
    2630:	00951993          	slli	s3,a0,0x9
    2634:	00112e23          	sw	ra,28(sp)
    2638:	00812c23          	sw	s0,24(sp)
    263c:	01512223          	sw	s5,4(sp)
    2640:	0ff4f493          	andi	s1,s1,255
    2644:	00058a13          	mv	s4,a1
    2648:	0099d993          	srli	s3,s3,0x9
    264c:	01f55913          	srli	s2,a0,0x1f
    2650:	08048463          	beqz	s1,26d8 <__divsf3+0xc0>
    2654:	0ff00793          	li	a5,255
    2658:	0af48063          	beq	s1,a5,26f8 <__divsf3+0xe0>
    265c:	00399993          	slli	s3,s3,0x3
    2660:	040007b7          	lui	a5,0x4000
    2664:	00f9e9b3          	or	s3,s3,a5
    2668:	f8148493          	addi	s1,s1,-127 # 7ff81 <__data_region_end+0x51081>
    266c:	00000a93          	li	s5,0
    2670:	017a5513          	srli	a0,s4,0x17
    2674:	009a1413          	slli	s0,s4,0x9
    2678:	0ff57513          	andi	a0,a0,255
    267c:	00945413          	srli	s0,s0,0x9
    2680:	01fa5a13          	srli	s4,s4,0x1f
    2684:	08050a63          	beqz	a0,2718 <__divsf3+0x100>
    2688:	0ff00793          	li	a5,255
    268c:	0af50663          	beq	a0,a5,2738 <__divsf3+0x120>
    2690:	00341413          	slli	s0,s0,0x3
    2694:	040007b7          	lui	a5,0x4000
    2698:	00f46433          	or	s0,s0,a5
    269c:	f8150513          	addi	a0,a0,-127 # 7f7fff81 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7c850f01>
    26a0:	00000793          	li	a5,0
    26a4:	002a9693          	slli	a3,s5,0x2
    26a8:	00f6e6b3          	or	a3,a3,a5
    26ac:	fff68693          	addi	a3,a3,-1 # 3ffffff <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1050f7f>
    26b0:	00e00713          	li	a4,14
    26b4:	01494633          	xor	a2,s2,s4
    26b8:	40a48533          	sub	a0,s1,a0
    26bc:	08d76e63          	bltu	a4,a3,2758 <__divsf3+0x140>
    26c0:	0000d737          	lui	a4,0xd
    26c4:	1d470713          	addi	a4,a4,468 # d1d4 <__clz_tab+0x178>
    26c8:	00269693          	slli	a3,a3,0x2
    26cc:	00e686b3          	add	a3,a3,a4
    26d0:	0006a703          	lw	a4,0(a3)
    26d4:	00070067          	jr	a4
    26d8:	02098a63          	beqz	s3,270c <__divsf3+0xf4>
    26dc:	00098513          	mv	a0,s3
    26e0:	c11fd0ef          	jal	ra,2f0 <__clzsi2>
    26e4:	ffb50793          	addi	a5,a0,-5
    26e8:	f8a00493          	li	s1,-118
    26ec:	00f999b3          	sll	s3,s3,a5
    26f0:	40a484b3          	sub	s1,s1,a0
    26f4:	f79ff06f          	j	266c <__divsf3+0x54>
    26f8:	0ff00493          	li	s1,255
    26fc:	00200a93          	li	s5,2
    2700:	f60988e3          	beqz	s3,2670 <__divsf3+0x58>
    2704:	00300a93          	li	s5,3
    2708:	f69ff06f          	j	2670 <__divsf3+0x58>
    270c:	00000493          	li	s1,0
    2710:	00100a93          	li	s5,1
    2714:	f5dff06f          	j	2670 <__divsf3+0x58>
    2718:	02040a63          	beqz	s0,274c <__divsf3+0x134>
    271c:	00040513          	mv	a0,s0
    2720:	bd1fd0ef          	jal	ra,2f0 <__clzsi2>
    2724:	ffb50793          	addi	a5,a0,-5
    2728:	00f41433          	sll	s0,s0,a5
    272c:	f8a00793          	li	a5,-118
    2730:	40a78533          	sub	a0,a5,a0
    2734:	f6dff06f          	j	26a0 <__divsf3+0x88>
    2738:	0ff00513          	li	a0,255
    273c:	00200793          	li	a5,2
    2740:	f60402e3          	beqz	s0,26a4 <__divsf3+0x8c>
    2744:	00300793          	li	a5,3
    2748:	f5dff06f          	j	26a4 <__divsf3+0x8c>
    274c:	00000513          	li	a0,0
    2750:	00100793          	li	a5,1
    2754:	f51ff06f          	j	26a4 <__divsf3+0x8c>
    2758:	00541813          	slli	a6,s0,0x5
    275c:	1289f463          	bgeu	s3,s0,2884 <__divsf3+0x26c>
    2760:	fff50513          	addi	a0,a0,-1
    2764:	00000693          	li	a3,0
    2768:	01085413          	srli	s0,a6,0x10
    276c:	0289d333          	divu	t1,s3,s0
    2770:	000107b7          	lui	a5,0x10
    2774:	fff78793          	addi	a5,a5,-1 # ffff <kheap__system_heap+0x154f>
    2778:	00f877b3          	and	a5,a6,a5
    277c:	0106d693          	srli	a3,a3,0x10
    2780:	0289f733          	remu	a4,s3,s0
    2784:	00030593          	mv	a1,t1
    2788:	026788b3          	mul	a7,a5,t1
    278c:	01071713          	slli	a4,a4,0x10
    2790:	00e6e733          	or	a4,a3,a4
    2794:	01177e63          	bgeu	a4,a7,27b0 <__divsf3+0x198>
    2798:	01070733          	add	a4,a4,a6
    279c:	fff30593          	addi	a1,t1,-1 # ffff <kheap__system_heap+0x154f>
    27a0:	01076863          	bltu	a4,a6,27b0 <__divsf3+0x198>
    27a4:	01177663          	bgeu	a4,a7,27b0 <__divsf3+0x198>
    27a8:	ffe30593          	addi	a1,t1,-2
    27ac:	01070733          	add	a4,a4,a6
    27b0:	41170733          	sub	a4,a4,a7
    27b4:	028758b3          	divu	a7,a4,s0
    27b8:	02877733          	remu	a4,a4,s0
    27bc:	031786b3          	mul	a3,a5,a7
    27c0:	01071793          	slli	a5,a4,0x10
    27c4:	00088713          	mv	a4,a7
    27c8:	00d7fe63          	bgeu	a5,a3,27e4 <__divsf3+0x1cc>
    27cc:	010787b3          	add	a5,a5,a6
    27d0:	fff88713          	addi	a4,a7,-1 # 7fffff <__data_region_end+0x7d10ff>
    27d4:	0107e863          	bltu	a5,a6,27e4 <__divsf3+0x1cc>
    27d8:	00d7f663          	bgeu	a5,a3,27e4 <__divsf3+0x1cc>
    27dc:	ffe88713          	addi	a4,a7,-2
    27e0:	010787b3          	add	a5,a5,a6
    27e4:	01059413          	slli	s0,a1,0x10
    27e8:	40d787b3          	sub	a5,a5,a3
    27ec:	00e46433          	or	s0,s0,a4
    27f0:	00f037b3          	snez	a5,a5
    27f4:	00f46433          	or	s0,s0,a5
    27f8:	07f50713          	addi	a4,a0,127
    27fc:	0ce05e63          	blez	a4,28d8 <__divsf3+0x2c0>
    2800:	00747793          	andi	a5,s0,7
    2804:	00078a63          	beqz	a5,2818 <__divsf3+0x200>
    2808:	00f47793          	andi	a5,s0,15
    280c:	00400693          	li	a3,4
    2810:	00d78463          	beq	a5,a3,2818 <__divsf3+0x200>
    2814:	00440413          	addi	s0,s0,4
    2818:	080007b7          	lui	a5,0x8000
    281c:	00f477b3          	and	a5,s0,a5
    2820:	00078a63          	beqz	a5,2834 <__divsf3+0x21c>
    2824:	f80007b7          	lui	a5,0xf8000
    2828:	fff78793          	addi	a5,a5,-1 # f7ffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xf8000000>
    282c:	00f47433          	and	s0,s0,a5
    2830:	08050713          	addi	a4,a0,128
    2834:	0fe00793          	li	a5,254
    2838:	00345413          	srli	s0,s0,0x3
    283c:	06e7cc63          	blt	a5,a4,28b4 <__divsf3+0x29c>
    2840:	01771793          	slli	a5,a4,0x17
    2844:	00941413          	slli	s0,s0,0x9
    2848:	7f800737          	lui	a4,0x7f800
    284c:	00e7f7b3          	and	a5,a5,a4
    2850:	00945413          	srli	s0,s0,0x9
    2854:	0087e433          	or	s0,a5,s0
    2858:	01f61513          	slli	a0,a2,0x1f
    285c:	01c12083          	lw	ra,28(sp)
    2860:	00a46533          	or	a0,s0,a0
    2864:	01812403          	lw	s0,24(sp)
    2868:	01412483          	lw	s1,20(sp)
    286c:	01012903          	lw	s2,16(sp)
    2870:	00c12983          	lw	s3,12(sp)
    2874:	00812a03          	lw	s4,8(sp)
    2878:	00412a83          	lw	s5,4(sp)
    287c:	02010113          	addi	sp,sp,32
    2880:	00008067          	ret
    2884:	01f99693          	slli	a3,s3,0x1f
    2888:	0019d993          	srli	s3,s3,0x1
    288c:	eddff06f          	j	2768 <__divsf3+0x150>
    2890:	00090613          	mv	a2,s2
    2894:	00098413          	mv	s0,s3
    2898:	000a8793          	mv	a5,s5
    289c:	00300713          	li	a4,3
    28a0:	08e78863          	beq	a5,a4,2930 <__divsf3+0x318>
    28a4:	00100713          	li	a4,1
    28a8:	08e78c63          	beq	a5,a4,2940 <__divsf3+0x328>
    28ac:	00200713          	li	a4,2
    28b0:	f4e794e3          	bne	a5,a4,27f8 <__divsf3+0x1e0>
    28b4:	00000413          	li	s0,0
    28b8:	0ff00713          	li	a4,255
    28bc:	f85ff06f          	j	2840 <__divsf3+0x228>
    28c0:	000a0613          	mv	a2,s4
    28c4:	fd9ff06f          	j	289c <__divsf3+0x284>
    28c8:	00400437          	lui	s0,0x400
    28cc:	00000613          	li	a2,0
    28d0:	00300793          	li	a5,3
    28d4:	fc9ff06f          	j	289c <__divsf3+0x284>
    28d8:	00100793          	li	a5,1
    28dc:	40e787b3          	sub	a5,a5,a4
    28e0:	01b00713          	li	a4,27
    28e4:	04f74e63          	blt	a4,a5,2940 <__divsf3+0x328>
    28e8:	09e50513          	addi	a0,a0,158
    28ec:	00f457b3          	srl	a5,s0,a5
    28f0:	00a41433          	sll	s0,s0,a0
    28f4:	00803433          	snez	s0,s0
    28f8:	0087e433          	or	s0,a5,s0
    28fc:	00747793          	andi	a5,s0,7
    2900:	00078a63          	beqz	a5,2914 <__divsf3+0x2fc>
    2904:	00f47793          	andi	a5,s0,15
    2908:	00400713          	li	a4,4
    290c:	00e78463          	beq	a5,a4,2914 <__divsf3+0x2fc>
    2910:	00440413          	addi	s0,s0,4 # 400004 <__data_region_end+0x3d1104>
    2914:	040007b7          	lui	a5,0x4000
    2918:	00f477b3          	and	a5,s0,a5
    291c:	00345413          	srli	s0,s0,0x3
    2920:	02078263          	beqz	a5,2944 <__divsf3+0x32c>
    2924:	00000413          	li	s0,0
    2928:	00100713          	li	a4,1
    292c:	f15ff06f          	j	2840 <__divsf3+0x228>
    2930:	00400437          	lui	s0,0x400
    2934:	0ff00713          	li	a4,255
    2938:	00000613          	li	a2,0
    293c:	f05ff06f          	j	2840 <__divsf3+0x228>
    2940:	00000413          	li	s0,0
    2944:	00000713          	li	a4,0
    2948:	ef9ff06f          	j	2840 <__divsf3+0x228>

0000294c <__mulsf3>:
    294c:	fe010113          	addi	sp,sp,-32
    2950:	01212823          	sw	s2,16(sp)
    2954:	01755913          	srli	s2,a0,0x17
    2958:	00912a23          	sw	s1,20(sp)
    295c:	01312623          	sw	s3,12(sp)
    2960:	01412423          	sw	s4,8(sp)
    2964:	00951493          	slli	s1,a0,0x9
    2968:	00112e23          	sw	ra,28(sp)
    296c:	00812c23          	sw	s0,24(sp)
    2970:	01512223          	sw	s5,4(sp)
    2974:	0ff97913          	andi	s2,s2,255
    2978:	00058a13          	mv	s4,a1
    297c:	0094d493          	srli	s1,s1,0x9
    2980:	01f55993          	srli	s3,a0,0x1f
    2984:	08090663          	beqz	s2,2a10 <__mulsf3+0xc4>
    2988:	0ff00793          	li	a5,255
    298c:	0af90263          	beq	s2,a5,2a30 <__mulsf3+0xe4>
    2990:	00349493          	slli	s1,s1,0x3
    2994:	040007b7          	lui	a5,0x4000
    2998:	00f4e4b3          	or	s1,s1,a5
    299c:	f8190913          	addi	s2,s2,-127
    29a0:	00000a93          	li	s5,0
    29a4:	017a5513          	srli	a0,s4,0x17
    29a8:	009a1413          	slli	s0,s4,0x9
    29ac:	0ff57513          	andi	a0,a0,255
    29b0:	00945413          	srli	s0,s0,0x9
    29b4:	01fa5a13          	srli	s4,s4,0x1f
    29b8:	08050c63          	beqz	a0,2a50 <__mulsf3+0x104>
    29bc:	0ff00793          	li	a5,255
    29c0:	0af50863          	beq	a0,a5,2a70 <__mulsf3+0x124>
    29c4:	00341413          	slli	s0,s0,0x3
    29c8:	040007b7          	lui	a5,0x4000
    29cc:	00f46433          	or	s0,s0,a5
    29d0:	f8150513          	addi	a0,a0,-127
    29d4:	00000793          	li	a5,0
    29d8:	002a9713          	slli	a4,s5,0x2
    29dc:	00f76733          	or	a4,a4,a5
    29e0:	00a90533          	add	a0,s2,a0
    29e4:	fff70713          	addi	a4,a4,-1 # 7f7fffff <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7c850f7f>
    29e8:	00e00593          	li	a1,14
    29ec:	0149c6b3          	xor	a3,s3,s4
    29f0:	00150613          	addi	a2,a0,1
    29f4:	08e5ee63          	bltu	a1,a4,2a90 <__mulsf3+0x144>
    29f8:	0000d5b7          	lui	a1,0xd
    29fc:	00271713          	slli	a4,a4,0x2
    2a00:	21058593          	addi	a1,a1,528 # d210 <__clz_tab+0x1b4>
    2a04:	00b70733          	add	a4,a4,a1
    2a08:	00072703          	lw	a4,0(a4)
    2a0c:	00070067          	jr	a4
    2a10:	02048a63          	beqz	s1,2a44 <__mulsf3+0xf8>
    2a14:	00048513          	mv	a0,s1
    2a18:	8d9fd0ef          	jal	ra,2f0 <__clzsi2>
    2a1c:	ffb50793          	addi	a5,a0,-5
    2a20:	f8a00913          	li	s2,-118
    2a24:	00f494b3          	sll	s1,s1,a5
    2a28:	40a90933          	sub	s2,s2,a0
    2a2c:	f75ff06f          	j	29a0 <__mulsf3+0x54>
    2a30:	0ff00913          	li	s2,255
    2a34:	00200a93          	li	s5,2
    2a38:	f60486e3          	beqz	s1,29a4 <__mulsf3+0x58>
    2a3c:	00300a93          	li	s5,3
    2a40:	f65ff06f          	j	29a4 <__mulsf3+0x58>
    2a44:	00000913          	li	s2,0
    2a48:	00100a93          	li	s5,1
    2a4c:	f59ff06f          	j	29a4 <__mulsf3+0x58>
    2a50:	02040a63          	beqz	s0,2a84 <__mulsf3+0x138>
    2a54:	00040513          	mv	a0,s0
    2a58:	899fd0ef          	jal	ra,2f0 <__clzsi2>
    2a5c:	ffb50793          	addi	a5,a0,-5
    2a60:	00f41433          	sll	s0,s0,a5
    2a64:	f8a00793          	li	a5,-118
    2a68:	40a78533          	sub	a0,a5,a0
    2a6c:	f69ff06f          	j	29d4 <__mulsf3+0x88>
    2a70:	0ff00513          	li	a0,255
    2a74:	00200793          	li	a5,2
    2a78:	f60400e3          	beqz	s0,29d8 <__mulsf3+0x8c>
    2a7c:	00300793          	li	a5,3
    2a80:	f59ff06f          	j	29d8 <__mulsf3+0x8c>
    2a84:	00000513          	li	a0,0
    2a88:	00100793          	li	a5,1
    2a8c:	f4dff06f          	j	29d8 <__mulsf3+0x8c>
    2a90:	000107b7          	lui	a5,0x10
    2a94:	fff78313          	addi	t1,a5,-1 # ffff <kheap__system_heap+0x154f>
    2a98:	0104d713          	srli	a4,s1,0x10
    2a9c:	01045593          	srli	a1,s0,0x10
    2aa0:	0064f4b3          	and	s1,s1,t1
    2aa4:	00647433          	and	s0,s0,t1
    2aa8:	029408b3          	mul	a7,s0,s1
    2aac:	02870833          	mul	a6,a4,s0
    2ab0:	02b70433          	mul	s0,a4,a1
    2ab4:	029585b3          	mul	a1,a1,s1
    2ab8:	0108d493          	srli	s1,a7,0x10
    2abc:	010585b3          	add	a1,a1,a6
    2ac0:	00b484b3          	add	s1,s1,a1
    2ac4:	0104f463          	bgeu	s1,a6,2acc <__mulsf3+0x180>
    2ac8:	00f40433          	add	s0,s0,a5
    2acc:	0064f7b3          	and	a5,s1,t1
    2ad0:	01079793          	slli	a5,a5,0x10
    2ad4:	0068f8b3          	and	a7,a7,t1
    2ad8:	011787b3          	add	a5,a5,a7
    2adc:	00679713          	slli	a4,a5,0x6
    2ae0:	0104d493          	srli	s1,s1,0x10
    2ae4:	00e03733          	snez	a4,a4
    2ae8:	01a7d793          	srli	a5,a5,0x1a
    2aec:	00848433          	add	s0,s1,s0
    2af0:	00f767b3          	or	a5,a4,a5
    2af4:	00641413          	slli	s0,s0,0x6
    2af8:	00f46433          	or	s0,s0,a5
    2afc:	080007b7          	lui	a5,0x8000
    2b00:	00f477b3          	and	a5,s0,a5
    2b04:	08078e63          	beqz	a5,2ba0 <__mulsf3+0x254>
    2b08:	00145793          	srli	a5,s0,0x1
    2b0c:	00147413          	andi	s0,s0,1
    2b10:	0087e433          	or	s0,a5,s0
    2b14:	07f60713          	addi	a4,a2,127 # 400007f <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1050fff>
    2b18:	08e05863          	blez	a4,2ba8 <__mulsf3+0x25c>
    2b1c:	00747793          	andi	a5,s0,7
    2b20:	00078a63          	beqz	a5,2b34 <__mulsf3+0x1e8>
    2b24:	00f47793          	andi	a5,s0,15
    2b28:	00400593          	li	a1,4
    2b2c:	00b78463          	beq	a5,a1,2b34 <__mulsf3+0x1e8>
    2b30:	00440413          	addi	s0,s0,4 # 400004 <__data_region_end+0x3d1104>
    2b34:	080007b7          	lui	a5,0x8000
    2b38:	00f477b3          	and	a5,s0,a5
    2b3c:	00078a63          	beqz	a5,2b50 <__mulsf3+0x204>
    2b40:	f80007b7          	lui	a5,0xf8000
    2b44:	fff78793          	addi	a5,a5,-1 # f7ffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xf8000000>
    2b48:	00f47433          	and	s0,s0,a5
    2b4c:	08060713          	addi	a4,a2,128
    2b50:	0fe00793          	li	a5,254
    2b54:	00345413          	srli	s0,s0,0x3
    2b58:	0ae7da63          	bge	a5,a4,2c0c <__mulsf3+0x2c0>
    2b5c:	00000413          	li	s0,0
    2b60:	0ff00713          	li	a4,255
    2b64:	0a80006f          	j	2c0c <__mulsf3+0x2c0>
    2b68:	00098693          	mv	a3,s3
    2b6c:	00048413          	mv	s0,s1
    2b70:	000a8793          	mv	a5,s5
    2b74:	00200713          	li	a4,2
    2b78:	fee782e3          	beq	a5,a4,2b5c <__mulsf3+0x210>
    2b7c:	00300713          	li	a4,3
    2b80:	08e78063          	beq	a5,a4,2c00 <__mulsf3+0x2b4>
    2b84:	00100713          	li	a4,1
    2b88:	f8e796e3          	bne	a5,a4,2b14 <__mulsf3+0x1c8>
    2b8c:	00000413          	li	s0,0
    2b90:	00000713          	li	a4,0
    2b94:	0780006f          	j	2c0c <__mulsf3+0x2c0>
    2b98:	000a0693          	mv	a3,s4
    2b9c:	fd9ff06f          	j	2b74 <__mulsf3+0x228>
    2ba0:	00050613          	mv	a2,a0
    2ba4:	f71ff06f          	j	2b14 <__mulsf3+0x1c8>
    2ba8:	00100793          	li	a5,1
    2bac:	40e787b3          	sub	a5,a5,a4
    2bb0:	01b00713          	li	a4,27
    2bb4:	fcf74ce3          	blt	a4,a5,2b8c <__mulsf3+0x240>
    2bb8:	09e60613          	addi	a2,a2,158
    2bbc:	00f457b3          	srl	a5,s0,a5
    2bc0:	00c41433          	sll	s0,s0,a2
    2bc4:	00803433          	snez	s0,s0
    2bc8:	0087e433          	or	s0,a5,s0
    2bcc:	00747793          	andi	a5,s0,7
    2bd0:	00078a63          	beqz	a5,2be4 <__mulsf3+0x298>
    2bd4:	00f47793          	andi	a5,s0,15
    2bd8:	00400713          	li	a4,4
    2bdc:	00e78463          	beq	a5,a4,2be4 <__mulsf3+0x298>
    2be0:	00440413          	addi	s0,s0,4
    2be4:	040007b7          	lui	a5,0x4000
    2be8:	00f477b3          	and	a5,s0,a5
    2bec:	00345413          	srli	s0,s0,0x3
    2bf0:	fa0780e3          	beqz	a5,2b90 <__mulsf3+0x244>
    2bf4:	00000413          	li	s0,0
    2bf8:	00100713          	li	a4,1
    2bfc:	0100006f          	j	2c0c <__mulsf3+0x2c0>
    2c00:	00400437          	lui	s0,0x400
    2c04:	0ff00713          	li	a4,255
    2c08:	00000693          	li	a3,0
    2c0c:	01771793          	slli	a5,a4,0x17
    2c10:	00941413          	slli	s0,s0,0x9
    2c14:	7f800737          	lui	a4,0x7f800
    2c18:	00e7f7b3          	and	a5,a5,a4
    2c1c:	00945413          	srli	s0,s0,0x9
    2c20:	0087e433          	or	s0,a5,s0
    2c24:	01f69513          	slli	a0,a3,0x1f
    2c28:	01c12083          	lw	ra,28(sp)
    2c2c:	00a46533          	or	a0,s0,a0
    2c30:	01812403          	lw	s0,24(sp)
    2c34:	01412483          	lw	s1,20(sp)
    2c38:	01012903          	lw	s2,16(sp)
    2c3c:	00c12983          	lw	s3,12(sp)
    2c40:	00812a03          	lw	s4,8(sp)
    2c44:	00412a83          	lw	s5,4(sp)
    2c48:	02010113          	addi	sp,sp,32
    2c4c:	00008067          	ret

00002c50 <__subsf3>:
    2c50:	00800737          	lui	a4,0x800
    2c54:	ff010113          	addi	sp,sp,-16
    2c58:	fff70713          	addi	a4,a4,-1 # 7fffff <__data_region_end+0x7d10ff>
    2c5c:	0175d613          	srli	a2,a1,0x17
    2c60:	00a777b3          	and	a5,a4,a0
    2c64:	00812423          	sw	s0,8(sp)
    2c68:	00b77733          	and	a4,a4,a1
    2c6c:	00912223          	sw	s1,4(sp)
    2c70:	01755413          	srli	s0,a0,0x17
    2c74:	00112623          	sw	ra,12(sp)
    2c78:	01212023          	sw	s2,0(sp)
    2c7c:	0ff67613          	andi	a2,a2,255
    2c80:	0ff00693          	li	a3,255
    2c84:	0ff47413          	andi	s0,s0,255
    2c88:	01f55493          	srli	s1,a0,0x1f
    2c8c:	00379793          	slli	a5,a5,0x3
    2c90:	01f5d593          	srli	a1,a1,0x1f
    2c94:	00371713          	slli	a4,a4,0x3
    2c98:	00d61463          	bne	a2,a3,2ca0 <__subsf3+0x50>
    2c9c:	00071463          	bnez	a4,2ca4 <__subsf3+0x54>
    2ca0:	0015c593          	xori	a1,a1,1
    2ca4:	40c406b3          	sub	a3,s0,a2
    2ca8:	18959a63          	bne	a1,s1,2e3c <__subsf3+0x1ec>
    2cac:	0ad05063          	blez	a3,2d4c <__subsf3+0xfc>
    2cb0:	02061663          	bnez	a2,2cdc <__subsf3+0x8c>
    2cb4:	18070063          	beqz	a4,2e34 <__subsf3+0x1e4>
    2cb8:	fff68613          	addi	a2,a3,-1
    2cbc:	00061863          	bnez	a2,2ccc <__subsf3+0x7c>
    2cc0:	00e787b3          	add	a5,a5,a4
    2cc4:	00100413          	li	s0,1
    2cc8:	0500006f          	j	2d18 <__subsf3+0xc8>
    2ccc:	0ff00593          	li	a1,255
    2cd0:	02b69063          	bne	a3,a1,2cf0 <__subsf3+0xa0>
    2cd4:	0ff00413          	li	s0,255
    2cd8:	1180006f          	j	2df0 <__subsf3+0x1a0>
    2cdc:	0ff00613          	li	a2,255
    2ce0:	10c40863          	beq	s0,a2,2df0 <__subsf3+0x1a0>
    2ce4:	04000637          	lui	a2,0x4000
    2ce8:	00c76733          	or	a4,a4,a2
    2cec:	00068613          	mv	a2,a3
    2cf0:	01b00593          	li	a1,27
    2cf4:	00100693          	li	a3,1
    2cf8:	00c5ce63          	blt	a1,a2,2d14 <__subsf3+0xc4>
    2cfc:	02000693          	li	a3,32
    2d00:	40c686b3          	sub	a3,a3,a2
    2d04:	00c755b3          	srl	a1,a4,a2
    2d08:	00d71733          	sll	a4,a4,a3
    2d0c:	00e03733          	snez	a4,a4
    2d10:	00e5e6b3          	or	a3,a1,a4
    2d14:	00d787b3          	add	a5,a5,a3
    2d18:	04000737          	lui	a4,0x4000
    2d1c:	00e7f733          	and	a4,a5,a4
    2d20:	0c070863          	beqz	a4,2df0 <__subsf3+0x1a0>
    2d24:	00140413          	addi	s0,s0,1 # 400001 <__data_region_end+0x3d1101>
    2d28:	0ff00713          	li	a4,255
    2d2c:	30e40263          	beq	s0,a4,3030 <__subsf3+0x3e0>
    2d30:	7e000737          	lui	a4,0x7e000
    2d34:	0017f693          	andi	a3,a5,1
    2d38:	fff70713          	addi	a4,a4,-1 # 7dffffff <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7b050f7f>
    2d3c:	0017d793          	srli	a5,a5,0x1
    2d40:	00e7f7b3          	and	a5,a5,a4
    2d44:	00d7e7b3          	or	a5,a5,a3
    2d48:	0a80006f          	j	2df0 <__subsf3+0x1a0>
    2d4c:	06068663          	beqz	a3,2db8 <__subsf3+0x168>
    2d50:	408606b3          	sub	a3,a2,s0
    2d54:	02041063          	bnez	s0,2d74 <__subsf3+0x124>
    2d58:	2c078263          	beqz	a5,301c <__subsf3+0x3cc>
    2d5c:	fff68593          	addi	a1,a3,-1
    2d60:	f60580e3          	beqz	a1,2cc0 <__subsf3+0x70>
    2d64:	0ff00513          	li	a0,255
    2d68:	02a69063          	bne	a3,a0,2d88 <__subsf3+0x138>
    2d6c:	00070793          	mv	a5,a4
    2d70:	f65ff06f          	j	2cd4 <__subsf3+0x84>
    2d74:	0ff00593          	li	a1,255
    2d78:	feb60ae3          	beq	a2,a1,2d6c <__subsf3+0x11c>
    2d7c:	040005b7          	lui	a1,0x4000
    2d80:	00b7e7b3          	or	a5,a5,a1
    2d84:	00068593          	mv	a1,a3
    2d88:	01b00513          	li	a0,27
    2d8c:	00100693          	li	a3,1
    2d90:	00b54e63          	blt	a0,a1,2dac <__subsf3+0x15c>
    2d94:	02000693          	li	a3,32
    2d98:	40b686b3          	sub	a3,a3,a1
    2d9c:	00b7d533          	srl	a0,a5,a1
    2da0:	00d797b3          	sll	a5,a5,a3
    2da4:	00f037b3          	snez	a5,a5
    2da8:	00f566b3          	or	a3,a0,a5
    2dac:	00e687b3          	add	a5,a3,a4
    2db0:	00060413          	mv	s0,a2
    2db4:	f65ff06f          	j	2d18 <__subsf3+0xc8>
    2db8:	00140693          	addi	a3,s0,1
    2dbc:	0fe6f613          	andi	a2,a3,254
    2dc0:	06061263          	bnez	a2,2e24 <__subsf3+0x1d4>
    2dc4:	04041463          	bnez	s0,2e0c <__subsf3+0x1bc>
    2dc8:	24078e63          	beqz	a5,3024 <__subsf3+0x3d4>
    2dcc:	02070263          	beqz	a4,2df0 <__subsf3+0x1a0>
    2dd0:	00e787b3          	add	a5,a5,a4
    2dd4:	04000737          	lui	a4,0x4000
    2dd8:	00e7f733          	and	a4,a5,a4
    2ddc:	00070a63          	beqz	a4,2df0 <__subsf3+0x1a0>
    2de0:	fc000737          	lui	a4,0xfc000
    2de4:	fff70713          	addi	a4,a4,-1 # fbffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfc000000>
    2de8:	00e7f7b3          	and	a5,a5,a4
    2dec:	00100413          	li	s0,1
    2df0:	0077f713          	andi	a4,a5,7
    2df4:	24070063          	beqz	a4,3034 <__subsf3+0x3e4>
    2df8:	00f7f713          	andi	a4,a5,15
    2dfc:	00400693          	li	a3,4
    2e00:	22d70a63          	beq	a4,a3,3034 <__subsf3+0x3e4>
    2e04:	00478793          	addi	a5,a5,4 # 4000004 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1050f84>
    2e08:	22c0006f          	j	3034 <__subsf3+0x3e4>
    2e0c:	f60780e3          	beqz	a5,2d6c <__subsf3+0x11c>
    2e10:	ec0702e3          	beqz	a4,2cd4 <__subsf3+0x84>
    2e14:	00000493          	li	s1,0
    2e18:	020007b7          	lui	a5,0x2000
    2e1c:	0ff00413          	li	s0,255
    2e20:	2140006f          	j	3034 <__subsf3+0x3e4>
    2e24:	0ff00613          	li	a2,255
    2e28:	20c68263          	beq	a3,a2,302c <__subsf3+0x3dc>
    2e2c:	00e787b3          	add	a5,a5,a4
    2e30:	0017d793          	srli	a5,a5,0x1
    2e34:	00068413          	mv	s0,a3
    2e38:	fb9ff06f          	j	2df0 <__subsf3+0x1a0>
    2e3c:	08d05063          	blez	a3,2ebc <__subsf3+0x26c>
    2e40:	06061263          	bnez	a2,2ea4 <__subsf3+0x254>
    2e44:	fe0708e3          	beqz	a4,2e34 <__subsf3+0x1e4>
    2e48:	fff68613          	addi	a2,a3,-1
    2e4c:	00061863          	bnez	a2,2e5c <__subsf3+0x20c>
    2e50:	40e787b3          	sub	a5,a5,a4
    2e54:	00100413          	li	s0,1
    2e58:	0340006f          	j	2e8c <__subsf3+0x23c>
    2e5c:	0ff00593          	li	a1,255
    2e60:	e6b68ae3          	beq	a3,a1,2cd4 <__subsf3+0x84>
    2e64:	01b00593          	li	a1,27
    2e68:	00100693          	li	a3,1
    2e6c:	00c5ce63          	blt	a1,a2,2e88 <__subsf3+0x238>
    2e70:	02000693          	li	a3,32
    2e74:	40c686b3          	sub	a3,a3,a2
    2e78:	00c755b3          	srl	a1,a4,a2
    2e7c:	00d71733          	sll	a4,a4,a3
    2e80:	00e03733          	snez	a4,a4
    2e84:	00e5e6b3          	or	a3,a1,a4
    2e88:	40d787b3          	sub	a5,a5,a3
    2e8c:	04000937          	lui	s2,0x4000
    2e90:	0127f733          	and	a4,a5,s2
    2e94:	f4070ee3          	beqz	a4,2df0 <__subsf3+0x1a0>
    2e98:	fff90913          	addi	s2,s2,-1 # 3ffffff <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1050f7f>
    2e9c:	0127f933          	and	s2,a5,s2
    2ea0:	1180006f          	j	2fb8 <__subsf3+0x368>
    2ea4:	0ff00613          	li	a2,255
    2ea8:	f4c404e3          	beq	s0,a2,2df0 <__subsf3+0x1a0>
    2eac:	04000637          	lui	a2,0x4000
    2eb0:	00c76733          	or	a4,a4,a2
    2eb4:	00068613          	mv	a2,a3
    2eb8:	fadff06f          	j	2e64 <__subsf3+0x214>
    2ebc:	08068063          	beqz	a3,2f3c <__subsf3+0x2ec>
    2ec0:	408606b3          	sub	a3,a2,s0
    2ec4:	02041863          	bnez	s0,2ef4 <__subsf3+0x2a4>
    2ec8:	1e078063          	beqz	a5,30a8 <__subsf3+0x458>
    2ecc:	fff68513          	addi	a0,a3,-1
    2ed0:	00051863          	bnez	a0,2ee0 <__subsf3+0x290>
    2ed4:	40f707b3          	sub	a5,a4,a5
    2ed8:	00058493          	mv	s1,a1
    2edc:	f79ff06f          	j	2e54 <__subsf3+0x204>
    2ee0:	0ff00813          	li	a6,255
    2ee4:	03069263          	bne	a3,a6,2f08 <__subsf3+0x2b8>
    2ee8:	00070793          	mv	a5,a4
    2eec:	0ff00413          	li	s0,255
    2ef0:	06c0006f          	j	2f5c <__subsf3+0x30c>
    2ef4:	0ff00513          	li	a0,255
    2ef8:	fea608e3          	beq	a2,a0,2ee8 <__subsf3+0x298>
    2efc:	04000537          	lui	a0,0x4000
    2f00:	00a7e7b3          	or	a5,a5,a0
    2f04:	00068513          	mv	a0,a3
    2f08:	01b00813          	li	a6,27
    2f0c:	00100693          	li	a3,1
    2f10:	00a84e63          	blt	a6,a0,2f2c <__subsf3+0x2dc>
    2f14:	02000693          	li	a3,32
    2f18:	40a686b3          	sub	a3,a3,a0
    2f1c:	00a7d833          	srl	a6,a5,a0
    2f20:	00d797b3          	sll	a5,a5,a3
    2f24:	00f037b3          	snez	a5,a5
    2f28:	00f866b3          	or	a3,a6,a5
    2f2c:	40d707b3          	sub	a5,a4,a3
    2f30:	00060413          	mv	s0,a2
    2f34:	00058493          	mv	s1,a1
    2f38:	f55ff06f          	j	2e8c <__subsf3+0x23c>
    2f3c:	00140693          	addi	a3,s0,1
    2f40:	0fe6f693          	andi	a3,a3,254
    2f44:	04069e63          	bnez	a3,2fa0 <__subsf3+0x350>
    2f48:	04041263          	bnez	s0,2f8c <__subsf3+0x33c>
    2f4c:	00079c63          	bnez	a5,2f64 <__subsf3+0x314>
    2f50:	00000493          	li	s1,0
    2f54:	0e070063          	beqz	a4,3034 <__subsf3+0x3e4>
    2f58:	00070793          	mv	a5,a4
    2f5c:	00058493          	mv	s1,a1
    2f60:	e91ff06f          	j	2df0 <__subsf3+0x1a0>
    2f64:	e80706e3          	beqz	a4,2df0 <__subsf3+0x1a0>
    2f68:	40e786b3          	sub	a3,a5,a4
    2f6c:	04000637          	lui	a2,0x4000
    2f70:	00c6f633          	and	a2,a3,a2
    2f74:	40f707b3          	sub	a5,a4,a5
    2f78:	fe0612e3          	bnez	a2,2f5c <__subsf3+0x30c>
    2f7c:	00000793          	li	a5,0
    2f80:	08068063          	beqz	a3,3000 <__subsf3+0x3b0>
    2f84:	00068793          	mv	a5,a3
    2f88:	e69ff06f          	j	2df0 <__subsf3+0x1a0>
    2f8c:	e80792e3          	bnez	a5,2e10 <__subsf3+0x1c0>
    2f90:	e80702e3          	beqz	a4,2e14 <__subsf3+0x1c4>
    2f94:	00070793          	mv	a5,a4
    2f98:	00058493          	mv	s1,a1
    2f9c:	d39ff06f          	j	2cd4 <__subsf3+0x84>
    2fa0:	40e78933          	sub	s2,a5,a4
    2fa4:	040006b7          	lui	a3,0x4000
    2fa8:	00d976b3          	and	a3,s2,a3
    2fac:	04068463          	beqz	a3,2ff4 <__subsf3+0x3a4>
    2fb0:	40f70933          	sub	s2,a4,a5
    2fb4:	00058493          	mv	s1,a1
    2fb8:	00090513          	mv	a0,s2
    2fbc:	b34fd0ef          	jal	ra,2f0 <__clzsi2>
    2fc0:	ffb50513          	addi	a0,a0,-5 # 3fffffb <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1050f7b>
    2fc4:	00a91933          	sll	s2,s2,a0
    2fc8:	04854063          	blt	a0,s0,3008 <__subsf3+0x3b8>
    2fcc:	40850533          	sub	a0,a0,s0
    2fd0:	00150513          	addi	a0,a0,1
    2fd4:	02000413          	li	s0,32
    2fd8:	00a957b3          	srl	a5,s2,a0
    2fdc:	40a40533          	sub	a0,s0,a0
    2fe0:	00a91933          	sll	s2,s2,a0
    2fe4:	01203933          	snez	s2,s2
    2fe8:	0127e7b3          	or	a5,a5,s2
    2fec:	00000413          	li	s0,0
    2ff0:	e01ff06f          	j	2df0 <__subsf3+0x1a0>
    2ff4:	fc0912e3          	bnez	s2,2fb8 <__subsf3+0x368>
    2ff8:	00000793          	li	a5,0
    2ffc:	00000413          	li	s0,0
    3000:	00000493          	li	s1,0
    3004:	0300006f          	j	3034 <__subsf3+0x3e4>
    3008:	fc0007b7          	lui	a5,0xfc000
    300c:	fff78793          	addi	a5,a5,-1 # fbffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfc000000>
    3010:	40a40433          	sub	s0,s0,a0
    3014:	00f977b3          	and	a5,s2,a5
    3018:	dd9ff06f          	j	2df0 <__subsf3+0x1a0>
    301c:	00070793          	mv	a5,a4
    3020:	e15ff06f          	j	2e34 <__subsf3+0x1e4>
    3024:	00070793          	mv	a5,a4
    3028:	dc9ff06f          	j	2df0 <__subsf3+0x1a0>
    302c:	0ff00413          	li	s0,255
    3030:	00000793          	li	a5,0
    3034:	04000737          	lui	a4,0x4000
    3038:	00e7f733          	and	a4,a5,a4
    303c:	00070e63          	beqz	a4,3058 <__subsf3+0x408>
    3040:	00140413          	addi	s0,s0,1
    3044:	0ff00713          	li	a4,255
    3048:	06e40663          	beq	s0,a4,30b4 <__subsf3+0x464>
    304c:	fc000737          	lui	a4,0xfc000
    3050:	fff70713          	addi	a4,a4,-1 # fbffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfc000000>
    3054:	00e7f7b3          	and	a5,a5,a4
    3058:	0ff00713          	li	a4,255
    305c:	0037d793          	srli	a5,a5,0x3
    3060:	00e41863          	bne	s0,a4,3070 <__subsf3+0x420>
    3064:	00078663          	beqz	a5,3070 <__subsf3+0x420>
    3068:	004007b7          	lui	a5,0x400
    306c:	00000493          	li	s1,0
    3070:	7f800537          	lui	a0,0x7f800
    3074:	01741413          	slli	s0,s0,0x17
    3078:	00979793          	slli	a5,a5,0x9
    307c:	00a47433          	and	s0,s0,a0
    3080:	0097d793          	srli	a5,a5,0x9
    3084:	00c12083          	lw	ra,12(sp)
    3088:	00f467b3          	or	a5,s0,a5
    308c:	00812403          	lw	s0,8(sp)
    3090:	01f49513          	slli	a0,s1,0x1f
    3094:	00012903          	lw	s2,0(sp)
    3098:	00412483          	lw	s1,4(sp)
    309c:	00a7e533          	or	a0,a5,a0
    30a0:	01010113          	addi	sp,sp,16
    30a4:	00008067          	ret
    30a8:	00070793          	mv	a5,a4
    30ac:	00068413          	mv	s0,a3
    30b0:	eadff06f          	j	2f5c <__subsf3+0x30c>
    30b4:	00000793          	li	a5,0
    30b8:	fa1ff06f          	j	3058 <__subsf3+0x408>

000030bc <__floatsisf>:
    30bc:	ff010113          	addi	sp,sp,-16
    30c0:	00112623          	sw	ra,12(sp)
    30c4:	00812423          	sw	s0,8(sp)
    30c8:	00912223          	sw	s1,4(sp)
    30cc:	0e050663          	beqz	a0,31b8 <__floatsisf+0xfc>
    30d0:	41f55793          	srai	a5,a0,0x1f
    30d4:	00a7c433          	xor	s0,a5,a0
    30d8:	40f40433          	sub	s0,s0,a5
    30dc:	01f55493          	srli	s1,a0,0x1f
    30e0:	00040513          	mv	a0,s0
    30e4:	a0cfd0ef          	jal	ra,2f0 <__clzsi2>
    30e8:	09e00793          	li	a5,158
    30ec:	00050713          	mv	a4,a0
    30f0:	40a78533          	sub	a0,a5,a0
    30f4:	09600793          	li	a5,150
    30f8:	04a7c063          	blt	a5,a0,3138 <__floatsisf+0x7c>
    30fc:	00800793          	li	a5,8
    3100:	00e7d663          	bge	a5,a4,310c <__floatsisf+0x50>
    3104:	ff870713          	addi	a4,a4,-8
    3108:	00e41433          	sll	s0,s0,a4
    310c:	00941413          	slli	s0,s0,0x9
    3110:	01751513          	slli	a0,a0,0x17
    3114:	00945413          	srli	s0,s0,0x9
    3118:	00856433          	or	s0,a0,s0
    311c:	01f49513          	slli	a0,s1,0x1f
    3120:	00c12083          	lw	ra,12(sp)
    3124:	00a46533          	or	a0,s0,a0
    3128:	00812403          	lw	s0,8(sp)
    312c:	00412483          	lw	s1,4(sp)
    3130:	01010113          	addi	sp,sp,16
    3134:	00008067          	ret
    3138:	09900793          	li	a5,153
    313c:	02a7d063          	bge	a5,a0,315c <__floatsisf+0xa0>
    3140:	00500793          	li	a5,5
    3144:	40e787b3          	sub	a5,a5,a4
    3148:	01b70693          	addi	a3,a4,27
    314c:	00f457b3          	srl	a5,s0,a5
    3150:	00d41433          	sll	s0,s0,a3
    3154:	00803433          	snez	s0,s0
    3158:	0087e433          	or	s0,a5,s0
    315c:	00500793          	li	a5,5
    3160:	00e7d663          	bge	a5,a4,316c <__floatsisf+0xb0>
    3164:	ffb70793          	addi	a5,a4,-5
    3168:	00f41433          	sll	s0,s0,a5
    316c:	fc0006b7          	lui	a3,0xfc000
    3170:	fff68693          	addi	a3,a3,-1 # fbffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfc000000>
    3174:	00747793          	andi	a5,s0,7
    3178:	00d476b3          	and	a3,s0,a3
    317c:	00078a63          	beqz	a5,3190 <__floatsisf+0xd4>
    3180:	00f47413          	andi	s0,s0,15
    3184:	00400793          	li	a5,4
    3188:	00f40463          	beq	s0,a5,3190 <__floatsisf+0xd4>
    318c:	00468693          	addi	a3,a3,4
    3190:	040007b7          	lui	a5,0x4000
    3194:	00f6f7b3          	and	a5,a3,a5
    3198:	00078c63          	beqz	a5,31b0 <__floatsisf+0xf4>
    319c:	fc0007b7          	lui	a5,0xfc000
    31a0:	fff78793          	addi	a5,a5,-1 # fbffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfc000000>
    31a4:	00f6f6b3          	and	a3,a3,a5
    31a8:	09f00793          	li	a5,159
    31ac:	40e78533          	sub	a0,a5,a4
    31b0:	0036d413          	srli	s0,a3,0x3
    31b4:	f59ff06f          	j	310c <__floatsisf+0x50>
    31b8:	00000493          	li	s1,0
    31bc:	00000413          	li	s0,0
    31c0:	f4dff06f          	j	310c <__floatsisf+0x50>

000031c4 <__extendsfdf2>:
    31c4:	01755713          	srli	a4,a0,0x17
    31c8:	0ff77713          	andi	a4,a4,255
    31cc:	ff010113          	addi	sp,sp,-16
    31d0:	00170793          	addi	a5,a4,1
    31d4:	00812423          	sw	s0,8(sp)
    31d8:	00912223          	sw	s1,4(sp)
    31dc:	00951413          	slli	s0,a0,0x9
    31e0:	00112623          	sw	ra,12(sp)
    31e4:	0fe7f793          	andi	a5,a5,254
    31e8:	00945413          	srli	s0,s0,0x9
    31ec:	01f55493          	srli	s1,a0,0x1f
    31f0:	04078263          	beqz	a5,3234 <__extendsfdf2+0x70>
    31f4:	00345793          	srli	a5,s0,0x3
    31f8:	38070713          	addi	a4,a4,896
    31fc:	01d41413          	slli	s0,s0,0x1d
    3200:	00c79793          	slli	a5,a5,0xc
    3204:	01471713          	slli	a4,a4,0x14
    3208:	00c7d793          	srli	a5,a5,0xc
    320c:	01f49513          	slli	a0,s1,0x1f
    3210:	00f767b3          	or	a5,a4,a5
    3214:	00c12083          	lw	ra,12(sp)
    3218:	00a7e733          	or	a4,a5,a0
    321c:	00040513          	mv	a0,s0
    3220:	00812403          	lw	s0,8(sp)
    3224:	00412483          	lw	s1,4(sp)
    3228:	00070593          	mv	a1,a4
    322c:	01010113          	addi	sp,sp,16
    3230:	00008067          	ret
    3234:	04071663          	bnez	a4,3280 <__extendsfdf2+0xbc>
    3238:	00000793          	li	a5,0
    323c:	fc0402e3          	beqz	s0,3200 <__extendsfdf2+0x3c>
    3240:	00040513          	mv	a0,s0
    3244:	8acfd0ef          	jal	ra,2f0 <__clzsi2>
    3248:	00a00793          	li	a5,10
    324c:	02a7c263          	blt	a5,a0,3270 <__extendsfdf2+0xac>
    3250:	00b00793          	li	a5,11
    3254:	40a787b3          	sub	a5,a5,a0
    3258:	01550713          	addi	a4,a0,21 # 7f800015 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7c850f95>
    325c:	00f457b3          	srl	a5,s0,a5
    3260:	00e41433          	sll	s0,s0,a4
    3264:	38900713          	li	a4,905
    3268:	40a70733          	sub	a4,a4,a0
    326c:	f95ff06f          	j	3200 <__extendsfdf2+0x3c>
    3270:	ff550793          	addi	a5,a0,-11
    3274:	00f417b3          	sll	a5,s0,a5
    3278:	00000413          	li	s0,0
    327c:	fe9ff06f          	j	3264 <__extendsfdf2+0xa0>
    3280:	00000793          	li	a5,0
    3284:	00040a63          	beqz	s0,3298 <__extendsfdf2+0xd4>
    3288:	00345793          	srli	a5,s0,0x3
    328c:	00080737          	lui	a4,0x80
    3290:	01d41413          	slli	s0,s0,0x1d
    3294:	00e7e7b3          	or	a5,a5,a4
    3298:	7ff00713          	li	a4,2047
    329c:	f65ff06f          	j	3200 <__extendsfdf2+0x3c>

000032a0 <memcpy>:
    32a0:	00050313          	mv	t1,a0
    32a4:	00060e63          	beqz	a2,32c0 <memcpy+0x20>
    32a8:	00058383          	lb	t2,0(a1) # 4000000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1050f80>
    32ac:	00730023          	sb	t2,0(t1)
    32b0:	fff60613          	addi	a2,a2,-1 # 3ffffff <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1050f7f>
    32b4:	00130313          	addi	t1,t1,1
    32b8:	00158593          	addi	a1,a1,1
    32bc:	fe0616e3          	bnez	a2,32a8 <memcpy+0x8>
    32c0:	00008067          	ret

000032c4 <memset>:
    32c4:	00050313          	mv	t1,a0
    32c8:	00060a63          	beqz	a2,32dc <memset+0x18>
    32cc:	00b30023          	sb	a1,0(t1)
    32d0:	fff60613          	addi	a2,a2,-1
    32d4:	00130313          	addi	t1,t1,1
    32d8:	fe061ae3          	bnez	a2,32cc <memset+0x8>
    32dc:	00008067          	ret

000032e0 <__adddf3>:
    32e0:	00100837          	lui	a6,0x100
    32e4:	fff80813          	addi	a6,a6,-1 # fffff <__data_region_end+0xd10ff>
    32e8:	fe010113          	addi	sp,sp,-32
    32ec:	00b877b3          	and	a5,a6,a1
    32f0:	0145d713          	srli	a4,a1,0x14
    32f4:	00d87833          	and	a6,a6,a3
    32f8:	0146d313          	srli	t1,a3,0x14
    32fc:	00812c23          	sw	s0,24(sp)
    3300:	00379793          	slli	a5,a5,0x3
    3304:	7ff77413          	andi	s0,a4,2047
    3308:	01d55713          	srli	a4,a0,0x1d
    330c:	00381813          	slli	a6,a6,0x3
    3310:	00912a23          	sw	s1,20(sp)
    3314:	00f767b3          	or	a5,a4,a5
    3318:	01f5d493          	srli	s1,a1,0x1f
    331c:	01d65713          	srli	a4,a2,0x1d
    3320:	7ff37313          	andi	t1,t1,2047
    3324:	00112e23          	sw	ra,28(sp)
    3328:	01212823          	sw	s2,16(sp)
    332c:	01312623          	sw	s3,12(sp)
    3330:	01f6d693          	srli	a3,a3,0x1f
    3334:	01076733          	or	a4,a4,a6
    3338:	00351593          	slli	a1,a0,0x3
    333c:	00361613          	slli	a2,a2,0x3
    3340:	40640833          	sub	a6,s0,t1
    3344:	2cd49863          	bne	s1,a3,3614 <__adddf3+0x334>
    3348:	13005063          	blez	a6,3468 <__adddf3+0x188>
    334c:	04031063          	bnez	t1,338c <__adddf3+0xac>
    3350:	00c766b3          	or	a3,a4,a2
    3354:	70068c63          	beqz	a3,3a6c <__adddf3+0x78c>
    3358:	fff80513          	addi	a0,a6,-1
    335c:	02051063          	bnez	a0,337c <__adddf3+0x9c>
    3360:	00c58633          	add	a2,a1,a2
    3364:	00b63533          	sltu	a0,a2,a1
    3368:	00e787b3          	add	a5,a5,a4
    336c:	00a787b3          	add	a5,a5,a0
    3370:	00060593          	mv	a1,a2
    3374:	00100413          	li	s0,1
    3378:	0700006f          	j	33e8 <__adddf3+0x108>
    337c:	7ff00693          	li	a3,2047
    3380:	02d81063          	bne	a6,a3,33a0 <__adddf3+0xc0>
    3384:	7ff00413          	li	s0,2047
    3388:	2140006f          	j	359c <__adddf3+0x2bc>
    338c:	7ff00693          	li	a3,2047
    3390:	20d40663          	beq	s0,a3,359c <__adddf3+0x2bc>
    3394:	008006b7          	lui	a3,0x800
    3398:	00d76733          	or	a4,a4,a3
    339c:	00080513          	mv	a0,a6
    33a0:	03800693          	li	a3,56
    33a4:	0aa6cc63          	blt	a3,a0,345c <__adddf3+0x17c>
    33a8:	01f00693          	li	a3,31
    33ac:	06a6ce63          	blt	a3,a0,3428 <__adddf3+0x148>
    33b0:	02000813          	li	a6,32
    33b4:	40a80833          	sub	a6,a6,a0
    33b8:	010716b3          	sll	a3,a4,a6
    33bc:	00a658b3          	srl	a7,a2,a0
    33c0:	01061633          	sll	a2,a2,a6
    33c4:	0116e6b3          	or	a3,a3,a7
    33c8:	00c03633          	snez	a2,a2
    33cc:	00c6e633          	or	a2,a3,a2
    33d0:	00a75733          	srl	a4,a4,a0
    33d4:	00b60633          	add	a2,a2,a1
    33d8:	00b63533          	sltu	a0,a2,a1
    33dc:	00f70733          	add	a4,a4,a5
    33e0:	00a707b3          	add	a5,a4,a0
    33e4:	00060593          	mv	a1,a2
    33e8:	00800737          	lui	a4,0x800
    33ec:	00e7f733          	and	a4,a5,a4
    33f0:	1a070663          	beqz	a4,359c <__adddf3+0x2bc>
    33f4:	00140413          	addi	s0,s0,1
    33f8:	7ff00713          	li	a4,2047
    33fc:	5ce40a63          	beq	s0,a4,39d0 <__adddf3+0x6f0>
    3400:	ff800737          	lui	a4,0xff800
    3404:	fff70713          	addi	a4,a4,-1 # ff7fffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xff800000>
    3408:	00e7f7b3          	and	a5,a5,a4
    340c:	0015f513          	andi	a0,a1,1
    3410:	0015d713          	srli	a4,a1,0x1
    3414:	00a76533          	or	a0,a4,a0
    3418:	01f79593          	slli	a1,a5,0x1f
    341c:	00a5e5b3          	or	a1,a1,a0
    3420:	0017d793          	srli	a5,a5,0x1
    3424:	1780006f          	j	359c <__adddf3+0x2bc>
    3428:	fe050693          	addi	a3,a0,-32
    342c:	02000893          	li	a7,32
    3430:	00d756b3          	srl	a3,a4,a3
    3434:	00000813          	li	a6,0
    3438:	01150863          	beq	a0,a7,3448 <__adddf3+0x168>
    343c:	04000813          	li	a6,64
    3440:	40a80533          	sub	a0,a6,a0
    3444:	00a71833          	sll	a6,a4,a0
    3448:	00c86633          	or	a2,a6,a2
    344c:	00c03633          	snez	a2,a2
    3450:	00c6e633          	or	a2,a3,a2
    3454:	00000713          	li	a4,0
    3458:	f7dff06f          	j	33d4 <__adddf3+0xf4>
    345c:	00c76633          	or	a2,a4,a2
    3460:	00c03633          	snez	a2,a2
    3464:	ff1ff06f          	j	3454 <__adddf3+0x174>
    3468:	0e080263          	beqz	a6,354c <__adddf3+0x26c>
    346c:	40830533          	sub	a0,t1,s0
    3470:	02041e63          	bnez	s0,34ac <__adddf3+0x1cc>
    3474:	00b7e6b3          	or	a3,a5,a1
    3478:	52068c63          	beqz	a3,39b0 <__adddf3+0x6d0>
    347c:	fff50693          	addi	a3,a0,-1
    3480:	00069c63          	bnez	a3,3498 <__adddf3+0x1b8>
    3484:	00c585b3          	add	a1,a1,a2
    3488:	00e787b3          	add	a5,a5,a4
    348c:	00c5b633          	sltu	a2,a1,a2
    3490:	00c787b3          	add	a5,a5,a2
    3494:	ee1ff06f          	j	3374 <__adddf3+0x94>
    3498:	7ff00813          	li	a6,2047
    349c:	03051263          	bne	a0,a6,34c0 <__adddf3+0x1e0>
    34a0:	00070793          	mv	a5,a4
    34a4:	00060593          	mv	a1,a2
    34a8:	eddff06f          	j	3384 <__adddf3+0xa4>
    34ac:	7ff00693          	li	a3,2047
    34b0:	fed308e3          	beq	t1,a3,34a0 <__adddf3+0x1c0>
    34b4:	008006b7          	lui	a3,0x800
    34b8:	00d7e7b3          	or	a5,a5,a3
    34bc:	00050693          	mv	a3,a0
    34c0:	03800513          	li	a0,56
    34c4:	06d54e63          	blt	a0,a3,3540 <__adddf3+0x260>
    34c8:	01f00513          	li	a0,31
    34cc:	04d54063          	blt	a0,a3,350c <__adddf3+0x22c>
    34d0:	02000813          	li	a6,32
    34d4:	40d80833          	sub	a6,a6,a3
    34d8:	01079533          	sll	a0,a5,a6
    34dc:	00d5d8b3          	srl	a7,a1,a3
    34e0:	010595b3          	sll	a1,a1,a6
    34e4:	01156533          	or	a0,a0,a7
    34e8:	00b035b3          	snez	a1,a1
    34ec:	00b56533          	or	a0,a0,a1
    34f0:	00d7d7b3          	srl	a5,a5,a3
    34f4:	00c505b3          	add	a1,a0,a2
    34f8:	00e787b3          	add	a5,a5,a4
    34fc:	00c5b633          	sltu	a2,a1,a2
    3500:	00c787b3          	add	a5,a5,a2
    3504:	00030413          	mv	s0,t1
    3508:	ee1ff06f          	j	33e8 <__adddf3+0x108>
    350c:	fe068513          	addi	a0,a3,-32 # 7fffe0 <__data_region_end+0x7d10e0>
    3510:	02000893          	li	a7,32
    3514:	00a7d833          	srl	a6,a5,a0
    3518:	00000513          	li	a0,0
    351c:	01168863          	beq	a3,a7,352c <__adddf3+0x24c>
    3520:	04000513          	li	a0,64
    3524:	40d50533          	sub	a0,a0,a3
    3528:	00a79533          	sll	a0,a5,a0
    352c:	00b56533          	or	a0,a0,a1
    3530:	00a03533          	snez	a0,a0
    3534:	00a86533          	or	a0,a6,a0
    3538:	00000793          	li	a5,0
    353c:	fb9ff06f          	j	34f4 <__adddf3+0x214>
    3540:	00b7e533          	or	a0,a5,a1
    3544:	00a03533          	snez	a0,a0
    3548:	ff1ff06f          	j	3538 <__adddf3+0x258>
    354c:	00140693          	addi	a3,s0,1
    3550:	7fe6f513          	andi	a0,a3,2046
    3554:	08051863          	bnez	a0,35e4 <__adddf3+0x304>
    3558:	00b7e6b3          	or	a3,a5,a1
    355c:	06041463          	bnez	s0,35c4 <__adddf3+0x2e4>
    3560:	46068063          	beqz	a3,39c0 <__adddf3+0x6e0>
    3564:	00c766b3          	or	a3,a4,a2
    3568:	02068a63          	beqz	a3,359c <__adddf3+0x2bc>
    356c:	00c58633          	add	a2,a1,a2
    3570:	00e787b3          	add	a5,a5,a4
    3574:	00b63533          	sltu	a0,a2,a1
    3578:	00a787b3          	add	a5,a5,a0
    357c:	00800737          	lui	a4,0x800
    3580:	00e7f733          	and	a4,a5,a4
    3584:	00060593          	mv	a1,a2
    3588:	00070a63          	beqz	a4,359c <__adddf3+0x2bc>
    358c:	ff800737          	lui	a4,0xff800
    3590:	fff70713          	addi	a4,a4,-1 # ff7fffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xff800000>
    3594:	00e7f7b3          	and	a5,a5,a4
    3598:	00100413          	li	s0,1
    359c:	0075f713          	andi	a4,a1,7
    35a0:	42070c63          	beqz	a4,39d8 <__adddf3+0x6f8>
    35a4:	00f5f713          	andi	a4,a1,15
    35a8:	00400693          	li	a3,4
    35ac:	42d70663          	beq	a4,a3,39d8 <__adddf3+0x6f8>
    35b0:	00458713          	addi	a4,a1,4
    35b4:	00b73533          	sltu	a0,a4,a1
    35b8:	00a787b3          	add	a5,a5,a0
    35bc:	00070593          	mv	a1,a4
    35c0:	4180006f          	j	39d8 <__adddf3+0x6f8>
    35c4:	ec068ee3          	beqz	a3,34a0 <__adddf3+0x1c0>
    35c8:	00c76633          	or	a2,a4,a2
    35cc:	da060ce3          	beqz	a2,3384 <__adddf3+0xa4>
    35d0:	00000493          	li	s1,0
    35d4:	004007b7          	lui	a5,0x400
    35d8:	00000593          	li	a1,0
    35dc:	7ff00413          	li	s0,2047
    35e0:	3f80006f          	j	39d8 <__adddf3+0x6f8>
    35e4:	7ff00513          	li	a0,2047
    35e8:	3ea68263          	beq	a3,a0,39cc <__adddf3+0x6ec>
    35ec:	00c58633          	add	a2,a1,a2
    35f0:	00b63533          	sltu	a0,a2,a1
    35f4:	00e787b3          	add	a5,a5,a4
    35f8:	00a787b3          	add	a5,a5,a0
    35fc:	01f79513          	slli	a0,a5,0x1f
    3600:	00165613          	srli	a2,a2,0x1
    3604:	00c565b3          	or	a1,a0,a2
    3608:	0017d793          	srli	a5,a5,0x1
    360c:	00068413          	mv	s0,a3
    3610:	f8dff06f          	j	359c <__adddf3+0x2bc>
    3614:	0f005c63          	blez	a6,370c <__adddf3+0x42c>
    3618:	08031e63          	bnez	t1,36b4 <__adddf3+0x3d4>
    361c:	00c766b3          	or	a3,a4,a2
    3620:	44068663          	beqz	a3,3a6c <__adddf3+0x78c>
    3624:	fff80513          	addi	a0,a6,-1
    3628:	02051063          	bnez	a0,3648 <__adddf3+0x368>
    362c:	40c58633          	sub	a2,a1,a2
    3630:	00c5b533          	sltu	a0,a1,a2
    3634:	40e787b3          	sub	a5,a5,a4
    3638:	40a787b3          	sub	a5,a5,a0
    363c:	00060593          	mv	a1,a2
    3640:	00100413          	li	s0,1
    3644:	0540006f          	j	3698 <__adddf3+0x3b8>
    3648:	7ff00693          	li	a3,2047
    364c:	d2d80ce3          	beq	a6,a3,3384 <__adddf3+0xa4>
    3650:	03800693          	li	a3,56
    3654:	0aa6c663          	blt	a3,a0,3700 <__adddf3+0x420>
    3658:	01f00693          	li	a3,31
    365c:	06a6c863          	blt	a3,a0,36cc <__adddf3+0x3ec>
    3660:	02000813          	li	a6,32
    3664:	40a80833          	sub	a6,a6,a0
    3668:	010716b3          	sll	a3,a4,a6
    366c:	00a658b3          	srl	a7,a2,a0
    3670:	01061633          	sll	a2,a2,a6
    3674:	0116e6b3          	or	a3,a3,a7
    3678:	00c03633          	snez	a2,a2
    367c:	00c6e633          	or	a2,a3,a2
    3680:	00a75733          	srl	a4,a4,a0
    3684:	40c58633          	sub	a2,a1,a2
    3688:	00c5b533          	sltu	a0,a1,a2
    368c:	40e78733          	sub	a4,a5,a4
    3690:	40a707b3          	sub	a5,a4,a0
    3694:	00060593          	mv	a1,a2
    3698:	00800937          	lui	s2,0x800
    369c:	0127f733          	and	a4,a5,s2
    36a0:	ee070ee3          	beqz	a4,359c <__adddf3+0x2bc>
    36a4:	fff90913          	addi	s2,s2,-1 # 7fffff <__data_region_end+0x7d10ff>
    36a8:	0127f933          	and	s2,a5,s2
    36ac:	00058993          	mv	s3,a1
    36b0:	2140006f          	j	38c4 <__adddf3+0x5e4>
    36b4:	7ff00693          	li	a3,2047
    36b8:	eed402e3          	beq	s0,a3,359c <__adddf3+0x2bc>
    36bc:	008006b7          	lui	a3,0x800
    36c0:	00d76733          	or	a4,a4,a3
    36c4:	00080513          	mv	a0,a6
    36c8:	f89ff06f          	j	3650 <__adddf3+0x370>
    36cc:	fe050693          	addi	a3,a0,-32
    36d0:	02000893          	li	a7,32
    36d4:	00d756b3          	srl	a3,a4,a3
    36d8:	00000813          	li	a6,0
    36dc:	01150863          	beq	a0,a7,36ec <__adddf3+0x40c>
    36e0:	04000813          	li	a6,64
    36e4:	40a80533          	sub	a0,a6,a0
    36e8:	00a71833          	sll	a6,a4,a0
    36ec:	00c86633          	or	a2,a6,a2
    36f0:	00c03633          	snez	a2,a2
    36f4:	00c6e633          	or	a2,a3,a2
    36f8:	00000713          	li	a4,0
    36fc:	f89ff06f          	j	3684 <__adddf3+0x3a4>
    3700:	00c76633          	or	a2,a4,a2
    3704:	00c03633          	snez	a2,a2
    3708:	ff1ff06f          	j	36f8 <__adddf3+0x418>
    370c:	0e080863          	beqz	a6,37fc <__adddf3+0x51c>
    3710:	40830533          	sub	a0,t1,s0
    3714:	04041263          	bnez	s0,3758 <__adddf3+0x478>
    3718:	00b7e833          	or	a6,a5,a1
    371c:	34080c63          	beqz	a6,3a74 <__adddf3+0x794>
    3720:	fff50813          	addi	a6,a0,-1
    3724:	00081e63          	bnez	a6,3740 <__adddf3+0x460>
    3728:	40b605b3          	sub	a1,a2,a1
    372c:	40f707b3          	sub	a5,a4,a5
    3730:	00b63633          	sltu	a2,a2,a1
    3734:	40c787b3          	sub	a5,a5,a2
    3738:	00068493          	mv	s1,a3
    373c:	f05ff06f          	j	3640 <__adddf3+0x360>
    3740:	7ff00893          	li	a7,2047
    3744:	03151463          	bne	a0,a7,376c <__adddf3+0x48c>
    3748:	00070793          	mv	a5,a4
    374c:	00060593          	mv	a1,a2
    3750:	7ff00413          	li	s0,2047
    3754:	0d00006f          	j	3824 <__adddf3+0x544>
    3758:	7ff00813          	li	a6,2047
    375c:	ff0306e3          	beq	t1,a6,3748 <__adddf3+0x468>
    3760:	00800837          	lui	a6,0x800
    3764:	0107e7b3          	or	a5,a5,a6
    3768:	00050813          	mv	a6,a0
    376c:	03800513          	li	a0,56
    3770:	09054063          	blt	a0,a6,37f0 <__adddf3+0x510>
    3774:	01f00513          	li	a0,31
    3778:	05054263          	blt	a0,a6,37bc <__adddf3+0x4dc>
    377c:	02000893          	li	a7,32
    3780:	410888b3          	sub	a7,a7,a6
    3784:	01179533          	sll	a0,a5,a7
    3788:	0105de33          	srl	t3,a1,a6
    378c:	011595b3          	sll	a1,a1,a7
    3790:	01c56533          	or	a0,a0,t3
    3794:	00b035b3          	snez	a1,a1
    3798:	00b56533          	or	a0,a0,a1
    379c:	0107d7b3          	srl	a5,a5,a6
    37a0:	40a605b3          	sub	a1,a2,a0
    37a4:	40f707b3          	sub	a5,a4,a5
    37a8:	00b63633          	sltu	a2,a2,a1
    37ac:	40c787b3          	sub	a5,a5,a2
    37b0:	00030413          	mv	s0,t1
    37b4:	00068493          	mv	s1,a3
    37b8:	ee1ff06f          	j	3698 <__adddf3+0x3b8>
    37bc:	fe080513          	addi	a0,a6,-32 # 7fffe0 <__data_region_end+0x7d10e0>
    37c0:	02000e13          	li	t3,32
    37c4:	00a7d8b3          	srl	a7,a5,a0
    37c8:	00000513          	li	a0,0
    37cc:	01c80863          	beq	a6,t3,37dc <__adddf3+0x4fc>
    37d0:	04000513          	li	a0,64
    37d4:	41050533          	sub	a0,a0,a6
    37d8:	00a79533          	sll	a0,a5,a0
    37dc:	00b56533          	or	a0,a0,a1
    37e0:	00a03533          	snez	a0,a0
    37e4:	00a8e533          	or	a0,a7,a0
    37e8:	00000793          	li	a5,0
    37ec:	fb5ff06f          	j	37a0 <__adddf3+0x4c0>
    37f0:	00b7e533          	or	a0,a5,a1
    37f4:	00a03533          	snez	a0,a0
    37f8:	ff1ff06f          	j	37e8 <__adddf3+0x508>
    37fc:	00140513          	addi	a0,s0,1
    3800:	7fe57513          	andi	a0,a0,2046
    3804:	08051863          	bnez	a0,3894 <__adddf3+0x5b4>
    3808:	00b7e833          	or	a6,a5,a1
    380c:	00c76533          	or	a0,a4,a2
    3810:	06041263          	bnez	s0,3874 <__adddf3+0x594>
    3814:	00081c63          	bnez	a6,382c <__adddf3+0x54c>
    3818:	26050663          	beqz	a0,3a84 <__adddf3+0x7a4>
    381c:	00070793          	mv	a5,a4
    3820:	00060593          	mv	a1,a2
    3824:	00068493          	mv	s1,a3
    3828:	d75ff06f          	j	359c <__adddf3+0x2bc>
    382c:	d60508e3          	beqz	a0,359c <__adddf3+0x2bc>
    3830:	40c58833          	sub	a6,a1,a2
    3834:	0105b8b3          	sltu	a7,a1,a6
    3838:	40e78533          	sub	a0,a5,a4
    383c:	41150533          	sub	a0,a0,a7
    3840:	008008b7          	lui	a7,0x800
    3844:	011578b3          	and	a7,a0,a7
    3848:	00088c63          	beqz	a7,3860 <__adddf3+0x580>
    384c:	40b605b3          	sub	a1,a2,a1
    3850:	40f707b3          	sub	a5,a4,a5
    3854:	00b63633          	sltu	a2,a2,a1
    3858:	40c787b3          	sub	a5,a5,a2
    385c:	fc9ff06f          	j	3824 <__adddf3+0x544>
    3860:	00a865b3          	or	a1,a6,a0
    3864:	22058863          	beqz	a1,3a94 <__adddf3+0x7b4>
    3868:	00050793          	mv	a5,a0
    386c:	00080593          	mv	a1,a6
    3870:	d2dff06f          	j	359c <__adddf3+0x2bc>
    3874:	00081c63          	bnez	a6,388c <__adddf3+0x5ac>
    3878:	22050263          	beqz	a0,3a9c <__adddf3+0x7bc>
    387c:	00070793          	mv	a5,a4
    3880:	00060593          	mv	a1,a2
    3884:	00068493          	mv	s1,a3
    3888:	afdff06f          	j	3384 <__adddf3+0xa4>
    388c:	ae050ce3          	beqz	a0,3384 <__adddf3+0xa4>
    3890:	d41ff06f          	j	35d0 <__adddf3+0x2f0>
    3894:	40c589b3          	sub	s3,a1,a2
    3898:	0135b533          	sltu	a0,a1,s3
    389c:	40e78933          	sub	s2,a5,a4
    38a0:	40a90933          	sub	s2,s2,a0
    38a4:	00800537          	lui	a0,0x800
    38a8:	00a97533          	and	a0,s2,a0
    38ac:	08050463          	beqz	a0,3934 <__adddf3+0x654>
    38b0:	40b609b3          	sub	s3,a2,a1
    38b4:	40f707b3          	sub	a5,a4,a5
    38b8:	01363633          	sltu	a2,a2,s3
    38bc:	40c78933          	sub	s2,a5,a2
    38c0:	00068493          	mv	s1,a3
    38c4:	08090263          	beqz	s2,3948 <__adddf3+0x668>
    38c8:	00090513          	mv	a0,s2
    38cc:	a25fc0ef          	jal	ra,2f0 <__clzsi2>
    38d0:	ff850713          	addi	a4,a0,-8 # 7ffff8 <__data_region_end+0x7d10f8>
    38d4:	01f00793          	li	a5,31
    38d8:	08e7c063          	blt	a5,a4,3958 <__adddf3+0x678>
    38dc:	02000793          	li	a5,32
    38e0:	40e787b3          	sub	a5,a5,a4
    38e4:	00e91933          	sll	s2,s2,a4
    38e8:	00f9d7b3          	srl	a5,s3,a5
    38ec:	0127e7b3          	or	a5,a5,s2
    38f0:	00e995b3          	sll	a1,s3,a4
    38f4:	0a874463          	blt	a4,s0,399c <__adddf3+0x6bc>
    38f8:	40870733          	sub	a4,a4,s0
    38fc:	00170693          	addi	a3,a4,1
    3900:	01f00613          	li	a2,31
    3904:	06d64263          	blt	a2,a3,3968 <__adddf3+0x688>
    3908:	02000713          	li	a4,32
    390c:	40d70733          	sub	a4,a4,a3
    3910:	00e79633          	sll	a2,a5,a4
    3914:	00d5d533          	srl	a0,a1,a3
    3918:	00e595b3          	sll	a1,a1,a4
    391c:	00a66633          	or	a2,a2,a0
    3920:	00b035b3          	snez	a1,a1
    3924:	00b665b3          	or	a1,a2,a1
    3928:	00d7d7b3          	srl	a5,a5,a3
    392c:	00000413          	li	s0,0
    3930:	c6dff06f          	j	359c <__adddf3+0x2bc>
    3934:	0129e5b3          	or	a1,s3,s2
    3938:	f80596e3          	bnez	a1,38c4 <__adddf3+0x5e4>
    393c:	00000793          	li	a5,0
    3940:	00000413          	li	s0,0
    3944:	1480006f          	j	3a8c <__adddf3+0x7ac>
    3948:	00098513          	mv	a0,s3
    394c:	9a5fc0ef          	jal	ra,2f0 <__clzsi2>
    3950:	02050513          	addi	a0,a0,32
    3954:	f7dff06f          	j	38d0 <__adddf3+0x5f0>
    3958:	fd850793          	addi	a5,a0,-40
    395c:	00f997b3          	sll	a5,s3,a5
    3960:	00000593          	li	a1,0
    3964:	f91ff06f          	j	38f4 <__adddf3+0x614>
    3968:	fe170713          	addi	a4,a4,-31
    396c:	02000613          	li	a2,32
    3970:	00e7d733          	srl	a4,a5,a4
    3974:	00000513          	li	a0,0
    3978:	00c68863          	beq	a3,a2,3988 <__adddf3+0x6a8>
    397c:	04000513          	li	a0,64
    3980:	40d50533          	sub	a0,a0,a3
    3984:	00a79533          	sll	a0,a5,a0
    3988:	00a5e533          	or	a0,a1,a0
    398c:	00a03533          	snez	a0,a0
    3990:	00a765b3          	or	a1,a4,a0
    3994:	00000793          	li	a5,0
    3998:	f95ff06f          	j	392c <__adddf3+0x64c>
    399c:	40e40433          	sub	s0,s0,a4
    39a0:	ff800737          	lui	a4,0xff800
    39a4:	fff70713          	addi	a4,a4,-1 # ff7fffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xff800000>
    39a8:	00e7f7b3          	and	a5,a5,a4
    39ac:	bf1ff06f          	j	359c <__adddf3+0x2bc>
    39b0:	00070793          	mv	a5,a4
    39b4:	00060593          	mv	a1,a2
    39b8:	00050413          	mv	s0,a0
    39bc:	be1ff06f          	j	359c <__adddf3+0x2bc>
    39c0:	00070793          	mv	a5,a4
    39c4:	00060593          	mv	a1,a2
    39c8:	bd5ff06f          	j	359c <__adddf3+0x2bc>
    39cc:	7ff00413          	li	s0,2047
    39d0:	00000793          	li	a5,0
    39d4:	00000593          	li	a1,0
    39d8:	00800737          	lui	a4,0x800
    39dc:	00e7f733          	and	a4,a5,a4
    39e0:	00070e63          	beqz	a4,39fc <__adddf3+0x71c>
    39e4:	00140413          	addi	s0,s0,1
    39e8:	7ff00713          	li	a4,2047
    39ec:	0ce40063          	beq	s0,a4,3aac <__adddf3+0x7cc>
    39f0:	ff800737          	lui	a4,0xff800
    39f4:	fff70713          	addi	a4,a4,-1 # ff7fffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xff800000>
    39f8:	00e7f7b3          	and	a5,a5,a4
    39fc:	01d79713          	slli	a4,a5,0x1d
    3a00:	0035d513          	srli	a0,a1,0x3
    3a04:	00a76533          	or	a0,a4,a0
    3a08:	7ff00713          	li	a4,2047
    3a0c:	0037d793          	srli	a5,a5,0x3
    3a10:	00e41e63          	bne	s0,a4,3a2c <__adddf3+0x74c>
    3a14:	00f56533          	or	a0,a0,a5
    3a18:	00000793          	li	a5,0
    3a1c:	00050863          	beqz	a0,3a2c <__adddf3+0x74c>
    3a20:	000807b7          	lui	a5,0x80
    3a24:	00000513          	li	a0,0
    3a28:	00000493          	li	s1,0
    3a2c:	01441713          	slli	a4,s0,0x14
    3a30:	7ff006b7          	lui	a3,0x7ff00
    3a34:	00c79793          	slli	a5,a5,0xc
    3a38:	01c12083          	lw	ra,28(sp)
    3a3c:	01812403          	lw	s0,24(sp)
    3a40:	00d77733          	and	a4,a4,a3
    3a44:	00c7d793          	srli	a5,a5,0xc
    3a48:	01f49493          	slli	s1,s1,0x1f
    3a4c:	00f767b3          	or	a5,a4,a5
    3a50:	0097e733          	or	a4,a5,s1
    3a54:	01012903          	lw	s2,16(sp)
    3a58:	01412483          	lw	s1,20(sp)
    3a5c:	00c12983          	lw	s3,12(sp)
    3a60:	00070593          	mv	a1,a4
    3a64:	02010113          	addi	sp,sp,32
    3a68:	00008067          	ret
    3a6c:	00080413          	mv	s0,a6
    3a70:	b2dff06f          	j	359c <__adddf3+0x2bc>
    3a74:	00070793          	mv	a5,a4
    3a78:	00060593          	mv	a1,a2
    3a7c:	00050413          	mv	s0,a0
    3a80:	da5ff06f          	j	3824 <__adddf3+0x544>
    3a84:	00000793          	li	a5,0
    3a88:	00000593          	li	a1,0
    3a8c:	00000493          	li	s1,0
    3a90:	f49ff06f          	j	39d8 <__adddf3+0x6f8>
    3a94:	00000793          	li	a5,0
    3a98:	ff5ff06f          	j	3a8c <__adddf3+0x7ac>
    3a9c:	00000593          	li	a1,0
    3aa0:	00000493          	li	s1,0
    3aa4:	004007b7          	lui	a5,0x400
    3aa8:	b35ff06f          	j	35dc <__adddf3+0x2fc>
    3aac:	00000793          	li	a5,0
    3ab0:	00000593          	li	a1,0
    3ab4:	f49ff06f          	j	39fc <__adddf3+0x71c>

00003ab8 <__eqdf2>:
    3ab8:	0145d713          	srli	a4,a1,0x14
    3abc:	001007b7          	lui	a5,0x100
    3ac0:	fff78793          	addi	a5,a5,-1 # fffff <__data_region_end+0xd10ff>
    3ac4:	0146d813          	srli	a6,a3,0x14
    3ac8:	00050313          	mv	t1,a0
    3acc:	00050e93          	mv	t4,a0
    3ad0:	7ff77713          	andi	a4,a4,2047
    3ad4:	7ff00513          	li	a0,2047
    3ad8:	00b7f8b3          	and	a7,a5,a1
    3adc:	00060f13          	mv	t5,a2
    3ae0:	00d7f7b3          	and	a5,a5,a3
    3ae4:	01f5d593          	srli	a1,a1,0x1f
    3ae8:	7ff87813          	andi	a6,a6,2047
    3aec:	01f6d693          	srli	a3,a3,0x1f
    3af0:	00a71c63          	bne	a4,a0,3b08 <__eqdf2+0x50>
    3af4:	0068ee33          	or	t3,a7,t1
    3af8:	00100513          	li	a0,1
    3afc:	000e1463          	bnez	t3,3b04 <__eqdf2+0x4c>
    3b00:	00e80663          	beq	a6,a4,3b0c <__eqdf2+0x54>
    3b04:	00008067          	ret
    3b08:	00a81863          	bne	a6,a0,3b18 <__eqdf2+0x60>
    3b0c:	00c7e633          	or	a2,a5,a2
    3b10:	00100513          	li	a0,1
    3b14:	fe0618e3          	bnez	a2,3b04 <__eqdf2+0x4c>
    3b18:	00100513          	li	a0,1
    3b1c:	ff0714e3          	bne	a4,a6,3b04 <__eqdf2+0x4c>
    3b20:	fef892e3          	bne	a7,a5,3b04 <__eqdf2+0x4c>
    3b24:	ffee90e3          	bne	t4,t5,3b04 <__eqdf2+0x4c>
    3b28:	00d58a63          	beq	a1,a3,3b3c <__eqdf2+0x84>
    3b2c:	fc071ce3          	bnez	a4,3b04 <__eqdf2+0x4c>
    3b30:	0068e533          	or	a0,a7,t1
    3b34:	00a03533          	snez	a0,a0
    3b38:	00008067          	ret
    3b3c:	00000513          	li	a0,0
    3b40:	00008067          	ret

00003b44 <__ledf2>:
    3b44:	00100737          	lui	a4,0x100
    3b48:	fff70713          	addi	a4,a4,-1 # fffff <__data_region_end+0xd10ff>
    3b4c:	0145d813          	srli	a6,a1,0x14
    3b50:	00b778b3          	and	a7,a4,a1
    3b54:	00050793          	mv	a5,a0
    3b58:	00050313          	mv	t1,a0
    3b5c:	7ff87813          	andi	a6,a6,2047
    3b60:	01f5d513          	srli	a0,a1,0x1f
    3b64:	7ff00e93          	li	t4,2047
    3b68:	0146d593          	srli	a1,a3,0x14
    3b6c:	00d77733          	and	a4,a4,a3
    3b70:	00060e13          	mv	t3,a2
    3b74:	7ff5f593          	andi	a1,a1,2047
    3b78:	01f6d693          	srli	a3,a3,0x1f
    3b7c:	01d81a63          	bne	a6,t4,3b90 <__ledf2+0x4c>
    3b80:	00f8eeb3          	or	t4,a7,a5
    3b84:	080e8a63          	beqz	t4,3c18 <__ledf2+0xd4>
    3b88:	00200513          	li	a0,2
    3b8c:	00008067          	ret
    3b90:	01d59663          	bne	a1,t4,3b9c <__ledf2+0x58>
    3b94:	00c76eb3          	or	t4,a4,a2
    3b98:	fe0e98e3          	bnez	t4,3b88 <__ledf2+0x44>
    3b9c:	08081063          	bnez	a6,3c1c <__ledf2+0xd8>
    3ba0:	00f8e7b3          	or	a5,a7,a5
    3ba4:	0017b793          	seqz	a5,a5
    3ba8:	00059663          	bnez	a1,3bb4 <__ledf2+0x70>
    3bac:	00c76633          	or	a2,a4,a2
    3bb0:	04060c63          	beqz	a2,3c08 <__ledf2+0xc4>
    3bb4:	00079c63          	bnez	a5,3bcc <__ledf2+0x88>
    3bb8:	00d51463          	bne	a0,a3,3bc0 <__ledf2+0x7c>
    3bbc:	0305d063          	bge	a1,a6,3bdc <__ledf2+0x98>
    3bc0:	04050063          	beqz	a0,3c00 <__ledf2+0xbc>
    3bc4:	fff00513          	li	a0,-1
    3bc8:	00008067          	ret
    3bcc:	fff00513          	li	a0,-1
    3bd0:	00068a63          	beqz	a3,3be4 <__ledf2+0xa0>
    3bd4:	00068513          	mv	a0,a3
    3bd8:	00008067          	ret
    3bdc:	00b85663          	bge	a6,a1,3be8 <__ledf2+0xa4>
    3be0:	fe0502e3          	beqz	a0,3bc4 <__ledf2+0x80>
    3be4:	00008067          	ret
    3be8:	fd176ce3          	bltu	a4,a7,3bc0 <__ledf2+0x7c>
    3bec:	02e89263          	bne	a7,a4,3c10 <__ledf2+0xcc>
    3bf0:	fc6e68e3          	bltu	t3,t1,3bc0 <__ledf2+0x7c>
    3bf4:	ffc366e3          	bltu	t1,t3,3be0 <__ledf2+0x9c>
    3bf8:	00000513          	li	a0,0
    3bfc:	00008067          	ret
    3c00:	00100513          	li	a0,1
    3c04:	00008067          	ret
    3c08:	fe0798e3          	bnez	a5,3bf8 <__ledf2+0xb4>
    3c0c:	fb5ff06f          	j	3bc0 <__ledf2+0x7c>
    3c10:	fce8e8e3          	bltu	a7,a4,3be0 <__ledf2+0x9c>
    3c14:	fe5ff06f          	j	3bf8 <__ledf2+0xb4>
    3c18:	f7058ee3          	beq	a1,a6,3b94 <__ledf2+0x50>
    3c1c:	f8059ee3          	bnez	a1,3bb8 <__ledf2+0x74>
    3c20:	00000793          	li	a5,0
    3c24:	f89ff06f          	j	3bac <__ledf2+0x68>

00003c28 <__unorddf2>:
    3c28:	00100737          	lui	a4,0x100
    3c2c:	fff70793          	addi	a5,a4,-1 # fffff <__data_region_end+0xd10ff>
    3c30:	00b7f733          	and	a4,a5,a1
    3c34:	0145d593          	srli	a1,a1,0x14
    3c38:	00d7f7b3          	and	a5,a5,a3
    3c3c:	7ff5f593          	andi	a1,a1,2047
    3c40:	0146d693          	srli	a3,a3,0x14
    3c44:	7ff00813          	li	a6,2047
    3c48:	7ff6f693          	andi	a3,a3,2047
    3c4c:	01059863          	bne	a1,a6,3c5c <__unorddf2+0x34>
    3c50:	00a76733          	or	a4,a4,a0
    3c54:	00100513          	li	a0,1
    3c58:	00071c63          	bnez	a4,3c70 <__unorddf2+0x48>
    3c5c:	7ff00713          	li	a4,2047
    3c60:	00000513          	li	a0,0
    3c64:	00e69663          	bne	a3,a4,3c70 <__unorddf2+0x48>
    3c68:	00c7e7b3          	or	a5,a5,a2
    3c6c:	00f03533          	snez	a0,a5
    3c70:	00008067          	ret

00003c74 <__fixdfsi>:
    3c74:	0145d713          	srli	a4,a1,0x14
    3c78:	001006b7          	lui	a3,0x100
    3c7c:	fff68793          	addi	a5,a3,-1 # fffff <__data_region_end+0xd10ff>
    3c80:	7ff77713          	andi	a4,a4,2047
    3c84:	3fe00613          	li	a2,1022
    3c88:	00b7f7b3          	and	a5,a5,a1
    3c8c:	01f5d593          	srli	a1,a1,0x1f
    3c90:	04e65e63          	bge	a2,a4,3cec <__fixdfsi+0x78>
    3c94:	41d00613          	li	a2,1053
    3c98:	00e65a63          	bge	a2,a4,3cac <__fixdfsi+0x38>
    3c9c:	80000537          	lui	a0,0x80000
    3ca0:	fff54513          	not	a0,a0
    3ca4:	00a58533          	add	a0,a1,a0
    3ca8:	00008067          	ret
    3cac:	00d7e7b3          	or	a5,a5,a3
    3cb0:	43300693          	li	a3,1075
    3cb4:	40e686b3          	sub	a3,a3,a4
    3cb8:	01f00613          	li	a2,31
    3cbc:	02d64063          	blt	a2,a3,3cdc <__fixdfsi+0x68>
    3cc0:	bed70713          	addi	a4,a4,-1043
    3cc4:	00e797b3          	sll	a5,a5,a4
    3cc8:	00d55533          	srl	a0,a0,a3
    3ccc:	00a7e533          	or	a0,a5,a0
    3cd0:	02058063          	beqz	a1,3cf0 <__fixdfsi+0x7c>
    3cd4:	40a00533          	neg	a0,a0
    3cd8:	00008067          	ret
    3cdc:	41300513          	li	a0,1043
    3ce0:	40e50533          	sub	a0,a0,a4
    3ce4:	00a7d533          	srl	a0,a5,a0
    3ce8:	fe9ff06f          	j	3cd0 <__fixdfsi+0x5c>
    3cec:	00000513          	li	a0,0
    3cf0:	00008067          	ret

00003cf4 <__floatsidf>:
    3cf4:	ff010113          	addi	sp,sp,-16
    3cf8:	00112623          	sw	ra,12(sp)
    3cfc:	00812423          	sw	s0,8(sp)
    3d00:	00912223          	sw	s1,4(sp)
    3d04:	08050663          	beqz	a0,3d90 <__floatsidf+0x9c>
    3d08:	41f55793          	srai	a5,a0,0x1f
    3d0c:	00a7c433          	xor	s0,a5,a0
    3d10:	40f40433          	sub	s0,s0,a5
    3d14:	01f55493          	srli	s1,a0,0x1f
    3d18:	00040513          	mv	a0,s0
    3d1c:	dd4fc0ef          	jal	ra,2f0 <__clzsi2>
    3d20:	41e00713          	li	a4,1054
    3d24:	00a00793          	li	a5,10
    3d28:	40a70733          	sub	a4,a4,a0
    3d2c:	04a7c863          	blt	a5,a0,3d7c <__floatsidf+0x88>
    3d30:	00b00793          	li	a5,11
    3d34:	40a787b3          	sub	a5,a5,a0
    3d38:	01550513          	addi	a0,a0,21 # 80000015 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000016>
    3d3c:	00f457b3          	srl	a5,s0,a5
    3d40:	00a41433          	sll	s0,s0,a0
    3d44:	00048513          	mv	a0,s1
    3d48:	00c79793          	slli	a5,a5,0xc
    3d4c:	01471713          	slli	a4,a4,0x14
    3d50:	00c7d793          	srli	a5,a5,0xc
    3d54:	01f51513          	slli	a0,a0,0x1f
    3d58:	00f767b3          	or	a5,a4,a5
    3d5c:	00c12083          	lw	ra,12(sp)
    3d60:	00a7e733          	or	a4,a5,a0
    3d64:	00040513          	mv	a0,s0
    3d68:	00812403          	lw	s0,8(sp)
    3d6c:	00412483          	lw	s1,4(sp)
    3d70:	00070593          	mv	a1,a4
    3d74:	01010113          	addi	sp,sp,16
    3d78:	00008067          	ret
    3d7c:	ff550513          	addi	a0,a0,-11
    3d80:	00a417b3          	sll	a5,s0,a0
    3d84:	00048513          	mv	a0,s1
    3d88:	00000413          	li	s0,0
    3d8c:	fbdff06f          	j	3d48 <__floatsidf+0x54>
    3d90:	00000713          	li	a4,0
    3d94:	00000793          	li	a5,0
    3d98:	ff1ff06f          	j	3d88 <__floatsidf+0x94>

00003d9c <__trunctfdf2>:
    3d9c:	fd010113          	addi	sp,sp,-48
    3da0:	00852783          	lw	a5,8(a0)
    3da4:	02812423          	sw	s0,40(sp)
    3da8:	00c52403          	lw	s0,12(a0)
    3dac:	00452703          	lw	a4,4(a0)
    3db0:	00052683          	lw	a3,0(a0)
    3db4:	00f12423          	sw	a5,8(sp)
    3db8:	00f12c23          	sw	a5,24(sp)
    3dbc:	01041793          	slli	a5,s0,0x10
    3dc0:	00e12223          	sw	a4,4(sp)
    3dc4:	00e12a23          	sw	a4,20(sp)
    3dc8:	0107d793          	srli	a5,a5,0x10
    3dcc:	00141713          	slli	a4,s0,0x1
    3dd0:	00812623          	sw	s0,12(sp)
    3dd4:	02112623          	sw	ra,44(sp)
    3dd8:	02912223          	sw	s1,36(sp)
    3ddc:	00d12023          	sw	a3,0(sp)
    3de0:	00d12823          	sw	a3,16(sp)
    3de4:	00f12e23          	sw	a5,28(sp)
    3de8:	01175713          	srli	a4,a4,0x11
    3dec:	01f45413          	srli	s0,s0,0x1f
    3df0:	01010513          	addi	a0,sp,16
    3df4:	01c10613          	addi	a2,sp,28
    3df8:	00062783          	lw	a5,0(a2)
    3dfc:	ffc62683          	lw	a3,-4(a2)
    3e00:	ffc60613          	addi	a2,a2,-4
    3e04:	00379793          	slli	a5,a5,0x3
    3e08:	01d6d693          	srli	a3,a3,0x1d
    3e0c:	00d7e7b3          	or	a5,a5,a3
    3e10:	00f62223          	sw	a5,4(a2)
    3e14:	fec512e3          	bne	a0,a2,3df8 <__trunctfdf2+0x5c>
    3e18:	01012683          	lw	a3,16(sp)
    3e1c:	00170793          	addi	a5,a4,1
    3e20:	00369593          	slli	a1,a3,0x3
    3e24:	000086b7          	lui	a3,0x8
    3e28:	ffe68693          	addi	a3,a3,-2 # 7ffe <z_add_timeout+0x32>
    3e2c:	00b12823          	sw	a1,16(sp)
    3e30:	00d7f7b3          	and	a5,a5,a3
    3e34:	1c078063          	beqz	a5,3ff4 <__trunctfdf2+0x258>
    3e38:	ffffc7b7          	lui	a5,0xffffc
    3e3c:	40078793          	addi	a5,a5,1024 # ffffc400 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffffc401>
    3e40:	00f70733          	add	a4,a4,a5
    3e44:	7fe00793          	li	a5,2046
    3e48:	20e7c263          	blt	a5,a4,404c <__trunctfdf2+0x2b0>
    3e4c:	06e05863          	blez	a4,3ebc <__trunctfdf2+0x120>
    3e50:	01812503          	lw	a0,24(sp)
    3e54:	01c12603          	lw	a2,28(sp)
    3e58:	01412783          	lw	a5,20(sp)
    3e5c:	01c55693          	srli	a3,a0,0x1c
    3e60:	00461613          	slli	a2,a2,0x4
    3e64:	00d66633          	or	a2,a2,a3
    3e68:	00479693          	slli	a3,a5,0x4
    3e6c:	00b6e6b3          	or	a3,a3,a1
    3e70:	01c7d793          	srli	a5,a5,0x1c
    3e74:	00451513          	slli	a0,a0,0x4
    3e78:	00d036b3          	snez	a3,a3
    3e7c:	00a7e7b3          	or	a5,a5,a0
    3e80:	00f6e6b3          	or	a3,a3,a5
    3e84:	00c12a23          	sw	a2,20(sp)
    3e88:	00d12823          	sw	a3,16(sp)
    3e8c:	01012683          	lw	a3,16(sp)
    3e90:	01412783          	lw	a5,20(sp)
    3e94:	0076f613          	andi	a2,a3,7
    3e98:	1c060063          	beqz	a2,4058 <__trunctfdf2+0x2bc>
    3e9c:	00f6f613          	andi	a2,a3,15
    3ea0:	00400593          	li	a1,4
    3ea4:	1ab60a63          	beq	a2,a1,4058 <__trunctfdf2+0x2bc>
    3ea8:	00468613          	addi	a2,a3,4
    3eac:	00d636b3          	sltu	a3,a2,a3
    3eb0:	00d787b3          	add	a5,a5,a3
    3eb4:	00060693          	mv	a3,a2
    3eb8:	1a00006f          	j	4058 <__trunctfdf2+0x2bc>
    3ebc:	fcc00793          	li	a5,-52
    3ec0:	00f75c63          	bge	a4,a5,3ed8 <__trunctfdf2+0x13c>
    3ec4:	00012a23          	sw	zero,20(sp)
    3ec8:	00100793          	li	a5,1
    3ecc:	00f12823          	sw	a5,16(sp)
    3ed0:	00000713          	li	a4,0
    3ed4:	fb9ff06f          	j	3e8c <__trunctfdf2+0xf0>
    3ed8:	01c12783          	lw	a5,28(sp)
    3edc:	000808b7          	lui	a7,0x80
    3ee0:	00050593          	mv	a1,a0
    3ee4:	00f8e8b3          	or	a7,a7,a5
    3ee8:	03d00793          	li	a5,61
    3eec:	40e78733          	sub	a4,a5,a4
    3ef0:	01112e23          	sw	a7,28(sp)
    3ef4:	40575793          	srai	a5,a4,0x5
    3ef8:	00000693          	li	a3,0
    3efc:	00000493          	li	s1,0
    3f00:	0005a803          	lw	a6,0(a1)
    3f04:	00168693          	addi	a3,a3,1
    3f08:	00458593          	addi	a1,a1,4
    3f0c:	0104e4b3          	or	s1,s1,a6
    3f10:	fed798e3          	bne	a5,a3,3f00 <__trunctfdf2+0x164>
    3f14:	01f77713          	andi	a4,a4,31
    3f18:	00279693          	slli	a3,a5,0x2
    3f1c:	02071863          	bnez	a4,3f4c <__trunctfdf2+0x1b0>
    3f20:	00300593          	li	a1,3
    3f24:	40f585b3          	sub	a1,a1,a5
    3f28:	00d60833          	add	a6,a2,a3
    3f2c:	00082803          	lw	a6,0(a6)
    3f30:	00170713          	addi	a4,a4,1
    3f34:	00460613          	addi	a2,a2,4
    3f38:	ff062e23          	sw	a6,-4(a2)
    3f3c:	fee5d6e3          	bge	a1,a4,3f28 <__trunctfdf2+0x18c>
    3f40:	00400713          	li	a4,4
    3f44:	40f707b3          	sub	a5,a4,a5
    3f48:	0580006f          	j	3fa0 <__trunctfdf2+0x204>
    3f4c:	ffc00e13          	li	t3,-4
    3f50:	03c78e33          	mul	t3,a5,t3
    3f54:	02010613          	addi	a2,sp,32
    3f58:	00d60633          	add	a2,a2,a3
    3f5c:	ff062603          	lw	a2,-16(a2)
    3f60:	02000813          	li	a6,32
    3f64:	40e80833          	sub	a6,a6,a4
    3f68:	01061633          	sll	a2,a2,a6
    3f6c:	00c4e4b3          	or	s1,s1,a2
    3f70:	00300613          	li	a2,3
    3f74:	00d506b3          	add	a3,a0,a3
    3f78:	00000313          	li	t1,0
    3f7c:	40f60633          	sub	a2,a2,a5
    3f80:	04c34663          	blt	t1,a2,3fcc <__trunctfdf2+0x230>
    3f84:	00400693          	li	a3,4
    3f88:	40f687b3          	sub	a5,a3,a5
    3f8c:	00261613          	slli	a2,a2,0x2
    3f90:	02010693          	addi	a3,sp,32
    3f94:	00c68633          	add	a2,a3,a2
    3f98:	00e8d733          	srl	a4,a7,a4
    3f9c:	fee62823          	sw	a4,-16(a2)
    3fa0:	00400613          	li	a2,4
    3fa4:	40f60633          	sub	a2,a2,a5
    3fa8:	00279793          	slli	a5,a5,0x2
    3fac:	00f50533          	add	a0,a0,a5
    3fb0:	00261613          	slli	a2,a2,0x2
    3fb4:	00000593          	li	a1,0
    3fb8:	b0cff0ef          	jal	ra,32c4 <memset>
    3fbc:	01012703          	lw	a4,16(sp)
    3fc0:	009037b3          	snez	a5,s1
    3fc4:	00f767b3          	or	a5,a4,a5
    3fc8:	f05ff06f          	j	3ecc <__trunctfdf2+0x130>
    3fcc:	0006a583          	lw	a1,0(a3)
    3fd0:	0046ae83          	lw	t4,4(a3)
    3fd4:	01c68f33          	add	t5,a3,t3
    3fd8:	00e5d5b3          	srl	a1,a1,a4
    3fdc:	010e9eb3          	sll	t4,t4,a6
    3fe0:	01d5e5b3          	or	a1,a1,t4
    3fe4:	00bf2023          	sw	a1,0(t5)
    3fe8:	00130313          	addi	t1,t1,1
    3fec:	00468693          	addi	a3,a3,4
    3ff0:	f91ff06f          	j	3f80 <__trunctfdf2+0x1e4>
    3ff4:	01412603          	lw	a2,20(sp)
    3ff8:	01812783          	lw	a5,24(sp)
    3ffc:	01c12503          	lw	a0,28(sp)
    4000:	00c7e6b3          	or	a3,a5,a2
    4004:	00a6e6b3          	or	a3,a3,a0
    4008:	00b6e6b3          	or	a3,a3,a1
    400c:	00071863          	bnez	a4,401c <__trunctfdf2+0x280>
    4010:	00d036b3          	snez	a3,a3
    4014:	00000793          	li	a5,0
    4018:	e7dff06f          	j	3e94 <__trunctfdf2+0xf8>
    401c:	0c068663          	beqz	a3,40e8 <__trunctfdf2+0x34c>
    4020:	01c65693          	srli	a3,a2,0x1c
    4024:	00451513          	slli	a0,a0,0x4
    4028:	00479613          	slli	a2,a5,0x4
    402c:	01c7d793          	srli	a5,a5,0x1c
    4030:	00400737          	lui	a4,0x400
    4034:	00c6e6b3          	or	a3,a3,a2
    4038:	00a7e7b3          	or	a5,a5,a0
    403c:	00e7e7b3          	or	a5,a5,a4
    4040:	ff86f693          	andi	a3,a3,-8
    4044:	7ff00713          	li	a4,2047
    4048:	e4dff06f          	j	3e94 <__trunctfdf2+0xf8>
    404c:	00000793          	li	a5,0
    4050:	00000693          	li	a3,0
    4054:	7ff00713          	li	a4,2047
    4058:	00800637          	lui	a2,0x800
    405c:	00c7f633          	and	a2,a5,a2
    4060:	00060e63          	beqz	a2,407c <__trunctfdf2+0x2e0>
    4064:	00170713          	addi	a4,a4,1 # 400001 <__data_region_end+0x3d1101>
    4068:	7ff00613          	li	a2,2047
    406c:	08c70263          	beq	a4,a2,40f0 <__trunctfdf2+0x354>
    4070:	ff800637          	lui	a2,0xff800
    4074:	fff60613          	addi	a2,a2,-1 # ff7fffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xff800000>
    4078:	00c7f7b3          	and	a5,a5,a2
    407c:	01d79613          	slli	a2,a5,0x1d
    4080:	0036d693          	srli	a3,a3,0x3
    4084:	00d666b3          	or	a3,a2,a3
    4088:	7ff00613          	li	a2,2047
    408c:	0037d793          	srli	a5,a5,0x3
    4090:	00c71e63          	bne	a4,a2,40ac <__trunctfdf2+0x310>
    4094:	00f6e6b3          	or	a3,a3,a5
    4098:	00000793          	li	a5,0
    409c:	00068863          	beqz	a3,40ac <__trunctfdf2+0x310>
    40a0:	000807b7          	lui	a5,0x80
    40a4:	00000693          	li	a3,0
    40a8:	00000413          	li	s0,0
    40ac:	01471713          	slli	a4,a4,0x14
    40b0:	7ff00637          	lui	a2,0x7ff00
    40b4:	00c79793          	slli	a5,a5,0xc
    40b8:	00c77733          	and	a4,a4,a2
    40bc:	00c7d793          	srli	a5,a5,0xc
    40c0:	01f41413          	slli	s0,s0,0x1f
    40c4:	00f767b3          	or	a5,a4,a5
    40c8:	02c12083          	lw	ra,44(sp)
    40cc:	0087e733          	or	a4,a5,s0
    40d0:	02812403          	lw	s0,40(sp)
    40d4:	02412483          	lw	s1,36(sp)
    40d8:	00068513          	mv	a0,a3
    40dc:	00070593          	mv	a1,a4
    40e0:	03010113          	addi	sp,sp,48
    40e4:	00008067          	ret
    40e8:	00000793          	li	a5,0
    40ec:	f69ff06f          	j	4054 <__trunctfdf2+0x2b8>
    40f0:	00000793          	li	a5,0
    40f4:	00000693          	li	a3,0
    40f8:	f85ff06f          	j	407c <__trunctfdf2+0x2e0>

000040fc <_OffsetAbsSyms>:
 * point regs
 */
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF,
		 STACK_ROUND_UP(sizeof(struct k_thread)));

GEN_ABS_SYM_END
    40fc:	00008067          	ret

00004100 <main>:
    int numErrors = 0, totalErrors;
    uint32_t start_sw_ms, finish_sw_ms, time_sw=0;
    uint32_t start_hw_ms, finish_hw_ms, time_hw=0;
    struct matmul *head, *node;

    printf("*****Starting matmul UC 0!*****\n\n");
    4100:	0000d537          	lui	a0,0xd
{
    4104:	fe010113          	addi	sp,sp,-32
    printf("*****Starting matmul UC 0!*****\n\n");
    4108:	34050513          	addi	a0,a0,832 # d340 <__mprec_tens+0xc8>
{
    410c:	00112e23          	sw	ra,28(sp)
    4110:	00812c23          	sw	s0,24(sp)
    4114:	00912a23          	sw	s1,20(sp)
    4118:	01212823          	sw	s2,16(sp)
    411c:	01312623          	sw	s3,12(sp)
    4120:	01412423          	sw	s4,8(sp)
    printf("*****Starting matmul UC 0!*****\n\n");
    4124:	718050ef          	jal	ra,983c <iprintf>

    head = (struct matmul *)k_malloc(sizeof(struct matmul));
    4128:	02000513          	li	a0,32
    412c:	3c0040ef          	jal	ra,84ec <k_malloc>
    4130:	00050413          	mv	s0,a0
    if(head == NULL) printf("Error allocating memory for matmul linked list head!\n");
    4134:	00051863          	bnez	a0,4144 <main+0x44>
    4138:	0000d537          	lui	a0,0xd
    413c:	36450513          	addi	a0,a0,868 # d364 <__mprec_tens+0xec>
    4140:	6fc050ef          	jal	ra,983c <iprintf>
    init_matmul(head, 0, 0, 0);
    4144:	00000693          	li	a3,0
    4148:	00000613          	li	a2,0
    414c:	00000593          	li	a1,0
    4150:	00040513          	mv	a0,s0
    4154:	394000ef          	jal	ra,44e8 <init_matmul>

    
    printf("Defining %d matmuls and adding them to the queue...\n", NUM_MATMULS);
    4158:	0000d537          	lui	a0,0xd
    415c:	06400593          	li	a1,100
    4160:	39c50513          	addi	a0,a0,924 # d39c <__mprec_tens+0x124>
    4164:	6d8050ef          	jal	ra,983c <iprintf>
    for(int i=0; i<NUM_MATMULS; i++) {
    4168:	00000493          	li	s1,0
        if(newNode == NULL) {
            printf("Could not allocate space for matmul %d!\n", i);
            break;
        }
        int err = init_matmul(newNode, 8, 8, 8);
        if(err == -1) {
    416c:	fff00a13          	li	s4,-1
    for(int i=0; i<NUM_MATMULS; i++) {
    4170:	06400993          	li	s3,100
        struct matmul *newNode = (struct matmul *)k_malloc(sizeof(struct matmul));
    4174:	02000513          	li	a0,32
    4178:	374040ef          	jal	ra,84ec <k_malloc>
    417c:	00050913          	mv	s2,a0
        if(newNode == NULL) {
    4180:	18051463          	bnez	a0,4308 <main+0x208>
            printf("Could not allocate space for matmul %d!\n", i);
    4184:	0000d537          	lui	a0,0xd
    4188:	00048593          	mv	a1,s1
    418c:	3d450513          	addi	a0,a0,980 # d3d4 <__mprec_tens+0x15c>
    4190:	6ac050ef          	jal	ra,983c <iprintf>
            break;
        }
        fill_matmul(newNode);
        push_matmul(head, newNode);
    }
    printf("%d matmuls added to the queue!\n", NUM_MATMULS);
    4194:	0000d537          	lui	a0,0xd
    4198:	06400593          	li	a1,100
    419c:	40050513          	addi	a0,a0,1024 # d400 <__mprec_tens+0x188>
    41a0:	69c050ef          	jal	ra,983c <iprintf>


    printf("\nPerforming software matrix multiplication...\n");
    41a4:	0000d537          	lui	a0,0xd
    41a8:	42050513          	addi	a0,a0,1056 # d420 <__mprec_tens+0x1a8>
    41ac:	690050ef          	jal	ra,983c <iprintf>
    node = head->next;
    41b0:	01c42483          	lw	s1,28(s0)
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
    41b4:	00a00993          	li	s3,10
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
    41b8:	1ec040ef          	jal	ra,83a4 <z_impl_k_uptime_ticks>
    41bc:	02a98a33          	mul	s4,s3,a0
    start_sw_ms = k_uptime_get();
    41c0:	06400913          	li	s2,100
    for(int i=0; i<NUM_MATMULS; i++) {
        multiply_mat_sw(node->resultSW, node->mat1, node->mat2, node->mat1Rows, node->mat1Cols, node->mat2Cols);
    41c4:	0104a783          	lw	a5,16(s1)
    41c8:	00c4a703          	lw	a4,12(s1)
    41cc:	0084a683          	lw	a3,8(s1)
    41d0:	0044a603          	lw	a2,4(s1)
    41d4:	0004a583          	lw	a1,0(s1)
    41d8:	0184a503          	lw	a0,24(s1)
    for(int i=0; i<NUM_MATMULS; i++) {
    41dc:	fff90913          	addi	s2,s2,-1
        multiply_mat_sw(node->resultSW, node->mat1, node->mat2, node->mat1Rows, node->mat1Cols, node->mat2Cols);
    41e0:	4c8000ef          	jal	ra,46a8 <multiply_mat_sw>
        // print_mat(node->resultSW, node->mat1Rows, node->mat2Cols);
        node = node->next;
    41e4:	01c4a483          	lw	s1,28(s1)
    for(int i=0; i<NUM_MATMULS; i++) {
    41e8:	fc091ee3          	bnez	s2,41c4 <main+0xc4>
    41ec:	00a00913          	li	s2,10
    41f0:	1b4040ef          	jal	ra,83a4 <z_impl_k_uptime_ticks>
    41f4:	02a909b3          	mul	s3,s2,a0
    }
    finish_sw_ms = k_uptime_get();
    time_sw = finish_sw_ms - start_sw_ms;
    printf("Completed software matrix multiplication!\n");
    41f8:	0000d537          	lui	a0,0xd
    41fc:	45050513          	addi	a0,a0,1104 # d450 <__mprec_tens+0x1d8>
    4200:	63c050ef          	jal	ra,983c <iprintf>


    printf("\nPerforming hardware matrix multiplication...\n");
    4204:	0000d537          	lui	a0,0xd
    4208:	47c50513          	addi	a0,a0,1148 # d47c <__mprec_tens+0x204>
    420c:	630050ef          	jal	ra,983c <iprintf>
    node = head->next;
    4210:	01c42483          	lw	s1,28(s0)
    time_sw = finish_sw_ms - start_sw_ms;
    4214:	414989b3          	sub	s3,s3,s4
    4218:	18c040ef          	jal	ra,83a4 <z_impl_k_uptime_ticks>
    421c:	02a90a33          	mul	s4,s2,a0
    start_hw_ms = k_uptime_get();
    4220:	06400913          	li	s2,100
    for(int i=0; i<NUM_MATMULS; i++) {
        multiply_mat_hw((int)node->mat1, (int)node->mat2, (int)node->resultHW, node->mat1Rows, node->mat1Cols, node->mat2Cols);
    4224:	0104a783          	lw	a5,16(s1)
    4228:	00c4a703          	lw	a4,12(s1)
    422c:	0084a683          	lw	a3,8(s1)
    4230:	0144a603          	lw	a2,20(s1)
    4234:	0044a583          	lw	a1,4(s1)
    4238:	0004a503          	lw	a0,0(s1)
    for(int i=0; i<NUM_MATMULS; i++) {
    423c:	fff90913          	addi	s2,s2,-1
        multiply_mat_hw((int)node->mat1, (int)node->mat2, (int)node->resultHW, node->mat1Rows, node->mat1Cols, node->mat2Cols);
    4240:	5a4000ef          	jal	ra,47e4 <multiply_mat_hw>
        // print_mat(node->resultHW, node->mat1Rows, node->mat2Cols);
        node = node->next;
    4244:	01c4a483          	lw	s1,28(s1)
    for(int i=0; i<NUM_MATMULS; i++) {
    4248:	fc091ee3          	bnez	s2,4224 <main+0x124>
    424c:	158040ef          	jal	ra,83a4 <z_impl_k_uptime_ticks>
    4250:	00a00793          	li	a5,10
    4254:	02a78933          	mul	s2,a5,a0
    }
    finish_hw_ms = k_uptime_get();
    time_hw = finish_hw_ms - start_hw_ms;
    printf("Completed hardware matrix multiplication!\n");
    4258:	0000d537          	lui	a0,0xd
    425c:	4ac50513          	addi	a0,a0,1196 # d4ac <__mprec_tens+0x234>
    4260:	5dc050ef          	jal	ra,983c <iprintf>


    node = head->next;
    4264:	01c42483          	lw	s1,28(s0)
    time_hw = finish_hw_ms - start_hw_ms;
    4268:	41490933          	sub	s2,s2,s4
    node = head->next;
    426c:	06400a13          	li	s4,100
    for(int i=0; i<NUM_MATMULS; i++) {
        numErrors = verify_matmul(node->resultHW, node->resultSW, node->mat1Rows, node->mat2Cols);
    4270:	0084a603          	lw	a2,8(s1)
    4274:	0104a683          	lw	a3,16(s1)
    4278:	0184a583          	lw	a1,24(s1)
    427c:	0144a503          	lw	a0,20(s1)
    for(int i=0; i<NUM_MATMULS; i++) {
    4280:	fffa0a13          	addi	s4,s4,-1
        numErrors = verify_matmul(node->resultHW, node->resultSW, node->mat1Rows, node->mat2Cols);
    4284:	178000ef          	jal	ra,43fc <verify_matmul>
    4288:	00050613          	mv	a2,a0
        totalErrors += numErrors;
        node = node->next;
    428c:	01c4a483          	lw	s1,28(s1)
    for(int i=0; i<NUM_MATMULS; i++) {
    4290:	fe0a10e3          	bnez	s4,4270 <main+0x170>
    }


    printf("\n%d matmuls done with %d errors!\n", NUM_MATMULS, numErrors);
    4294:	0000d537          	lui	a0,0xd
    4298:	06400593          	li	a1,100
    429c:	4d850513          	addi	a0,a0,1240 # d4d8 <__mprec_tens+0x260>
    42a0:	59c050ef          	jal	ra,983c <iprintf>
    printf("Software took %u miliseconds\n", time_sw);
    42a4:	0000d537          	lui	a0,0xd
    42a8:	00098593          	mv	a1,s3
    42ac:	4fc50513          	addi	a0,a0,1276 # d4fc <__mprec_tens+0x284>
    42b0:	58c050ef          	jal	ra,983c <iprintf>
    printf("Hardware took %u miliseconds\n", time_hw);
    42b4:	0000d537          	lui	a0,0xd
    42b8:	00090593          	mv	a1,s2
    42bc:	51c50513          	addi	a0,a0,1308 # d51c <__mprec_tens+0x2a4>
    42c0:	57c050ef          	jal	ra,983c <iprintf>

    printf("\nFreeing memory...\n");
    42c4:	0000d537          	lui	a0,0xd
    42c8:	53c50513          	addi	a0,a0,1340 # d53c <__mprec_tens+0x2c4>
    42cc:	570050ef          	jal	ra,983c <iprintf>
    free_queue(head);
    42d0:	00040513          	mv	a0,s0
    42d4:	38c000ef          	jal	ra,4660 <free_queue>

    printf("\n*****Exiting matmul UC 0!*****\n");
    42d8:	0000d537          	lui	a0,0xd
    42dc:	55050513          	addi	a0,a0,1360 # d550 <__mprec_tens+0x2d8>
    42e0:	55c050ef          	jal	ra,983c <iprintf>

    return 0;
}
    42e4:	01c12083          	lw	ra,28(sp)
    42e8:	01812403          	lw	s0,24(sp)
    42ec:	01412483          	lw	s1,20(sp)
    42f0:	01012903          	lw	s2,16(sp)
    42f4:	00c12983          	lw	s3,12(sp)
    42f8:	00812a03          	lw	s4,8(sp)
    42fc:	00000513          	li	a0,0
    4300:	02010113          	addi	sp,sp,32
    4304:	00008067          	ret
        int err = init_matmul(newNode, 8, 8, 8);
    4308:	00800693          	li	a3,8
    430c:	00800613          	li	a2,8
    4310:	00800593          	li	a1,8
    4314:	1d4000ef          	jal	ra,44e8 <init_matmul>
        if(err == -1) {
    4318:	e74506e3          	beq	a0,s4,4184 <main+0x84>
        fill_matmul(newNode);
    431c:	00090513          	mv	a0,s2
    4320:	280000ef          	jal	ra,45a0 <fill_matmul>
        push_matmul(head, newNode);
    4324:	00090593          	mv	a1,s2
    4328:	00040513          	mv	a0,s0
    for(int i=0; i<NUM_MATMULS; i++) {
    432c:	00148493          	addi	s1,s1,1
        push_matmul(head, newNode);
    4330:	2ac000ef          	jal	ra,45dc <push_matmul>
    for(int i=0; i<NUM_MATMULS; i++) {
    4334:	e53490e3          	bne	s1,s3,4174 <main+0x74>
    4338:	e5dff06f          	j	4194 <main+0x94>

0000433c <create_mat>:
#include "matrix.h"

void create_mat(float *matrix, int rows, int cols)
{
    433c:	fd010113          	addi	sp,sp,-48
    for (int i=0; i<rows; i++) {
        for (int j=0; j<cols; j++) {
            int random_integer = sys_rand32_get()%100;
            matrix[i*cols+j] = (float)random_integer / 10;
    4340:	0000d7b7          	lui	a5,0xd
{
    4344:	01812423          	sw	s8,8(sp)
            matrix[i*cols+j] = (float)random_integer / 10;
    4348:	0487ac03          	lw	s8,72(a5) # d048 <__device_handles_end+0x58>
{
    434c:	02912223          	sw	s1,36(sp)
    4350:	01312e23          	sw	s3,28(sp)
    4354:	01412c23          	sw	s4,24(sp)
    4358:	01512a23          	sw	s5,20(sp)
    435c:	01612823          	sw	s6,16(sp)
    4360:	01712623          	sw	s7,12(sp)
    4364:	02112623          	sw	ra,44(sp)
    4368:	02812423          	sw	s0,40(sp)
    436c:	03212023          	sw	s2,32(sp)
    4370:	00050993          	mv	s3,a0
    4374:	00058b13          	mv	s6,a1
    4378:	00060493          	mv	s1,a2
    for (int i=0; i<rows; i++) {
    437c:	00000a13          	li	s4,0
    4380:	00000a93          	li	s5,0
            int random_integer = sys_rand32_get()%100;
    4384:	06400b93          	li	s7,100
    for (int i=0; i<rows; i++) {
    4388:	056ad263          	bge	s5,s6,43cc <create_mat+0x90>
    438c:	002a1413          	slli	s0,s4,0x2
    4390:	00898433          	add	s0,s3,s0
        for (int j=0; j<cols; j++) {
    4394:	00000913          	li	s2,0
    4398:	0240006f          	j	43bc <create_mat+0x80>
		/* coverity[OVERRUN] */
		return (uint32_t) arch_syscall_invoke0(K_SYSCALL_SYS_RAND32_GET);
	}
#endif
	compiler_barrier();
	return z_impl_sys_rand32_get();
    439c:	0e0020ef          	jal	ra,647c <z_impl_sys_rand32_get>
            matrix[i*cols+j] = (float)random_integer / 10;
    43a0:	03757533          	remu	a0,a0,s7
        for (int j=0; j<cols; j++) {
    43a4:	00190913          	addi	s2,s2,1
    43a8:	00440413          	addi	s0,s0,4
            matrix[i*cols+j] = (float)random_integer / 10;
    43ac:	d11fe0ef          	jal	ra,30bc <__floatsisf>
    43b0:	000c0593          	mv	a1,s8
    43b4:	a64fe0ef          	jal	ra,2618 <__divsf3>
    43b8:	fea42e23          	sw	a0,-4(s0)
        for (int j=0; j<cols; j++) {
    43bc:	fe9940e3          	blt	s2,s1,439c <create_mat+0x60>
    for (int i=0; i<rows; i++) {
    43c0:	001a8a93          	addi	s5,s5,1 # 800001 <__data_region_end+0x7d1101>
    43c4:	009a0a33          	add	s4,s4,s1
    43c8:	fc1ff06f          	j	4388 <create_mat+0x4c>
            // matrix[i*cols+j] = 1;
        }
    }
}
    43cc:	02c12083          	lw	ra,44(sp)
    43d0:	02812403          	lw	s0,40(sp)
    43d4:	02412483          	lw	s1,36(sp)
    43d8:	02012903          	lw	s2,32(sp)
    43dc:	01c12983          	lw	s3,28(sp)
    43e0:	01812a03          	lw	s4,24(sp)
    43e4:	01412a83          	lw	s5,20(sp)
    43e8:	01012b03          	lw	s6,16(sp)
    43ec:	00c12b83          	lw	s7,12(sp)
    43f0:	00812c03          	lw	s8,8(sp)
    43f4:	03010113          	addi	sp,sp,48
    43f8:	00008067          	ret

000043fc <verify_matmul>:
    }
    printk("\n\n");
}

int verify_matmul(float *mat1, float *mat2, int rows, int cols)
{
    43fc:	fd010113          	addi	sp,sp,-48
    int num_errors = 0;

    for (int i=0; i<rows; i++) {
        for (int j=0; j<cols; j++) {
            if(mat1[i*cols+j]-mat2[i*cols+j] >= 0.01) num_errors++;
    4400:	0000d7b7          	lui	a5,0xd
{
    4404:	01612823          	sw	s6,16(sp)
    4408:	01712623          	sw	s7,12(sp)
            if(mat1[i*cols+j]-mat2[i*cols+j] >= 0.01) num_errors++;
    440c:	ff07ab03          	lw	s6,-16(a5) # cff0 <__device_handles_end>
    4410:	ff47ab83          	lw	s7,-12(a5)
{
    4414:	02912223          	sw	s1,36(sp)
    4418:	03212023          	sw	s2,32(sp)
    441c:	01412c23          	sw	s4,24(sp)
    4420:	01512a23          	sw	s5,20(sp)
    4424:	01812423          	sw	s8,8(sp)
    4428:	01912223          	sw	s9,4(sp)
    442c:	01a12023          	sw	s10,0(sp)
    4430:	02112623          	sw	ra,44(sp)
    4434:	02812423          	sw	s0,40(sp)
    4438:	01312e23          	sw	s3,28(sp)
    443c:	00050c13          	mv	s8,a0
    4440:	00058c93          	mv	s9,a1
    4444:	00060d13          	mv	s10,a2
    4448:	00068493          	mv	s1,a3
    for (int i=0; i<rows; i++) {
    444c:	00000a13          	li	s4,0
    4450:	00000a93          	li	s5,0
    int num_errors = 0;
    4454:	00000913          	li	s2,0
    for (int i=0; i<rows; i++) {
    4458:	05aada63          	bge	s5,s10,44ac <verify_matmul+0xb0>
    445c:	002a1413          	slli	s0,s4,0x2
        for (int j=0; j<cols; j++) {
    4460:	00000993          	li	s3,0
    4464:	0380006f          	j	449c <verify_matmul+0xa0>
            if(mat1[i*cols+j]-mat2[i*cols+j] >= 0.01) num_errors++;
    4468:	008c07b3          	add	a5,s8,s0
    446c:	008c8733          	add	a4,s9,s0
    4470:	00072583          	lw	a1,0(a4)
    4474:	0007a503          	lw	a0,0(a5)
    4478:	fd8fe0ef          	jal	ra,2c50 <__subsf3>
    447c:	d49fe0ef          	jal	ra,31c4 <__extendsfdf2>
    4480:	000b0613          	mv	a2,s6
    4484:	000b8693          	mv	a3,s7
    4488:	e1dfc0ef          	jal	ra,12a4 <__gedf2>
    448c:	00054463          	bltz	a0,4494 <verify_matmul+0x98>
    4490:	00190913          	addi	s2,s2,1
        for (int j=0; j<cols; j++) {
    4494:	00198993          	addi	s3,s3,1
    4498:	00440413          	addi	s0,s0,4
    449c:	fc99c6e3          	blt	s3,s1,4468 <verify_matmul+0x6c>
    for (int i=0; i<rows; i++) {
    44a0:	001a8a93          	addi	s5,s5,1
    44a4:	009a0a33          	add	s4,s4,s1
    44a8:	fb1ff06f          	j	4458 <verify_matmul+0x5c>
        }
    }

    return num_errors;
}
    44ac:	02c12083          	lw	ra,44(sp)
    44b0:	02812403          	lw	s0,40(sp)
    44b4:	02412483          	lw	s1,36(sp)
    44b8:	01c12983          	lw	s3,28(sp)
    44bc:	01812a03          	lw	s4,24(sp)
    44c0:	01412a83          	lw	s5,20(sp)
    44c4:	01012b03          	lw	s6,16(sp)
    44c8:	00c12b83          	lw	s7,12(sp)
    44cc:	00812c03          	lw	s8,8(sp)
    44d0:	00412c83          	lw	s9,4(sp)
    44d4:	00012d03          	lw	s10,0(sp)
    44d8:	00090513          	mv	a0,s2
    44dc:	02012903          	lw	s2,32(sp)
    44e0:	03010113          	addi	sp,sp,48
    44e4:	00008067          	ret

000044e8 <init_matmul>:

int init_matmul(struct matmul *node, int rows1, int cols1, int cols2)
{
    44e8:	fe010113          	addi	sp,sp,-32
    44ec:	00812c23          	sw	s0,24(sp)
    44f0:	00050413          	mv	s0,a0
    node->mat1 = (float *)k_malloc(rows1*cols1*sizeof(float));
    44f4:	02c58533          	mul	a0,a1,a2
{
    44f8:	00912a23          	sw	s1,20(sp)
    44fc:	01212823          	sw	s2,16(sp)
    4500:	01312623          	sw	s3,12(sp)
    4504:	00112e23          	sw	ra,28(sp)
    4508:	01412423          	sw	s4,8(sp)
    450c:	00058993          	mv	s3,a1
    4510:	00060913          	mv	s2,a2
    4514:	00068493          	mv	s1,a3
    node->mat1 = (float *)k_malloc(rows1*cols1*sizeof(float));
    4518:	00251513          	slli	a0,a0,0x2
    451c:	7d1030ef          	jal	ra,84ec <k_malloc>
    4520:	00a42023          	sw	a0,0(s0)
    if(node->mat1 == NULL) return -1;
    4524:	02051463          	bnez	a0,454c <init_matmul+0x64>
    4528:	fff00513          	li	a0,-1
    node->mat2Cols = cols2;

    node->next = NULL;

    return 0;
}
    452c:	01c12083          	lw	ra,28(sp)
    4530:	01812403          	lw	s0,24(sp)
    4534:	01412483          	lw	s1,20(sp)
    4538:	01012903          	lw	s2,16(sp)
    453c:	00c12983          	lw	s3,12(sp)
    4540:	00812a03          	lw	s4,8(sp)
    4544:	02010113          	addi	sp,sp,32
    4548:	00008067          	ret
    node->mat2 = (float *)k_malloc(cols1*cols2*sizeof(float));
    454c:	02990533          	mul	a0,s2,s1
    4550:	00251513          	slli	a0,a0,0x2
    4554:	799030ef          	jal	ra,84ec <k_malloc>
    4558:	00a42223          	sw	a0,4(s0)
    if(node->mat2 == NULL) return -1;
    455c:	fc0506e3          	beqz	a0,4528 <init_matmul+0x40>
    node->resultHW = (float *)k_malloc(rows1*cols2*sizeof(float));
    4560:	02998a33          	mul	s4,s3,s1
    4564:	002a1a13          	slli	s4,s4,0x2
    4568:	000a0513          	mv	a0,s4
    456c:	781030ef          	jal	ra,84ec <k_malloc>
    4570:	00a42a23          	sw	a0,20(s0)
    if(node->resultHW == NULL) return -1;
    4574:	fa050ae3          	beqz	a0,4528 <init_matmul+0x40>
    node->resultSW = (float *)k_malloc(rows1*cols2*sizeof(float));
    4578:	000a0513          	mv	a0,s4
    457c:	771030ef          	jal	ra,84ec <k_malloc>
    4580:	00a42c23          	sw	a0,24(s0)
    if(node->resultSW == NULL) return -1;
    4584:	fa0502e3          	beqz	a0,4528 <init_matmul+0x40>
    node->mat1Rows = rows1;
    4588:	01342423          	sw	s3,8(s0)
    node->mat1Cols = cols1;
    458c:	01242623          	sw	s2,12(s0)
    node->mat2Cols = cols2;
    4590:	00942823          	sw	s1,16(s0)
    node->next = NULL;
    4594:	00042e23          	sw	zero,28(s0)
    return 0;
    4598:	00000513          	li	a0,0
    459c:	f91ff06f          	j	452c <init_matmul+0x44>

000045a0 <fill_matmul>:

void fill_matmul(struct matmul *node)
{
    45a0:	ff010113          	addi	sp,sp,-16
    45a4:	00812423          	sw	s0,8(sp)
    create_mat(node->mat1, node->mat1Rows, node->mat1Cols);
    45a8:	00c52603          	lw	a2,12(a0)
{
    45ac:	00050413          	mv	s0,a0
    create_mat(node->mat1, node->mat1Rows, node->mat1Cols);
    45b0:	00852583          	lw	a1,8(a0)
    45b4:	00052503          	lw	a0,0(a0)
{
    45b8:	00112623          	sw	ra,12(sp)
    create_mat(node->mat1, node->mat1Rows, node->mat1Cols);
    45bc:	d81ff0ef          	jal	ra,433c <create_mat>
    create_mat(node->mat2, node->mat1Cols, node->mat2Cols);
    45c0:	01042603          	lw	a2,16(s0)
    45c4:	00c42583          	lw	a1,12(s0)
    45c8:	00442503          	lw	a0,4(s0)
}
    45cc:	00812403          	lw	s0,8(sp)
    45d0:	00c12083          	lw	ra,12(sp)
    45d4:	01010113          	addi	sp,sp,16
    create_mat(node->mat2, node->mat1Cols, node->mat2Cols);
    45d8:	d65ff06f          	j	433c <create_mat>

000045dc <push_matmul>:

void push_matmul(struct matmul *head, struct matmul *newNode)
{
    if (head == NULL) {
    45dc:	00050a63          	beqz	a0,45f0 <push_matmul+0x14>
        head = newNode;
    } else {
        struct matmul *current = head;
        while (current->next != NULL) {
    45e0:	00050793          	mv	a5,a0
    45e4:	01c52503          	lw	a0,28(a0)
    45e8:	fe051ce3          	bnez	a0,45e0 <push_matmul+0x4>
            current = current->next;
        }
        current->next = newNode;
    45ec:	00b7ae23          	sw	a1,28(a5)
    }
}
    45f0:	00008067          	ret

000045f4 <pop2_matmul>:
    }
}

void pop2_matmul(struct matmul *head, struct matmul **node)
{
    if (head->next == NULL) {
    45f4:	01c52783          	lw	a5,28(a0)
    45f8:	00079863          	bnez	a5,4608 <pop2_matmul+0x14>
        printf("Stack is empty!\n");
    45fc:	0000d537          	lui	a0,0xd
    4600:	57450513          	addi	a0,a0,1396 # d574 <__mprec_tens+0x2fc>
    4604:	2380506f          	j	983c <iprintf>
        return;
    }
    
    *node = head->next;
    4608:	00f5a023          	sw	a5,0(a1)

    if(head->next->next != NULL)
    460c:	01c7a783          	lw	a5,28(a5)
        head->next = head->next->next;
    4610:	00f52e23          	sw	a5,28(a0)
    else
        head->next = NULL;
}
    4614:	00008067          	ret

00004618 <free_matmul>:
    // printf("Starting hardware matmul...\n");
    multiply_mat_hw(MAT1_ADDRESS, MAT2_ADDRESS, RESULT_HW_ADDRESS, node->mat1Rows, node->mat1Cols, node->mat2Cols);
}

void free_matmul(struct matmul *node)
{
    4618:	ff010113          	addi	sp,sp,-16
    461c:	00812423          	sw	s0,8(sp)
    4620:	00050413          	mv	s0,a0
    k_free(node->mat1);
    4624:	00052503          	lw	a0,0(a0)
{
    4628:	00112623          	sw	ra,12(sp)
    k_free(node->mat1);
    462c:	699030ef          	jal	ra,84c4 <k_free>
    k_free(node->mat2);
    4630:	00442503          	lw	a0,4(s0)
    4634:	691030ef          	jal	ra,84c4 <k_free>
    k_free(node->resultHW);
    4638:	01442503          	lw	a0,20(s0)
    463c:	689030ef          	jal	ra,84c4 <k_free>
    k_free(node->resultSW);
    4640:	01842503          	lw	a0,24(s0)
    4644:	681030ef          	jal	ra,84c4 <k_free>
    node->next = NULL;
    k_free(node);
    4648:	00040513          	mv	a0,s0
    node->next = NULL;
    464c:	00042e23          	sw	zero,28(s0)
}
    4650:	00812403          	lw	s0,8(sp)
    4654:	00c12083          	lw	ra,12(sp)
    4658:	01010113          	addi	sp,sp,16
    k_free(node);
    465c:	6690306f          	j	84c4 <k_free>

00004660 <free_queue>:

void free_queue(struct matmul *head)
{
    4660:	fe010113          	addi	sp,sp,-32
    4664:	00812c23          	sw	s0,24(sp)
    4668:	00112e23          	sw	ra,28(sp)
    466c:	00050413          	mv	s0,a0
    struct matmul *node;
    while(head->next != NULL) {
    4670:	01c42783          	lw	a5,28(s0)
    4674:	00079e63          	bnez	a5,4690 <free_queue+0x30>
        pop2_matmul(head, &node);
        free_matmul(node);
    }
    free_matmul(head);
    4678:	00040513          	mv	a0,s0
    467c:	f9dff0ef          	jal	ra,4618 <free_matmul>
    4680:	01c12083          	lw	ra,28(sp)
    4684:	01812403          	lw	s0,24(sp)
    4688:	02010113          	addi	sp,sp,32
    468c:	00008067          	ret
        pop2_matmul(head, &node);
    4690:	00040513          	mv	a0,s0
    4694:	00c10593          	addi	a1,sp,12
    4698:	f5dff0ef          	jal	ra,45f4 <pop2_matmul>
        free_matmul(node);
    469c:	00c12503          	lw	a0,12(sp)
    46a0:	f79ff0ef          	jal	ra,4618 <free_matmul>
    46a4:	fcdff06f          	j	4670 <free_queue+0x10>

000046a8 <multiply_mat_sw>:
#include "multiply.h"

void multiply_mat_sw(float *result, float *mat1, float *mat2, int rows1, int cols1, int cols2)
{
    46a8:	fa010113          	addi	sp,sp,-96
    46ac:	04912a23          	sw	s1,84(sp)
    46b0:	05512223          	sw	s5,68(sp)
    46b4:	03712e23          	sw	s7,60(sp)
    46b8:	03812c23          	sw	s8,56(sp)
    46bc:	03912a23          	sw	s9,52(sp)
    46c0:	03a12823          	sw	s10,48(sp)
    46c4:	03b12623          	sw	s11,44(sp)
    46c8:	04112e23          	sw	ra,92(sp)
    46cc:	04812c23          	sw	s0,88(sp)
    46d0:	05212823          	sw	s2,80(sp)
    46d4:	05312623          	sw	s3,76(sp)
    46d8:	05412423          	sw	s4,72(sp)
    46dc:	05612023          	sw	s6,64(sp)
    46e0:	00050c93          	mv	s9,a0
    46e4:	00058b93          	mv	s7,a1
    46e8:	00070a93          	mv	s5,a4
    46ec:	00078493          	mv	s1,a5
    46f0:	00279813          	slli	a6,a5,0x2
    for (int i=0; i<rows1; i++) {
    46f4:	00000c13          	li	s8,0
    46f8:	00000d13          	li	s10,0
    46fc:	00000d93          	li	s11,0
    4700:	0addd463          	bge	s11,a3,47a8 <multiply_mat_sw+0x100>
    4704:	002d1413          	slli	s0,s10,0x2
    4708:	002c1b13          	slli	s6,s8,0x2
    470c:	008c8433          	add	s0,s9,s0
    4710:	016b8b33          	add	s6,s7,s6
        for (int j=0; j<cols2; j++) {
    4714:	00000a13          	li	s4,0
    4718:	0640006f          	j	477c <multiply_mat_sw+0xd4>
            float val = 0;
            for (int k=0; k<cols1; k++) {
                val += mat1[i*cols1+k]*mat2[k*cols2+j];
    471c:	0009a583          	lw	a1,0(s3)
    4720:	00072503          	lw	a0,0(a4)
    4724:	00d12e23          	sw	a3,28(sp)
    4728:	00c12c23          	sw	a2,24(sp)
    472c:	01012a23          	sw	a6,20(sp)
    4730:	00f12823          	sw	a5,16(sp)
    4734:	00e12623          	sw	a4,12(sp)
    4738:	a14fe0ef          	jal	ra,294c <__mulsf3>
    473c:	00050593          	mv	a1,a0
    4740:	00090513          	mv	a0,s2
    4744:	a79fd0ef          	jal	ra,21bc <__addsf3>
            for (int k=0; k<cols1; k++) {
    4748:	01012783          	lw	a5,16(sp)
    474c:	00c12703          	lw	a4,12(sp)
    4750:	01412803          	lw	a6,20(sp)
    4754:	01c12683          	lw	a3,28(sp)
    4758:	01812603          	lw	a2,24(sp)
                val += mat1[i*cols1+k]*mat2[k*cols2+j];
    475c:	00050913          	mv	s2,a0
            for (int k=0; k<cols1; k++) {
    4760:	00178793          	addi	a5,a5,1
    4764:	00470713          	addi	a4,a4,4
    4768:	010989b3          	add	s3,s3,a6
    476c:	fb57c8e3          	blt	a5,s5,471c <multiply_mat_sw+0x74>
            }
            result[i*cols2+j] = val;
    4770:	01242023          	sw	s2,0(s0)
        for (int j=0; j<cols2; j++) {
    4774:	001a0a13          	addi	s4,s4,1
    4778:	00440413          	addi	s0,s0,4
    477c:	009a5e63          	bge	s4,s1,4798 <multiply_mat_sw+0xf0>
    4780:	002a1993          	slli	s3,s4,0x2
    4784:	013609b3          	add	s3,a2,s3
    4788:	000b0713          	mv	a4,s6
            for (int k=0; k<cols1; k++) {
    478c:	00000793          	li	a5,0
            float val = 0;
    4790:	00000913          	li	s2,0
    4794:	fd9ff06f          	j	476c <multiply_mat_sw+0xc4>
    for (int i=0; i<rows1; i++) {
    4798:	001d8d93          	addi	s11,s11,1
    479c:	009d0d33          	add	s10,s10,s1
    47a0:	015c0c33          	add	s8,s8,s5
    47a4:	f5dff06f          	j	4700 <multiply_mat_sw+0x58>
        }
    }
}
    47a8:	05c12083          	lw	ra,92(sp)
    47ac:	05812403          	lw	s0,88(sp)
    47b0:	05412483          	lw	s1,84(sp)
    47b4:	05012903          	lw	s2,80(sp)
    47b8:	04c12983          	lw	s3,76(sp)
    47bc:	04812a03          	lw	s4,72(sp)
    47c0:	04412a83          	lw	s5,68(sp)
    47c4:	04012b03          	lw	s6,64(sp)
    47c8:	03c12b83          	lw	s7,60(sp)
    47cc:	03812c03          	lw	s8,56(sp)
    47d0:	03412c83          	lw	s9,52(sp)
    47d4:	03012d03          	lw	s10,48(sp)
    47d8:	02c12d83          	lw	s11,44(sp)
    47dc:	06010113          	addi	sp,sp,96
    47e0:	00008067          	ret

000047e4 <multiply_mat_hw>:
	volatile int *c = (int *)(ACCELERATOR_BASE_ADDRESS + 0x20);
	volatile int *rowsA = (int *)(ACCELERATOR_BASE_ADDRESS + 0x28);
	volatile int *colsA = (int *)(ACCELERATOR_BASE_ADDRESS + 0x30);
	volatile int *colsB = (int *)(ACCELERATOR_BASE_ADDRESS + 0x38);

    *a = mat1Address;
    47e4:	90000837          	lui	a6,0x90000
    47e8:	00a82823          	sw	a0,16(a6) # 90000010 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x90000011>
    *b = mat2Address;
    47ec:	00b82c23          	sw	a1,24(a6)
    *c = resultAddress;
    47f0:	02c82023          	sw	a2,32(a6)
    *rowsA = rows1;
    47f4:	02d82423          	sw	a3,40(a6)
    *colsA = cols1;
    47f8:	02e82823          	sw	a4,48(a6)
    *colsB = cols2;
    47fc:	02f82c23          	sw	a5,56(a6)

    *do_matp_mem = 1;
    4800:	00100793          	li	a5,1
    4804:	00f82023          	sw	a5,0(a6)

    while ((*do_matp_mem & 2) == 0);
    4808:	90000737          	lui	a4,0x90000
    480c:	00072783          	lw	a5,0(a4) # 90000000 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x90000001>
    4810:	0027f793          	andi	a5,a5,2
    4814:	fe078ce3          	beqz	a5,480c <multiply_mat_hw+0x28>
    4818:	00008067          	ret

0000481c <arch_printk_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    481c:	00000513          	li	a0,0
    4820:	00008067          	ret

00004824 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    4824:	0005a783          	lw	a5,0(a1)
    4828:	00178793          	addi	a5,a5,1
    482c:	00f5a023          	sw	a5,0(a1)
	return _char_out(c);
    4830:	0002f7b7          	lui	a5,0x2f
    4834:	c7c7a783          	lw	a5,-900(a5) # 2ec7c <_char_out>
    4838:	00078067          	jr	a5

0000483c <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    483c:	0085a703          	lw	a4,8(a1)
    4840:	0005a783          	lw	a5,0(a1)
		ctx->count++;
		return c;
	}

	if (ctx->count == ctx->max - 1) {
		ctx->str[ctx->count++] = '\0';
    4844:	00170613          	addi	a2,a4,1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    4848:	00078663          	beqz	a5,4854 <str_out+0x18>
    484c:	0045a683          	lw	a3,4(a1)
    4850:	00d74663          	blt	a4,a3,485c <str_out+0x20>
		ctx->count++;
    4854:	00c5a423          	sw	a2,8(a1)
		return c;
    4858:	00008067          	ret
	if (ctx->count == ctx->max - 1) {
    485c:	fff68693          	addi	a3,a3,-1
		ctx->str[ctx->count++] = '\0';
    4860:	00c5a423          	sw	a2,8(a1)
    4864:	00e787b3          	add	a5,a5,a4
	if (ctx->count == ctx->max - 1) {
    4868:	00e69663          	bne	a3,a4,4874 <str_out+0x38>
		ctx->str[ctx->count++] = '\0';
    486c:	00078023          	sb	zero,0(a5)
    4870:	00008067          	ret
	} else {
		ctx->str[ctx->count++] = c;
    4874:	00a78023          	sb	a0,0(a5)
	}

	return c;
}
    4878:	00008067          	ret

0000487c <__printk_hook_install>:
	_char_out = fn;
    487c:	0002f7b7          	lui	a5,0x2f
    4880:	c6a7ae23          	sw	a0,-900(a5) # 2ec7c <_char_out>
}
    4884:	00008067          	ret

00004888 <vprintk>:
{
    4888:	fe010113          	addi	sp,sp,-32
    488c:	00050613          	mv	a2,a0
		cbvprintf(char_out, &ctx, fmt, ap);
    4890:	00005537          	lui	a0,0x5
{
    4894:	00058693          	mv	a3,a1
		cbvprintf(char_out, &ctx, fmt, ap);
    4898:	82450513          	addi	a0,a0,-2012 # 4824 <char_out>
    489c:	00c10593          	addi	a1,sp,12
{
    48a0:	00112e23          	sw	ra,28(sp)
		struct out_context ctx = { 0 };
    48a4:	00012623          	sw	zero,12(sp)
		cbvprintf(char_out, &ctx, fmt, ap);
    48a8:	605000ef          	jal	ra,56ac <cbvprintf>
}
    48ac:	01c12083          	lw	ra,28(sp)
    48b0:	02010113          	addi	sp,sp,32
    48b4:	00008067          	ret

000048b8 <printk>:
{
    48b8:	fc010113          	addi	sp,sp,-64
    48bc:	02b12223          	sw	a1,36(sp)
	va_start(ap, fmt);
    48c0:	02410593          	addi	a1,sp,36
{
    48c4:	00112e23          	sw	ra,28(sp)
    48c8:	02c12423          	sw	a2,40(sp)
    48cc:	02d12623          	sw	a3,44(sp)
    48d0:	02e12823          	sw	a4,48(sp)
    48d4:	02f12a23          	sw	a5,52(sp)
    48d8:	03012c23          	sw	a6,56(sp)
    48dc:	03112e23          	sw	a7,60(sp)
	va_start(ap, fmt);
    48e0:	00b12623          	sw	a1,12(sp)
	vprintk(fmt, ap);
    48e4:	fa5ff0ef          	jal	ra,4888 <vprintk>
}
    48e8:	01c12083          	lw	ra,28(sp)
    48ec:	04010113          	addi	sp,sp,64
    48f0:	00008067          	ret

000048f4 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    48f4:	fe010113          	addi	sp,sp,-32
    48f8:	00812c23          	sw	s0,24(sp)
	struct str_context ctx = { str, size, 0 };
    48fc:	00a12223          	sw	a0,4(sp)
{
    4900:	00050413          	mv	s0,a0

	cbvprintf(str_out, &ctx, fmt, ap);
    4904:	00005537          	lui	a0,0x5
	struct str_context ctx = { str, size, 0 };
    4908:	00b12423          	sw	a1,8(sp)
	cbvprintf(str_out, &ctx, fmt, ap);
    490c:	83c50513          	addi	a0,a0,-1988 # 483c <str_out>
    4910:	00410593          	addi	a1,sp,4
{
    4914:	00112e23          	sw	ra,28(sp)
	struct str_context ctx = { str, size, 0 };
    4918:	00012623          	sw	zero,12(sp)
	cbvprintf(str_out, &ctx, fmt, ap);
    491c:	591000ef          	jal	ra,56ac <cbvprintf>

	if (ctx.count < ctx.max) {
    4920:	00c12503          	lw	a0,12(sp)
    4924:	00812783          	lw	a5,8(sp)
    4928:	00f55663          	bge	a0,a5,4934 <vsnprintk+0x40>
		str[ctx.count] = '\0';
    492c:	00a40433          	add	s0,s0,a0
    4930:	00040023          	sb	zero,0(s0)
	}

	return ctx.count;
}
    4934:	01c12083          	lw	ra,28(sp)
    4938:	01812403          	lw	s0,24(sp)
    493c:	02010113          	addi	sp,sp,32
    4940:	00008067          	ret

00004944 <snprintk>:
{
    4944:	fc010113          	addi	sp,sp,-64
    4948:	02d12623          	sw	a3,44(sp)
	va_start(ap, fmt);
    494c:	02c10693          	addi	a3,sp,44
{
    4950:	00112e23          	sw	ra,28(sp)
    4954:	02e12823          	sw	a4,48(sp)
    4958:	02f12a23          	sw	a5,52(sp)
    495c:	03012c23          	sw	a6,56(sp)
    4960:	03112e23          	sw	a7,60(sp)
	va_start(ap, fmt);
    4964:	00d12623          	sw	a3,12(sp)
	ret = vsnprintk(str, size, fmt, ap);
    4968:	f8dff0ef          	jal	ra,48f4 <vsnprintk>
}
    496c:	01c12083          	lw	ra,28(sp)
    4970:	04010113          	addi	sp,sp,64
    4974:	00008067          	ret

00004978 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    4978:	ff010113          	addi	sp,sp,-16
    497c:	00050793          	mv	a5,a0
    4980:	00058513          	mv	a0,a1
    4984:	00060593          	mv	a1,a2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    4988:	00068613          	mv	a2,a3
{
    498c:	00112623          	sw	ra,12(sp)
	entry(p1, p2, p3);
    4990:	000780e7          	jalr	a5
	return z_impl_z_current_get();
    4994:	434030ef          	jal	ra,7dc8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    4998:	530030ef          	jal	ra,7ec8 <z_impl_k_thread_abort>

0000499c <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    499c:	00852703          	lw	a4,8(a0)
	void *cmem = &buf[c];
    49a0:	00359593          	slli	a1,a1,0x3
	if (big_heap(h)) {
    49a4:	000087b7          	lui	a5,0x8
	void *cmem = &buf[c];
    49a8:	00b505b3          	add	a1,a0,a1
	if (big_heap(h)) {
    49ac:	00f76a63          	bltu	a4,a5,49c0 <chunk_field+0x24>
		return ((uint32_t *)cmem)[f];
    49b0:	00261613          	slli	a2,a2,0x2
    49b4:	00c585b3          	add	a1,a1,a2
    49b8:	0005a503          	lw	a0,0(a1)
    49bc:	00008067          	ret
	} else {
		return ((uint16_t *)cmem)[f];
    49c0:	00161613          	slli	a2,a2,0x1
    49c4:	00c585b3          	add	a1,a1,a2
    49c8:	0005d503          	lhu	a0,0(a1)
	}
}
    49cc:	00008067          	ret

000049d0 <chunk_set>:
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    49d0:	00852703          	lw	a4,8(a0)
	void *cmem = &buf[c];
    49d4:	00359593          	slli	a1,a1,0x3
	if (big_heap(h)) {
    49d8:	000087b7          	lui	a5,0x8
	void *cmem = &buf[c];
    49dc:	00b505b3          	add	a1,a0,a1
	if (big_heap(h)) {
    49e0:	00f76a63          	bltu	a4,a5,49f4 <chunk_set+0x24>
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
    49e4:	00261613          	slli	a2,a2,0x2
    49e8:	00c585b3          	add	a1,a1,a2
    49ec:	00d5a023          	sw	a3,0(a1)
    49f0:	00008067          	ret
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
    49f4:	00161613          	slli	a2,a2,0x1
    49f8:	00c585b3          	add	a1,a1,a2
    49fc:	00d59023          	sh	a3,0(a1)
	}
}
    4a00:	00008067          	ret

00004a04 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
    4a04:	ff010113          	addi	sp,sp,-16
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    4a08:	00100613          	li	a2,1
{
    4a0c:	00112623          	sw	ra,12(sp)
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    4a10:	f8dff0ef          	jal	ra,499c <chunk_field>
}
    4a14:	00c12083          	lw	ra,12(sp)
    4a18:	00155513          	srli	a0,a0,0x1
    4a1c:	01010113          	addi	sp,sp,16
    4a20:	00008067          	ret

00004a24 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    4a24:	00852703          	lw	a4,8(a0)
	void *cmem = &buf[c];
    4a28:	00359593          	slli	a1,a1,0x3
	if (big_heap(h)) {
    4a2c:	000087b7          	lui	a5,0x8
	void *cmem = &buf[c];
    4a30:	00b505b3          	add	a1,a0,a1
	if (big_heap(h)) {
    4a34:	02f76063          	bltu	a4,a5,4a54 <set_chunk_used+0x30>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    4a38:	0045a783          	lw	a5,4(a1)
		if (used) {
    4a3c:	00060863          	beqz	a2,4a4c <set_chunk_used+0x28>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    4a40:	0017e793          	ori	a5,a5,1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
    4a44:	00f5a223          	sw	a5,4(a1)
    4a48:	00008067          	ret
    4a4c:	ffe7f793          	andi	a5,a5,-2
    4a50:	ff5ff06f          	j	4a44 <set_chunk_used+0x20>
		}
	} else {
		if (used) {
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    4a54:	0025d783          	lhu	a5,2(a1)
		if (used) {
    4a58:	00060863          	beqz	a2,4a68 <set_chunk_used+0x44>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    4a5c:	0017e793          	ori	a5,a5,1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    4a60:	00f59123          	sh	a5,2(a1)
		}
	}
}
    4a64:	00008067          	ret
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    4a68:	ffe7f793          	andi	a5,a5,-2
    4a6c:	ff5ff06f          	j	4a60 <set_chunk_used+0x3c>

00004a70 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    4a70:	00161693          	slli	a3,a2,0x1
    4a74:	00100613          	li	a2,1
    4a78:	f59ff06f          	j	49d0 <chunk_set>

00004a7c <bucket_idx.isra.0>:
static inline size_t chunksz_to_bytes(struct z_heap *h, chunksz_t chunksz_in)
{
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
    4a7c:	ff010113          	addi	sp,sp,-16
    4a80:	00112623          	sw	ra,12(sp)
	return big_heap(h) ? 8 : 4;
    4a84:	000087b7          	lui	a5,0x8
    4a88:	02f57863          	bgeu	a0,a5,4ab8 <bucket_idx.isra.0+0x3c>
    4a8c:	00400793          	li	a5,4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    4a90:	00878793          	addi	a5,a5,8 # 8008 <z_add_timeout+0x3c>
    4a94:	0037d793          	srli	a5,a5,0x3
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    4a98:	00158593          	addi	a1,a1,1
	return 31 - __builtin_clz(usable_sz);
    4a9c:	40f58533          	sub	a0,a1,a5
    4aa0:	851fb0ef          	jal	ra,2f0 <__clzsi2>
}
    4aa4:	00c12083          	lw	ra,12(sp)
    4aa8:	01f00793          	li	a5,31
    4aac:	40a78533          	sub	a0,a5,a0
    4ab0:	01010113          	addi	sp,sp,16
    4ab4:	00008067          	ret
	return big_heap(h) ? 8 : 4;
    4ab8:	00800793          	li	a5,8
    4abc:	fd5ff06f          	j	4a90 <bucket_idx.isra.0+0x14>

00004ac0 <free_list_remove_bidx>:

	return ret;
}

static void free_list_remove_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
    4ac0:	fe010113          	addi	sp,sp,-32
    4ac4:	01412423          	sw	s4,8(sp)
    4ac8:	00060a13          	mv	s4,a2
	return chunk_field(h, c, FREE_NEXT);
    4acc:	00300613          	li	a2,3
    4ad0:	00812c23          	sw	s0,24(sp)
    4ad4:	00912a23          	sw	s1,20(sp)
    4ad8:	01312623          	sw	s3,12(sp)
    4adc:	00112e23          	sw	ra,28(sp)
    4ae0:	01212823          	sw	s2,16(sp)
    4ae4:	00050413          	mv	s0,a0
    4ae8:	00058993          	mv	s3,a1
    4aec:	eb1ff0ef          	jal	ra,499c <chunk_field>
    4af0:	004a0493          	addi	s1,s4,4

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & (1 << bidx));

	if (next_free_chunk(h, c) == c) {
    4af4:	04a99463          	bne	s3,a0,4b3c <free_list_remove_bidx+0x7c>
		/* this is the last chunk */
		h->avail_buckets &= ~(1 << bidx);
    4af8:	00100793          	li	a5,1
    4afc:	01479633          	sll	a2,a5,s4
    4b00:	00c42783          	lw	a5,12(s0)
    4b04:	fff64613          	not	a2,a2
		b->next = 0;
    4b08:	00249493          	slli	s1,s1,0x2
		h->avail_buckets &= ~(1 << bidx);
    4b0c:	00c7f633          	and	a2,a5,a2
    4b10:	00c42623          	sw	a2,12(s0)
		b->next = 0;
    4b14:	00940433          	add	s0,s0,s1

		b->next = second;
		set_next_free_chunk(h, first, second);
		set_prev_free_chunk(h, second, first);
	}
}
    4b18:	01c12083          	lw	ra,28(sp)
		b->next = 0;
    4b1c:	00042023          	sw	zero,0(s0)
}
    4b20:	01812403          	lw	s0,24(sp)
    4b24:	01412483          	lw	s1,20(sp)
    4b28:	01012903          	lw	s2,16(sp)
    4b2c:	00c12983          	lw	s3,12(sp)
    4b30:	00812a03          	lw	s4,8(sp)
    4b34:	02010113          	addi	sp,sp,32
    4b38:	00008067          	ret
    4b3c:	00050913          	mv	s2,a0
	return chunk_field(h, c, FREE_PREV);
    4b40:	00098593          	mv	a1,s3
    4b44:	00200613          	li	a2,2
    4b48:	00040513          	mv	a0,s0
		b->next = second;
    4b4c:	00249493          	slli	s1,s1,0x2
    4b50:	e4dff0ef          	jal	ra,499c <chunk_field>
    4b54:	009404b3          	add	s1,s0,s1
    4b58:	00050993          	mv	s3,a0
    4b5c:	0124a023          	sw	s2,0(s1)
	chunk_set(h, c, FREE_NEXT, next);
    4b60:	00090693          	mv	a3,s2
    4b64:	00050593          	mv	a1,a0
    4b68:	00300613          	li	a2,3
    4b6c:	00040513          	mv	a0,s0
    4b70:	e61ff0ef          	jal	ra,49d0 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    4b74:	00040513          	mv	a0,s0
}
    4b78:	01812403          	lw	s0,24(sp)
    4b7c:	01c12083          	lw	ra,28(sp)
    4b80:	01412483          	lw	s1,20(sp)
    4b84:	00812a03          	lw	s4,8(sp)
    4b88:	00098693          	mv	a3,s3
    4b8c:	00090593          	mv	a1,s2
    4b90:	00c12983          	lw	s3,12(sp)
    4b94:	01012903          	lw	s2,16(sp)
    4b98:	00200613          	li	a2,2
    4b9c:	02010113          	addi	sp,sp,32
    4ba0:	e31ff06f          	j	49d0 <chunk_set>

00004ba4 <free_list_remove>:

static void free_list_remove(struct z_heap *h, chunkid_t c)
{
    4ba4:	ff010113          	addi	sp,sp,-16
    4ba8:	01212023          	sw	s2,0(sp)
	return big_heap_chunks(h->end_chunk);
    4bac:	00852903          	lw	s2,8(a0)
    4bb0:	00812423          	sw	s0,8(sp)
    4bb4:	00912223          	sw	s1,4(sp)
    4bb8:	00112623          	sw	ra,12(sp)
    4bbc:	00058493          	mv	s1,a1
    4bc0:	00050413          	mv	s0,a0
	return big_heap(h) && chunk_size(h, c) == 1U;
    4bc4:	e41ff0ef          	jal	ra,4a04 <chunk_size>
    4bc8:	000087b7          	lui	a5,0x8
    4bcc:	00050593          	mv	a1,a0
    4bd0:	00f96663          	bltu	s2,a5,4bdc <free_list_remove+0x38>
	if (!solo_free_header(h, c)) {
    4bd4:	00100793          	li	a5,1
    4bd8:	02f50863          	beq	a0,a5,4c08 <free_list_remove+0x64>
		int bidx = bucket_idx(h, chunk_size(h, c));
    4bdc:	00090513          	mv	a0,s2
    4be0:	e9dff0ef          	jal	ra,4a7c <bucket_idx.isra.0>
    4be4:	00050613          	mv	a2,a0
		free_list_remove_bidx(h, c, bidx);
    4be8:	00040513          	mv	a0,s0
	}
}
    4bec:	00812403          	lw	s0,8(sp)
    4bf0:	00c12083          	lw	ra,12(sp)
    4bf4:	00012903          	lw	s2,0(sp)
		free_list_remove_bidx(h, c, bidx);
    4bf8:	00048593          	mv	a1,s1
}
    4bfc:	00412483          	lw	s1,4(sp)
    4c00:	01010113          	addi	sp,sp,16
		free_list_remove_bidx(h, c, bidx);
    4c04:	ebdff06f          	j	4ac0 <free_list_remove_bidx>
}
    4c08:	00c12083          	lw	ra,12(sp)
    4c0c:	00812403          	lw	s0,8(sp)
    4c10:	00412483          	lw	s1,4(sp)
    4c14:	00012903          	lw	s2,0(sp)
    4c18:	01010113          	addi	sp,sp,16
    4c1c:	00008067          	ret

00004c20 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    4c20:	fe010113          	addi	sp,sp,-32
    4c24:	00912a23          	sw	s1,20(sp)
    4c28:	00050493          	mv	s1,a0
	int bi = bucket_idx(h, sz);
    4c2c:	00852503          	lw	a0,8(a0)
{
    4c30:	01212823          	sw	s2,16(sp)
    4c34:	01312623          	sw	s3,12(sp)
    4c38:	01512223          	sw	s5,4(sp)
    4c3c:	01612023          	sw	s6,0(sp)
    4c40:	00112e23          	sw	ra,28(sp)
    4c44:	00812c23          	sw	s0,24(sp)
    4c48:	01412423          	sw	s4,8(sp)
    4c4c:	00058a93          	mv	s5,a1
	int bi = bucket_idx(h, sz);
    4c50:	e2dff0ef          	jal	ra,4a7c <bucket_idx.isra.0>
    4c54:	00251993          	slli	s3,a0,0x2
    4c58:	013489b3          	add	s3,s1,s3
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    4c5c:	0109ab03          	lw	s6,16(s3)
	int bi = bucket_idx(h, sz);
    4c60:	00050913          	mv	s2,a0
	if (b->next) {
    4c64:	060b0c63          	beqz	s6,4cdc <alloc_chunk+0xbc>
    4c68:	00300a13          	li	s4,3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
    4c6c:	0109a403          	lw	s0,16(s3)
			if (chunk_size(h, c) >= sz) {
    4c70:	00048513          	mv	a0,s1
    4c74:	00040593          	mv	a1,s0
    4c78:	d8dff0ef          	jal	ra,4a04 <chunk_size>
    4c7c:	05556063          	bltu	a0,s5,4cbc <alloc_chunk+0x9c>
				free_list_remove_bidx(h, c, bi);
    4c80:	00090613          	mv	a2,s2

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
    4c84:	00040593          	mv	a1,s0
    4c88:	00048513          	mv	a0,s1
    4c8c:	e35ff0ef          	jal	ra,4ac0 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    4c90:	01c12083          	lw	ra,28(sp)
    4c94:	00040513          	mv	a0,s0
    4c98:	01812403          	lw	s0,24(sp)
    4c9c:	01412483          	lw	s1,20(sp)
    4ca0:	01012903          	lw	s2,16(sp)
    4ca4:	00c12983          	lw	s3,12(sp)
    4ca8:	00812a03          	lw	s4,8(sp)
    4cac:	00412a83          	lw	s5,4(sp)
    4cb0:	00012b03          	lw	s6,0(sp)
    4cb4:	02010113          	addi	sp,sp,32
    4cb8:	00008067          	ret
	return chunk_field(h, c, FREE_NEXT);
    4cbc:	00300613          	li	a2,3
    4cc0:	00040593          	mv	a1,s0
    4cc4:	00048513          	mv	a0,s1
    4cc8:	cd5ff0ef          	jal	ra,499c <chunk_field>
			b->next = next_free_chunk(h, c);
    4ccc:	00a9a823          	sw	a0,16(s3)
		} while (--i && b->next != first);
    4cd0:	fffa0a13          	addi	s4,s4,-1
    4cd4:	000a0463          	beqz	s4,4cdc <alloc_chunk+0xbc>
    4cd8:	f8ab1ae3          	bne	s6,a0,4c6c <alloc_chunk+0x4c>
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
    4cdc:	00c4a583          	lw	a1,12(s1)
    4ce0:	00190913          	addi	s2,s2,1
    4ce4:	fff00413          	li	s0,-1
    4ce8:	01241433          	sll	s0,s0,s2
    4cec:	00b47433          	and	s0,s0,a1
	if (bmask != 0U) {
    4cf0:	fa0400e3          	beqz	s0,4c90 <alloc_chunk+0x70>
		int minbucket = __builtin_ctz(bmask);
    4cf4:	00040513          	mv	a0,s0
    4cf8:	e44fb0ef          	jal	ra,33c <__ctzsi2>
		chunkid_t c = h->buckets[minbucket].next;
    4cfc:	00450793          	addi	a5,a0,4
    4d00:	00279793          	slli	a5,a5,0x2
    4d04:	00f487b3          	add	a5,s1,a5
    4d08:	0007a403          	lw	s0,0(a5) # 8000 <z_add_timeout+0x34>
		int minbucket = __builtin_ctz(bmask);
    4d0c:	00050613          	mv	a2,a0
		chunkid_t c = h->buckets[minbucket].next;
    4d10:	f75ff06f          	j	4c84 <alloc_chunk+0x64>

00004d14 <split_chunks>:
{
    4d14:	fd010113          	addi	sp,sp,-48
    4d18:	02112623          	sw	ra,44(sp)
    4d1c:	02812423          	sw	s0,40(sp)
    4d20:	02912223          	sw	s1,36(sp)
    4d24:	03212023          	sw	s2,32(sp)
    4d28:	01312e23          	sw	s3,28(sp)
    4d2c:	00060413          	mv	s0,a2
    4d30:	00050493          	mv	s1,a0
    4d34:	00058913          	mv	s2,a1
	chunksz_t sz0 = chunk_size(h, lc);
    4d38:	ccdff0ef          	jal	ra,4a04 <chunk_size>
	chunksz_t lsz = rc - lc;
    4d3c:	412406b3          	sub	a3,s0,s2
	chunksz_t rsz = sz0 - lsz;
    4d40:	408909b3          	sub	s3,s2,s0
    4d44:	00a989b3          	add	s3,s3,a0
	set_chunk_size(h, lc, lsz);
    4d48:	00068613          	mv	a2,a3
    4d4c:	00090593          	mv	a1,s2
    4d50:	00048513          	mv	a0,s1
    4d54:	00d12623          	sw	a3,12(sp)
    4d58:	d19ff0ef          	jal	ra,4a70 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
    4d5c:	00098613          	mv	a2,s3
    4d60:	00040593          	mv	a1,s0
    4d64:	00048513          	mv	a0,s1
    4d68:	d09ff0ef          	jal	ra,4a70 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    4d6c:	00c12683          	lw	a3,12(sp)
    4d70:	00000613          	li	a2,0
    4d74:	00040593          	mv	a1,s0
    4d78:	00048513          	mv	a0,s1
    4d7c:	c55ff0ef          	jal	ra,49d0 <chunk_set>
	return c + chunk_size(h, c);
    4d80:	00040593          	mv	a1,s0
    4d84:	00048513          	mv	a0,s1
    4d88:	c7dff0ef          	jal	ra,4a04 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    4d8c:	00a405b3          	add	a1,s0,a0
}
    4d90:	02812403          	lw	s0,40(sp)
    4d94:	02c12083          	lw	ra,44(sp)
    4d98:	02012903          	lw	s2,32(sp)
    4d9c:	00098693          	mv	a3,s3
    4da0:	00048513          	mv	a0,s1
    4da4:	01c12983          	lw	s3,28(sp)
    4da8:	02412483          	lw	s1,36(sp)
    4dac:	00000613          	li	a2,0
    4db0:	03010113          	addi	sp,sp,48
    4db4:	c1dff06f          	j	49d0 <chunk_set>

00004db8 <merge_chunks>:
{
    4db8:	fe010113          	addi	sp,sp,-32
    4dbc:	00112e23          	sw	ra,28(sp)
    4dc0:	00812c23          	sw	s0,24(sp)
    4dc4:	00912a23          	sw	s1,20(sp)
    4dc8:	01212823          	sw	s2,16(sp)
    4dcc:	01312623          	sw	s3,12(sp)
    4dd0:	00060913          	mv	s2,a2
    4dd4:	00050413          	mv	s0,a0
    4dd8:	00058993          	mv	s3,a1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    4ddc:	c29ff0ef          	jal	ra,4a04 <chunk_size>
    4de0:	00090593          	mv	a1,s2
    4de4:	00050493          	mv	s1,a0
    4de8:	00040513          	mv	a0,s0
    4dec:	c19ff0ef          	jal	ra,4a04 <chunk_size>
    4df0:	00a484b3          	add	s1,s1,a0
	set_chunk_size(h, lc, newsz);
    4df4:	00048613          	mv	a2,s1
    4df8:	00098593          	mv	a1,s3
    4dfc:	00040513          	mv	a0,s0
    4e00:	c71ff0ef          	jal	ra,4a70 <set_chunk_size>
	return c + chunk_size(h, c);
    4e04:	00090593          	mv	a1,s2
    4e08:	00040513          	mv	a0,s0
    4e0c:	bf9ff0ef          	jal	ra,4a04 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    4e10:	00a905b3          	add	a1,s2,a0
    4e14:	00040513          	mv	a0,s0
}
    4e18:	01812403          	lw	s0,24(sp)
    4e1c:	01c12083          	lw	ra,28(sp)
    4e20:	01012903          	lw	s2,16(sp)
    4e24:	00c12983          	lw	s3,12(sp)
    4e28:	00048693          	mv	a3,s1
    4e2c:	01412483          	lw	s1,20(sp)
    4e30:	00000613          	li	a2,0
    4e34:	02010113          	addi	sp,sp,32
    4e38:	b99ff06f          	j	49d0 <chunk_set>

00004e3c <free_list_add>:
{
    4e3c:	fe010113          	addi	sp,sp,-32
    4e40:	01212823          	sw	s2,16(sp)
	return big_heap_chunks(h->end_chunk);
    4e44:	00852903          	lw	s2,8(a0)
    4e48:	00812c23          	sw	s0,24(sp)
    4e4c:	00912a23          	sw	s1,20(sp)
    4e50:	00112e23          	sw	ra,28(sp)
    4e54:	00058493          	mv	s1,a1
    4e58:	01312623          	sw	s3,12(sp)
    4e5c:	00050413          	mv	s0,a0
	return big_heap(h) && chunk_size(h, c) == 1U;
    4e60:	ba5ff0ef          	jal	ra,4a04 <chunk_size>
    4e64:	000087b7          	lui	a5,0x8
    4e68:	00050593          	mv	a1,a0
    4e6c:	00f96663          	bltu	s2,a5,4e78 <free_list_add+0x3c>
	if (!solo_free_header(h, c)) {
    4e70:	00100793          	li	a5,1
    4e74:	0cf50a63          	beq	a0,a5,4f48 <free_list_add+0x10c>
		int bidx = bucket_idx(h, chunk_size(h, c));
    4e78:	00090513          	mv	a0,s2
    4e7c:	c01ff0ef          	jal	ra,4a7c <bucket_idx.isra.0>
	if (b->next == 0U) {
    4e80:	00251793          	slli	a5,a0,0x2
    4e84:	00f407b3          	add	a5,s0,a5
    4e88:	0107a903          	lw	s2,16(a5) # 8010 <z_add_timeout+0x44>
    4e8c:	04091e63          	bnez	s2,4ee8 <free_list_add+0xac>
		h->avail_buckets |= (1 << bidx);
    4e90:	00100713          	li	a4,1
    4e94:	00a71733          	sll	a4,a4,a0
    4e98:	00c42503          	lw	a0,12(s0)
	chunk_set(h, c, FREE_PREV, prev);
    4e9c:	00048693          	mv	a3,s1
    4ea0:	00200613          	li	a2,2
    4ea4:	00e56533          	or	a0,a0,a4
    4ea8:	00a42623          	sw	a0,12(s0)
    4eac:	00048593          	mv	a1,s1
		b->next = c;
    4eb0:	0097a823          	sw	s1,16(a5)
    4eb4:	00040513          	mv	a0,s0
    4eb8:	b19ff0ef          	jal	ra,49d0 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    4ebc:	00048693          	mv	a3,s1
    4ec0:	00300613          	li	a2,3
    4ec4:	00048593          	mv	a1,s1
	chunk_set(h, c, FREE_PREV, prev);
    4ec8:	00040513          	mv	a0,s0
}
    4ecc:	01812403          	lw	s0,24(sp)
    4ed0:	01c12083          	lw	ra,28(sp)
    4ed4:	01412483          	lw	s1,20(sp)
    4ed8:	01012903          	lw	s2,16(sp)
    4edc:	00c12983          	lw	s3,12(sp)
    4ee0:	02010113          	addi	sp,sp,32
    4ee4:	aedff06f          	j	49d0 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
    4ee8:	00200613          	li	a2,2
    4eec:	00090593          	mv	a1,s2
    4ef0:	00040513          	mv	a0,s0
    4ef4:	aa9ff0ef          	jal	ra,499c <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
    4ef8:	00050693          	mv	a3,a0
	return chunk_field(h, c, FREE_PREV);
    4efc:	00050993          	mv	s3,a0
	chunk_set(h, c, FREE_PREV, prev);
    4f00:	00200613          	li	a2,2
    4f04:	00048593          	mv	a1,s1
    4f08:	00040513          	mv	a0,s0
    4f0c:	ac5ff0ef          	jal	ra,49d0 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    4f10:	00090693          	mv	a3,s2
    4f14:	00300613          	li	a2,3
    4f18:	00048593          	mv	a1,s1
    4f1c:	00040513          	mv	a0,s0
    4f20:	ab1ff0ef          	jal	ra,49d0 <chunk_set>
    4f24:	00048693          	mv	a3,s1
    4f28:	00300613          	li	a2,3
    4f2c:	00098593          	mv	a1,s3
    4f30:	00040513          	mv	a0,s0
    4f34:	a9dff0ef          	jal	ra,49d0 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    4f38:	00048693          	mv	a3,s1
    4f3c:	00200613          	li	a2,2
    4f40:	00090593          	mv	a1,s2
    4f44:	f85ff06f          	j	4ec8 <free_list_add+0x8c>
    4f48:	01c12083          	lw	ra,28(sp)
    4f4c:	01812403          	lw	s0,24(sp)
    4f50:	01412483          	lw	s1,20(sp)
    4f54:	01012903          	lw	s2,16(sp)
    4f58:	00c12983          	lw	s3,12(sp)
    4f5c:	02010113          	addi	sp,sp,32
    4f60:	00008067          	ret

00004f64 <free_chunk>:
{
    4f64:	fe010113          	addi	sp,sp,-32
    4f68:	00112e23          	sw	ra,28(sp)
    4f6c:	00812c23          	sw	s0,24(sp)
    4f70:	00912a23          	sw	s1,20(sp)
    4f74:	00058413          	mv	s0,a1
    4f78:	00050493          	mv	s1,a0
	return c + chunk_size(h, c);
    4f7c:	a89ff0ef          	jal	ra,4a04 <chunk_size>
    4f80:	00a405b3          	add	a1,s0,a0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    4f84:	00100613          	li	a2,1
    4f88:	00048513          	mv	a0,s1
    4f8c:	00b12623          	sw	a1,12(sp)
    4f90:	a0dff0ef          	jal	ra,499c <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
    4f94:	00157513          	andi	a0,a0,1
    4f98:	00c12583          	lw	a1,12(sp)
    4f9c:	02051463          	bnez	a0,4fc4 <free_chunk+0x60>
		free_list_remove(h, right_chunk(h, c));
    4fa0:	00048513          	mv	a0,s1
    4fa4:	c01ff0ef          	jal	ra,4ba4 <free_list_remove>
	return c + chunk_size(h, c);
    4fa8:	00040593          	mv	a1,s0
    4fac:	00048513          	mv	a0,s1
    4fb0:	a55ff0ef          	jal	ra,4a04 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
    4fb4:	00a40633          	add	a2,s0,a0
    4fb8:	00040593          	mv	a1,s0
    4fbc:	00048513          	mv	a0,s1
    4fc0:	df9ff0ef          	jal	ra,4db8 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
    4fc4:	00000613          	li	a2,0
    4fc8:	00040593          	mv	a1,s0
    4fcc:	00048513          	mv	a0,s1
    4fd0:	9cdff0ef          	jal	ra,499c <chunk_field>
    4fd4:	40a405b3          	sub	a1,s0,a0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    4fd8:	00100613          	li	a2,1
    4fdc:	00048513          	mv	a0,s1
    4fe0:	00b12623          	sw	a1,12(sp)
    4fe4:	9b9ff0ef          	jal	ra,499c <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
    4fe8:	00157513          	andi	a0,a0,1
    4fec:	00c12583          	lw	a1,12(sp)
    4ff0:	04051063          	bnez	a0,5030 <free_chunk+0xcc>
		free_list_remove(h, left_chunk(h, c));
    4ff4:	00048513          	mv	a0,s1
    4ff8:	badff0ef          	jal	ra,4ba4 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
    4ffc:	00040593          	mv	a1,s0
    5000:	00000613          	li	a2,0
    5004:	00048513          	mv	a0,s1
    5008:	995ff0ef          	jal	ra,499c <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
    500c:	40a405b3          	sub	a1,s0,a0
    5010:	00040613          	mv	a2,s0
    5014:	00048513          	mv	a0,s1
    5018:	da1ff0ef          	jal	ra,4db8 <merge_chunks>
    501c:	00040593          	mv	a1,s0
    5020:	00000613          	li	a2,0
    5024:	00048513          	mv	a0,s1
    5028:	975ff0ef          	jal	ra,499c <chunk_field>
    502c:	40a40433          	sub	s0,s0,a0
	free_list_add(h, c);
    5030:	00040593          	mv	a1,s0
}
    5034:	01812403          	lw	s0,24(sp)
    5038:	01c12083          	lw	ra,28(sp)
	free_list_add(h, c);
    503c:	00048513          	mv	a0,s1
}
    5040:	01412483          	lw	s1,20(sp)
    5044:	02010113          	addi	sp,sp,32
	free_list_add(h, c);
    5048:	df5ff06f          	j	4e3c <free_list_add>

0000504c <sys_heap_free>:
	if (mem == NULL) {
    504c:	04058a63          	beqz	a1,50a0 <sys_heap_free+0x54>
    5050:	00052503          	lw	a0,0(a0)
{
    5054:	fe010113          	addi	sp,sp,-32
    5058:	00112e23          	sw	ra,28(sp)
	return big_heap(h) ? 8 : 4;
    505c:	00852683          	lw	a3,8(a0)
    5060:	00008737          	lui	a4,0x8
    5064:	00800793          	li	a5,8
    5068:	00e6f463          	bgeu	a3,a4,5070 <sys_heap_free+0x24>
    506c:	00400793          	li	a5,4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    5070:	40f585b3          	sub	a1,a1,a5
    5074:	40a585b3          	sub	a1,a1,a0
    5078:	0035d593          	srli	a1,a1,0x3
	set_chunk_used(h, c, false);
    507c:	00000613          	li	a2,0
    5080:	00b12623          	sw	a1,12(sp)
    5084:	00a12423          	sw	a0,8(sp)
    5088:	99dff0ef          	jal	ra,4a24 <set_chunk_used>
	free_chunk(h, c);
    508c:	00c12583          	lw	a1,12(sp)
    5090:	00812503          	lw	a0,8(sp)
}
    5094:	01c12083          	lw	ra,28(sp)
    5098:	02010113          	addi	sp,sp,32
	free_chunk(h, c);
    509c:	ec9ff06f          	j	4f64 <free_chunk>
    50a0:	00008067          	ret

000050a4 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    50a4:	ff010113          	addi	sp,sp,-16
    50a8:	01212023          	sw	s2,0(sp)
    50ac:	00112623          	sw	ra,12(sp)
    50b0:	00812423          	sw	s0,8(sp)
    50b4:	00912223          	sw	s1,4(sp)
	struct z_heap *h = heap->heap;
    50b8:	00052903          	lw	s2,0(a0)

	if (bytes == 0U || size_too_big(h, bytes)) {
    50bc:	02059063          	bnez	a1,50dc <sys_heap_alloc+0x38>
		return NULL;
    50c0:	00000513          	li	a0,0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
    50c4:	00c12083          	lw	ra,12(sp)
    50c8:	00812403          	lw	s0,8(sp)
    50cc:	00412483          	lw	s1,4(sp)
    50d0:	00012903          	lw	s2,0(sp)
    50d4:	01010113          	addi	sp,sp,16
    50d8:	00008067          	ret
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
    50dc:	00892783          	lw	a5,8(s2)
    50e0:	0035d713          	srli	a4,a1,0x3
	if (bytes == 0U || size_too_big(h, bytes)) {
    50e4:	fcf77ee3          	bgeu	a4,a5,50c0 <sys_heap_alloc+0x1c>
	return big_heap(h) ? 8 : 4;
    50e8:	00008737          	lui	a4,0x8
    50ec:	00800613          	li	a2,8
    50f0:	00e7f463          	bgeu	a5,a4,50f8 <sys_heap_alloc+0x54>
    50f4:	00400613          	li	a2,4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    50f8:	00758413          	addi	s0,a1,7
    50fc:	00c40433          	add	s0,s0,a2
    5100:	00345413          	srli	s0,s0,0x3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    5104:	00040593          	mv	a1,s0
    5108:	00090513          	mv	a0,s2
    510c:	b15ff0ef          	jal	ra,4c20 <alloc_chunk>
    5110:	00050493          	mv	s1,a0
	if (c == 0U) {
    5114:	fa0506e3          	beqz	a0,50c0 <sys_heap_alloc+0x1c>
	if (chunk_size(h, c) > chunk_sz) {
    5118:	00050593          	mv	a1,a0
    511c:	00090513          	mv	a0,s2
    5120:	8e5ff0ef          	jal	ra,4a04 <chunk_size>
    5124:	02a47263          	bgeu	s0,a0,5148 <sys_heap_alloc+0xa4>
		split_chunks(h, c, c + chunk_sz);
    5128:	00848433          	add	s0,s1,s0
    512c:	00048593          	mv	a1,s1
    5130:	00090513          	mv	a0,s2
    5134:	00040613          	mv	a2,s0
    5138:	bddff0ef          	jal	ra,4d14 <split_chunks>
		free_list_add(h, c + chunk_sz);
    513c:	00040593          	mv	a1,s0
    5140:	00090513          	mv	a0,s2
    5144:	cf9ff0ef          	jal	ra,4e3c <free_list_add>
	set_chunk_used(h, c, true);
    5148:	00048593          	mv	a1,s1
    514c:	00090513          	mv	a0,s2
    5150:	00100613          	li	a2,1
    5154:	8d1ff0ef          	jal	ra,4a24 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
    5158:	00892703          	lw	a4,8(s2)
    515c:	000087b7          	lui	a5,0x8
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    5160:	00349493          	slli	s1,s1,0x3
    5164:	00800513          	li	a0,8
    5168:	00f77463          	bgeu	a4,a5,5170 <sys_heap_alloc+0xcc>
    516c:	00400513          	li	a0,4
    5170:	00a48533          	add	a0,s1,a0
    5174:	00a90533          	add	a0,s2,a0
	return chunk_mem(h, c);
    5178:	f4dff06f          	j	50c4 <sys_heap_alloc+0x20>

0000517c <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    517c:	fd010113          	addi	sp,sp,-48
    5180:	01412c23          	sw	s4,24(sp)
	struct z_heap *h = heap->heap;
    5184:	00052a03          	lw	s4,0(a0)
{
    5188:	01312e23          	sw	s3,28(sp)
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
    518c:	40b009b3          	neg	s3,a1
{
    5190:	02812423          	sw	s0,40(sp)
    5194:	02112623          	sw	ra,44(sp)
    5198:	02912223          	sw	s1,36(sp)
    519c:	03212023          	sw	s2,32(sp)
    51a0:	01512a23          	sw	s5,20(sp)
	rew = align & -align;
    51a4:	00b9f9b3          	and	s3,s3,a1
	return big_heap_chunks(h->end_chunk);
    51a8:	008a2703          	lw	a4,8(s4)
{
    51ac:	00060413          	mv	s0,a2
	if (align != rew) {
    51b0:	05358e63          	beq	a1,s3,520c <sys_heap_aligned_alloc+0x90>
	return big_heap(h) ? 8 : 4;
    51b4:	000087b7          	lui	a5,0x8
		align -= rew;
    51b8:	413585b3          	sub	a1,a1,s3
    51bc:	00400693          	li	a3,4
    51c0:	00f76463          	bltu	a4,a5,51c8 <sys_heap_aligned_alloc+0x4c>
    51c4:	00800693          	li	a3,8
    51c8:	00098793          	mv	a5,s3
    51cc:	0136f463          	bgeu	a3,s3,51d4 <sys_heap_aligned_alloc+0x58>
    51d0:	00068793          	mv	a5,a3
    51d4:	00098a93          	mv	s5,s3
    51d8:	00058993          	mv	s3,a1
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
    51dc:	06041863          	bnez	s0,524c <sys_heap_aligned_alloc+0xd0>
		return NULL;
    51e0:	00000993          	li	s3,0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
    51e4:	02c12083          	lw	ra,44(sp)
    51e8:	02812403          	lw	s0,40(sp)
    51ec:	02412483          	lw	s1,36(sp)
    51f0:	02012903          	lw	s2,32(sp)
    51f4:	01812a03          	lw	s4,24(sp)
    51f8:	01412a83          	lw	s5,20(sp)
    51fc:	00098513          	mv	a0,s3
    5200:	01c12983          	lw	s3,28(sp)
    5204:	03010113          	addi	sp,sp,48
    5208:	00008067          	ret
    520c:	000086b7          	lui	a3,0x8
    5210:	00400793          	li	a5,4
    5214:	00d76463          	bltu	a4,a3,521c <sys_heap_aligned_alloc+0xa0>
    5218:	00800793          	li	a5,8
		rew = 0;
    521c:	00000a93          	li	s5,0
		if (align <= chunk_header_bytes(h)) {
    5220:	fb37eee3          	bltu	a5,s3,51dc <sys_heap_aligned_alloc+0x60>
			return sys_heap_alloc(heap, bytes);
    5224:	00040593          	mv	a1,s0
}
    5228:	02812403          	lw	s0,40(sp)
    522c:	02c12083          	lw	ra,44(sp)
    5230:	02412483          	lw	s1,36(sp)
    5234:	02012903          	lw	s2,32(sp)
    5238:	01c12983          	lw	s3,28(sp)
    523c:	01812a03          	lw	s4,24(sp)
    5240:	01412a83          	lw	s5,20(sp)
    5244:	03010113          	addi	sp,sp,48
			return sys_heap_alloc(heap, bytes);
    5248:	e5dff06f          	j	50a4 <sys_heap_alloc>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
    524c:	00345693          	srli	a3,s0,0x3
	if (bytes == 0 || size_too_big(h, bytes)) {
    5250:	f8e6f8e3          	bgeu	a3,a4,51e0 <sys_heap_aligned_alloc+0x64>
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
    5254:	00740593          	addi	a1,s0,7
	return big_heap(h) ? 8 : 4;
    5258:	00008637          	lui	a2,0x8
    525c:	013585b3          	add	a1,a1,s3
    5260:	00800693          	li	a3,8
    5264:	00c77463          	bgeu	a4,a2,526c <sys_heap_aligned_alloc+0xf0>
    5268:	00400693          	li	a3,4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    526c:	40f585b3          	sub	a1,a1,a5
    5270:	00d585b3          	add	a1,a1,a3
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    5274:	0035d593          	srli	a1,a1,0x3
    5278:	000a0513          	mv	a0,s4
    527c:	9a5ff0ef          	jal	ra,4c20 <alloc_chunk>
    5280:	00050593          	mv	a1,a0
	if (c0 == 0) {
    5284:	f4050ee3          	beqz	a0,51e0 <sys_heap_aligned_alloc+0x64>
	return big_heap(h) ? 8 : 4;
    5288:	008a2703          	lw	a4,8(s4)
    528c:	000087b7          	lui	a5,0x8
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    5290:	00351493          	slli	s1,a0,0x3
    5294:	00800913          	li	s2,8
    5298:	00f77463          	bgeu	a4,a5,52a0 <sys_heap_aligned_alloc+0x124>
    529c:	00400913          	li	s2,4
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    52a0:	009a84b3          	add	s1,s5,s1
    52a4:	012484b3          	add	s1,s1,s2
    52a8:	fff98793          	addi	a5,s3,-1
    52ac:	009a04b3          	add	s1,s4,s1
    52b0:	00f484b3          	add	s1,s1,a5
    52b4:	413009b3          	neg	s3,s3
    52b8:	0134f9b3          	and	s3,s1,s3
    52bc:	415989b3          	sub	s3,s3,s5
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    52c0:	00898433          	add	s0,s3,s0
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    52c4:	41298933          	sub	s2,s3,s2
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    52c8:	00740413          	addi	s0,s0,7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    52cc:	41490933          	sub	s2,s2,s4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    52d0:	ff847413          	andi	s0,s0,-8
	chunkid_t c_end = end - chunk_buf(h);
    52d4:	41440433          	sub	s0,s0,s4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    52d8:	00395913          	srli	s2,s2,0x3
	chunkid_t c_end = end - chunk_buf(h);
    52dc:	40345413          	srai	s0,s0,0x3
	if (c > c0) {
    52e0:	0325f063          	bgeu	a1,s2,5300 <sys_heap_aligned_alloc+0x184>
		split_chunks(h, c0, c);
    52e4:	000a0513          	mv	a0,s4
    52e8:	00090613          	mv	a2,s2
    52ec:	00b12623          	sw	a1,12(sp)
    52f0:	a25ff0ef          	jal	ra,4d14 <split_chunks>
		free_list_add(h, c0);
    52f4:	00c12583          	lw	a1,12(sp)
    52f8:	000a0513          	mv	a0,s4
    52fc:	b41ff0ef          	jal	ra,4e3c <free_list_add>
	return c + chunk_size(h, c);
    5300:	00090593          	mv	a1,s2
    5304:	000a0513          	mv	a0,s4
    5308:	efcff0ef          	jal	ra,4a04 <chunk_size>
    530c:	00a90533          	add	a0,s2,a0
	if (right_chunk(h, c) > c_end) {
    5310:	02a47063          	bgeu	s0,a0,5330 <sys_heap_aligned_alloc+0x1b4>
		split_chunks(h, c, c_end);
    5314:	00090593          	mv	a1,s2
    5318:	000a0513          	mv	a0,s4
    531c:	00040613          	mv	a2,s0
    5320:	9f5ff0ef          	jal	ra,4d14 <split_chunks>
		free_list_add(h, c_end);
    5324:	00040593          	mv	a1,s0
    5328:	000a0513          	mv	a0,s4
    532c:	b11ff0ef          	jal	ra,4e3c <free_list_add>
	set_chunk_used(h, c, true);
    5330:	00100613          	li	a2,1
    5334:	00090593          	mv	a1,s2
    5338:	000a0513          	mv	a0,s4
    533c:	ee8ff0ef          	jal	ra,4a24 <set_chunk_used>
	return mem;
    5340:	ea5ff06f          	j	51e4 <sys_heap_aligned_alloc+0x68>

00005344 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    5344:	fe010113          	addi	sp,sp,-32
    5348:	00812c23          	sw	s0,24(sp)
    534c:	00112e23          	sw	ra,28(sp)
    5350:	00912a23          	sw	s1,20(sp)
    5354:	01212823          	sw	s2,16(sp)
    5358:	01312623          	sw	s3,12(sp)
	return big_heap_bytes(size) ? 8 : 4;
    535c:	000407b7          	lui	a5,0x40
    5360:	00400413          	li	s0,4
    5364:	00f66463          	bltu	a2,a5,536c <sys_heap_init+0x28>
    5368:	00800413          	li	s0,8
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    536c:	40860433          	sub	s0,a2,s0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    5370:	00758493          	addi	s1,a1,7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    5374:	00858433          	add	s0,a1,s0
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    5378:	ff84f493          	andi	s1,s1,-8
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    537c:	ff847413          	andi	s0,s0,-8
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    5380:	40940433          	sub	s0,s0,s1

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    5384:	00952023          	sw	s1,0(a0)
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    5388:	00345413          	srli	s0,s0,0x3
	h->end_chunk = heap_sz;
    538c:	0084a423          	sw	s0,8(s1)
	h->avail_buckets = 0;
    5390:	0004a623          	sw	zero,12(s1)

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    5394:	00040593          	mv	a1,s0
    5398:	00040513          	mv	a0,s0
    539c:	ee0ff0ef          	jal	ra,4a7c <bucket_idx.isra.0>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    53a0:	00251913          	slli	s2,a0,0x2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    53a4:	01b90913          	addi	s2,s2,27
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    53a8:	00150693          	addi	a3,a0,1
    53ac:	00395913          	srli	s2,s2,0x3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    53b0:	01048713          	addi	a4,s1,16
    53b4:	00000793          	li	a5,0
    53b8:	0ad7cc63          	blt	a5,a3,5470 <sys_heap_init+0x12c>
		h->buckets[i].next = 0;
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    53bc:	00090613          	mv	a2,s2
    53c0:	00048513          	mv	a0,s1
    53c4:	00000593          	li	a1,0
    53c8:	ea8ff0ef          	jal	ra,4a70 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    53cc:	00000693          	li	a3,0
    53d0:	00048513          	mv	a0,s1
    53d4:	00000613          	li	a2,0
    53d8:	00000593          	li	a1,0
    53dc:	df4ff0ef          	jal	ra,49d0 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);
    53e0:	00048513          	mv	a0,s1
    53e4:	00100613          	li	a2,1
    53e8:	00000593          	li	a1,0
    53ec:	e38ff0ef          	jal	ra,4a24 <set_chunk_used>

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    53f0:	412409b3          	sub	s3,s0,s2
    53f4:	00098613          	mv	a2,s3
    53f8:	00090593          	mv	a1,s2
    53fc:	00048513          	mv	a0,s1
    5400:	e70ff0ef          	jal	ra,4a70 <set_chunk_size>
    5404:	00090693          	mv	a3,s2
    5408:	00090593          	mv	a1,s2
    540c:	00048513          	mv	a0,s1
    5410:	00000613          	li	a2,0
    5414:	dbcff0ef          	jal	ra,49d0 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
    5418:	00040593          	mv	a1,s0
    541c:	00048513          	mv	a0,s1
    5420:	00000613          	li	a2,0
    5424:	e4cff0ef          	jal	ra,4a70 <set_chunk_size>
    5428:	00098693          	mv	a3,s3
    542c:	00040593          	mv	a1,s0
    5430:	00048513          	mv	a0,s1
    5434:	00000613          	li	a2,0
    5438:	d98ff0ef          	jal	ra,49d0 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
    543c:	00040593          	mv	a1,s0
    5440:	00048513          	mv	a0,s1
    5444:	00100613          	li	a2,1
    5448:	ddcff0ef          	jal	ra,4a24 <set_chunk_used>

	free_list_add(h, chunk0_size);
}
    544c:	01812403          	lw	s0,24(sp)
    5450:	01c12083          	lw	ra,28(sp)
    5454:	00c12983          	lw	s3,12(sp)
	free_list_add(h, chunk0_size);
    5458:	00090593          	mv	a1,s2
    545c:	00048513          	mv	a0,s1
}
    5460:	01012903          	lw	s2,16(sp)
    5464:	01412483          	lw	s1,20(sp)
    5468:	02010113          	addi	sp,sp,32
	free_list_add(h, chunk0_size);
    546c:	9d1ff06f          	j	4e3c <free_list_add>
		h->buckets[i].next = 0;
    5470:	00072023          	sw	zero,0(a4) # 8000 <z_add_timeout+0x34>
	for (int i = 0; i < nb_buckets; i++) {
    5474:	00178793          	addi	a5,a5,1 # 40001 <__data_region_end+0x11101>
    5478:	00470713          	addi	a4,a4,4
    547c:	f3dff06f          	j	53b8 <sys_heap_init+0x74>

00005480 <extract_decimal>:
static size_t extract_decimal(const char **str)
{
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
    5480:	0000d637          	lui	a2,0xd
	const char *sp = *str;
    5484:	00052683          	lw	a3,0(a0)
{
    5488:	00050713          	mv	a4,a0
	while (isdigit((int)(unsigned char)*sp)) {
    548c:	78560613          	addi	a2,a2,1925 # d785 <_ctype_+0x1>
	size_t val = 0;
    5490:	00000513          	li	a0,0
		val = 10U * val + *sp++ - '0';
    5494:	00a00813          	li	a6,10
	while (isdigit((int)(unsigned char)*sp)) {
    5498:	0006c583          	lbu	a1,0(a3) # 8000 <z_add_timeout+0x34>
    549c:	00c587b3          	add	a5,a1,a2
    54a0:	0007c783          	lbu	a5,0(a5)
    54a4:	0047f793          	andi	a5,a5,4
    54a8:	00079663          	bnez	a5,54b4 <extract_decimal+0x34>
	}
	*str = sp;
    54ac:	00d72023          	sw	a3,0(a4)
	return val;
}
    54b0:	00008067          	ret
		val = 10U * val + *sp++ - '0';
    54b4:	03050533          	mul	a0,a0,a6
    54b8:	00168693          	addi	a3,a3,1
    54bc:	fd050793          	addi	a5,a0,-48
    54c0:	00b78533          	add	a0,a5,a1
    54c4:	fd5ff06f          	j	5498 <extract_decimal+0x18>

000054c8 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    54c8:	fd010113          	addi	sp,sp,-48
    54cc:	02812423          	sw	s0,40(sp)
    54d0:	02912223          	sw	s1,36(sp)
    54d4:	03212023          	sw	s2,32(sp)
    54d8:	01712623          	sw	s7,12(sp)
    54dc:	01812423          	sw	s8,8(sp)
    54e0:	01912223          	sw	s9,4(sp)
    54e4:	02112623          	sw	ra,44(sp)
    54e8:	01312e23          	sw	s3,28(sp)
    54ec:	01412c23          	sw	s4,24(sp)
    54f0:	01512a23          	sw	s5,20(sp)
    54f4:	01612823          	sw	s6,16(sp)
	bool upcase = isupper((int)conv->specifier);
    54f8:	00364783          	lbu	a5,3(a2)
{
    54fc:	00068913          	mv	s2,a3
	bool upcase = isupper((int)conv->specifier);
    5500:	0000d6b7          	lui	a3,0xd
    5504:	78568693          	addi	a3,a3,1925 # d785 <_ctype_+0x1>
    5508:	00d786b3          	add	a3,a5,a3
    550c:	0006c983          	lbu	s3,0(a3)
{
    5510:	00070413          	mv	s0,a4
	switch (specifier) {
    5514:	06f00713          	li	a4,111
{
    5518:	00050c13          	mv	s8,a0
    551c:	00058c93          	mv	s9,a1
    5520:	00060b93          	mv	s7,a2
    5524:	0039f993          	andi	s3,s3,3
	switch (specifier) {
    5528:	00800493          	li	s1,8
    552c:	00e78c63          	beq	a5,a4,5544 <encode_uint+0x7c>
    5530:	0cf76263          	bltu	a4,a5,55f4 <encode_uint+0x12c>
    5534:	05800713          	li	a4,88
		return 10;
    5538:	00a00493          	li	s1,10
	switch (specifier) {
    553c:	00e79463          	bne	a5,a4,5544 <encode_uint+0x7c>
		return 16;
    5540:	01000493          	li	s1,16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    5544:	00000a93          	li	s5,0

		*--bp = (lsv <= 9) ? ('0' + lsv)
    5548:	00900a13          	li	s4,9
    554c:	00100b13          	li	s6,1
		unsigned int lsv = (unsigned int)(value % radix);
    5550:	00048613          	mv	a2,s1
    5554:	00000693          	li	a3,0
    5558:	000c0513          	mv	a0,s8
    555c:	000c8593          	mv	a1,s9
    5560:	a60fb0ef          	jal	ra,7c0 <__umoddi3>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5564:	0ff57793          	andi	a5,a0,255
    5568:	0aaa6263          	bltu	s4,a0,560c <encode_uint+0x144>
    556c:	03078793          	addi	a5,a5,48
    5570:	0ff7f793          	andi	a5,a5,255
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
    5574:	00048613          	mv	a2,s1
    5578:	00000693          	li	a3,0
    557c:	000c0513          	mv	a0,s8
    5580:	000c8593          	mv	a1,s9
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5584:	fef40fa3          	sb	a5,-1(s0)
    5588:	fff40413          	addi	s0,s0,-1
		value /= radix;
    558c:	e01fa0ef          	jal	ra,38c <__udivdi3>
	} while ((value != 0) && (bps < bp));
    5590:	019a9463          	bne	s5,s9,5598 <encode_uint+0xd0>
    5594:	009c6463          	bltu	s8,s1,559c <encode_uint+0xd4>
    5598:	06896463          	bltu	s2,s0,5600 <encode_uint+0x138>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    559c:	000bd783          	lhu	a5,0(s7)
    55a0:	0207f793          	andi	a5,a5,32
    55a4:	00078c63          	beqz	a5,55bc <encode_uint+0xf4>
		if (radix == 8) {
    55a8:	00800793          	li	a5,8
    55ac:	06f49a63          	bne	s1,a5,5620 <encode_uint+0x158>
			conv->altform_0 = true;
    55b0:	002bc783          	lbu	a5,2(s7)
    55b4:	0087e793          	ori	a5,a5,8
		} else if (radix == 16) {
			conv->altform_0c = true;
    55b8:	00fb8123          	sb	a5,2(s7)
			;
		}
	}

	return bp;
}
    55bc:	02c12083          	lw	ra,44(sp)
    55c0:	00040513          	mv	a0,s0
    55c4:	02812403          	lw	s0,40(sp)
    55c8:	02412483          	lw	s1,36(sp)
    55cc:	02012903          	lw	s2,32(sp)
    55d0:	01c12983          	lw	s3,28(sp)
    55d4:	01812a03          	lw	s4,24(sp)
    55d8:	01412a83          	lw	s5,20(sp)
    55dc:	01012b03          	lw	s6,16(sp)
    55e0:	00c12b83          	lw	s7,12(sp)
    55e4:	00812c03          	lw	s8,8(sp)
    55e8:	00412c83          	lw	s9,4(sp)
    55ec:	03010113          	addi	sp,sp,48
    55f0:	00008067          	ret
	switch (specifier) {
    55f4:	0f77f793          	andi	a5,a5,247
    55f8:	07000713          	li	a4,112
    55fc:	f3dff06f          	j	5538 <encode_uint+0x70>
		value /= radix;
    5600:	00050c13          	mv	s8,a0
    5604:	00058c93          	mv	s9,a1
    5608:	f49ff06f          	j	5550 <encode_uint+0x88>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    560c:	01699663          	bne	s3,s6,5618 <encode_uint+0x150>
    5610:	03778793          	addi	a5,a5,55
    5614:	f5dff06f          	j	5570 <encode_uint+0xa8>
    5618:	05778793          	addi	a5,a5,87
    561c:	f55ff06f          	j	5570 <encode_uint+0xa8>
		} else if (radix == 16) {
    5620:	01000793          	li	a5,16
    5624:	f8f49ce3          	bne	s1,a5,55bc <encode_uint+0xf4>
			conv->altform_0c = true;
    5628:	002bc783          	lbu	a5,2(s7)
    562c:	0107e793          	ori	a5,a5,16
    5630:	f89ff06f          	j	55b8 <encode_uint+0xf0>

00005634 <outs>:
/* Outline function to emit all characters in [sp, ep). */
static int outs(cbprintf_cb out,
		void *ctx,
		const char *sp,
		const char *ep)
{
    5634:	fe010113          	addi	sp,sp,-32
    5638:	00812c23          	sw	s0,24(sp)
    563c:	00912a23          	sw	s1,20(sp)
    5640:	01212823          	sw	s2,16(sp)
    5644:	01312623          	sw	s3,12(sp)
    5648:	01412423          	sw	s4,8(sp)
    564c:	00112e23          	sw	ra,28(sp)
    5650:	00050993          	mv	s3,a0
    5654:	00058a13          	mv	s4,a1
    5658:	00060493          	mv	s1,a2
    565c:	00068913          	mv	s2,a3
	size_t count = 0;

	while ((sp < ep) || ((ep == NULL) && *sp)) {
    5660:	00060413          	mv	s0,a2
    5664:	40940533          	sub	a0,s0,s1
    5668:	01246863          	bltu	s0,s2,5678 <outs+0x44>
    566c:	02091063          	bnez	s2,568c <outs+0x58>
    5670:	00044783          	lbu	a5,0(s0)
    5674:	00078c63          	beqz	a5,568c <outs+0x58>
		int rc = out((int)*sp++, ctx);
    5678:	00044503          	lbu	a0,0(s0)
    567c:	000a0593          	mv	a1,s4
    5680:	00140413          	addi	s0,s0,1
    5684:	000980e7          	jalr	s3

		if (rc < 0) {
    5688:	fc055ee3          	bgez	a0,5664 <outs+0x30>
		}
		++count;
	}

	return (int)count;
}
    568c:	01c12083          	lw	ra,28(sp)
    5690:	01812403          	lw	s0,24(sp)
    5694:	01412483          	lw	s1,20(sp)
    5698:	01012903          	lw	s2,16(sp)
    569c:	00c12983          	lw	s3,12(sp)
    56a0:	00812a03          	lw	s4,8(sp)
    56a4:	02010113          	addi	sp,sp,32
    56a8:	00008067          	ret

000056ac <cbvprintf>:

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    56ac:	f7010113          	addi	sp,sp,-144
    56b0:	07512a23          	sw	s5,116(sp)
	switch (conv->specifier) {
    56b4:	0000dab7          	lui	s5,0xd
    56b8:	590a8793          	addi	a5,s5,1424 # d590 <__mprec_tens+0x318>
{
    56bc:	07612823          	sw	s6,112(sp)
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    56c0:	0000db37          	lui	s6,0xd
{
    56c4:	07712623          	sw	s7,108(sp)
    56c8:	07812423          	sw	s8,104(sp)
	switch (conv->specifier) {
    56cc:	00f12223          	sw	a5,4(sp)
	switch ((enum length_mod_enum)conv->length_mod) {
    56d0:	0000dbb7          	lui	s7,0xd
		switch (conv->specifier) {
    56d4:	614b0793          	addi	a5,s6,1556 # d614 <__mprec_tens+0x39c>

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    56d8:	0000dc37          	lui	s8,0xd
{
    56dc:	08812423          	sw	s0,136(sp)
    56e0:	09212023          	sw	s2,128(sp)
    56e4:	07312e23          	sw	s3,124(sp)
    56e8:	07912223          	sw	s9,100(sp)
    56ec:	05b12e23          	sw	s11,92(sp)
    56f0:	08112623          	sw	ra,140(sp)
    56f4:	08912223          	sw	s1,132(sp)
    56f8:	07412c23          	sw	s4,120(sp)
    56fc:	07a12023          	sw	s10,96(sp)
    5700:	00050913          	mv	s2,a0
    5704:	00058993          	mv	s3,a1
    5708:	00060c93          	mv	s9,a2
    570c:	00068413          	mv	s0,a3
	size_t count = 0;
    5710:	00000d93          	li	s11,0
		switch (conv->specifier) {
    5714:	00f12423          	sw	a5,8(sp)
	switch ((enum length_mod_enum)conv->length_mod) {
    5718:	66cb8b93          	addi	s7,s7,1644 # d66c <__mprec_tens+0x3f4>
			bpe = bps + 5;
    571c:	58dc0c13          	addi	s8,s8,1421 # d58d <__mprec_tens+0x315>
	while (*fp != 0) {
    5720:	000cc483          	lbu	s1,0(s9)
    5724:	00049663          	bnez	s1,5730 <cbvprintf+0x84>
			OUTC(' ');
			--width;
		}
	}

	return count;
    5728:	000d8513          	mv	a0,s11
    572c:	1990006f          	j	60c4 <cbvprintf+0xa18>
		if (*fp != '%') {
    5730:	02500793          	li	a5,37
			OUTC(*fp++);
    5734:	001c8a13          	addi	s4,s9,1
		if (*fp != '%') {
    5738:	00f48e63          	beq	s1,a5,5754 <cbvprintf+0xa8>
			OUTC(*fp++);
    573c:	00098593          	mv	a1,s3
    5740:	00048513          	mv	a0,s1
			OUTC('%');
    5744:	000900e7          	jalr	s2
    5748:	16054ee3          	bltz	a0,60c4 <cbvprintf+0xa18>
    574c:	001d8d93          	addi	s11,s11,1
			break;
    5750:	5200006f          	j	5c70 <cbvprintf+0x5c4>
		} state = {
    5754:	02000613          	li	a2,32
    5758:	00000593          	li	a1,0
    575c:	03010513          	addi	a0,sp,48
    5760:	b65fd0ef          	jal	ra,32c4 <memset>
	if (*sp == '%') {
    5764:	001cc783          	lbu	a5,1(s9)
    5768:	10978263          	beq	a5,s1,586c <cbvprintf+0x1c0>
		switch (*sp) {
    576c:	02b00693          	li	a3,43
    5770:	02d00613          	li	a2,45
    5774:	03000593          	li	a1,48
    5778:	02000513          	li	a0,32
    577c:	02300813          	li	a6,35
    5780:	000a4703          	lbu	a4,0(s4)
    5784:	04015783          	lhu	a5,64(sp)
    5788:	14d70c63          	beq	a4,a3,58e0 <cbvprintf+0x234>
    578c:	12e6ea63          	bltu	a3,a4,58c0 <cbvprintf+0x214>
    5790:	14a70c63          	beq	a4,a0,58e8 <cbvprintf+0x23c>
    5794:	15070e63          	beq	a4,a6,58f0 <cbvprintf+0x244>
	if (conv->flag_zero && conv->flag_dash) {
    5798:	04012703          	lw	a4,64(sp)
    579c:	04400693          	li	a3,68
    57a0:	04477713          	andi	a4,a4,68
    57a4:	00d71663          	bne	a4,a3,57b0 <cbvprintf+0x104>
		conv->flag_zero = false;
    57a8:	fbf7f793          	andi	a5,a5,-65
    57ac:	04f11023          	sh	a5,64(sp)
	conv->width_present = true;
    57b0:	04015783          	lhu	a5,64(sp)
    57b4:	01412a23          	sw	s4,20(sp)
    57b8:	0807e713          	ori	a4,a5,128
    57bc:	04e11023          	sh	a4,64(sp)
	if (*sp == '*') {
    57c0:	000a4683          	lbu	a3,0(s4)
    57c4:	02a00713          	li	a4,42
    57c8:	12e69863          	bne	a3,a4,58f8 <cbvprintf+0x24c>
		conv->width_star = true;
    57cc:	1807e793          	ori	a5,a5,384
    57d0:	04f11023          	sh	a5,64(sp)
		return ++sp;
    57d4:	001a0793          	addi	a5,s4,1
	sp = extract_prec(conv, sp);
    57d8:	00f12a23          	sw	a5,20(sp)
	conv->prec_present = (*sp == '.');
    57dc:	0007c603          	lbu	a2,0(a5)
    57e0:	fd260713          	addi	a4,a2,-46
    57e4:	00173713          	seqz	a4,a4
    57e8:	00971693          	slli	a3,a4,0x9
    57ec:	04015703          	lhu	a4,64(sp)
    57f0:	dff77713          	andi	a4,a4,-513
    57f4:	00d76733          	or	a4,a4,a3
    57f8:	04e11023          	sh	a4,64(sp)
	if (!conv->prec_present) {
    57fc:	02e00693          	li	a3,46
    5800:	02d61263          	bne	a2,a3,5824 <cbvprintf+0x178>
	++sp;
    5804:	00178693          	addi	a3,a5,1
    5808:	00d12a23          	sw	a3,20(sp)
	if (*sp == '*') {
    580c:	0017c603          	lbu	a2,1(a5)
    5810:	02a00693          	li	a3,42
    5814:	12d61463          	bne	a2,a3,593c <cbvprintf+0x290>
		conv->prec_star = true;
    5818:	40076713          	ori	a4,a4,1024
    581c:	04e11023          	sh	a4,64(sp)
		return ++sp;
    5820:	00278793          	addi	a5,a5,2
	switch (*sp) {
    5824:	0007c603          	lbu	a2,0(a5)
    5828:	06c00713          	li	a4,108
		if (*++sp == 'h') {
    582c:	00178593          	addi	a1,a5,1
	switch (*sp) {
    5830:	22e60263          	beq	a2,a4,5a54 <cbvprintf+0x3a8>
    5834:	14c76263          	bltu	a4,a2,5978 <cbvprintf+0x2cc>
    5838:	06800713          	li	a4,104
    583c:	16e60663          	beq	a2,a4,59a8 <cbvprintf+0x2fc>
    5840:	06a00713          	li	a4,106
    5844:	22e60e63          	beq	a2,a4,5a80 <cbvprintf+0x3d4>
    5848:	04c00713          	li	a4,76
    584c:	26e60263          	beq	a2,a4,5ab0 <cbvprintf+0x404>
		conv->length_mod = LENGTH_NONE;
    5850:	04015703          	lhu	a4,64(sp)
    5854:	ffff86b7          	lui	a3,0xffff8
    5858:	7ff68693          	addi	a3,a3,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
    585c:	00d77733          	and	a4,a4,a3
    5860:	04e11023          	sh	a4,64(sp)
		break;
    5864:	00078593          	mv	a1,a5
    5868:	16c0006f          	j	59d4 <cbvprintf+0x328>
		conv->specifier = *sp++;
    586c:	002c8a13          	addi	s4,s9,2
    5870:	04f101a3          	sb	a5,67(sp)
		if (conv->width_star) {
    5874:	04015783          	lhu	a5,64(sp)
    5878:	1007f713          	andi	a4,a5,256
    587c:	32070c63          	beqz	a4,5bb4 <cbvprintf+0x508>
			width = va_arg(ap, int);
    5880:	00042483          	lw	s1,0(s0)
    5884:	00440693          	addi	a3,s0,4
			if (width < 0) {
    5888:	0004d863          	bgez	s1,5898 <cbvprintf+0x1ec>
				conv->flag_dash = true;
    588c:	0047e793          	ori	a5,a5,4
    5890:	04f11023          	sh	a5,64(sp)
				width = -width;
    5894:	409004b3          	neg	s1,s1
		if (conv->prec_star) {
    5898:	04015703          	lhu	a4,64(sp)
    589c:	40077793          	andi	a5,a4,1024
    58a0:	32078a63          	beqz	a5,5bd4 <cbvprintf+0x528>
			int arg = va_arg(ap, int);
    58a4:	0006aa83          	lw	s5,0(a3)
    58a8:	00468413          	addi	s0,a3,4
			if (arg < 0) {
    58ac:	320adc63          	bgez	s5,5be4 <cbvprintf+0x538>
				conv->prec_present = false;
    58b0:	dff77713          	andi	a4,a4,-513
    58b4:	04e11023          	sh	a4,64(sp)
		int precision = -1;
    58b8:	fff00a93          	li	s5,-1
    58bc:	3280006f          	j	5be4 <cbvprintf+0x538>
		switch (*sp) {
    58c0:	00c70863          	beq	a4,a2,58d0 <cbvprintf+0x224>
    58c4:	ecb71ae3          	bne	a4,a1,5798 <cbvprintf+0xec>
			conv->flag_zero = true;
    58c8:	0407e793          	ori	a5,a5,64
    58cc:	0080006f          	j	58d4 <cbvprintf+0x228>
			conv->flag_dash = true;
    58d0:	0047e793          	ori	a5,a5,4
			conv->flag_zero = true;
    58d4:	04f11023          	sh	a5,64(sp)
			++sp;
    58d8:	001a0a13          	addi	s4,s4,1
	} while (loop);
    58dc:	ea5ff06f          	j	5780 <cbvprintf+0xd4>
			conv->flag_plus = true;
    58e0:	0087e793          	ori	a5,a5,8
    58e4:	ff1ff06f          	j	58d4 <cbvprintf+0x228>
			conv->flag_space = true;
    58e8:	0107e793          	ori	a5,a5,16
    58ec:	fe9ff06f          	j	58d4 <cbvprintf+0x228>
			conv->flag_hash = true;
    58f0:	0207e793          	ori	a5,a5,32
    58f4:	fe1ff06f          	j	58d4 <cbvprintf+0x228>
	size_t width = extract_decimal(&sp);
    58f8:	01410513          	addi	a0,sp,20
    58fc:	b85ff0ef          	jal	ra,5480 <extract_decimal>
	if (sp != wp) {
    5900:	01412783          	lw	a5,20(sp)
    5904:	ed478ae3          	beq	a5,s4,57d8 <cbvprintf+0x12c>
		conv->unsupported |= ((conv->width_value < 0)
    5908:	04012703          	lw	a4,64(sp)
    590c:	04014683          	lbu	a3,64(sp)
		conv->width_value = width;
    5910:	04a12223          	sw	a0,68(sp)
		conv->unsupported |= ((conv->width_value < 0)
    5914:	00175713          	srli	a4,a4,0x1
    5918:	00177713          	andi	a4,a4,1
				      || (width != (size_t)conv->width_value));
    591c:	01f55513          	srli	a0,a0,0x1f
		conv->unsupported |= ((conv->width_value < 0)
    5920:	00a76733          	or	a4,a4,a0
    5924:	00171713          	slli	a4,a4,0x1
    5928:	f8076713          	ori	a4,a4,-128
    592c:	07d6f693          	andi	a3,a3,125
    5930:	00d76733          	or	a4,a4,a3
    5934:	04e10023          	sb	a4,64(sp)
    5938:	ea1ff06f          	j	57d8 <cbvprintf+0x12c>
	size_t prec = extract_decimal(&sp);
    593c:	01410513          	addi	a0,sp,20
    5940:	b41ff0ef          	jal	ra,5480 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    5944:	04012783          	lw	a5,64(sp)
    5948:	04015703          	lhu	a4,64(sp)
	conv->prec_value = prec;
    594c:	04a12423          	sw	a0,72(sp)
	conv->unsupported |= ((conv->prec_value < 0)
    5950:	0017d793          	srli	a5,a5,0x1
    5954:	0017f793          	andi	a5,a5,1
			      || (prec != (size_t)conv->prec_value));
    5958:	01f55513          	srli	a0,a0,0x1f
	conv->unsupported |= ((conv->prec_value < 0)
    595c:	00a7e7b3          	or	a5,a5,a0
    5960:	00179793          	slli	a5,a5,0x1
    5964:	ffd77713          	andi	a4,a4,-3
    5968:	00f767b3          	or	a5,a4,a5
    596c:	04f11023          	sh	a5,64(sp)
	return sp;
    5970:	01412783          	lw	a5,20(sp)
    5974:	eb1ff06f          	j	5824 <cbvprintf+0x178>
	switch (*sp) {
    5978:	07400693          	li	a3,116
    597c:	04015703          	lhu	a4,64(sp)
    5980:	10d60e63          	beq	a2,a3,5a9c <cbvprintf+0x3f0>
    5984:	07a00693          	li	a3,122
    5988:	ecd614e3          	bne	a2,a3,5850 <cbvprintf+0x1a4>
		conv->length_mod = LENGTH_Z;
    598c:	ffff87b7          	lui	a5,0xffff8
    5990:	7ff78793          	addi	a5,a5,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
    5994:	00e7f7b3          	and	a5,a5,a4
    5998:	00003737          	lui	a4,0x3
		conv->unsupported = true;
    599c:	00e7e7b3          	or	a5,a5,a4
    59a0:	04f11023          	sh	a5,64(sp)
		break;
    59a4:	0300006f          	j	59d4 <cbvprintf+0x328>
		if (*++sp == 'h') {
    59a8:	04015503          	lhu	a0,64(sp)
    59ac:	0017c803          	lbu	a6,1(a5)
    59b0:	ffff86b7          	lui	a3,0xffff8
    59b4:	7ff68713          	addi	a4,a3,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
			conv->length_mod = LENGTH_HH;
    59b8:	00a77733          	and	a4,a4,a0
		if (*++sp == 'h') {
    59bc:	08c81463          	bne	a6,a2,5a44 <cbvprintf+0x398>
			conv->length_mod = LENGTH_HH;
    59c0:	000016b7          	lui	a3,0x1
    59c4:	80068693          	addi	a3,a3,-2048 # 800 <CONFIG_ISR_STACK_SIZE>
			conv->length_mod = LENGTH_LL;
    59c8:	00d76733          	or	a4,a4,a3
    59cc:	04e11023          	sh	a4,64(sp)
			++sp;
    59d0:	00278593          	addi	a1,a5,2
	conv->specifier = *sp++;
    59d4:	0005c703          	lbu	a4,0(a1)
	switch (conv->specifier) {
    59d8:	07800793          	li	a5,120
	conv->specifier = *sp++;
    59dc:	00158a13          	addi	s4,a1,1
    59e0:	04e101a3          	sb	a4,67(sp)
	switch (conv->specifier) {
    59e4:	1ae7ee63          	bltu	a5,a4,5ba0 <cbvprintf+0x4f4>
    59e8:	05700793          	li	a5,87
    59ec:	0ee7e063          	bltu	a5,a4,5acc <cbvprintf+0x420>
    59f0:	04100793          	li	a5,65
    59f4:	00f70a63          	beq	a4,a5,5a08 <cbvprintf+0x35c>
    59f8:	fbb70713          	addi	a4,a4,-69 # 2fbb <__subsf3+0x36b>
    59fc:	0ff77713          	andi	a4,a4,255
    5a00:	00200793          	li	a5,2
    5a04:	18e7ee63          	bltu	a5,a4,5ba0 <cbvprintf+0x4f4>
		conv->specifier_cat = SPECIFIER_FP;
    5a08:	04214783          	lbu	a5,66(sp)
    5a0c:	ff87f793          	andi	a5,a5,-8
    5a10:	0047e793          	ori	a5,a5,4
    5a14:	04f10123          	sb	a5,66(sp)
			unsupported = true;
    5a18:	00100793          	li	a5,1
	conv->unsupported |= unsupported;
    5a1c:	04012703          	lw	a4,64(sp)
    5a20:	00175713          	srli	a4,a4,0x1
    5a24:	00177713          	andi	a4,a4,1
    5a28:	00e7e7b3          	or	a5,a5,a4
    5a2c:	04015703          	lhu	a4,64(sp)
    5a30:	00179793          	slli	a5,a5,0x1
    5a34:	ffd77713          	andi	a4,a4,-3
    5a38:	00f767b3          	or	a5,a4,a5
    5a3c:	04f11023          	sh	a5,64(sp)
	return sp;
    5a40:	e35ff06f          	j	5874 <cbvprintf+0x1c8>
			conv->length_mod = LENGTH_H;
    5a44:	000017b7          	lui	a5,0x1
			conv->length_mod = LENGTH_L;
    5a48:	00f76733          	or	a4,a4,a5
    5a4c:	04e11023          	sh	a4,64(sp)
    5a50:	f85ff06f          	j	59d4 <cbvprintf+0x328>
		if (*++sp == 'l') {
    5a54:	04015503          	lhu	a0,64(sp)
    5a58:	0017c803          	lbu	a6,1(a5) # 1001 <__divdf3+0x43d>
    5a5c:	ffff86b7          	lui	a3,0xffff8
    5a60:	7ff68713          	addi	a4,a3,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
			conv->length_mod = LENGTH_LL;
    5a64:	00a77733          	and	a4,a4,a0
		if (*++sp == 'l') {
    5a68:	00c81663          	bne	a6,a2,5a74 <cbvprintf+0x3c8>
			conv->length_mod = LENGTH_LL;
    5a6c:	000026b7          	lui	a3,0x2
    5a70:	f59ff06f          	j	59c8 <cbvprintf+0x31c>
			conv->length_mod = LENGTH_L;
    5a74:	000027b7          	lui	a5,0x2
    5a78:	80078793          	addi	a5,a5,-2048 # 1800 <__muldf3+0x478>
    5a7c:	fcdff06f          	j	5a48 <cbvprintf+0x39c>
		conv->length_mod = LENGTH_J;
    5a80:	04015783          	lhu	a5,64(sp)
    5a84:	ffff8737          	lui	a4,0xffff8
    5a88:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
    5a8c:	00e7f7b3          	and	a5,a5,a4
    5a90:	00003737          	lui	a4,0x3
		conv->length_mod = LENGTH_T;
    5a94:	80070713          	addi	a4,a4,-2048 # 2800 <__divsf3+0x1e8>
    5a98:	f05ff06f          	j	599c <cbvprintf+0x2f0>
    5a9c:	ffff87b7          	lui	a5,0xffff8
    5aa0:	7ff78793          	addi	a5,a5,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
    5aa4:	00e7f7b3          	and	a5,a5,a4
    5aa8:	00004737          	lui	a4,0x4
    5aac:	fe9ff06f          	j	5a94 <cbvprintf+0x3e8>
		conv->unsupported = true;
    5ab0:	04015783          	lhu	a5,64(sp)
    5ab4:	ffff8737          	lui	a4,0xffff8
    5ab8:	7fd70713          	addi	a4,a4,2045 # ffff87fd <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff87fe>
    5abc:	00e7f7b3          	and	a5,a5,a4
    5ac0:	00004737          	lui	a4,0x4
    5ac4:	00270713          	addi	a4,a4,2 # 4002 <__trunctfdf2+0x266>
    5ac8:	ed5ff06f          	j	599c <cbvprintf+0x2f0>
	switch (conv->specifier) {
    5acc:	fa870793          	addi	a5,a4,-88
    5ad0:	0ff7f793          	andi	a5,a5,255
    5ad4:	02000693          	li	a3,32
    5ad8:	0cf6e463          	bltu	a3,a5,5ba0 <cbvprintf+0x4f4>
    5adc:	00412683          	lw	a3,4(sp)
    5ae0:	00279793          	slli	a5,a5,0x2
    5ae4:	00d787b3          	add	a5,a5,a3
    5ae8:	0007a783          	lw	a5,0(a5)
    5aec:	00078067          	jr	a5
		conv->specifier_cat = SPECIFIER_SINT;
    5af0:	04214783          	lbu	a5,66(sp)
    5af4:	ff87f793          	andi	a5,a5,-8
    5af8:	0017e793          	ori	a5,a5,1
		if (conv->length_mod == LENGTH_UPPER_L) {
    5afc:	04015683          	lhu	a3,64(sp)
		conv->specifier_cat = SPECIFIER_UINT;
    5b00:	04f10123          	sb	a5,66(sp)
		if (conv->length_mod == LENGTH_UPPER_L) {
    5b04:	000087b7          	lui	a5,0x8
    5b08:	80078793          	addi	a5,a5,-2048 # 7800 <unready_thread+0x48>
    5b0c:	00f6f7b3          	and	a5,a3,a5
    5b10:	01079793          	slli	a5,a5,0x10
    5b14:	0107d793          	srli	a5,a5,0x10
    5b18:	00004637          	lui	a2,0x4
    5b1c:	00c79663          	bne	a5,a2,5b28 <cbvprintf+0x47c>
			conv->invalid = true;
    5b20:	0016e693          	ori	a3,a3,1
    5b24:	04d11023          	sh	a3,64(sp)
		if (conv->specifier == 'c') {
    5b28:	06300693          	li	a3,99
	bool unsupported = false;
    5b2c:	00000793          	li	a5,0
		if (conv->specifier == 'c') {
    5b30:	eed716e3          	bne	a4,a3,5a1c <cbvprintf+0x370>
		if (conv->length_mod != LENGTH_NONE) {
    5b34:	04015703          	lhu	a4,64(sp)
    5b38:	000087b7          	lui	a5,0x8
    5b3c:	80078793          	addi	a5,a5,-2048 # 7800 <unready_thread+0x48>
    5b40:	00e7f7b3          	and	a5,a5,a4
    5b44:	00f037b3          	snez	a5,a5
    5b48:	ed5ff06f          	j	5a1c <cbvprintf+0x370>
		conv->specifier_cat = SPECIFIER_UINT;
    5b4c:	04214783          	lbu	a5,66(sp)
    5b50:	ff87f793          	andi	a5,a5,-8
    5b54:	0027e793          	ori	a5,a5,2
    5b58:	fa5ff06f          	j	5afc <cbvprintf+0x450>
		conv->specifier_cat = SPECIFIER_PTR;
    5b5c:	04214783          	lbu	a5,66(sp)
		if (conv->length_mod == LENGTH_UPPER_L) {
    5b60:	04015703          	lhu	a4,64(sp)
		conv->specifier_cat = SPECIFIER_PTR;
    5b64:	ff87f793          	andi	a5,a5,-8
    5b68:	0037e793          	ori	a5,a5,3
    5b6c:	04f10123          	sb	a5,66(sp)
		if (conv->length_mod == LENGTH_UPPER_L) {
    5b70:	000087b7          	lui	a5,0x8
    5b74:	80078793          	addi	a5,a5,-2048 # 7800 <unready_thread+0x48>
    5b78:	00e7f7b3          	and	a5,a5,a4
    5b7c:	ffffc737          	lui	a4,0xffffc
    5b80:	00e787b3          	add	a5,a5,a4
    5b84:	0017b793          	seqz	a5,a5
    5b88:	e95ff06f          	j	5a1c <cbvprintf+0x370>
		conv->specifier_cat = SPECIFIER_PTR;
    5b8c:	04214783          	lbu	a5,66(sp)
    5b90:	ff87f793          	andi	a5,a5,-8
    5b94:	0037e793          	ori	a5,a5,3
    5b98:	04f10123          	sb	a5,66(sp)
    5b9c:	f99ff06f          	j	5b34 <cbvprintf+0x488>
		conv->invalid = true;
    5ba0:	04015783          	lhu	a5,64(sp)
    5ba4:	0017e793          	ori	a5,a5,1
    5ba8:	04f11023          	sh	a5,64(sp)
	bool unsupported = false;
    5bac:	00000793          	li	a5,0
		break;
    5bb0:	e6dff06f          	j	5a1c <cbvprintf+0x370>
		} else if (conv->width_present) {
    5bb4:	0807f793          	andi	a5,a5,128
    5bb8:	00078863          	beqz	a5,5bc8 <cbvprintf+0x51c>
			width = conv->width_value;
    5bbc:	04412483          	lw	s1,68(sp)
    5bc0:	00040693          	mv	a3,s0
    5bc4:	cd5ff06f          	j	5898 <cbvprintf+0x1ec>
    5bc8:	00040693          	mv	a3,s0
		int width = -1;
    5bcc:	fff00493          	li	s1,-1
    5bd0:	cc9ff06f          	j	5898 <cbvprintf+0x1ec>
		} else if (conv->prec_present) {
    5bd4:	20077713          	andi	a4,a4,512
    5bd8:	0a070063          	beqz	a4,5c78 <cbvprintf+0x5cc>
			precision = conv->prec_value;
    5bdc:	04812a83          	lw	s5,72(sp)
    5be0:	00068413          	mv	s0,a3
			= (enum specifier_cat_enum)conv->specifier_cat;
    5be4:	04012583          	lw	a1,64(sp)
		conv->pad0_value = 0;
    5be8:	04012223          	sw	zero,68(sp)
		conv->pad0_pre_exp = 0;
    5bec:	04012423          	sw	zero,72(sp)
			= (enum specifier_cat_enum)conv->specifier_cat;
    5bf0:	0105d693          	srli	a3,a1,0x10
			= (enum length_mod_enum)conv->length_mod;
    5bf4:	00b5d713          	srli	a4,a1,0xb
		enum specifier_cat_enum specifier_cat
    5bf8:	0076f693          	andi	a3,a3,7
		if (specifier_cat == SPECIFIER_SINT) {
    5bfc:	00100613          	li	a2,1
			= (enum length_mod_enum)conv->length_mod;
    5c00:	00f77713          	andi	a4,a4,15
		if (specifier_cat == SPECIFIER_SINT) {
    5c04:	0cc69863          	bne	a3,a2,5cd4 <cbvprintf+0x628>
			switch (length_mod) {
    5c08:	00500613          	li	a2,5
    5c0c:	08c70863          	beq	a4,a2,5c9c <cbvprintf+0x5f0>
    5c10:	00e66a63          	bltu	a2,a4,5c24 <cbvprintf+0x578>
    5c14:	00300693          	li	a3,3
    5c18:	06d70463          	beq	a4,a3,5c80 <cbvprintf+0x5d4>
    5c1c:	00400693          	li	a3,4
    5c20:	06d70e63          	beq	a4,a3,5c9c <cbvprintf+0x5f0>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    5c24:	00042683          	lw	a3,0(s0)
    5c28:	00440413          	addi	s0,s0,4
    5c2c:	02d12823          	sw	a3,48(sp)
    5c30:	41f6d693          	srai	a3,a3,0x1f
    5c34:	02d12a23          	sw	a3,52(sp)
			if (length_mod == LENGTH_HH) {
    5c38:	00100693          	li	a3,1
    5c3c:	06d71e63          	bne	a4,a3,5cb8 <cbvprintf+0x60c>
				value->uint = (unsigned char)value->uint;
    5c40:	03014683          	lbu	a3,48(sp)
				value->uint = (unsigned short)value->uint;
    5c44:	02d12823          	sw	a3,48(sp)
    5c48:	02012a23          	sw	zero,52(sp)
		if (conv->invalid || conv->unsupported) {
    5c4c:	0035f593          	andi	a1,a1,3
    5c50:	14058863          	beqz	a1,5da0 <cbvprintf+0x6f4>
			OUTS(sp, fp);
    5c54:	000a0693          	mv	a3,s4
    5c58:	000c8613          	mv	a2,s9
    5c5c:	00098593          	mv	a1,s3
    5c60:	00090513          	mv	a0,s2
    5c64:	9d1ff0ef          	jal	ra,5634 <outs>
    5c68:	44054e63          	bltz	a0,60c4 <cbvprintf+0xa18>
    5c6c:	00ad8db3          	add	s11,s11,a0
			OUTS(bps, bpe);
    5c70:	000a0c93          	mv	s9,s4
    5c74:	aadff06f          	j	5720 <cbvprintf+0x74>
    5c78:	00068413          	mv	s0,a3
    5c7c:	c3dff06f          	j	58b8 <cbvprintf+0x20c>
					value->sint = va_arg(ap, long);
    5c80:	00042683          	lw	a3,0(s0)
				value->sint = va_arg(ap, int);
    5c84:	00440513          	addi	a0,s0,4
					value->sint = va_arg(ap, long);
    5c88:	02d12823          	sw	a3,48(sp)
    5c8c:	41f6d693          	srai	a3,a3,0x1f
				value->sint =
    5c90:	02d12a23          	sw	a3,52(sp)
					(uint_value_type)va_arg(ap, size_t);
    5c94:	00050413          	mv	s0,a0
    5c98:	fb5ff06f          	j	5c4c <cbvprintf+0x5a0>
					(sint_value_type)va_arg(ap, long long);
    5c9c:	00740413          	addi	s0,s0,7
    5ca0:	ff847413          	andi	s0,s0,-8
				value->sint =
    5ca4:	00042603          	lw	a2,0(s0)
    5ca8:	00442683          	lw	a3,4(s0)
					(sint_value_type)va_arg(ap, long long);
    5cac:	00840513          	addi	a0,s0,8
				value->sint =
    5cb0:	02c12823          	sw	a2,48(sp)
    5cb4:	fddff06f          	j	5c90 <cbvprintf+0x5e4>
			} else if (length_mod == LENGTH_H) {
    5cb8:	00200693          	li	a3,2
    5cbc:	f8d718e3          	bne	a4,a3,5c4c <cbvprintf+0x5a0>
				value->sint = (short)value->sint;
    5cc0:	03011683          	lh	a3,48(sp)
    5cc4:	02d12823          	sw	a3,48(sp)
    5cc8:	41f6d693          	srai	a3,a3,0x1f
				value->dbl = va_arg(ap, double);
    5ccc:	02d12a23          	sw	a3,52(sp)
    5cd0:	f7dff06f          	j	5c4c <cbvprintf+0x5a0>
		} else if (specifier_cat == SPECIFIER_UINT) {
    5cd4:	00200513          	li	a0,2
    5cd8:	04a69e63          	bne	a3,a0,5d34 <cbvprintf+0x688>
			switch (length_mod) {
    5cdc:	00500693          	li	a3,5
    5ce0:	fad70ee3          	beq	a4,a3,5c9c <cbvprintf+0x5f0>
    5ce4:	00e6ea63          	bltu	a3,a4,5cf8 <cbvprintf+0x64c>
    5ce8:	00300693          	li	a3,3
    5cec:	02d70a63          	beq	a4,a3,5d20 <cbvprintf+0x674>
    5cf0:	00400693          	li	a3,4
    5cf4:	fad704e3          	beq	a4,a3,5c9c <cbvprintf+0x5f0>
					(uint_value_type)va_arg(ap, size_t);
    5cf8:	00042683          	lw	a3,0(s0)
    5cfc:	02012a23          	sw	zero,52(sp)
    5d00:	00440413          	addi	s0,s0,4
    5d04:	02d12823          	sw	a3,48(sp)
			if (length_mod == LENGTH_HH) {
    5d08:	00100693          	li	a3,1
    5d0c:	f2d70ae3          	beq	a4,a3,5c40 <cbvprintf+0x594>
			} else if (length_mod == LENGTH_H) {
    5d10:	00200693          	li	a3,2
    5d14:	f2d71ce3          	bne	a4,a3,5c4c <cbvprintf+0x5a0>
				value->uint = (unsigned short)value->uint;
    5d18:	03015683          	lhu	a3,48(sp)
    5d1c:	f29ff06f          	j	5c44 <cbvprintf+0x598>
					value->uint = va_arg(ap, unsigned long);
    5d20:	00042683          	lw	a3,0(s0)
    5d24:	00440513          	addi	a0,s0,4
    5d28:	02012a23          	sw	zero,52(sp)
    5d2c:	02d12823          	sw	a3,48(sp)
				break;
    5d30:	f65ff06f          	j	5c94 <cbvprintf+0x5e8>
		} else if (specifier_cat == SPECIFIER_FP) {
    5d34:	00400613          	li	a2,4
    5d38:	04c69a63          	bne	a3,a2,5d8c <cbvprintf+0x6e0>
			if (length_mod == LENGTH_UPPER_L) {
    5d3c:	00800693          	li	a3,8
    5d40:	02d71863          	bne	a4,a3,5d70 <cbvprintf+0x6c4>
				value->ldbl = va_arg(ap, long double);
    5d44:	00042683          	lw	a3,0(s0)
    5d48:	0006a803          	lw	a6,0(a3) # 2000 <CONFIG_SRAM_SIZE>
    5d4c:	0046a503          	lw	a0,4(a3)
    5d50:	0086a603          	lw	a2,8(a3)
    5d54:	00c6a683          	lw	a3,12(a3)
    5d58:	03012823          	sw	a6,48(sp)
    5d5c:	02a12a23          	sw	a0,52(sp)
    5d60:	02c12c23          	sw	a2,56(sp)
    5d64:	02d12e23          	sw	a3,60(sp)
			value->ptr = va_arg(ap, void *);
    5d68:	00440413          	addi	s0,s0,4
    5d6c:	ee1ff06f          	j	5c4c <cbvprintf+0x5a0>
				value->dbl = va_arg(ap, double);
    5d70:	00740693          	addi	a3,s0,7
    5d74:	ff86f693          	andi	a3,a3,-8
    5d78:	0006a603          	lw	a2,0(a3)
    5d7c:	00868413          	addi	s0,a3,8
    5d80:	0046a683          	lw	a3,4(a3)
    5d84:	02c12823          	sw	a2,48(sp)
    5d88:	f45ff06f          	j	5ccc <cbvprintf+0x620>
		} else if (specifier_cat == SPECIFIER_PTR) {
    5d8c:	00300613          	li	a2,3
    5d90:	eac69ee3          	bne	a3,a2,5c4c <cbvprintf+0x5a0>
			value->ptr = va_arg(ap, void *);
    5d94:	00042683          	lw	a3,0(s0)
    5d98:	02d12823          	sw	a3,48(sp)
    5d9c:	fcdff06f          	j	5d68 <cbvprintf+0x6bc>
		switch (conv->specifier) {
    5da0:	04314683          	lbu	a3,67(sp)
    5da4:	07800613          	li	a2,120
    5da8:	ecd664e3          	bltu	a2,a3,5c70 <cbvprintf+0x5c4>
    5dac:	06200613          	li	a2,98
    5db0:	00d66e63          	bltu	a2,a3,5dcc <cbvprintf+0x720>
    5db4:	02500713          	li	a4,37
    5db8:	02e68c63          	beq	a3,a4,5df0 <cbvprintf+0x744>
    5dbc:	05800713          	li	a4,88
    5dc0:	eae698e3          	bne	a3,a4,5c70 <cbvprintf+0x5c4>
    5dc4:	00000b13          	li	s6,0
    5dc8:	1fc0006f          	j	5fc4 <cbvprintf+0x918>
    5dcc:	f9d68693          	addi	a3,a3,-99
    5dd0:	0ff6f693          	andi	a3,a3,255
    5dd4:	01500613          	li	a2,21
    5dd8:	e8d66ce3          	bltu	a2,a3,5c70 <cbvprintf+0x5c4>
    5ddc:	00812783          	lw	a5,8(sp)
    5de0:	00269693          	slli	a3,a3,0x2
    5de4:	00f686b3          	add	a3,a3,a5
    5de8:	0006a683          	lw	a3,0(a3)
    5dec:	00068067          	jr	a3
			OUTC('%');
    5df0:	00098593          	mv	a1,s3
    5df4:	02500513          	li	a0,37
    5df8:	94dff06f          	j	5744 <cbvprintf+0x98>
			bps = (const char *)value->ptr;
    5dfc:	03012c83          	lw	s9,48(sp)
			if (precision >= 0) {
    5e00:	160ac063          	bltz	s5,5f60 <cbvprintf+0x8b4>
				len = strnlen(bps, precision);
    5e04:	000a8593          	mv	a1,s5
    5e08:	000c8513          	mv	a0,s9
    5e0c:	341030ef          	jal	ra,994c <strnlen>
			bpe = bps + len;
    5e10:	00ac8d33          	add	s10,s9,a0
		char sign = 0;
    5e14:	00000b13          	li	s6,0
		if (bps == NULL) {
    5e18:	e40c8ce3          	beqz	s9,5c70 <cbvprintf+0x5c4>
		size_t nj_len = (bpe - bps);
    5e1c:	419d07b3          	sub	a5,s10,s9
		if (sign != 0) {
    5e20:	000b0463          	beqz	s6,5e28 <cbvprintf+0x77c>
			nj_len += 1U;
    5e24:	00178793          	addi	a5,a5,1
		if (conv->altform_0c) {
    5e28:	04214703          	lbu	a4,66(sp)
    5e2c:	01077693          	andi	a3,a4,16
    5e30:	26068663          	beqz	a3,609c <cbvprintf+0x9f0>
			nj_len += 2U;
    5e34:	00278793          	addi	a5,a5,2
		nj_len += conv->pad0_value;
    5e38:	04412683          	lw	a3,68(sp)
		if (conv->pad_fp) {
    5e3c:	04077713          	andi	a4,a4,64
		nj_len += conv->pad0_value;
    5e40:	00d787b3          	add	a5,a5,a3
		if (conv->pad_fp) {
    5e44:	00070663          	beqz	a4,5e50 <cbvprintf+0x7a4>
			nj_len += conv->pad0_pre_exp;
    5e48:	04812703          	lw	a4,72(sp)
    5e4c:	00e787b3          	add	a5,a5,a4
		if (width > 0) {
    5e50:	04905c63          	blez	s1,5ea8 <cbvprintf+0x7fc>
			width -= (int)nj_len;
    5e54:	40f484b3          	sub	s1,s1,a5
			if (!conv->flag_dash) {
    5e58:	04012783          	lw	a5,64(sp)
    5e5c:	0027d793          	srli	a5,a5,0x2
    5e60:	0017f793          	andi	a5,a5,1
    5e64:	04079263          	bnez	a5,5ea8 <cbvprintf+0x7fc>
				if (conv->flag_zero) {
    5e68:	04015783          	lhu	a5,64(sp)
    5e6c:	0407f793          	andi	a5,a5,64
    5e70:	28078863          	beqz	a5,6100 <cbvprintf+0xa54>
					if (sign != 0) {
    5e74:	280b0a63          	beqz	s6,6108 <cbvprintf+0xa5c>
						OUTC(sign);
    5e78:	00098593          	mv	a1,s3
    5e7c:	000b0513          	mv	a0,s6
    5e80:	000900e7          	jalr	s2
    5e84:	24054063          	bltz	a0,60c4 <cbvprintf+0xa18>
    5e88:	001d8d93          	addi	s11,s11,1
					pad = '0';
    5e8c:	03000793          	li	a5,48
						sign = 0;
    5e90:	00000b13          	li	s6,0
    5e94:	01b48ab3          	add	s5,s1,s11
    5e98:	00048713          	mv	a4,s1
    5e9c:	409a8db3          	sub	s11,s5,s1
				while (width-- > 0) {
    5ea0:	fff48493          	addi	s1,s1,-1
    5ea4:	20e04463          	bgtz	a4,60ac <cbvprintf+0xa00>
		if (sign != 0) {
    5ea8:	000b0c63          	beqz	s6,5ec0 <cbvprintf+0x814>
			OUTC(sign);
    5eac:	00098593          	mv	a1,s3
    5eb0:	000b0513          	mv	a0,s6
    5eb4:	000900e7          	jalr	s2
    5eb8:	20054663          	bltz	a0,60c4 <cbvprintf+0xa18>
    5ebc:	001d8d93          	addi	s11,s11,1
			if (conv->altform_0c | conv->altform_0) {
    5ec0:	04012783          	lw	a5,64(sp)
    5ec4:	0147d713          	srli	a4,a5,0x14
    5ec8:	00177713          	andi	a4,a4,1
    5ecc:	00071863          	bnez	a4,5edc <cbvprintf+0x830>
    5ed0:	0137d793          	srli	a5,a5,0x13
    5ed4:	0017f793          	andi	a5,a5,1
    5ed8:	00078c63          	beqz	a5,5ef0 <cbvprintf+0x844>
				OUTC('0');
    5edc:	00098593          	mv	a1,s3
    5ee0:	03000513          	li	a0,48
    5ee4:	000900e7          	jalr	s2
    5ee8:	1c054e63          	bltz	a0,60c4 <cbvprintf+0xa18>
    5eec:	001d8d93          	addi	s11,s11,1
			if (conv->altform_0c) {
    5ef0:	04214783          	lbu	a5,66(sp)
    5ef4:	0107f793          	andi	a5,a5,16
    5ef8:	00078c63          	beqz	a5,5f10 <cbvprintf+0x864>
				OUTC(conv->specifier);
    5efc:	04314503          	lbu	a0,67(sp)
    5f00:	00098593          	mv	a1,s3
    5f04:	000900e7          	jalr	s2
    5f08:	1a054e63          	bltz	a0,60c4 <cbvprintf+0xa18>
    5f0c:	001d8d93          	addi	s11,s11,1
			while (pad_len-- > 0) {
    5f10:	04412783          	lw	a5,68(sp)
    5f14:	01b78ab3          	add	s5,a5,s11
    5f18:	41ba8733          	sub	a4,s5,s11
    5f1c:	1ee04a63          	bgtz	a4,6110 <cbvprintf+0xa64>
			OUTS(bps, bpe);
    5f20:	000d0693          	mv	a3,s10
    5f24:	000c8613          	mv	a2,s9
    5f28:	00098593          	mv	a1,s3
    5f2c:	00090513          	mv	a0,s2
    5f30:	f04ff0ef          	jal	ra,5634 <outs>
    5f34:	18054863          	bltz	a0,60c4 <cbvprintf+0xa18>
    5f38:	01b50db3          	add	s11,a0,s11
		while (width > 0) {
    5f3c:	01b484b3          	add	s1,s1,s11
    5f40:	41b487b3          	sub	a5,s1,s11
    5f44:	d2f056e3          	blez	a5,5c70 <cbvprintf+0x5c4>
			OUTC(' ');
    5f48:	00098593          	mv	a1,s3
    5f4c:	02000513          	li	a0,32
    5f50:	000900e7          	jalr	s2
    5f54:	16054863          	bltz	a0,60c4 <cbvprintf+0xa18>
    5f58:	001d8d93          	addi	s11,s11,1
			--width;
    5f5c:	fe5ff06f          	j	5f40 <cbvprintf+0x894>
				len = strlen(bps);
    5f60:	000c8513          	mv	a0,s9
    5f64:	195030ef          	jal	ra,98f8 <strlen>
    5f68:	ea9ff06f          	j	5e10 <cbvprintf+0x764>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    5f6c:	03012783          	lw	a5,48(sp)
			bpe = buf + 1;
    5f70:	01910d13          	addi	s10,sp,25
			bps = buf;
    5f74:	01810c93          	addi	s9,sp,24
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    5f78:	00f10c23          	sb	a5,24(sp)
			break;
    5f7c:	00000b13          	li	s6,0
    5f80:	e9dff06f          	j	5e1c <cbvprintf+0x770>
			if (conv->flag_plus) {
    5f84:	04015703          	lhu	a4,64(sp)
				sign = '+';
    5f88:	02b00b13          	li	s6,43
			if (conv->flag_plus) {
    5f8c:	00877693          	andi	a3,a4,8
    5f90:	00069663          	bnez	a3,5f9c <cbvprintf+0x8f0>
				sign = ' ';
    5f94:	00171b13          	slli	s6,a4,0x1
    5f98:	020b7b13          	andi	s6,s6,32
			sint = value->sint;
    5f9c:	03412703          	lw	a4,52(sp)
    5fa0:	03012683          	lw	a3,48(sp)
			if (sint < 0) {
    5fa4:	02075063          	bgez	a4,5fc4 <cbvprintf+0x918>
				value->uint = (uint_value_type)-sint;
    5fa8:	40d00633          	neg	a2,a3
    5fac:	40e00733          	neg	a4,a4
    5fb0:	00d036b3          	snez	a3,a3
    5fb4:	40d70733          	sub	a4,a4,a3
    5fb8:	02c12823          	sw	a2,48(sp)
    5fbc:	02e12a23          	sw	a4,52(sp)
				sign = '-';
    5fc0:	02d00b13          	li	s6,45
			bps = encode_uint(value->uint, conv, buf, bpe);
    5fc4:	03012503          	lw	a0,48(sp)
    5fc8:	03412583          	lw	a1,52(sp)
    5fcc:	02e10713          	addi	a4,sp,46
    5fd0:	01810693          	addi	a3,sp,24
    5fd4:	04010613          	addi	a2,sp,64
    5fd8:	cf0ff0ef          	jal	ra,54c8 <encode_uint>
    5fdc:	00050c93          	mv	s9,a0
			if (precision >= 0) {
    5fe0:	02e10d13          	addi	s10,sp,46
    5fe4:	e20acae3          	bltz	s5,5e18 <cbvprintf+0x76c>
				conv->flag_zero = false;
    5fe8:	04015683          	lhu	a3,64(sp)
				size_t len = bpe - bps;
    5fec:	419d0733          	sub	a4,s10,s9
				conv->flag_zero = false;
    5ff0:	fbf6f693          	andi	a3,a3,-65
    5ff4:	04d11023          	sh	a3,64(sp)
				if (len < (size_t)precision) {
    5ff8:	e35770e3          	bgeu	a4,s5,5e18 <cbvprintf+0x76c>
					conv->pad0_value = precision - (int)len;
    5ffc:	40ea87b3          	sub	a5,s5,a4
    6000:	04f12223          	sw	a5,68(sp)
    6004:	e15ff06f          	j	5e18 <cbvprintf+0x76c>
			if (value->ptr != NULL) {
    6008:	03012503          	lw	a0,48(sp)
    600c:	08050063          	beqz	a0,608c <cbvprintf+0x9e0>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    6010:	02e10713          	addi	a4,sp,46
    6014:	01810693          	addi	a3,sp,24
    6018:	04010613          	addi	a2,sp,64
    601c:	00000593          	li	a1,0
    6020:	ca8ff0ef          	jal	ra,54c8 <encode_uint>
				conv->altform_0c = true;
    6024:	04215703          	lhu	a4,66(sp)
    6028:	000086b7          	lui	a3,0x8
    602c:	81068693          	addi	a3,a3,-2032 # 7810 <add_to_waitq_locked+0xc>
    6030:	0ef77713          	andi	a4,a4,239
    6034:	00d76733          	or	a4,a4,a3
				bps = encode_uint((uintptr_t)value->ptr, conv,
    6038:	00050c93          	mv	s9,a0
				conv->altform_0c = true;
    603c:	04e11123          	sh	a4,66(sp)
		char sign = 0;
    6040:	00000b13          	li	s6,0
				goto prec_int_pad0;
    6044:	f9dff06f          	j	5fe0 <cbvprintf+0x934>
	switch ((enum length_mod_enum)conv->length_mod) {
    6048:	00700693          	li	a3,7
				store_count(conv, value->ptr, count);
    604c:	03012783          	lw	a5,48(sp)
	switch ((enum length_mod_enum)conv->length_mod) {
    6050:	c2e6e0e3          	bltu	a3,a4,5c70 <cbvprintf+0x5c4>
    6054:	00271713          	slli	a4,a4,0x2
    6058:	01770733          	add	a4,a4,s7
    605c:	00072703          	lw	a4,0(a4) # ffffc000 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffffc001>
    6060:	00070067          	jr	a4
		*(signed char *)dp = (signed char)count;
    6064:	01b78023          	sb	s11,0(a5)
		break;
    6068:	c09ff06f          	j	5c70 <cbvprintf+0x5c4>
		*(short *)dp = (short)count;
    606c:	01b79023          	sh	s11,0(a5)
		break;
    6070:	c01ff06f          	j	5c70 <cbvprintf+0x5c4>
		*(intmax_t *)dp = (intmax_t)count;
    6074:	41fdd713          	srai	a4,s11,0x1f
    6078:	01b7a023          	sw	s11,0(a5)
    607c:	00e7a223          	sw	a4,4(a5)
		break;
    6080:	bf1ff06f          	j	5c70 <cbvprintf+0x5c4>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    6084:	01b7a023          	sw	s11,0(a5)
		break;
    6088:	be9ff06f          	j	5c70 <cbvprintf+0x5c4>
			bps = "(nil)";
    608c:	0000dcb7          	lui	s9,0xd
			bpe = bps + 5;
    6090:	000c0d13          	mv	s10,s8
			bps = "(nil)";
    6094:	588c8c93          	addi	s9,s9,1416 # d588 <__mprec_tens+0x310>
    6098:	ee5ff06f          	j	5f7c <cbvprintf+0x8d0>
		} else if (conv->altform_0) {
    609c:	00877693          	andi	a3,a4,8
    60a0:	d8068ce3          	beqz	a3,5e38 <cbvprintf+0x78c>
			nj_len += 1U;
    60a4:	00178793          	addi	a5,a5,1
    60a8:	d91ff06f          	j	5e38 <cbvprintf+0x78c>
					OUTC(pad);
    60ac:	00078513          	mv	a0,a5
    60b0:	00098593          	mv	a1,s3
    60b4:	00f12623          	sw	a5,12(sp)
    60b8:	000900e7          	jalr	s2
    60bc:	00c12783          	lw	a5,12(sp)
    60c0:	dc055ce3          	bgez	a0,5e98 <cbvprintf+0x7ec>
#undef OUTS
#undef OUTC
}
    60c4:	08c12083          	lw	ra,140(sp)
    60c8:	08812403          	lw	s0,136(sp)
    60cc:	08412483          	lw	s1,132(sp)
    60d0:	08012903          	lw	s2,128(sp)
    60d4:	07c12983          	lw	s3,124(sp)
    60d8:	07812a03          	lw	s4,120(sp)
    60dc:	07412a83          	lw	s5,116(sp)
    60e0:	07012b03          	lw	s6,112(sp)
    60e4:	06c12b83          	lw	s7,108(sp)
    60e8:	06812c03          	lw	s8,104(sp)
    60ec:	06412c83          	lw	s9,100(sp)
    60f0:	06012d03          	lw	s10,96(sp)
    60f4:	05c12d83          	lw	s11,92(sp)
    60f8:	09010113          	addi	sp,sp,144
    60fc:	00008067          	ret
				char pad = ' ';
    6100:	02000793          	li	a5,32
    6104:	d91ff06f          	j	5e94 <cbvprintf+0x7e8>
					pad = '0';
    6108:	03000793          	li	a5,48
    610c:	d89ff06f          	j	5e94 <cbvprintf+0x7e8>
				OUTC('0');
    6110:	00098593          	mv	a1,s3
    6114:	03000513          	li	a0,48
    6118:	000900e7          	jalr	s2
    611c:	fa0544e3          	bltz	a0,60c4 <cbvprintf+0xa18>
    6120:	001d8d93          	addi	s11,s11,1
    6124:	df5ff06f          	j	5f18 <cbvprintf+0x86c>

00006128 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    6128:	00008067          	ret

0000612c <soc_interrupt_init>:
static ALWAYS_INLINE unsigned int arch_irq_lock(void)
{
	unsigned int key;
	ulong_t mstatus;

	__asm__ volatile ("csrrc %0, mstatus, %1"
    612c:	00800793          	li	a5,8
    6130:	3007b7f3          	csrrc	a5,mstatus,a5
void soc_interrupt_init(void)
{
	/* ensure that all interrupts are disabled */
	(void)irq_lock();

	__asm__ volatile ("csrwi mie, 0\n"
    6134:	30405073          	csrwi	mie,0
    6138:	34405073          	csrwi	mip,0
			  "csrwi mip, 0\n");
}
    613c:	00008067          	ret

00006140 <fix_baud_rate>:
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
    6140:	800017b7          	lui	a5,0x80001
    6144:	03c7a783          	lw	a5,60(a5) # 8000103c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000103d>

	/*
	 * calculate baud rate divisor. a variant of
	 * (uint32_t)(dev_cfg->sys_clk_freq / (16.0 * baud_rate) + 0.5)
	 */
	divisor = ((sys_clk_freq + (baud_rate << 3))
    6148:	000e1737          	lui	a4,0xe1
	return *(volatile uint8_t *)addr;
    614c:	800026b7          	lui	a3,0x80002
    6150:	00e787b3          	add	a5,a5,a4
		   / baud_rate) >> 4;
    6154:	0001c737          	lui	a4,0x1c
    6158:	20070713          	addi	a4,a4,512 # 1c200 <kheap__system_heap+0xd750>
    615c:	02e7d7b3          	divu	a5,a5,a4
    6160:	00c6c703          	lbu	a4,12(a3) # 8000200c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000200d>
	sys_write8((divisor >> 8) & 0xff, REG_BRDH);

	sys_write8(lcr_cache, REG_LCR);

	return 0;
}
    6164:	00000513          	li	a0,0
    6168:	0ff77613          	andi	a2,a4,255
	sys_write8(lcr_cache | LCR_DLAB, REG_LCR);
    616c:	f8076713          	ori	a4,a4,-128
    6170:	0ff77713          	andi	a4,a4,255
	*(volatile uint8_t *)addr = data;
    6174:	00e68623          	sb	a4,12(a3)
	divisor = ((sys_clk_freq + (baud_rate << 3))
    6178:	0047d713          	srli	a4,a5,0x4
	sys_write8( divisor       & 0xff, REG_BRDL);
    617c:	0ff77713          	andi	a4,a4,255
	sys_write8((divisor >> 8) & 0xff, REG_BRDH);
    6180:	00c7d793          	srli	a5,a5,0xc
    6184:	00e68023          	sb	a4,0(a3)
    6188:	0ff7f793          	andi	a5,a5,255
    618c:	00f68223          	sb	a5,4(a3)
    6190:	00c68623          	sb	a2,12(a3)
}
    6194:	00008067          	ret

00006198 <arch_cpu_idle>:
 */
static ALWAYS_INLINE void arch_irq_unlock(unsigned int key)
{
	ulong_t mstatus;

	__asm__ volatile ("csrrs %0, mstatus, %1"
    6198:	00800793          	li	a5,8
    619c:	3007a7f3          	csrrs	a5,mstatus,a5
 */

void __weak arch_cpu_idle(void)
{
	irq_unlock(MSTATUS_IEN);
}
    61a0:	00008067          	ret

000061a4 <z_riscv_fatal_error>:
 #define NO_REG "                "
#endif

FUNC_NORETURN void z_riscv_fatal_error(unsigned int reason,
				       const z_arch_esf_t *esf)
{
    61a4:	ff010113          	addi	sp,sp,-16
    61a8:	00112623          	sw	ra,12(sp)
		LOG_ERR("   mepc: " PR_REG, esf->mepc);
		LOG_ERR("mstatus: " PR_REG, esf->mstatus);
		LOG_ERR("");
	}

	z_fatal_error(reason, esf);
    61ac:	455000ef          	jal	ra,6e00 <z_fatal_error>

000061b0 <_Fault>:
		return "unknown";
	}
}

void _Fault(z_arch_esf_t *esf)
{
    61b0:	ff010113          	addi	sp,sp,-16
    61b4:	00112623          	sw	ra,12(sp)
    61b8:	00050593          	mv	a1,a0
		}
	}
#endif /* CONFIG_USERSPACE */
	ulong_t mcause;

	__asm__ volatile("csrr %0, mcause" : "=r" (mcause));
    61bc:	342027f3          	csrr	a5,mcause

#ifndef CONFIG_SOC_OPENISA_RV32M1_RISCV32
	ulong_t mtval;
	__asm__ volatile("csrr %0, mtval" : "=r" (mtval));
    61c0:	343027f3          	csrr	a5,mtval
	z_fatal_error(reason, esf);
    61c4:	00000513          	li	a0,0
    61c8:	439000ef          	jal	ra,6e00 <z_fatal_error>

000061cc <z_irq_spurious>:
#include <kernel_internal.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_irq_spurious(const void *unused)
{
    61cc:	ff010113          	addi	sp,sp,-16
    61d0:	00112623          	sw	ra,12(sp)
	ulong_t mcause;

	ARG_UNUSED(unused);

	__asm__ volatile("csrr %0, mcause" : "=r" (mcause));
    61d4:	342027f3          	csrr	a5,mcause
	if (mcause == RISCV_MACHINE_EXT_IRQ) {
		LOG_ERR("PLIC interrupt line causing the IRQ: %d",
			riscv_plic_get_irq());
	}
#endif
	z_riscv_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    61d8:	00000593          	li	a1,0
    61dc:	00100513          	li	a0,1
    61e0:	fc5ff0ef          	jal	ra,61a4 <z_riscv_fatal_error>

000061e4 <_PrepC>:
 *
 * @return N/A
 */

void _PrepC(void)
{
    61e4:	ff010113          	addi	sp,sp,-16
    61e8:	00112623          	sw	ra,12(sp)
	z_bss_zero();
    61ec:	575000ef          	jal	ra,6f60 <z_bss_zero>
#ifdef CONFIG_XIP
	z_data_copy();
#endif
#if defined(CONFIG_RISCV_SOC_INTERRUPT_INIT)
	soc_interrupt_init();
    61f0:	f3dff0ef          	jal	ra,612c <soc_interrupt_init>
#endif
#ifdef CONFIG_PMP_STACK_GUARD
	z_riscv_configure_interrupt_stack_guard();
#endif
	z_cstart();
    61f4:	58d000ef          	jal	ra,6f80 <z_cstart>

000061f8 <__initialize>:
SECTION_FUNC(TEXT, __initialize)
	/*
	 * This will boot master core, just halt other cores.
	 * Note: need to be updated for complete SMP support
	 */
	csrr a0, mhartid
    61f8:	f1402573          	csrr	a0,mhartid
	beqz a0, boot_master_core
    61fc:	00050663          	beqz	a0,6208 <boot_master_core>

00006200 <loop_slave_core>:

loop_slave_core:
	wfi
    6200:	10500073          	wfi
	j loop_slave_core
    6204:	ffdff06f          	j	6200 <loop_slave_core>

00006208 <boot_master_core>:

	/*
	 * Initially, setup stack pointer to
	 * z_interrupt_stacks + CONFIG_ISR_STACK_SIZE
	 */
	la sp, z_interrupt_stacks
    6208:	00008117          	auipc	sp,0x8
    620c:	0a810113          	addi	sp,sp,168 # e2b0 <z_interrupt_stacks>
	li t0, CONFIG_ISR_STACK_SIZE
    6210:	000012b7          	lui	t0,0x1
    6214:	80028293          	addi	t0,t0,-2048 # 800 <CONFIG_ISR_STACK_SIZE>
	add sp, sp, t0
    6218:	00510133          	add	sp,sp,t0

	csrw mscratch, sp
    621c:	34011073          	csrw	mscratch,sp

	/*
	 * Jump into C domain. _PrepC zeroes BSS, copies rw data into RAM,
	 * and then enters kernel z_cstart
	 */
	call _PrepC
    6220:	fc5ff0ef          	jal	ra,61e4 <_PrepC>

00006224 <z_thread_entry_wrapper>:
	 * in registers a0, a1, a2 and a3. These registers are used as arguments
	 * to function z_thread_entry. Hence, just call z_thread_entry with
	 * return address set to 0 to indicate a non-returning function call.
	 */

	jal x0, z_thread_entry
    6224:	f54fe06f          	j	4978 <z_thread_entry>

00006228 <arch_new_thread>:
#ifdef CONFIG_RISCV_SOC_CONTEXT_SAVE
	const struct soc_esf soc_esf_init = {SOC_ESF_INIT};
#endif

	/* Initial stack frame for thread */
	stack_init = (struct __esf *)Z_STACK_PTR_ALIGN(
    6228:	fb460613          	addi	a2,a2,-76 # 3fb4 <__trunctfdf2+0x218>
 * @param ptr Proposed stack pointer address
 * @return Properly aligned stack pointer address
 */
static inline char *z_stack_ptr_align(char *ptr)
{
	return (char *)ROUND_DOWN(ptr, ARCH_STACK_PTR_ALIGN);
    622c:	ff067613          	andi	a2,a2,-16
				);

	/* Setup the initial stack frame */
	stack_init->a0 = (ulong_t)entry;
	stack_init->a1 = (ulong_t)p1;
	stack_init->a2 = (ulong_t)p2;
    6230:	02f62623          	sw	a5,44(a2)
	 *    restored following the MSTATUS value set within the thread stack;
	 * 2) the core will jump to z_thread_entry_wrapper, as the program
	 *    counter will be restored following the MEPC value set within the
	 *    thread stack.
	 */
	stack_init->mstatus = MSTATUS_DEF_RESTORE;
    6234:	000027b7          	lui	a5,0x2
    6238:	88078793          	addi	a5,a5,-1920 # 1880 <__muldf3+0x4f8>
    623c:	04f62423          	sw	a5,72(a2)
#elif defined(CONFIG_FPU)
	/* Unshared FP mode: enable FPU of each thread. */
	stack_init->mstatus |= MSTATUS_FS_INIT;
#endif

	stack_init->mepc = (ulong_t)z_thread_entry_wrapper;
    6240:	000067b7          	lui	a5,0x6
    6244:	22478793          	addi	a5,a5,548 # 6224 <z_thread_entry_wrapper>
	stack_init->a0 = (ulong_t)entry;
    6248:	02d62223          	sw	a3,36(a2)
	stack_init->a1 = (ulong_t)p1;
    624c:	02e62423          	sw	a4,40(a2)
	stack_init->a3 = (ulong_t)p3;
    6250:	03062823          	sw	a6,48(a2)
	stack_init->mepc = (ulong_t)z_thread_entry_wrapper;
    6254:	04f62223          	sw	a5,68(a2)

#ifdef CONFIG_RISCV_SOC_CONTEXT_SAVE
	stack_init->soc_context = soc_esf_init;
#endif

	thread->callee_saved.sp = (ulong_t)stack_init;
    6258:	02c52c23          	sw	a2,56(a0)
}
    625c:	00008067          	ret

00006260 <malloc_prepare>:
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
    6260:	00000513          	li	a0,0
    6264:	00008067          	ret

00006268 <_stdout_hook_default>:
static int _stdout_hook_default(int c)
{
	(void)(c);  /* Prevent warning about unused argument */

	return EOF;
}
    6268:	fff00513          	li	a0,-1
    626c:	00008067          	ret

00006270 <_stdin_hook_default>:
}

static unsigned char _stdin_hook_default(void)
{
	return 0;
}
    6270:	00000513          	li	a0,0
    6274:	00008067          	ret

00006278 <__stdout_hook_install>:
	_stdout_hook = hook;
    6278:	0002f7b7          	lui	a5,0x2f
    627c:	c8a7a223          	sw	a0,-892(a5) # 2ec84 <_stdout_hook>
}
    6280:	00008067          	ret

00006284 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    6284:	fe010113          	addi	sp,sp,-32
    6288:	00812c23          	sw	s0,24(sp)
    628c:	00912a23          	sw	s1,20(sp)
    6290:	01212823          	sw	s2,16(sp)
    6294:	01312623          	sw	s3,12(sp)
    6298:	01412423          	sw	s4,8(sp)
    629c:	01512223          	sw	s5,4(sp)
    62a0:	00112e23          	sw	ra,28(sp)
    62a4:	00050913          	mv	s2,a0
    62a8:	00058493          	mv	s1,a1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
    62ac:	00000413          	li	s0,0
		*(buf + i) = _stdin_hook();
    62b0:	0002f9b7          	lui	s3,0x2f
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    62b4:	00a00a13          	li	s4,10
    62b8:	00d00a93          	li	s5,13
	for (i = 0; i < nbytes; i++) {
    62bc:	02945063          	bge	s0,s1,62dc <z_impl_zephyr_read_stdin+0x58>
		*(buf + i) = _stdin_hook();
    62c0:	c809a783          	lw	a5,-896(s3) # 2ec80 <_stdin_hook>
    62c4:	000780e7          	jalr	a5
    62c8:	008907b3          	add	a5,s2,s0
    62cc:	00a78023          	sb	a0,0(a5)
	for (i = 0; i < nbytes; i++) {
    62d0:	00140413          	addi	s0,s0,1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    62d4:	01450463          	beq	a0,s4,62dc <z_impl_zephyr_read_stdin+0x58>
    62d8:	ff5512e3          	bne	a0,s5,62bc <z_impl_zephyr_read_stdin+0x38>
			i++;
			break;
		}
	}
	return i;
}
    62dc:	01c12083          	lw	ra,28(sp)
    62e0:	00040513          	mv	a0,s0
    62e4:	01812403          	lw	s0,24(sp)
    62e8:	01412483          	lw	s1,20(sp)
    62ec:	01012903          	lw	s2,16(sp)
    62f0:	00c12983          	lw	s3,12(sp)
    62f4:	00812a03          	lw	s4,8(sp)
    62f8:	00412a83          	lw	s5,4(sp)
    62fc:	02010113          	addi	sp,sp,32
    6300:	00008067          	ret

00006304 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    6304:	fe010113          	addi	sp,sp,-32
    6308:	00812c23          	sw	s0,24(sp)
    630c:	00912a23          	sw	s1,20(sp)
    6310:	01212823          	sw	s2,16(sp)
    6314:	01512223          	sw	s5,4(sp)
    6318:	01612023          	sw	s6,0(sp)
    631c:	00112e23          	sw	ra,28(sp)
    6320:	01312623          	sw	s3,12(sp)
    6324:	01412423          	sw	s4,8(sp)
    6328:	00050913          	mv	s2,a0
    632c:	00058413          	mv	s0,a1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    6330:	00000493          	li	s1,0
		if (*(buf + i) == '\n') {
    6334:	00a00a93          	li	s5,10
    6338:	0002fb37          	lui	s6,0x2f
	for (i = 0; i < nbytes; i++) {
    633c:	0284c863          	blt	s1,s0,636c <z_impl_zephyr_write_stdout+0x68>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    6340:	01c12083          	lw	ra,28(sp)
    6344:	00040513          	mv	a0,s0
    6348:	01812403          	lw	s0,24(sp)
    634c:	01412483          	lw	s1,20(sp)
    6350:	01012903          	lw	s2,16(sp)
    6354:	00c12983          	lw	s3,12(sp)
    6358:	00812a03          	lw	s4,8(sp)
    635c:	00412a83          	lw	s5,4(sp)
    6360:	00012b03          	lw	s6,0(sp)
    6364:	02010113          	addi	sp,sp,32
    6368:	00008067          	ret
		if (*(buf + i) == '\n') {
    636c:	009909b3          	add	s3,s2,s1
    6370:	0009c783          	lbu	a5,0(s3)
    6374:	c84b0a13          	addi	s4,s6,-892 # 2ec84 <_stdout_hook>
    6378:	01579863          	bne	a5,s5,6388 <z_impl_zephyr_write_stdout+0x84>
			_stdout_hook('\r');
    637c:	000a2783          	lw	a5,0(s4)
    6380:	00d00513          	li	a0,13
    6384:	000780e7          	jalr	a5
		_stdout_hook(*(buf + i));
    6388:	000a2783          	lw	a5,0(s4)
    638c:	0009c503          	lbu	a0,0(s3)
	for (i = 0; i < nbytes; i++) {
    6390:	00148493          	addi	s1,s1,1
		_stdout_hook(*(buf + i));
    6394:	000780e7          	jalr	a5
	for (i = 0; i < nbytes; i++) {
    6398:	fa5ff06f          	j	633c <z_impl_zephyr_write_stdout+0x38>

0000639c <_read>:
#include <syscalls/zephyr_write_stdout_mrsh.c>
#endif

#ifndef CONFIG_POSIX_API
int _read(int fd, char *buf, int nbytes)
{
    639c:	00058513          	mv	a0,a1
    63a0:	00060593          	mv	a1,a2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
    63a4:	ee1ff06f          	j	6284 <z_impl_zephyr_read_stdin>

000063a8 <_write>:
	return zephyr_read_stdin(buf, nbytes);
}
__weak FUNC_ALIAS(_read, read, int);

int _write(int fd, const void *buf, int nbytes)
{
    63a8:	00058513          	mv	a0,a1
    63ac:	00060593          	mv	a1,a2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
    63b0:	f55ff06f          	j	6304 <z_impl_zephyr_write_stdout>

000063b4 <_close>:
    63b4:	fff00513          	li	a0,-1
    63b8:	00008067          	ret

000063bc <_lseek>:
__weak FUNC_ALIAS(_close, close, int);

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    63bc:	00000513          	li	a0,0
    63c0:	00008067          	ret

000063c4 <_isatty>:
#endif

int _isatty(int file)
{
	return file <= 2;
}
    63c4:	00352513          	slti	a0,a0,3
    63c8:	00008067          	ret

000063cc <_kill>:
__weak FUNC_ALIAS(_isatty, isatty, int);

int _kill(int i, int j)
{
	return 0;
}
    63cc:	00000513          	li	a0,0
    63d0:	00008067          	ret

000063d4 <_getpid>:
__weak FUNC_ALIAS(_kill, kill, int);

int _getpid(void)
{
	return 0;
}
    63d4:	00000513          	li	a0,0
    63d8:	00008067          	ret

000063dc <_fstat>:
__weak FUNC_ALIAS(_getpid, getpid, int);

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    63dc:	000027b7          	lui	a5,0x2
    63e0:	00f5a223          	sw	a5,4(a1)
	return 0;
}
    63e4:	00000513          	li	a0,0
    63e8:	00008067          	ret

000063ec <_exit>:
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    63ec:	ff010113          	addi	sp,sp,-16
    63f0:	00112623          	sw	ra,12(sp)
    63f4:	0000d537          	lui	a0,0xd
    63f8:	00500593          	li	a1,5
    63fc:	6a050513          	addi	a0,a0,1696 # d6a0 <dts_ord_9_cfg+0xc>
    6400:	f05ff0ef          	jal	ra,6304 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
    6404:	0000006f          	j	6404 <_exit+0x18>

00006408 <_sbrk>:

void *_sbrk(intptr_t count)
{
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    6408:	0000e737          	lui	a4,0xe
    640c:	b0870713          	addi	a4,a4,-1272 # db08 <heap_sz>
    6410:	00072783          	lw	a5,0(a4)

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    6414:	00800637          	lui	a2,0x800
    6418:	00f506b3          	add	a3,a0,a5
    641c:	0002f537          	lui	a0,0x2f
    6420:	f0050513          	addi	a0,a0,-256 # 2ef00 <__data_region_end>
    6424:	40a60633          	sub	a2,a2,a0
    6428:	00c6f863          	bgeu	a3,a2,6438 <_sbrk+0x30>
	ptr = ((char *)HEAP_BASE) + heap_sz;
    642c:	00a78533          	add	a0,a5,a0
		heap_sz += count;
    6430:	00d72023          	sw	a3,0(a4)
		ret = ptr;
    6434:	00008067          	ret
	} else {
		ret = (void *)-1;
    6438:	fff00513          	li	a0,-1
	}

	return ret;
}
    643c:	00008067          	ret

00006440 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
    6440:	ff010113          	addi	sp,sp,-16
    6444:	00812423          	sw	s0,8(sp)
    6448:	00050413          	mv	s0,a0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
    644c:	01400513          	li	a0,20
{
    6450:	00112623          	sw	ra,12(sp)
	*lock = malloc(sizeof(struct k_mutex));
    6454:	280020ef          	jal	ra,86d4 <malloc>
    6458:	00a42023          	sw	a0,0(s0)
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
    645c:	00812403          	lw	s0,8(sp)
    6460:	00c12083          	lw	ra,12(sp)
    6464:	01010113          	addi	sp,sp,16
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_init(mutex);
    6468:	5f90006f          	j	7260 <z_impl_k_mutex_init>

0000646c <__retarget_lock_acquire_recursive>:
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    646c:	fff00593          	li	a1,-1
    6470:	fff00613          	li	a2,-1
    6474:	6050006f          	j	7278 <z_impl_k_mutex_lock>

00006478 <__retarget_lock_release_recursive>:
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    6478:	7610006f          	j	73d8 <z_impl_k_mutex_unlock>

0000647c <z_impl_sys_rand32_get>:
 *
 * @return a 32-bit number
 */

uint32_t z_impl_sys_rand32_get(void)
{
    647c:	ff010113          	addi	sp,sp,-16
    6480:	00812423          	sw	s0,8(sp)
    6484:	00112623          	sw	ra,12(sp)

extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    6488:	079000ef          	jal	ra,6d00 <sys_clock_cycle_get_32>
    648c:	00050413          	mv	s0,a0
		/* coverity[OVERRUN] */
		return (atomic_val_t) arch_syscall_invoke2(*(uintptr_t *)&target, *(uintptr_t *)&value, K_SYSCALL_ATOMIC_ADD);
	}
#endif
	compiler_barrier();
	return z_impl_atomic_add(target, value);
    6490:	3b9ad5b7          	lui	a1,0x3b9ad
    6494:	0000e537          	lui	a0,0xe
    6498:	a0358593          	addi	a1,a1,-1533 # 3b9aca03 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x389fd983>
    649c:	b0c50513          	addi	a0,a0,-1268 # db0c <_rand32_counter>
    64a0:	7a9010ef          	jal	ra,8448 <z_impl_atomic_add>
	return k_cycle_get_32() + atomic_add(&_rand32_counter, _RAND32_INC);
}
    64a4:	00c12083          	lw	ra,12(sp)
    64a8:	00850533          	add	a0,a0,s0
    64ac:	00812403          	lw	s0,8(sp)
    64b0:	01010113          	addi	sp,sp,16
    64b4:	00008067          	ret

000064b8 <swerv_pic_init>:
	return *(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg);
}

static void swerv_pic_write(uint32_t reg, uint32_t val)
{
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    64b8:	f00c37b7          	lui	a5,0xf00c3
    64bc:	0007a023          	sw	zero,0(a5) # f00c3000 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xf00c3001>
    64c0:	f00c27b7          	lui	a5,0xf00c2
    64c4:	00478713          	addi	a4,a5,4 # f00c2004 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xf00c2005>

	/* Init priority order to 0, 0=lowest to 15=highest */
	swerv_pic_write(SWERV_PIC_mpiccfg, 0);

	/* Ensure that all interrupts are disabled initially */
	for (i = 1; i < SWERV_PIC_MAX_ID; i++) {
    64c8:	12c78793          	addi	a5,a5,300
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    64cc:	00072023          	sw	zero,0(a4)
	for (i = 1; i < SWERV_PIC_MAX_ID; i++) {
    64d0:	00470713          	addi	a4,a4,4
    64d4:	fef71ce3          	bne	a4,a5,64cc <swerv_pic_init+0x14>
    64d8:	f00c07b7          	lui	a5,0xf00c0
    64dc:	00478713          	addi	a4,a5,4 # f00c0004 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xf00c0005>
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    64e0:	00f00693          	li	a3,15
		swerv_pic_write(SWERV_PIC_meie(i), 0);
	}

	/* Set priority of each interrupt line to 0 initially */
	for (i = 1; i < SWERV_PIC_MAX_ID; i++) {
    64e4:	12c78793          	addi	a5,a5,300
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    64e8:	00d72023          	sw	a3,0(a4)
	for (i = 1; i < SWERV_PIC_MAX_ID; i++) {
    64ec:	00470713          	addi	a4,a4,4
    64f0:	fef71ce3          	bne	a4,a5,64e8 <swerv_pic_init+0x30>
    64f4:	f00c47b7          	lui	a5,0xf00c4
    64f8:	00478713          	addi	a4,a5,4 # f00c4004 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xf00c4005>
		swerv_pic_write(SWERV_PIC_meipl(i), 15);
	}

	/* Set property of each interrupt line to level-triggered/high */
	for (i = 1; i < SWERV_PIC_MAX_ID; i++) {
    64fc:	12c78793          	addi	a5,a5,300
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    6500:	00072023          	sw	zero,0(a4)
	for (i = 1; i < SWERV_PIC_MAX_ID; i++) {
    6504:	00470713          	addi	a4,a4,4
    6508:	fef71ce3          	bne	a4,a5,6500 <swerv_pic_init+0x48>
    650c:	f00c57b7          	lui	a5,0xf00c5
    6510:	00478713          	addi	a4,a5,4 # f00c5004 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xf00c5005>
		swerv_pic_write(SWERV_PIC_meigwctrl(i), (0<<1)|(0<<0));
	}

	/* clear pending of each interrupt line */
	for (i = 1; i < SWERV_PIC_MAX_ID; i++) {
    6514:	12c78793          	addi	a5,a5,300
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    6518:	00072023          	sw	zero,0(a4)
	for (i = 1; i < SWERV_PIC_MAX_ID; i++) {
    651c:	00470713          	addi	a4,a4,4
    6520:	fef71ce3          	bne	a4,a5,6518 <swerv_pic_init+0x60>
		swerv_pic_write(SWERV_PIC_meigwclr(i), 0);
	}

	/* No interrupts masked */
	__asm__ swerv_pic_writecsr(meipt, 0);
    6524:	bc905073          	csrwi	0xbc9,0
	__asm__ swerv_pic_writecsr(meicidpl, 0);
    6528:	bcb05073          	csrwi	0xbcb,0
	__asm__ swerv_pic_writecsr(meicurpl, 0);
    652c:	bcc05073          	csrwi	0xbcc,0

	/*
	 * CSR mie register is updated using atomic instruction csrrs
	 * (atomic read and set bits in CSR register)
	 */
	__asm__ volatile ("csrrs %0, mie, %1\n"
    6530:	000017b7          	lui	a5,0x1
    6534:	80078793          	addi	a5,a5,-2048 # 800 <CONFIG_ISR_STACK_SIZE>
    6538:	3047a7f3          	csrrs	a5,mie,a5
}
    653c:	00000513          	li	a0,0
    6540:	00008067          	ret

00006544 <swerv_pic_irq_handler>:
{
    6544:	ff010113          	addi	sp,sp,-16
    6548:	00112623          	sw	ra,12(sp)
    654c:	00812423          	sw	s0,8(sp)
	__asm__ swerv_pic_writecsr(meicpct, 0);
    6550:	bca05073          	csrwi	0xbca,0
	__asm__ swerv_pic_readcsr(meihap, tmp);
    6554:	fc802473          	csrr	s0,0xfc8
	irq = (tmp >> 2) & 0xff;
    6558:	00245413          	srli	s0,s0,0x2
    655c:	0ff47413          	andi	s0,s0,255
	save_irq = irq;
    6560:	0000e7b7          	lui	a5,0xe
    6564:	b087a823          	sw	s0,-1264(a5) # db10 <save_irq>
	if (irq == 0U || irq >= 64) {
    6568:	fff40713          	addi	a4,s0,-1
    656c:	03e00793          	li	a5,62
    6570:	00e7f663          	bgeu	a5,a4,657c <swerv_pic_irq_handler+0x38>
		z_irq_spurious(NULL);
    6574:	00000513          	li	a0,0
    6578:	c55ff0ef          	jal	ra,61cc <z_irq_spurious>
	irq += RISCV_MAX_GENERIC_IRQ;
    657c:	00b40713          	addi	a4,s0,11
	if (ite->isr)
    6580:	0002f7b7          	lui	a5,0x2f
    6584:	00371713          	slli	a4,a4,0x3
    6588:	ca078793          	addi	a5,a5,-864 # 2eca0 <_sw_isr_table>
    658c:	00e787b3          	add	a5,a5,a4
    6590:	0047a703          	lw	a4,4(a5)
    6594:	00070663          	beqz	a4,65a0 <swerv_pic_irq_handler+0x5c>
		ite->isr(ite->arg);
    6598:	0007a503          	lw	a0,0(a5)
    659c:	000700e7          	jalr	a4
	swerv_pic_write(SWERV_PIC_meigwclr(irq), 0);
    65a0:	000017b7          	lui	a5,0x1
    65a4:	40b78793          	addi	a5,a5,1035 # 140b <__muldf3+0x83>
    65a8:	00f40433          	add	s0,s0,a5
    65ac:	00241413          	slli	s0,s0,0x2
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    65b0:	f00c07b7          	lui	a5,0xf00c0
    65b4:	00f40433          	add	s0,s0,a5
}
    65b8:	00c12083          	lw	ra,12(sp)
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    65bc:	00042023          	sw	zero,0(s0)
}
    65c0:	00812403          	lw	s0,8(sp)
    65c4:	01010113          	addi	sp,sp,16
    65c8:	00008067          	ret

000065cc <swerv_pic_irq_enable>:
	if ((irq >= SWERV_PIC_MAX_ID) || (irq < RISCV_MAX_GENERIC_IRQ)) {
    65cc:	ff550713          	addi	a4,a0,-11
    65d0:	03f00793          	li	a5,63
    65d4:	02e7e663          	bltu	a5,a4,6600 <swerv_pic_irq_enable+0x34>
	__asm__ volatile ("csrrc %0, mstatus, %1"
    65d8:	00800793          	li	a5,8
    65dc:	3007b7f3          	csrrc	a5,mstatus,a5
	swerv_pic_write(SWERV_PIC_meie(irq - RISCV_MAX_GENERIC_IRQ), 1);
    65e0:	7f550513          	addi	a0,a0,2037
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    65e4:	f00c0737          	lui	a4,0xf00c0
	swerv_pic_write(SWERV_PIC_meie(irq - RISCV_MAX_GENERIC_IRQ), 1);
    65e8:	00251513          	slli	a0,a0,0x2
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    65ec:	00e50533          	add	a0,a0,a4
    65f0:	00100713          	li	a4,1
    65f4:	00e52023          	sw	a4,0(a0)
	key = (mstatus & MSTATUS_IEN);
    65f8:	0087f793          	andi	a5,a5,8
	__asm__ volatile ("csrrs %0, mstatus, %1"
    65fc:	3007a7f3          	csrrs	a5,mstatus,a5
}
    6600:	00008067          	ret

00006604 <arch_irq_enable>:
	if (irq > RISCV_MAX_GENERIC_IRQ) {
    6604:	00b00793          	li	a5,11
    6608:	00a7f463          	bgeu	a5,a0,6610 <arch_irq_enable+0xc>
		swerv_pic_irq_enable(irq);
    660c:	fc1ff06f          	j	65cc <swerv_pic_irq_enable>
			  : "=r" (mie)
			  : "r" (1 << irq));
    6610:	00100793          	li	a5,1
    6614:	00a79533          	sll	a0,a5,a0
	__asm__ volatile ("csrrs %0, mie, %1\n"
    6618:	30452573          	csrrs	a0,mie,a0
}
    661c:	00008067          	ret

00006620 <uart_console_init>:
{

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    6620:	0000d537          	lui	a0,0xd
{
    6624:	ff010113          	addi	sp,sp,-16
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    6628:	f9050713          	addi	a4,a0,-112 # cf90 <__device_dts_ord_11>
    662c:	0000e7b7          	lui	a5,0xe
{
    6630:	00112623          	sw	ra,12(sp)
    6634:	00812423          	sw	s0,8(sp)
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    6638:	b0e7aa23          	sw	a4,-1260(a5) # db14 <uart_console_dev>
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    663c:	f9050513          	addi	a0,a0,-112
    6640:	784000ef          	jal	ra,6dc4 <z_device_ready>
    6644:	fed00793          	li	a5,-19
    6648:	00050e63          	beqz	a0,6664 <uart_console_init+0x44>
	__stdout_hook_install(console_out);
    664c:	00006437          	lui	s0,0x6
    6650:	67840513          	addi	a0,s0,1656 # 6678 <console_out>
    6654:	c25ff0ef          	jal	ra,6278 <__stdout_hook_install>
	__printk_hook_install(console_out);
    6658:	67840513          	addi	a0,s0,1656
    665c:	a20fe0ef          	jal	ra,487c <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    6660:	00000793          	li	a5,0
}
    6664:	00c12083          	lw	ra,12(sp)
    6668:	00812403          	lw	s0,8(sp)
    666c:	00078513          	mv	a0,a5
    6670:	01010113          	addi	sp,sp,16
    6674:	00008067          	ret

00006678 <console_out>:
{
    6678:	ff010113          	addi	sp,sp,-16
    667c:	00812423          	sw	s0,8(sp)
    6680:	00912223          	sw	s1,4(sp)
    6684:	00112623          	sw	ra,12(sp)
    6688:	0000e4b7          	lui	s1,0xe
	if ('\n' == c) {
    668c:	00a00793          	li	a5,10
{
    6690:	00050413          	mv	s0,a0
    6694:	b1448493          	addi	s1,s1,-1260 # db14 <uart_console_dev>
	if ('\n' == c) {
    6698:	00f51c63          	bne	a0,a5,66b0 <console_out+0x38>
		uart_poll_out(uart_console_dev, '\r');
    669c:	0004a503          	lw	a0,0(s1)
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    66a0:	00852783          	lw	a5,8(a0)
    66a4:	00d00593          	li	a1,13
    66a8:	0047a783          	lw	a5,4(a5)
    66ac:	000780e7          	jalr	a5
	uart_poll_out(uart_console_dev, c);
    66b0:	0004a503          	lw	a0,0(s1)
    66b4:	00852783          	lw	a5,8(a0)
    66b8:	0ff47593          	andi	a1,s0,255
    66bc:	0047a783          	lw	a5,4(a5)
    66c0:	000780e7          	jalr	a5
}
    66c4:	00c12083          	lw	ra,12(sp)
    66c8:	00040513          	mv	a0,s0
    66cc:	00812403          	lw	s0,8(sp)
    66d0:	00412483          	lw	s1,4(sp)
    66d4:	01010113          	addi	sp,sp,16
    66d8:	00008067          	ret

000066dc <gpio_mmio32_config>:

static int gpio_mmio32_config(const struct device *dev,
			      gpio_pin_t pin, gpio_flags_t flags)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = context->config;
    66dc:	01052783          	lw	a5,16(a0)
    66e0:	0047a683          	lw	a3,4(a5)

	if ((config->mask & (1 << pin)) == 0) {
    66e4:	00100793          	li	a5,1
    66e8:	00b795b3          	sll	a1,a5,a1
    66ec:	0086a783          	lw	a5,8(a3)
    66f0:	00f5f7b3          	and	a5,a1,a5
    66f4:	06078c63          	beqz	a5,676c <gpio_mmio32_config+0x90>
		return -EINVAL; /* Pin not in our validity mask */
	}

	if (flags & ~(GPIO_INPUT | GPIO_OUTPUT |
    66f8:	fffff7b7          	lui	a5,0xfffff
    66fc:	0fe78793          	addi	a5,a5,254 # fffff0fe <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfffff0ff>
    6700:	00f677b3          	and	a5,a2,a5
		      GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH |
		      GPIO_ACTIVE_LOW)) {
		/* We ignore direction and fake polarity, rest is unsupported */
		return -ENOTSUP;
    6704:	f7a00513          	li	a0,-134
	if (flags & ~(GPIO_INPUT | GPIO_OUTPUT |
    6708:	06079463          	bnez	a5,6770 <gpio_mmio32_config+0x94>
	}

	if ((flags & GPIO_OUTPUT) != 0) {
    670c:	20067793          	andi	a5,a2,512
			*reg = (*reg & (config->mask & ~(1 << pin)));
		}
		irq_unlock(key);
	}

	return 0;
    6710:	00000513          	li	a0,0
	if ((flags & GPIO_OUTPUT) != 0) {
    6714:	04078e63          	beqz	a5,6770 <gpio_mmio32_config+0x94>
		volatile uint32_t *reg = config->reg;
    6718:	0046a703          	lw	a4,4(a3)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    671c:	00800793          	li	a5,8
    6720:	3007b7f3          	csrrc	a5,mstatus,a5
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    6724:	00b65513          	srli	a0,a2,0xb
    6728:	00157513          	andi	a0,a0,1
	key = (mstatus & MSTATUS_IEN);
    672c:	0087f793          	andi	a5,a5,8
    6730:	00050e63          	beqz	a0,674c <gpio_mmio32_config+0x70>
			*reg = (*reg | (1 << pin));
    6734:	00072683          	lw	a3,0(a4) # f00c0000 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xf00c0001>
    6738:	00d5e5b3          	or	a1,a1,a3
			*reg = (*reg & (config->mask & ~(1 << pin)));
    673c:	00b72023          	sw	a1,0(a4)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    6740:	3007a7f3          	csrrs	a5,mstatus,a5
	return 0;
    6744:	00000513          	li	a0,0
}
    6748:	00008067          	ret
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    674c:	40067613          	andi	a2,a2,1024
    6750:	fe0608e3          	beqz	a2,6740 <gpio_mmio32_config+0x64>
			*reg = (*reg & (config->mask & ~(1 << pin)));
    6754:	0086a683          	lw	a3,8(a3)
    6758:	00072603          	lw	a2,0(a4)
    675c:	fff5c593          	not	a1,a1
    6760:	00d5f5b3          	and	a1,a1,a3
    6764:	00c5f5b3          	and	a1,a1,a2
    6768:	fd5ff06f          	j	673c <gpio_mmio32_config+0x60>
		return -EINVAL; /* Pin not in our validity mask */
    676c:	fea00513          	li	a0,-22
}
    6770:	00008067          	ret

00006774 <gpio_mmio32_port_get_raw>:

static int gpio_mmio32_port_get_raw(const struct device *dev, uint32_t *value)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = context->config;
    6774:	01052783          	lw	a5,16(a0)

	*value = *config->reg & config->mask;

	return 0;
}
    6778:	00000513          	li	a0,0
	const struct gpio_mmio32_config *config = context->config;
    677c:	0047a703          	lw	a4,4(a5)
	*value = *config->reg & config->mask;
    6780:	00472783          	lw	a5,4(a4)
    6784:	0007a683          	lw	a3,0(a5)
    6788:	00872783          	lw	a5,8(a4)
    678c:	00d7f7b3          	and	a5,a5,a3
    6790:	00f5a023          	sw	a5,0(a1)
}
    6794:	00008067          	ret

00006798 <gpio_mmio32_port_set_masked_raw>:
static int gpio_mmio32_port_set_masked_raw(const struct device *dev,
					   uint32_t mask,
					   uint32_t value)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = context->config;
    6798:	01052783          	lw	a5,16(a0)
    679c:	0047a783          	lw	a5,4(a5)
	volatile uint32_t *reg = config->reg;
    67a0:	0047a703          	lw	a4,4(a5)
	unsigned int key;

	mask &= config->mask;
    67a4:	0087a783          	lw	a5,8(a5)
    67a8:	00f5f5b3          	and	a1,a1,a5
	__asm__ volatile ("csrrc %0, mstatus, %1"
    67ac:	00800793          	li	a5,8
    67b0:	3007b7f3          	csrrc	a5,mstatus,a5
	value &= mask;

	/* Update pin state atomically */
	key = irq_lock();
	*reg = (*reg & ~mask) | value;
    67b4:	00072683          	lw	a3,0(a4)
	key = (mstatus & MSTATUS_IEN);
    67b8:	0087f793          	andi	a5,a5,8
    67bc:	00c6c633          	xor	a2,a3,a2
    67c0:	00b67633          	and	a2,a2,a1
    67c4:	00d64633          	xor	a2,a2,a3
    67c8:	00c72023          	sw	a2,0(a4)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    67cc:	3007a7f3          	csrrs	a5,mstatus,a5
	irq_unlock(key);

	return 0;
}
    67d0:	00000513          	li	a0,0
    67d4:	00008067          	ret

000067d8 <gpio_mmio32_port_set_bits_raw>:

static int gpio_mmio32_port_set_bits_raw(const struct device *dev,
					 uint32_t mask)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = context->config;
    67d8:	01052783          	lw	a5,16(a0)
    67dc:	0047a783          	lw	a5,4(a5)
	volatile uint32_t *reg = config->reg;
	unsigned int key;

	mask &= config->mask;
    67e0:	0087a703          	lw	a4,8(a5)
	volatile uint32_t *reg = config->reg;
    67e4:	0047a683          	lw	a3,4(a5)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    67e8:	00800793          	li	a5,8
	mask &= config->mask;
    67ec:	00e5f733          	and	a4,a1,a4
    67f0:	3007b7f3          	csrrc	a5,mstatus,a5

	/* Update pin state atomically */
	key = irq_lock();
	*reg = (*reg | mask);
    67f4:	0006a583          	lw	a1,0(a3)
	key = (mstatus & MSTATUS_IEN);
    67f8:	0087f793          	andi	a5,a5,8
    67fc:	00e5e5b3          	or	a1,a1,a4
    6800:	00b6a023          	sw	a1,0(a3)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    6804:	3007a7f3          	csrrs	a5,mstatus,a5
	irq_unlock(key);

	return 0;
}
    6808:	00000513          	li	a0,0
    680c:	00008067          	ret

00006810 <gpio_mmio32_port_clear_bits_raw>:

static int gpio_mmio32_port_clear_bits_raw(const struct device *dev,
					   uint32_t mask)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = context->config;
    6810:	01052783          	lw	a5,16(a0)
    6814:	0047a783          	lw	a5,4(a5)
	volatile uint32_t *reg = config->reg;
    6818:	0047a703          	lw	a4,4(a5)
	unsigned int key;

	mask &= config->mask;
    681c:	0087a783          	lw	a5,8(a5)
    6820:	00f5f5b3          	and	a1,a1,a5
	__asm__ volatile ("csrrc %0, mstatus, %1"
    6824:	00800793          	li	a5,8
    6828:	3007b7f3          	csrrc	a5,mstatus,a5

	/* Update pin state atomically */
	key = irq_lock();
	*reg = (*reg & ~mask);
    682c:	00072683          	lw	a3,0(a4)
    6830:	fff5c593          	not	a1,a1
	key = (mstatus & MSTATUS_IEN);
    6834:	0087f793          	andi	a5,a5,8
    6838:	00d5f5b3          	and	a1,a1,a3
    683c:	00b72023          	sw	a1,0(a4)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    6840:	3007a7f3          	csrrs	a5,mstatus,a5
	irq_unlock(key);

	return 0;
}
    6844:	00000513          	li	a0,0
    6848:	00008067          	ret

0000684c <gpio_mmio32_port_toggle_bits>:

static int gpio_mmio32_port_toggle_bits(const struct device *dev,
					uint32_t mask)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = context->config;
    684c:	01052783          	lw	a5,16(a0)
    6850:	0047a783          	lw	a5,4(a5)
	volatile uint32_t *reg = config->reg;
	unsigned int key;

	mask &= config->mask;
    6854:	0087a703          	lw	a4,8(a5)
	volatile uint32_t *reg = config->reg;
    6858:	0047a683          	lw	a3,4(a5)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    685c:	00800793          	li	a5,8
	mask &= config->mask;
    6860:	00e5f733          	and	a4,a1,a4
    6864:	3007b7f3          	csrrc	a5,mstatus,a5

	/* Update pin state atomically */
	key = irq_lock();
	*reg = (*reg ^ mask);
    6868:	0006a583          	lw	a1,0(a3)
	key = (mstatus & MSTATUS_IEN);
    686c:	0087f793          	andi	a5,a5,8
    6870:	00e5c5b3          	xor	a1,a1,a4
    6874:	00b6a023          	sw	a1,0(a3)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    6878:	3007a7f3          	csrrs	a5,mstatus,a5
	irq_unlock(key);

	return 0;
}
    687c:	00000513          	li	a0,0
    6880:	00008067          	ret

00006884 <gpio_mmio32_pin_interrupt_configure>:
static int gpio_mmio32_pin_interrupt_configure(const struct device *dev,
					       gpio_pin_t pin,
					       enum gpio_int_mode mode,
					       enum gpio_int_trig trig)
{
	if (mode != GPIO_INT_MODE_DISABLED) {
    6884:	000027b7          	lui	a5,0x2
		return -ENOTSUP;
	}

	return 0;
    6888:	00000513          	li	a0,0
	if (mode != GPIO_INT_MODE_DISABLED) {
    688c:	00f60463          	beq	a2,a5,6894 <gpio_mmio32_pin_interrupt_configure+0x10>
		return -ENOTSUP;
    6890:	f7a00513          	li	a0,-134
}
    6894:	00008067          	ret

00006898 <gpio_mmio32_init>:
int gpio_mmio32_init(const struct device *dev)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = dev->config;

	context->config = config;
    6898:	01052783          	lw	a5,16(a0)
    689c:	00452703          	lw	a4,4(a0)

	return 0;
}
    68a0:	00000513          	li	a0,0
	context->config = config;
    68a4:	00e7a223          	sw	a4,4(a5) # 2004 <CONFIG_SRAM_SIZE+0x4>
}
    68a8:	00008067          	ret

000068ac <gpio_veerwolf_init>:
/* Driver functions */

static int gpio_veerwolf_init(const struct device *dev)
{
	return 0;
}
    68ac:	00000513          	li	a0,0
    68b0:	00008067          	ret

000068b4 <gpio_veerwolf_configure>:

static int gpio_veerwolf_configure(const struct device *dev,
				gpio_pin_t pin, gpio_flags_t flags)
{
	return 0;
}
    68b4:	00000513          	li	a0,0
    68b8:	00008067          	ret

000068bc <gpio_veerwolf_port_get_raw>:

static int gpio_veerwolf_port_get_raw(const struct device *dev,
				   gpio_port_value_t *value)
{
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    68bc:	00452783          	lw	a5,4(a0)

	*value = sys_read32(addr);
	return 0;
}
    68c0:	00000513          	li	a0,0
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    68c4:	0007a783          	lw	a5,0(a5)
	return *(volatile uint32_t *)addr;
    68c8:	0007a783          	lw	a5,0(a5)
	*value = sys_read32(addr);
    68cc:	00f5a023          	sw	a5,0(a1)
}
    68d0:	00008067          	ret

000068d4 <gpio_veerwolf_port_set_masked_raw>:

static int gpio_veerwolf_port_set_masked_raw(const struct device *dev,
					  gpio_port_pins_t mask,
					  gpio_port_value_t value)
{
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    68d4:	00452783          	lw	a5,4(a0)
	port_val = sys_read32(addr);
	port_val = (port_val & ~mask) | (value & mask);
	sys_write32(port_val, addr);

	return 0;
}
    68d8:	00000513          	li	a0,0
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    68dc:	0007a783          	lw	a5,0(a5)
    68e0:	0007a703          	lw	a4,0(a5)
	port_val = (port_val & ~mask) | (value & mask);
    68e4:	00e64633          	xor	a2,a2,a4
    68e8:	00b67633          	and	a2,a2,a1
    68ec:	00e64633          	xor	a2,a2,a4
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
    68f0:	00c7a023          	sw	a2,0(a5)
}
    68f4:	00008067          	ret

000068f8 <gpio_veerwolf_port_set_bits_raw>:

static int gpio_veerwolf_port_set_bits_raw(const struct device *dev,
					gpio_port_pins_t pins)
{
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    68f8:	00452783          	lw	a5,4(a0)

	port_val = sys_read32(addr) | pins;
	sys_write32(port_val, addr);

	return 0;
}
    68fc:	00000513          	li	a0,0
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    6900:	0007a783          	lw	a5,0(a5)
	return *(volatile uint32_t *)addr;
    6904:	0007a703          	lw	a4,0(a5)
	port_val = sys_read32(addr) | pins;
    6908:	00e5e5b3          	or	a1,a1,a4
	*(volatile uint32_t *)addr = data;
    690c:	00b7a023          	sw	a1,0(a5)
}
    6910:	00008067          	ret

00006914 <gpio_veerwolf_port_clear_bits_raw>:

static int gpio_veerwolf_port_clear_bits_raw(const struct device *dev,
					  gpio_port_pins_t pins)
{
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    6914:	00452783          	lw	a5,4(a0)
	uint32_t port_val;

	port_val = sys_read32(addr) & ~pins;
    6918:	fff5c593          	not	a1,a1
	sys_write32(port_val, addr);

	return 0;
}
    691c:	00000513          	li	a0,0
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    6920:	0007a783          	lw	a5,0(a5)
	return *(volatile uint32_t *)addr;
    6924:	0007a703          	lw	a4,0(a5)
	port_val = sys_read32(addr) & ~pins;
    6928:	00e5f5b3          	and	a1,a1,a4
	*(volatile uint32_t *)addr = data;
    692c:	00b7a023          	sw	a1,0(a5)
}
    6930:	00008067          	ret

00006934 <gpio_veerwolf_port_toggle_bits>:

static int gpio_veerwolf_port_toggle_bits(const struct device *dev,
				       gpio_port_pins_t pins)
{
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    6934:	00452783          	lw	a5,4(a0)

	port_val = sys_read32(addr) ^ pins;
	sys_write32(port_val, addr);

	return 0;
}
    6938:	00000513          	li	a0,0
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    693c:	0007a783          	lw	a5,0(a5)
	return *(volatile uint32_t *)addr;
    6940:	0007a703          	lw	a4,0(a5)
	port_val = sys_read32(addr) ^ pins;
    6944:	00e5c5b3          	xor	a1,a1,a4
	*(volatile uint32_t *)addr = data;
    6948:	00b7a023          	sw	a1,0(a5)
}
    694c:	00008067          	ret

00006950 <gpio_veerwolf_pin_interrupt_configure>:
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
	int ret = 0;

	if (mode != GPIO_INT_MODE_DISABLED) {
    6950:	000027b7          	lui	a5,0x2
	int ret = 0;
    6954:	00000513          	li	a0,0
	if (mode != GPIO_INT_MODE_DISABLED) {
    6958:	00f60463          	beq	a2,a5,6960 <gpio_veerwolf_pin_interrupt_configure+0x10>
		ret = -ENOTSUP;
    695c:	f7a00513          	li	a0,-134
	}
	return ret;
}
    6960:	00008067          	ret

00006964 <uart_ns16550_configure>:
}

static int uart_ns16550_configure(const struct device *dev,
				  const struct uart_config *cfg)
{
	struct uart_ns16550_dev_data * const dev_data = DEV_DATA(dev);
    6964:	01052883          	lw	a7,16(a0)
{
    6968:	00050793          	mv	a5,a0
	__asm__ volatile ("csrrc %0, mstatus, %1"
    696c:	00800693          	li	a3,8
    6970:	3006b6f3          	csrrc	a3,mstatus,a3
		OUTWORD(PCP(dev), pcp & ~PCP_UPDATE);
		OUTWORD(PCP(dev), pcp | PCP_UPDATE);
	}
#endif

	set_baud_rate(dev, cfg->baudrate);
    6974:	0005a503          	lw	a0,0(a1)
	key = (mstatus & MSTATUS_IEN);
    6978:	0086f693          	andi	a3,a3,8
	if ((baud_rate != 0U) && (dev_cfg->sys_clk_freq != 0U)) {
    697c:	06050863          	beqz	a0,69ec <uart_ns16550_configure+0x88>
	const struct uart_ns16550_device_config * const dev_cfg = DEV_CFG(dev);
    6980:	0047a603          	lw	a2,4(a5) # 2004 <CONFIG_SRAM_SIZE+0x4>
	if ((baud_rate != 0U) && (dev_cfg->sys_clk_freq != 0U)) {
    6984:	00462803          	lw	a6,4(a2) # 800004 <__data_region_end+0x7d1104>
    6988:	06080263          	beqz	a6,69ec <uart_ns16550_configure+0x88>
		divisor = ((dev_cfg->sys_clk_freq + (baud_rate << 3))
    698c:	00351713          	slli	a4,a0,0x3
    6990:	01070733          	add	a4,a4,a6
					/ baud_rate) >> 4;
    6994:	02a75733          	divu	a4,a4,a0
		lcr_cache = INBYTE(LCR(dev));
    6998:	00062803          	lw	a6,0(a2)
	struct uart_ns16550_dev_data * const dev_data = DEV_DATA(dev);
    699c:	0107a303          	lw	t1,16(a5)
	return *(volatile uint8_t *)addr;
    69a0:	00c84603          	lbu	a2,12(a6)
    69a4:	0ff67e13          	andi	t3,a2,255
		OUTBYTE(LCR(dev), LCR_DLAB | lcr_cache);
    69a8:	f8066613          	ori	a2,a2,-128
    69ac:	0ff67613          	andi	a2,a2,255
	*(volatile uint8_t *)addr = data;
    69b0:	00c80623          	sb	a2,12(a6)
	return DEVICE_MMIO_GET(dev);
    69b4:	0047a803          	lw	a6,4(a5)
    69b8:	00082803          	lw	a6,0(a6)
		divisor = ((dev_cfg->sys_clk_freq + (baud_rate << 3))
    69bc:	00475613          	srli	a2,a4,0x4
		OUTBYTE(BRDL(dev), (unsigned char)(divisor & 0xff));
    69c0:	0ff67613          	andi	a2,a2,255
    69c4:	00c80023          	sb	a2,0(a6)
	return DEVICE_MMIO_GET(dev);
    69c8:	0047a603          	lw	a2,4(a5)
		OUTBYTE(BRDH(dev), (unsigned char)((divisor >> 8) & 0xff));
    69cc:	00c75713          	srli	a4,a4,0xc
    69d0:	0ff77713          	andi	a4,a4,255
    69d4:	00062603          	lw	a2,0(a2)
    69d8:	00e60223          	sb	a4,4(a2)
	return DEVICE_MMIO_GET(dev);
    69dc:	0047a703          	lw	a4,4(a5)
		OUTBYTE(LCR(dev), lcr_cache);
    69e0:	00072703          	lw	a4,0(a4)
    69e4:	01c70623          	sb	t3,12(a4)
		dev_data->uart_config.baudrate = baud_rate;
    69e8:	00a32023          	sw	a0,0(t1)

	/* Local structure to hold temporary values to pass to OUTBYTE() */
	struct uart_config uart_cfg;

	switch (cfg->data_bits) {
    69ec:	0065c603          	lbu	a2,6(a1)
    69f0:	00300713          	li	a4,3
		break;
	case UART_CFG_DATA_BITS_8:
		uart_cfg.data_bits = LCR_CS8;
		break;
	default:
		ret = -ENOTSUP;
    69f4:	f7a00513          	li	a0,-134
    69f8:	08c76663          	bltu	a4,a2,6a84 <uart_ns16550_configure+0x120>
		goto out;
	}

	switch (cfg->stop_bits) {
    69fc:	0055c803          	lbu	a6,5(a1)
    6a00:	00100513          	li	a0,1
    6a04:	08a80463          	beq	a6,a0,6a8c <uart_ns16550_configure+0x128>
    6a08:	f7a00513          	li	a0,-134
    6a0c:	06e81c63          	bne	a6,a4,6a84 <uart_ns16550_configure+0x120>
    6a10:	00400813          	li	a6,4
	default:
		ret = -ENOTSUP;
		goto out;
	}

	switch (cfg->parity) {
    6a14:	0045c703          	lbu	a4,4(a1)
    6a18:	00070a63          	beqz	a4,6a2c <uart_ns16550_configure+0xc8>
    6a1c:	00200313          	li	t1,2
    6a20:	f7a00513          	li	a0,-134
    6a24:	06671063          	bne	a4,t1,6a84 <uart_ns16550_configure+0x120>
    6a28:	01000713          	li	a4,16
	default:
		ret = -ENOTSUP;
		goto out;
	}

	dev_data->uart_config = *cfg;
    6a2c:	0005a503          	lw	a0,0(a1)

	/* data bits, stop bits, parity, clear DLAB */
	OUTBYTE(LCR(dev),
    6a30:	01066633          	or	a2,a2,a6
    6a34:	00c76733          	or	a4,a4,a2
	return DEVICE_MMIO_GET(dev);
    6a38:	0047a603          	lw	a2,4(a5)
	dev_data->uart_config = *cfg;
    6a3c:	00a8a023          	sw	a0,0(a7) # 80000 <__data_region_end+0x51100>
    6a40:	0045a583          	lw	a1,4(a1)
	OUTBYTE(LCR(dev),
    6a44:	00062603          	lw	a2,0(a2)
	int ret = 0;
    6a48:	00000513          	li	a0,0
	dev_data->uart_config = *cfg;
    6a4c:	00b8a223          	sw	a1,4(a7)
    6a50:	00e60623          	sb	a4,12(a2)
	return DEVICE_MMIO_GET(dev);
    6a54:	0047a703          	lw	a4,4(a5)
    6a58:	00b00613          	li	a2,11
	if (cfg->flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS) {
		mdc |= MCR_AFCE;
	}
#endif

	OUTBYTE(MDC(dev), mdc);
    6a5c:	00072703          	lw	a4,0(a4)
    6a60:	00c70823          	sb	a2,16(a4)
	return DEVICE_MMIO_GET(dev);
    6a64:	0047a703          	lw	a4,4(a5)
    6a68:	f8700613          	li	a2,-121
	/*
	 * Program FIFO: enabled, mode 0 (set for compatibility with quark),
	 * generate the interrupt at 8th byte
	 * Clear TX and RX FIFO
	 */
	OUTBYTE(FCR(dev),
    6a6c:	00072703          	lw	a4,0(a4)
    6a70:	00c70423          	sb	a2,8(a4)
	return DEVICE_MMIO_GET(dev);
    6a74:	0047a783          	lw	a5,4(a5)
    6a78:	0007a783          	lw	a5,0(a5)
	return *(volatile uint8_t *)addr;
    6a7c:	0007c703          	lbu	a4,0(a5)
	*(volatile uint8_t *)addr = data;
    6a80:	00078223          	sb	zero,4(a5)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    6a84:	3006a6f3          	csrrs	a3,mstatus,a3
	OUTBYTE(IER(dev), 0x00);

out:
	k_spin_unlock(&dev_data->lock, key);
	return ret;
};
    6a88:	00008067          	ret
		uart_cfg.stop_bits = LCR_1_STB;
    6a8c:	00000813          	li	a6,0
    6a90:	f85ff06f          	j	6a14 <uart_ns16550_configure+0xb0>

00006a94 <uart_ns16550_config_get>:

#ifdef CONFIG_UART_USE_RUNTIME_CONFIGURE
static int uart_ns16550_config_get(const struct device *dev,
				   struct uart_config *cfg)
{
	struct uart_ns16550_dev_data *data = DEV_DATA(dev);
    6a94:	01052783          	lw	a5,16(a0)
	cfg->stop_bits = data->uart_config.stop_bits;
	cfg->data_bits = data->uart_config.data_bits;
	cfg->flow_ctrl = data->uart_config.flow_ctrl;

	return 0;
}
    6a98:	00000513          	li	a0,0
	cfg->baudrate = data->uart_config.baudrate;
    6a9c:	0007a703          	lw	a4,0(a5)
    6aa0:	00e5a023          	sw	a4,0(a1)
	cfg->parity = data->uart_config.parity;
    6aa4:	0047c703          	lbu	a4,4(a5)
    6aa8:	00e58223          	sb	a4,4(a1)
	cfg->stop_bits = data->uart_config.stop_bits;
    6aac:	0057c703          	lbu	a4,5(a5)
    6ab0:	00e582a3          	sb	a4,5(a1)
	cfg->data_bits = data->uart_config.data_bits;
    6ab4:	0067c703          	lbu	a4,6(a5)
    6ab8:	00e58323          	sb	a4,6(a1)
	cfg->flow_ctrl = data->uart_config.flow_ctrl;
    6abc:	0077c783          	lbu	a5,7(a5)
    6ac0:	00f583a3          	sb	a5,7(a1)
}
    6ac4:	00008067          	ret

00006ac8 <uart_ns16550_init>:
 */
static int uart_ns16550_init(const struct device *dev)
{
	int ret;

	ret = uart_ns16550_configure(dev, &DEV_DATA(dev)->uart_config);
    6ac8:	01052583          	lw	a1,16(a0)
    6acc:	e99ff06f          	j	6964 <uart_ns16550_configure>

00006ad0 <uart_ns16550_poll_in>:
	__asm__ volatile ("csrrc %0, mstatus, %1"
    6ad0:	00800793          	li	a5,8
    6ad4:	3007b7f3          	csrrc	a5,mstatus,a5
	return DEVICE_MMIO_GET(dev);
    6ad8:	00452703          	lw	a4,4(a0)
	key = (mstatus & MSTATUS_IEN);
    6adc:	0087f793          	andi	a5,a5,8
 *
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */
static int uart_ns16550_poll_in(const struct device *dev, unsigned char *c)
{
	int ret = -1;
    6ae0:	fff00513          	li	a0,-1
	return DEVICE_MMIO_GET(dev);
    6ae4:	00072683          	lw	a3,0(a4)
	return *(volatile uint8_t *)addr;
    6ae8:	0146c703          	lbu	a4,20(a3)
	k_spinlock_key_t key = k_spin_lock(&DEV_DATA(dev)->lock);

	if ((INBYTE(LSR(dev)) & LSR_RXRDY) != 0) {
    6aec:	00177713          	andi	a4,a4,1
    6af0:	00070863          	beqz	a4,6b00 <uart_ns16550_poll_in+0x30>
    6af4:	0006c703          	lbu	a4,0(a3)
		/* got a character */
		*c = INBYTE(RDR(dev));
		ret = 0;
    6af8:	00000513          	li	a0,0
		*c = INBYTE(RDR(dev));
    6afc:	00e58023          	sb	a4,0(a1)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    6b00:	3007a7f3          	csrrs	a5,mstatus,a5
	}

	k_spin_unlock(&DEV_DATA(dev)->lock, key);

	return ret;
}
    6b04:	00008067          	ret

00006b08 <uart_ns16550_poll_out>:
	__asm__ volatile ("csrrc %0, mstatus, %1"
    6b08:	00800793          	li	a5,8
    6b0c:	3007b7f3          	csrrc	a5,mstatus,a5
	return DEVICE_MMIO_GET(dev);
    6b10:	00452703          	lw	a4,4(a0)
	key = (mstatus & MSTATUS_IEN);
    6b14:	0087f793          	andi	a5,a5,8
    6b18:	00072683          	lw	a3,0(a4)
static void uart_ns16550_poll_out(const struct device *dev,
					   unsigned char c)
{
	k_spinlock_key_t key = k_spin_lock(&DEV_DATA(dev)->lock);

	while ((INBYTE(LSR(dev)) & LSR_THRE) == 0) {
    6b1c:	01468613          	addi	a2,a3,20
    6b20:	00064703          	lbu	a4,0(a2)
    6b24:	02077713          	andi	a4,a4,32
    6b28:	fe070ce3          	beqz	a4,6b20 <uart_ns16550_poll_out+0x18>
	*(volatile uint8_t *)addr = data;
    6b2c:	00b68023          	sb	a1,0(a3)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    6b30:	3007a7f3          	csrrs	a5,mstatus,a5
	}

	OUTBYTE(THR(dev), c);

	k_spin_unlock(&DEV_DATA(dev)->lock, key);
}
    6b34:	00008067          	ret

00006b38 <uart_ns16550_err_check>:
	__asm__ volatile ("csrrc %0, mstatus, %1"
    6b38:	00800793          	li	a5,8
    6b3c:	3007b7f3          	csrrc	a5,mstatus,a5
	return DEVICE_MMIO_GET(dev);
    6b40:	00452703          	lw	a4,4(a0)
	key = (mstatus & MSTATUS_IEN);
    6b44:	0087f793          	andi	a5,a5,8
 * UART_BREAK if an error was detected, 0 otherwise.
 */
static int uart_ns16550_err_check(const struct device *dev)
{
	k_spinlock_key_t key = k_spin_lock(&DEV_DATA(dev)->lock);
	int check = (INBYTE(LSR(dev)) & LSR_EOB_MASK);
    6b48:	00072703          	lw	a4,0(a4)
	return *(volatile uint8_t *)addr;
    6b4c:	01474503          	lbu	a0,20(a4)
    6b50:	0ff57513          	andi	a0,a0,255
	__asm__ volatile ("csrrs %0, mstatus, %1"
    6b54:	3007a7f3          	csrrs	a5,mstatus,a5
    6b58:	01e57513          	andi	a0,a0,30

	k_spin_unlock(&DEV_DATA(dev)->lock, key);

	return check >> 1;
}
    6b5c:	00155513          	srli	a0,a0,0x1
    6b60:	00008067          	ret

00006b64 <mtime>:
	volatile uint32_t *r = (uint32_t *)RISCV_MTIME_BASE;
	uint32_t lo, hi;

	/* Likewise, must guard against rollover when reading */
	do {
		hi = r[1];
    6b64:	800017b7          	lui	a5,0x80001
    6b68:	0247a703          	lw	a4,36(a5) # 80001024 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80001025>
		lo = r[0];
    6b6c:	0207a503          	lw	a0,32(a5)
	} while (r[1] != hi);
    6b70:	0247a583          	lw	a1,36(a5)
    6b74:	fee59ae3          	bne	a1,a4,6b68 <mtime+0x4>

	return (((uint64_t)hi) << 32) | lo;
#endif
}
    6b78:	00008067          	ret

00006b7c <timer_isr>:

static void timer_isr(const void *arg)
{
    6b7c:	fe010113          	addi	sp,sp,-32
    6b80:	01312623          	sw	s3,12(sp)
    6b84:	00112e23          	sw	ra,28(sp)
    6b88:	00812c23          	sw	s0,24(sp)
    6b8c:	00912a23          	sw	s1,20(sp)
    6b90:	01212823          	sw	s2,16(sp)
    6b94:	01412423          	sw	s4,8(sp)
    6b98:	01512223          	sw	s5,4(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    6b9c:	00800993          	li	s3,8
    6ba0:	3009b9f3          	csrrc	s3,mstatus,s3
	ARG_UNUSED(arg);

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint64_t now = mtime();
    6ba4:	fc1ff0ef          	jal	ra,6b64 <mtime>
	key = (mstatus & MSTATUS_IEN);
    6ba8:	0089f993          	andi	s3,s3,8
    6bac:	00050a13          	mv	s4,a0
    6bb0:	00058913          	mv	s2,a1
	uint32_t dticks = (uint32_t)((now - last_count) / CYC_PER_TICK);

	last_count = now;
    6bb4:	0000e437          	lui	s0,0xe
    6bb8:	af040413          	addi	s0,s0,-1296 # daf0 <last_count>
    6bbc:	00a42023          	sw	a0,0(s0)
    6bc0:	00b42223          	sw	a1,4(s0)
	return z_clock_hw_cycles_per_sec;
    6bc4:	0002fab7          	lui	s5,0x2f

	if (!TICKLESS) {
		uint64_t next = last_count + CYC_PER_TICK;
    6bc8:	c98aa503          	lw	a0,-872(s5) # 2ec98 <z_clock_hw_cycles_per_sec>
    6bcc:	00000693          	li	a3,0
    6bd0:	06400613          	li	a2,100
    6bd4:	41f55593          	srai	a1,a0,0x1f
    6bd8:	fb4f90ef          	jal	ra,38c <__udivdi3>
    6bdc:	00042483          	lw	s1,0(s0)
    6be0:	00442783          	lw	a5,4(s0)
    6be4:	009504b3          	add	s1,a0,s1
    6be8:	00a4b433          	sltu	s0,s1,a0
    6bec:	00f40433          	add	s0,s0,a5

		if ((int64_t)(next - now) < MIN_DELAY) {
    6bf0:	41448a33          	sub	s4,s1,s4
    6bf4:	0144b5b3          	sltu	a1,s1,s4
    6bf8:	41240933          	sub	s2,s0,s2
    6bfc:	40b90933          	sub	s2,s2,a1
		uint64_t next = last_count + CYC_PER_TICK;
    6c00:	00048793          	mv	a5,s1
    6c04:	00040693          	mv	a3,s0
		if ((int64_t)(next - now) < MIN_DELAY) {
    6c08:	03204863          	bgtz	s2,6c38 <timer_isr+0xbc>
    6c0c:	00091663          	bnez	s2,6c18 <timer_isr+0x9c>
    6c10:	3e700713          	li	a4,999
    6c14:	03476263          	bltu	a4,s4,6c38 <timer_isr+0xbc>
			next += CYC_PER_TICK;
    6c18:	c98aa503          	lw	a0,-872(s5)
    6c1c:	00000693          	li	a3,0
    6c20:	06400613          	li	a2,100
    6c24:	41f55593          	srai	a1,a0,0x1f
    6c28:	f64f90ef          	jal	ra,38c <__udivdi3>
    6c2c:	00a487b3          	add	a5,s1,a0
    6c30:	0097b4b3          	sltu	s1,a5,s1
    6c34:	008486b3          	add	a3,s1,s0
	r[1] = 0xffffffff;
    6c38:	80001737          	lui	a4,0x80001
    6c3c:	fff00613          	li	a2,-1
    6c40:	02c72623          	sw	a2,44(a4) # 8000102c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000102d>
	r[0] = (uint32_t)time;
    6c44:	02f72423          	sw	a5,40(a4)
	r[1] = (uint32_t)(time >> 32);
    6c48:	02d72623          	sw	a3,44(a4)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    6c4c:	3009a9f3          	csrrs	s3,mstatus,s3
		set_mtimecmp(next);
	}

	k_spin_unlock(&lock, key);
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
}
    6c50:	01812403          	lw	s0,24(sp)
    6c54:	01c12083          	lw	ra,28(sp)
    6c58:	01412483          	lw	s1,20(sp)
    6c5c:	01012903          	lw	s2,16(sp)
    6c60:	00c12983          	lw	s3,12(sp)
    6c64:	00812a03          	lw	s4,8(sp)
    6c68:	00412a83          	lw	s5,4(sp)
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    6c6c:	00100513          	li	a0,1
}
    6c70:	02010113          	addi	sp,sp,32
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    6c74:	5a40106f          	j	8218 <sys_clock_announce>

00006c78 <sys_clock_driver_init>:

int sys_clock_driver_init(const struct device *dev)
{
    6c78:	ff010113          	addi	sp,sp,-16
    6c7c:	00812423          	sw	s0,8(sp)
	ARG_UNUSED(dev);

	IRQ_CONNECT(RISCV_MACHINE_TIMER_IRQ, 0, timer_isr, NULL, 0);
	last_count = mtime();
    6c80:	0000e437          	lui	s0,0xe
{
    6c84:	00112623          	sw	ra,12(sp)
	last_count = mtime();
    6c88:	af040413          	addi	s0,s0,-1296 # daf0 <last_count>
    6c8c:	ed9ff0ef          	jal	ra,6b64 <mtime>
    6c90:	00a42023          	sw	a0,0(s0)
    6c94:	00b42223          	sw	a1,4(s0)
    6c98:	0002f7b7          	lui	a5,0x2f
	set_mtimecmp(last_count + CYC_PER_TICK);
    6c9c:	c987a503          	lw	a0,-872(a5) # 2ec98 <z_clock_hw_cycles_per_sec>
    6ca0:	06400613          	li	a2,100
    6ca4:	00000693          	li	a3,0
    6ca8:	41f55593          	srai	a1,a0,0x1f
    6cac:	ee0f90ef          	jal	ra,38c <__udivdi3>
    6cb0:	00042783          	lw	a5,0(s0)
    6cb4:	00442703          	lw	a4,4(s0)
	r[1] = 0xffffffff;
    6cb8:	fff00693          	li	a3,-1
	set_mtimecmp(last_count + CYC_PER_TICK);
    6cbc:	00f507b3          	add	a5,a0,a5
    6cc0:	00a7b533          	sltu	a0,a5,a0
    6cc4:	00e50533          	add	a0,a0,a4
	r[1] = 0xffffffff;
    6cc8:	80001737          	lui	a4,0x80001
    6ccc:	02d72623          	sw	a3,44(a4) # 8000102c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000102d>
	r[0] = (uint32_t)time;
    6cd0:	02f72423          	sw	a5,40(a4)
	r[1] = (uint32_t)(time >> 32);
    6cd4:	02a72623          	sw	a0,44(a4)
	irq_enable(RISCV_MACHINE_TIMER_IRQ);
    6cd8:	00700513          	li	a0,7
    6cdc:	929ff0ef          	jal	ra,6604 <arch_irq_enable>
	return 0;
}
    6ce0:	00c12083          	lw	ra,12(sp)
    6ce4:	00812403          	lw	s0,8(sp)
    6ce8:	00000513          	li	a0,0
    6cec:	01010113          	addi	sp,sp,16
    6cf0:	00008067          	ret

00006cf4 <sys_clock_set_timeout>:
	}

	set_mtimecmp(cyc + last_count);
	k_spin_unlock(&lock, key);
#endif
}
    6cf4:	00008067          	ret

00006cf8 <sys_clock_elapsed>:
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = ((uint32_t)mtime() - (uint32_t)last_count) / CYC_PER_TICK;

	k_spin_unlock(&lock, key);
	return ret;
}
    6cf8:	00000513          	li	a0,0
    6cfc:	00008067          	ret

00006d00 <sys_clock_cycle_get_32>:

uint32_t sys_clock_cycle_get_32(void)
{
    6d00:	ff010113          	addi	sp,sp,-16
    6d04:	00112623          	sw	ra,12(sp)
	return (uint32_t)mtime();
    6d08:	e5dff0ef          	jal	ra,6b64 <mtime>
}
    6d0c:	00c12083          	lw	ra,12(sp)
    6d10:	01010113          	addi	sp,sp,16
    6d14:	00008067          	ret

00006d18 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    6d18:	00008067          	ret

00006d1c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    6d1c:	00251713          	slli	a4,a0,0x2
    6d20:	0000d7b7          	lui	a5,0xd
    6d24:	00150513          	addi	a0,a0,1
    6d28:	72c78793          	addi	a5,a5,1836 # d72c <levels.0>
    6d2c:	00251513          	slli	a0,a0,0x2
{
    6d30:	fe010113          	addi	sp,sp,-32
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    6d34:	00e78733          	add	a4,a5,a4
    6d38:	00a78533          	add	a0,a5,a0
{
    6d3c:	00812c23          	sw	s0,24(sp)
    6d40:	01212823          	sw	s2,16(sp)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    6d44:	00072403          	lw	s0,0(a4)
    6d48:	00052903          	lw	s2,0(a0)
{
    6d4c:	01312623          	sw	s3,12(sp)
    6d50:	00112e23          	sw	ra,28(sp)
    6d54:	00912a23          	sw	s1,20(sp)
					rc = -rc;
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    6d58:	0ff00993          	li	s3,255
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    6d5c:	03246063          	bltu	s0,s2,6d7c <z_sys_init_run_level+0x60>
			}
			dev->state->initialized = true;
		}
	}
}
    6d60:	01c12083          	lw	ra,28(sp)
    6d64:	01812403          	lw	s0,24(sp)
    6d68:	01412483          	lw	s1,20(sp)
    6d6c:	01012903          	lw	s2,16(sp)
    6d70:	00c12983          	lw	s3,12(sp)
    6d74:	02010113          	addi	sp,sp,32
    6d78:	00008067          	ret
		const struct device *dev = entry->dev;
    6d7c:	00442483          	lw	s1,4(s0)
		int rc = entry->init(dev);
    6d80:	00042783          	lw	a5,0(s0)
    6d84:	00048513          	mv	a0,s1
    6d88:	000780e7          	jalr	a5
		if (dev != NULL) {
    6d8c:	02048863          	beqz	s1,6dbc <z_sys_init_run_level+0xa0>
				dev->state->init_res = rc;
    6d90:	00c4a783          	lw	a5,12(s1)
			if (rc != 0) {
    6d94:	00050e63          	beqz	a0,6db0 <z_sys_init_run_level+0x94>
				if (rc < 0) {
    6d98:	41f55713          	srai	a4,a0,0x1f
    6d9c:	00a74533          	xor	a0,a4,a0
    6da0:	40e50533          	sub	a0,a0,a4
				dev->state->init_res = rc;
    6da4:	00a9d463          	bge	s3,a0,6dac <z_sys_init_run_level+0x90>
    6da8:	0ff00513          	li	a0,255
    6dac:	00a78023          	sb	a0,0(a5)
			dev->state->initialized = true;
    6db0:	0007d703          	lhu	a4,0(a5)
    6db4:	10076713          	ori	a4,a4,256
    6db8:	00e79023          	sh	a4,0(a5)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    6dbc:	00840413          	addi	s0,s0,8
    6dc0:	f9dff06f          	j	6d5c <z_sys_init_run_level+0x40>

00006dc4 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    6dc4:	00050e63          	beqz	a0,6de0 <z_device_ready+0x1c>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    6dc8:	00c52783          	lw	a5,12(a0)
    6dcc:	0007a503          	lw	a0,0(a5)
    6dd0:	1ff57513          	andi	a0,a0,511
    6dd4:	f0050513          	addi	a0,a0,-256
    6dd8:	00153513          	seqz	a0,a0
    6ddc:	00008067          	ret
		return false;
    6de0:	00000513          	li	a0,0
}
    6de4:	00008067          	ret

00006de8 <arch_system_halt>:
	__asm__ volatile ("csrrc %0, mstatus, %1"
    6de8:	00800793          	li	a5,8
    6dec:	3007b7f3          	csrrc	a5,mstatus,a5
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
    6df0:	0000006f          	j	6df0 <arch_system_halt+0x8>

00006df4 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    6df4:	ff010113          	addi	sp,sp,-16
    6df8:	00112623          	sw	ra,12(sp)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    6dfc:	fedff0ef          	jal	ra,6de8 <arch_system_halt>

00006e00 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    6e00:	fe010113          	addi	sp,sp,-32
    6e04:	00812c23          	sw	s0,24(sp)
    6e08:	01212823          	sw	s2,16(sp)
    6e0c:	00112e23          	sw	ra,28(sp)
    6e10:	00912a23          	sw	s1,20(sp)
    6e14:	00050913          	mv	s2,a0
    6e18:	00b12623          	sw	a1,12(sp)
    6e1c:	00800413          	li	s0,8
    6e20:	30043473          	csrrc	s0,mstatus,s0
	return z_impl_z_current_get();
    6e24:	7a5000ef          	jal	ra,7dc8 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    6e28:	00c12583          	lw	a1,12(sp)
    6e2c:	00050493          	mv	s1,a0
    6e30:	00090513          	mv	a0,s2
    6e34:	fc1ff0ef          	jal	ra,6df4 <k_sys_fatal_error_handler>
	key = (mstatus & MSTATUS_IEN);
    6e38:	00847413          	andi	s0,s0,8
	__asm__ volatile ("csrrs %0, mstatus, %1"
    6e3c:	30042473          	csrrs	s0,mstatus,s0
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    6e40:	01812403          	lw	s0,24(sp)
    6e44:	01c12083          	lw	ra,28(sp)
    6e48:	01012903          	lw	s2,16(sp)
	z_impl_k_thread_abort(thread);
    6e4c:	00048513          	mv	a0,s1
    6e50:	01412483          	lw	s1,20(sp)
    6e54:	02010113          	addi	sp,sp,32
    6e58:	0700106f          	j	7ec8 <z_impl_k_thread_abort>

00006e5c <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    6e5c:	fd010113          	addi	sp,sp,-48
    6e60:	02912223          	sw	s1,36(sp)
	k_thread_stack_t *stack = z_idle_stacks[i];

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
    6e64:	0000d637          	lui	a2,0xd
    6e68:	01810493          	addi	s1,sp,24
{
    6e6c:	02812423          	sw	s0,40(sp)
	snprintk(tname, 8, "idle %02d", i);
    6e70:	00050693          	mv	a3,a0
{
    6e74:	00050413          	mv	s0,a0
	snprintk(tname, 8, "idle %02d", i);
    6e78:	74060613          	addi	a2,a2,1856 # d740 <levels.0+0x14>
    6e7c:	00800593          	li	a1,8
    6e80:	00048513          	mv	a0,s1
{
    6e84:	02112623          	sw	ra,44(sp)
	snprintk(tname, 8, "idle %02d", i);
    6e88:	abdfd0ef          	jal	ra,4944 <snprintk>
	struct k_thread *thread = &z_idle_threads[i];
    6e8c:	0a800693          	li	a3,168
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    6e90:	01800613          	li	a2,24
    6e94:	02c40633          	mul	a2,s0,a2
	k_thread_stack_t *stack = z_idle_stacks[i];
    6e98:	00941313          	slli	t1,s0,0x9
	z_setup_new_thread(thread, stack,
    6e9c:	0000e737          	lui	a4,0xe
    6ea0:	0000e5b7          	lui	a1,0xe
    6ea4:	00100793          	li	a5,1
    6ea8:	c8870713          	addi	a4,a4,-888 # dc88 <_kernel>
    6eac:	0b058593          	addi	a1,a1,176 # e0b0 <z_idle_stacks>
    6eb0:	00912223          	sw	s1,4(sp)
    6eb4:	00f12023          	sw	a5,0(sp)
    6eb8:	00f00893          	li	a7,15
	struct k_thread *thread = &z_idle_threads[i];
    6ebc:	02d40433          	mul	s0,s0,a3
    6ec0:	0000e6b7          	lui	a3,0xe
    6ec4:	b3868693          	addi	a3,a3,-1224 # db38 <z_idle_threads>
	z_setup_new_thread(thread, stack,
    6ec8:	00000793          	li	a5,0
    6ecc:	00c70733          	add	a4,a4,a2
    6ed0:	00000813          	li	a6,0
    6ed4:	20000613          	li	a2,512
    6ed8:	006585b3          	add	a1,a1,t1
	struct k_thread *thread = &z_idle_threads[i];
    6edc:	00868433          	add	s0,a3,s0
	z_setup_new_thread(thread, stack,
    6ee0:	000076b7          	lui	a3,0x7
    6ee4:	00040513          	mv	a0,s0
    6ee8:	23068693          	addi	a3,a3,560 # 7230 <idle>
    6eec:	174000ef          	jal	ra,7060 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6ef0:	00d44783          	lbu	a5,13(s0)
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    6ef4:	02c12083          	lw	ra,44(sp)
    6ef8:	02412483          	lw	s1,36(sp)
    6efc:	ffb7f793          	andi	a5,a5,-5
    6f00:	00f406a3          	sb	a5,13(s0)
    6f04:	02812403          	lw	s0,40(sp)
    6f08:	03010113          	addi	sp,sp,48
    6f0c:	00008067          	ret

00006f10 <bg_thread_main>:
{
    6f10:	ff010113          	addi	sp,sp,-16
	z_sys_post_kernel = true;
    6f14:	0000e7b7          	lui	a5,0xe
    6f18:	00100713          	li	a4,1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    6f1c:	00200513          	li	a0,2
{
    6f20:	00112623          	sw	ra,12(sp)
	z_sys_post_kernel = true;
    6f24:	b2e78a23          	sb	a4,-1228(a5) # db34 <z_sys_post_kernel>
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    6f28:	df5ff0ef          	jal	ra,6d1c <z_sys_init_run_level>
	boot_banner();
    6f2c:	5cc010ef          	jal	ra,84f8 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    6f30:	00300513          	li	a0,3
    6f34:	de9ff0ef          	jal	ra,6d1c <z_sys_init_run_level>
	z_init_static_threads();
    6f38:	1e0000ef          	jal	ra,7118 <z_init_static_threads>
	main();
    6f3c:	9c4fd0ef          	jal	ra,4100 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    6f40:	0000e7b7          	lui	a5,0xe
    6f44:	be078793          	addi	a5,a5,-1056 # dbe0 <z_main_thread>
    6f48:	00c7c703          	lbu	a4,12(a5)
    6f4c:	ffe77713          	andi	a4,a4,-2
    6f50:	00e78623          	sb	a4,12(a5)
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    6f54:	00c12083          	lw	ra,12(sp)
    6f58:	01010113          	addi	sp,sp,16
    6f5c:	00008067          	ret

00006f60 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    6f60:	0000e537          	lui	a0,0xe

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    6f64:	0000e7b7          	lui	a5,0xe
    6f68:	af050613          	addi	a2,a0,-1296 # daf0 <last_count>
    6f6c:	cac78793          	addi	a5,a5,-852 # dcac <sched_spinlock>
    6f70:	40c78633          	sub	a2,a5,a2
    6f74:	00000593          	li	a1,0
    6f78:	af050513          	addi	a0,a0,-1296
    6f7c:	b48fc06f          	j	32c4 <memset>

00006f80 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    6f80:	f3010113          	addi	sp,sp,-208
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
    6f84:	fff00793          	li	a5,-1
    6f88:	0c812423          	sw	s0,200(sp)
    6f8c:	02f10623          	sb	a5,44(sp)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    6f90:	0000e437          	lui	s0,0xe
	dummy_thread->base.user_options = K_ESSENTIAL;
    6f94:	10100793          	li	a5,257
	_current_cpu->current = dummy_thread;
    6f98:	c8840413          	addi	s0,s0,-888 # dc88 <_kernel>
	dummy_thread->base.user_options = K_ESSENTIAL;
    6f9c:	02f11223          	sh	a5,36(sp)
	_current_cpu->current = dummy_thread;
    6fa0:	01810793          	addi	a5,sp,24
    6fa4:	0c112623          	sw	ra,204(sp)
    6fa8:	00f42423          	sw	a5,8(s0)
    6fac:	0c912223          	sw	s1,196(sp)
    6fb0:	0d212023          	sw	s2,192(sp)
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    6fb4:	d65ff0ef          	jal	ra,6d18 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    6fb8:	00000513          	li	a0,0
    6fbc:	d61ff0ef          	jal	ra,6d1c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    6fc0:	00100513          	li	a0,1
    6fc4:	d59ff0ef          	jal	ra,6d1c <z_sys_init_run_level>
	z_sched_init();
    6fc8:	5dd000ef          	jal	ra,7da4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    6fcc:	0000d7b7          	lui	a5,0xd
    6fd0:	74c78793          	addi	a5,a5,1868 # d74c <levels.0+0x20>
	_kernel.ready_q.cache = &z_main_thread;
    6fd4:	0000e4b7          	lui	s1,0xe
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    6fd8:	00f12223          	sw	a5,4(sp)
    6fdc:	000076b7          	lui	a3,0x7
    6fe0:	00100793          	li	a5,1
    6fe4:	0000e5b7          	lui	a1,0xe
	_kernel.ready_q.cache = &z_main_thread;
    6fe8:	be048913          	addi	s2,s1,-1056 # dbe0 <z_main_thread>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    6fec:	00000893          	li	a7,0
    6ff0:	00000813          	li	a6,0
    6ff4:	00000713          	li	a4,0
    6ff8:	f1068693          	addi	a3,a3,-240 # 6f10 <bg_thread_main>
    6ffc:	40000613          	li	a2,1024
    7000:	cb058593          	addi	a1,a1,-848 # dcb0 <z_main_stack>
    7004:	00f12023          	sw	a5,0(sp)
    7008:	be048513          	addi	a0,s1,-1056
    700c:	00000793          	li	a5,0
	_kernel.ready_q.cache = &z_main_thread;
    7010:	01242c23          	sw	s2,24(s0)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    7014:	04c000ef          	jal	ra,7060 <z_setup_new_thread>
    7018:	00d94783          	lbu	a5,13(s2)
	z_ready_thread(&z_main_thread);
    701c:	be048513          	addi	a0,s1,-1056
    7020:	ffb7f793          	andi	a5,a5,-5
    7024:	00f906a3          	sb	a5,13(s2)
    7028:	1f5000ef          	jal	ra,7a1c <z_ready_thread>
		init_idle_thread(i);
    702c:	00000513          	li	a0,0
    7030:	e2dff0ef          	jal	ra,6e5c <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    7034:	0000e7b7          	lui	a5,0xe
    7038:	b3878793          	addi	a5,a5,-1224 # db38 <z_idle_threads>
    703c:	00f42623          	sw	a5,12(s0)
		_kernel.cpus[i].irq_stack =
    7040:	0000f7b7          	lui	a5,0xf
    7044:	ab078793          	addi	a5,a5,-1360 # eab0 <kheap__system_heap>
		_kernel.cpus[i].id = i;
    7048:	00040a23          	sb	zero,20(s0)
		_kernel.cpus[i].irq_stack =
    704c:	00f42223          	sw	a5,4(s0)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    7050:	00800513          	li	a0,8
    7054:	30053573          	csrrc	a0,mstatus,a0
	ret = arch_swap(key);
    7058:	00857513          	andi	a0,a0,8
    705c:	a70f90ef          	jal	ra,2cc <arch_swap>

00007060 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    7060:	ff010113          	addi	sp,sp,-16
    7064:	00812423          	sw	s0,8(sp)
    7068:	00912223          	sw	s1,4(sp)
    706c:	01212023          	sw	s2,0(sp)
    7070:	00112623          	sw	ra,12(sp)
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    7074:	07050313          	addi	t1,a0,112
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    7078:	06652823          	sw	t1,112(a0)
	list->tail = (sys_dnode_t *)list;
    707c:	06652a23          	sw	t1,116(a0)
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    7080:	01012303          	lw	t1,16(sp)
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    7084:	00f60613          	addi	a2,a2,15
    7088:	ff067613          	andi	a2,a2,-16
	thread_base->user_options = (uint8_t)options;
    708c:	00650623          	sb	t1,12(a0)
	stack_ptr = (char *)stack + stack_obj_size;
    7090:	00c584b3          	add	s1,a1,a2
	thread_base->thread_state = (uint8_t)initial_state;
    7094:	00400313          	li	t1,4
{
    7098:	01412903          	lw	s2,20(sp)
    709c:	00050413          	mv	s0,a0
	thread_base->pended_on = NULL;
    70a0:	00052423          	sw	zero,8(a0)
	thread_base->thread_state = (uint8_t)initial_state;
    70a4:	006506a3          	sb	t1,13(a0)

	thread_base->prio = priority;
    70a8:	01150723          	sb	a7,14(a0)

	thread_base->sched_locked = 0U;
    70ac:	000507a3          	sb	zero,15(a0)
 * @return N/A
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
    70b0:	02052023          	sw	zero,32(a0)
	node->prev = NULL;
    70b4:	02052223          	sw	zero,36(a0)
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    70b8:	00048613          	mv	a2,s1
    70bc:	96cff0ef          	jal	ra,6228 <arch_new_thread>
	new_thread->init_data = NULL;
    70c0:	06042623          	sw	zero,108(s0)
	if (name != NULL) {
    70c4:	04090663          	beqz	s2,7110 <z_setup_new_thread+0xb0>
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    70c8:	01f00613          	li	a2,31
    70cc:	00090593          	mv	a1,s2
    70d0:	07840513          	addi	a0,s0,120
    70d4:	041020ef          	jal	ra,9914 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    70d8:	08040ba3          	sb	zero,151(s0)
	new_thread->base.cpu_mask = -1;
    70dc:	fff00793          	li	a5,-1
    70e0:	00f40a23          	sb	a5,20(s0)
	new_thread->resource_pool = _current->resource_pool;
    70e4:	0000e7b7          	lui	a5,0xe
    70e8:	c907a783          	lw	a5,-880(a5) # dc90 <_kernel+0x8>
}
    70ec:	00c12083          	lw	ra,12(sp)
    70f0:	00012903          	lw	s2,0(sp)
	new_thread->resource_pool = _current->resource_pool;
    70f4:	09c7a783          	lw	a5,156(a5)
}
    70f8:	00048513          	mv	a0,s1
    70fc:	00412483          	lw	s1,4(sp)
	new_thread->resource_pool = _current->resource_pool;
    7100:	08f42e23          	sw	a5,156(s0)
}
    7104:	00812403          	lw	s0,8(sp)
    7108:	01010113          	addi	sp,sp,16
    710c:	00008067          	ret
		new_thread->name[0] = '\0';
    7110:	06040c23          	sb	zero,120(s0)
    7114:	fc9ff06f          	j	70dc <z_setup_new_thread+0x7c>

00007118 <z_init_static_threads>:
{
    7118:	fd010113          	addi	sp,sp,-48
	_FOREACH_STATIC_THREAD(thread_data) {
    711c:	0002f7b7          	lui	a5,0x2f
{
    7120:	03212023          	sw	s2,32(sp)
	_FOREACH_STATIC_THREAD(thread_data) {
    7124:	0002f937          	lui	s2,0x2f
{
    7128:	02812423          	sw	s0,40(sp)
    712c:	02912223          	sw	s1,36(sp)
    7130:	02112623          	sw	ra,44(sp)
    7134:	01312e23          	sw	s3,28(sp)
    7138:	01412c23          	sw	s4,24(sp)
    713c:	01512a23          	sw	s5,20(sp)
	_FOREACH_STATIC_THREAD(thread_data) {
    7140:	eb078413          	addi	s0,a5,-336 # 2eeb0 <_system_heap>
    7144:	eb078493          	addi	s1,a5,-336
    7148:	eb090913          	addi	s2,s2,-336 # 2eeb0 <_system_heap>
    714c:	05246063          	bltu	s0,s2,718c <z_init_static_threads+0x74>
	k_sched_lock();
    7150:	331000ef          	jal	ra,7c80 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    7154:	00048413          	mv	s0,s1
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    7158:	fff00993          	li	s3,-1
		t += off;
    715c:	00900a13          	li	s4,9

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    7160:	00007ab7          	lui	s5,0x7
	_FOREACH_STATIC_THREAD(thread_data) {
    7164:	07246663          	bltu	s0,s2,71d0 <z_init_static_threads+0xb8>
}
    7168:	02812403          	lw	s0,40(sp)
    716c:	02c12083          	lw	ra,44(sp)
    7170:	02412483          	lw	s1,36(sp)
    7174:	02012903          	lw	s2,32(sp)
    7178:	01c12983          	lw	s3,28(sp)
    717c:	01812a03          	lw	s4,24(sp)
    7180:	01412a83          	lw	s5,20(sp)
    7184:	03010113          	addi	sp,sp,48
	k_sched_unlock();
    7188:	3210006f          	j	7ca8 <k_sched_unlock>
		z_setup_new_thread(
    718c:	02c42783          	lw	a5,44(s0)
    7190:	00f12223          	sw	a5,4(sp)
    7194:	02042783          	lw	a5,32(s0)
    7198:	00f12023          	sw	a5,0(sp)
    719c:	01442783          	lw	a5,20(s0)
    71a0:	01c42883          	lw	a7,28(s0)
    71a4:	01842803          	lw	a6,24(s0)
    71a8:	01042703          	lw	a4,16(s0)
    71ac:	00c42683          	lw	a3,12(s0)
    71b0:	00842603          	lw	a2,8(s0)
    71b4:	00442583          	lw	a1,4(s0)
    71b8:	00042503          	lw	a0,0(s0)
    71bc:	ea5ff0ef          	jal	ra,7060 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    71c0:	00042783          	lw	a5,0(s0)
    71c4:	0687a623          	sw	s0,108(a5)
	_FOREACH_STATIC_THREAD(thread_data) {
    71c8:	03040413          	addi	s0,s0,48
    71cc:	f81ff06f          	j	714c <z_init_static_threads+0x34>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    71d0:	02442783          	lw	a5,36(s0)
    71d4:	03378863          	beq	a5,s3,7204 <z_init_static_threads+0xec>
			schedule_new_thread(thread_data->init_thread,
    71d8:	00042483          	lw	s1,0(s0)
					    K_MSEC(thread_data->init_delay));
    71dc:	0007d463          	bgez	a5,71e4 <z_init_static_threads+0xcc>
    71e0:	00000793          	li	a5,0
    71e4:	00978513          	addi	a0,a5,9
    71e8:	41f7d593          	srai	a1,a5,0x1f
    71ec:	00f537b3          	sltu	a5,a0,a5
    71f0:	00b785b3          	add	a1,a5,a1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    71f4:	01451c63          	bne	a0,s4,720c <z_init_static_threads+0xf4>
    71f8:	00059a63          	bnez	a1,720c <z_init_static_threads+0xf4>
	z_sched_start(thread);
    71fc:	00048513          	mv	a0,s1
    7200:	201000ef          	jal	ra,7c00 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    7204:	03040413          	addi	s0,s0,48
    7208:	f5dff06f          	j	7164 <z_init_static_threads+0x4c>
			return t / ((uint64_t)from_hz / to_hz);
    720c:	00a00613          	li	a2,10
    7210:	00000693          	li	a3,0
    7214:	978f90ef          	jal	ra,38c <__udivdi3>
    7218:	00050613          	mv	a2,a0
    721c:	00058693          	mv	a3,a1
    7220:	02048513          	addi	a0,s1,32
    7224:	74ca8593          	addi	a1,s5,1868 # 774c <z_thread_timeout>
    7228:	5a5000ef          	jal	ra,7fcc <z_add_timeout>
    722c:	fd9ff06f          	j	7204 <z_init_static_threads+0xec>

00007230 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    7230:	ff010113          	addi	sp,sp,-16
    7234:	00812423          	sw	s0,8(sp)
    7238:	00112623          	sw	ra,12(sp)
    723c:	00800413          	li	s0,8
    7240:	300437f3          	csrrc	a5,mstatus,s0
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    7244:	f55fe0ef          	jal	ra,6198 <arch_cpu_idle>
    7248:	ff9ff06f          	j	7240 <idle+0x10>

0000724c <adjust_owner_prio.isra.0>:
	return new_prio;
}

static bool adjust_owner_prio(struct k_mutex *mutex, int32_t new_prio)
{
	if (mutex->owner->base.prio != new_prio) {
    724c:	00e50783          	lb	a5,14(a0)
    7250:	00b78463          	beq	a5,a1,7258 <adjust_owner_prio.isra.0+0xc>
		LOG_DBG("%p (ready (y/n): %c) prio changed to %d (was %d)",
			mutex->owner, z_is_thread_ready(mutex->owner) ?
			'y' : 'n',
			new_prio, mutex->owner->base.prio);

		return z_set_prio(mutex->owner, new_prio);
    7254:	07d0006f          	j	7ad0 <z_set_prio>
	}
	return false;
}
    7258:	00000513          	li	a0,0
    725c:	00008067          	ret

00007260 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
    7260:	00052423          	sw	zero,8(a0)
	mutex->lock_count = 0U;
    7264:	00052623          	sw	zero,12(a0)
	list->head = (sys_dnode_t *)list;
    7268:	00a52023          	sw	a0,0(a0)
	list->tail = (sys_dnode_t *)list;
    726c:	00a52223          	sw	a0,4(a0)
}
    7270:	00000513          	li	a0,0
    7274:	00008067          	ret

00007278 <z_impl_k_mutex_lock>:

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    7278:	fd010113          	addi	sp,sp,-48
    727c:	02812423          	sw	s0,40(sp)
    7280:	02912223          	sw	s1,36(sp)
    7284:	02112623          	sw	ra,44(sp)
    7288:	03212023          	sw	s2,32(sp)
    728c:	01312e23          	sw	s3,28(sp)
    7290:	00050413          	mv	s0,a0
    7294:	00060713          	mv	a4,a2
    7298:	00800493          	li	s1,8
    729c:	3004b4f3          	csrrc	s1,mstatus,s1

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    72a0:	00c52603          	lw	a2,12(a0)
    72a4:	0000e7b7          	lui	a5,0xe
	key = (mstatus & MSTATUS_IEN);
    72a8:	0084f493          	andi	s1,s1,8
    72ac:	c8878793          	addi	a5,a5,-888 # dc88 <_kernel>
    72b0:	02060463          	beqz	a2,72d8 <z_impl_k_mutex_lock+0x60>
    72b4:	00058693          	mv	a3,a1
    72b8:	00852503          	lw	a0,8(a0)
    72bc:	0087a583          	lw	a1,8(a5)
    72c0:	04b50c63          	beq	a0,a1,7318 <z_impl_k_mutex_lock+0xa0>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    72c4:	00e6e7b3          	or	a5,a3,a4
    72c8:	04079c63          	bnez	a5,7320 <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    72cc:	3004a4f3          	csrrs	s1,mstatus,s1
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    72d0:	ff000513          	li	a0,-16
    72d4:	0280006f          	j	72fc <z_impl_k_mutex_lock+0x84>
					_current->base.prio :
    72d8:	0087a703          	lw	a4,8(a5)
    72dc:	00e70703          	lb	a4,14(a4)
		mutex->owner = _current;
    72e0:	0087a783          	lw	a5,8(a5)
		mutex->lock_count++;
    72e4:	00160613          	addi	a2,a2,1
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    72e8:	00e42823          	sw	a4,16(s0)
		mutex->lock_count++;
    72ec:	00c42623          	sw	a2,12(s0)
		mutex->owner = _current;
    72f0:	00f42423          	sw	a5,8(s0)
    72f4:	3004a4f3          	csrrs	s1,mstatus,s1
		return 0;
    72f8:	00000513          	li	a0,0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    72fc:	02c12083          	lw	ra,44(sp)
    7300:	02812403          	lw	s0,40(sp)
    7304:	02412483          	lw	s1,36(sp)
    7308:	02012903          	lw	s2,32(sp)
    730c:	01c12983          	lw	s3,28(sp)
    7310:	03010113          	addi	sp,sp,48
    7314:	00008067          	ret
					_current->base.prio :
    7318:	01042703          	lw	a4,16(s0)
    731c:	fc5ff06f          	j	72e0 <z_impl_k_mutex_lock+0x68>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    7320:	00e50783          	lb	a5,14(a0)
    7324:	00e58583          	lb	a1,14(a1)
    7328:	00b7d463          	bge	a5,a1,7330 <z_impl_k_mutex_lock+0xb8>
    732c:	00078593          	mv	a1,a5
    7330:	f8100613          	li	a2,-127
    7334:	00c5d463          	bge	a1,a2,733c <z_impl_k_mutex_lock+0xc4>
    7338:	f8100593          	li	a1,-127
	bool resched = false;
    733c:	00000993          	li	s3,0
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    7340:	00f5de63          	bge	a1,a5,735c <z_impl_k_mutex_lock+0xe4>
    7344:	00e12623          	sw	a4,12(sp)
    7348:	00d12423          	sw	a3,8(sp)
		resched = adjust_owner_prio(mutex, new_prio);
    734c:	f01ff0ef          	jal	ra,724c <adjust_owner_prio.isra.0>
    7350:	00c12703          	lw	a4,12(sp)
    7354:	00812683          	lw	a3,8(sp)
    7358:	00050993          	mv	s3,a0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    735c:	0000e937          	lui	s2,0xe
    7360:	00040613          	mv	a2,s0
    7364:	00048593          	mv	a1,s1
    7368:	cac90513          	addi	a0,s2,-852 # dcac <sched_spinlock>
    736c:	6e0000ef          	jal	ra,7a4c <z_pend_curr>
	if (got_mutex == 0) {
    7370:	f80506e3          	beqz	a0,72fc <z_impl_k_mutex_lock+0x84>
	__asm__ volatile ("csrrc %0, mstatus, %1"
    7374:	00800493          	li	s1,8
    7378:	3004b4f3          	csrrc	s1,mstatus,s1
	if (likely(mutex->owner != NULL)) {
    737c:	00842503          	lw	a0,8(s0)
	key = (mstatus & MSTATUS_IEN);
    7380:	0084f493          	andi	s1,s1,8
    7384:	02050a63          	beqz	a0,73b8 <z_impl_k_mutex_lock+0x140>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    7388:	00042783          	lw	a5,0(s0)
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    738c:	01042583          	lw	a1,16(s0)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7390:	02f40063          	beq	s0,a5,73b0 <z_impl_k_mutex_lock+0x138>
    7394:	00078e63          	beqz	a5,73b0 <z_impl_k_mutex_lock+0x138>
    7398:	00e78783          	lb	a5,14(a5)
    739c:	00b7d463          	bge	a5,a1,73a4 <z_impl_k_mutex_lock+0x12c>
    73a0:	00078593          	mv	a1,a5
    73a4:	f8100793          	li	a5,-127
    73a8:	00f5d463          	bge	a1,a5,73b0 <z_impl_k_mutex_lock+0x138>
    73ac:	f8100593          	li	a1,-127
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    73b0:	e9dff0ef          	jal	ra,724c <adjust_owner_prio.isra.0>
    73b4:	00051463          	bnez	a0,73bc <z_impl_k_mutex_lock+0x144>
	if (resched) {
    73b8:	00098c63          	beqz	s3,73d0 <z_impl_k_mutex_lock+0x158>
		z_reschedule(&lock, key);
    73bc:	00048593          	mv	a1,s1
    73c0:	cac90513          	addi	a0,s2,-852
    73c4:	009000ef          	jal	ra,7bcc <z_reschedule>
	return -EAGAIN;
    73c8:	ff500513          	li	a0,-11
    73cc:	f31ff06f          	j	72fc <z_impl_k_mutex_lock+0x84>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    73d0:	3004a4f3          	csrrs	s1,mstatus,s1
    73d4:	ff5ff06f          	j	73c8 <z_impl_k_mutex_lock+0x150>

000073d8 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    73d8:	00852783          	lw	a5,8(a0)
    73dc:	0a078e63          	beqz	a5,7498 <z_impl_k_mutex_unlock+0xc0>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    73e0:	0000e737          	lui	a4,0xe
    73e4:	c9072703          	lw	a4,-880(a4) # dc90 <_kernel+0x8>
{
    73e8:	ff010113          	addi	sp,sp,-16
    73ec:	00812423          	sw	s0,8(sp)
    73f0:	00112623          	sw	ra,12(sp)
    73f4:	00912223          	sw	s1,4(sp)
    73f8:	00050413          	mv	s0,a0
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, -EPERM);

		return -EPERM;
    73fc:	fff00513          	li	a0,-1
	CHECKIF(mutex->owner != _current) {
    7400:	02e79663          	bne	a5,a4,742c <z_impl_k_mutex_unlock+0x54>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    7404:	00f7c703          	lbu	a4,15(a5)
    7408:	fff70713          	addi	a4,a4,-1
    740c:	00e787a3          	sb	a4,15(a5)

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    7410:	00c42783          	lw	a5,12(s0)
    7414:	00100713          	li	a4,1
    7418:	02f77463          	bgeu	a4,a5,7440 <z_impl_k_mutex_unlock+0x68>
		mutex->lock_count--;
    741c:	fff78793          	addi	a5,a5,-1
    7420:	00f42623          	sw	a5,12(s0)


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    7424:	085000ef          	jal	ra,7ca8 <k_sched_unlock>

	return 0;
    7428:	00000513          	li	a0,0
}
    742c:	00c12083          	lw	ra,12(sp)
    7430:	00812403          	lw	s0,8(sp)
    7434:	00412483          	lw	s1,4(sp)
    7438:	01010113          	addi	sp,sp,16
    743c:	00008067          	ret
	__asm__ volatile ("csrrc %0, mstatus, %1"
    7440:	00800493          	li	s1,8
    7444:	3004b4f3          	csrrc	s1,mstatus,s1
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    7448:	01042583          	lw	a1,16(s0)
    744c:	00842503          	lw	a0,8(s0)
	key = (mstatus & MSTATUS_IEN);
    7450:	0084f493          	andi	s1,s1,8
    7454:	df9ff0ef          	jal	ra,724c <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    7458:	00040513          	mv	a0,s0
    745c:	0a9000ef          	jal	ra,7d04 <z_unpend_first_thread>
	mutex->owner = new_owner;
    7460:	00a42423          	sw	a0,8(s0)
	if (new_owner != NULL) {
    7464:	02050463          	beqz	a0,748c <z_impl_k_mutex_unlock+0xb4>
		mutex->owner_orig_prio = new_owner->base.prio;
    7468:	00e50703          	lb	a4,14(a0)
    746c:	00e42823          	sw	a4,16(s0)
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    7470:	0a052023          	sw	zero,160(a0)
		z_ready_thread(new_owner);
    7474:	5a8000ef          	jal	ra,7a1c <z_ready_thread>
		z_reschedule(&lock, key);
    7478:	0000e537          	lui	a0,0xe
    747c:	00048593          	mv	a1,s1
    7480:	cac50513          	addi	a0,a0,-852 # dcac <sched_spinlock>
    7484:	748000ef          	jal	ra,7bcc <z_reschedule>
    7488:	f9dff06f          	j	7424 <z_impl_k_mutex_unlock+0x4c>
		mutex->lock_count = 0U;
    748c:	00042623          	sw	zero,12(s0)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    7490:	3004a4f3          	csrrs	s1,mstatus,s1
    7494:	f91ff06f          	j	7424 <z_impl_k_mutex_unlock+0x4c>
		return -EINVAL;
    7498:	fea00513          	li	a0,-22
}
    749c:	00008067          	ret

000074a0 <sys_dlist_remove>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    74a0:	00452703          	lw	a4,4(a0)
	sys_dnode_t *const next = node->next;
    74a4:	00052783          	lw	a5,0(a0)

	prev->next = next;
    74a8:	00f72023          	sw	a5,0(a4)
	next->prev = prev;
    74ac:	00e7a223          	sw	a4,4(a5)
	node->next = NULL;
    74b0:	00052023          	sw	zero,0(a0)
	node->prev = NULL;
    74b4:	00052223          	sw	zero,4(a0)
	sys_dnode_init(node);
}
    74b8:	00008067          	ret

000074bc <unpend_thread_no_timeout>:
		pend_locked(thread, wait_q, timeout);
	}
}

static inline void unpend_thread_no_timeout(struct k_thread *thread)
{
    74bc:	ff010113          	addi	sp,sp,-16
    74c0:	00812423          	sw	s0,8(sp)
    74c4:	00112623          	sw	ra,12(sp)
    74c8:	00050413          	mv	s0,a0

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    74cc:	fd5ff0ef          	jal	ra,74a0 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    74d0:	00d44783          	lbu	a5,13(s0)
}
    74d4:	00c12083          	lw	ra,12(sp)
	thread->base.pended_on = NULL;
    74d8:	00042423          	sw	zero,8(s0)
    74dc:	ffd7f793          	andi	a5,a5,-3
    74e0:	00f406a3          	sb	a5,13(s0)
}
    74e4:	00812403          	lw	s0,8(sp)
    74e8:	01010113          	addi	sp,sp,16
    74ec:	00008067          	ret

000074f0 <z_reset_time_slice>:
{
    74f0:	ff010113          	addi	sp,sp,-16
    74f4:	00812423          	sw	s0,8(sp)
	if (slice_time != 0) {
    74f8:	0000e437          	lui	s0,0xe
    74fc:	b2040413          	addi	s0,s0,-1248 # db20 <slice_time>
    7500:	00042783          	lw	a5,0(s0)
{
    7504:	00112623          	sw	ra,12(sp)
	if (slice_time != 0) {
    7508:	02078863          	beqz	a5,7538 <z_reset_time_slice+0x48>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    750c:	fecff0ef          	jal	ra,6cf8 <sys_clock_elapsed>
    7510:	00050793          	mv	a5,a0
    7514:	00042503          	lw	a0,0(s0)
}
    7518:	00812403          	lw	s0,8(sp)
    751c:	00c12083          	lw	ra,12(sp)
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    7520:	00f507b3          	add	a5,a0,a5
    7524:	0000e737          	lui	a4,0xe
    7528:	c8f72c23          	sw	a5,-872(a4) # dc98 <_kernel+0x10>
		z_set_timeout_expiry(slice_time, false);
    752c:	00000593          	li	a1,0
}
    7530:	01010113          	addi	sp,sp,16
		z_set_timeout_expiry(slice_time, false);
    7534:	48d0006f          	j	81c0 <z_set_timeout_expiry>
}
    7538:	00c12083          	lw	ra,12(sp)
    753c:	00812403          	lw	s0,8(sp)
    7540:	01010113          	addi	sp,sp,16
    7544:	00008067          	ret

00007548 <update_cache>:
{
    7548:	ff010113          	addi	sp,sp,-16
    754c:	00912223          	sw	s1,4(sp)
	return list->head == list;
    7550:	0000e4b7          	lui	s1,0xe
    7554:	c8848793          	addi	a5,s1,-888 # dc88 <_kernel>
    7558:	00812423          	sw	s0,8(sp)
    755c:	01c7a403          	lw	s0,28(a5)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7560:	0000e7b7          	lui	a5,0xe
    7564:	00112623          	sw	ra,12(sp)
    7568:	ca478793          	addi	a5,a5,-860 # dca4 <_kernel+0x1c>
    756c:	c8848493          	addi	s1,s1,-888
    7570:	02f40863          	beq	s0,a5,75a0 <update_cache+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, thread, base.qnode_dlist) {
    7574:	02040663          	beqz	s0,75a0 <update_cache+0x58>
		if ((thread->base.cpu_mask & BIT(_current_cpu->id)) != 0) {
    7578:	0144c703          	lbu	a4,20(s1)
	return (node == list->tail) ? NULL : node->next;
    757c:	0204a683          	lw	a3,32(s1)
    7580:	00100793          	li	a5,1
    7584:	00e797b3          	sll	a5,a5,a4
    7588:	01444703          	lbu	a4,20(s0)
    758c:	00f77733          	and	a4,a4,a5
    7590:	00071a63          	bnez	a4,75a4 <update_cache+0x5c>
    7594:	00d40663          	beq	s0,a3,75a0 <update_cache+0x58>
    7598:	00042403          	lw	s0,0(s0)
	SYS_DLIST_FOR_EACH_CONTAINER(pq, thread, base.qnode_dlist) {
    759c:	fe0416e3          	bnez	s0,7588 <update_cache+0x40>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    75a0:	00c4a403          	lw	s0,12(s1)
	if (z_is_thread_prevented_from_running(_current)) {
    75a4:	0084a783          	lw	a5,8(s1)
	if (preempt_ok != 0) {
    75a8:	02051a63          	bnez	a0,75dc <update_cache+0x94>
	if (z_is_thread_prevented_from_running(_current)) {
    75ac:	00d7c703          	lbu	a4,13(a5)
    75b0:	01f77713          	andi	a4,a4,31
    75b4:	02071463          	bnez	a4,75dc <update_cache+0x94>
	if (is_preempt(_current) || is_metairq(thread)) {
    75b8:	00e7d683          	lhu	a3,14(a5)
    75bc:	07f00713          	li	a4,127
    75c0:	00d77e63          	bgeu	a4,a3,75dc <update_cache+0x94>
		_kernel.ready_q.cache = _current;
    75c4:	00f4ac23          	sw	a5,24(s1)
}
    75c8:	00c12083          	lw	ra,12(sp)
    75cc:	00812403          	lw	s0,8(sp)
    75d0:	00412483          	lw	s1,4(sp)
    75d4:	01010113          	addi	sp,sp,16
    75d8:	00008067          	ret
		if (thread != _current) {
    75dc:	00878463          	beq	a5,s0,75e4 <update_cache+0x9c>
			z_reset_time_slice();
    75e0:	f11ff0ef          	jal	ra,74f0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    75e4:	0084ac23          	sw	s0,24(s1)
}
    75e8:	fe1ff06f          	j	75c8 <update_cache+0x80>

000075ec <move_thread_to_end_of_prio_q>:
{
    75ec:	ff010113          	addi	sp,sp,-16
    75f0:	00812423          	sw	s0,8(sp)
    75f4:	00112623          	sw	ra,12(sp)
	return (thread->base.thread_state & state) != 0U;
    75f8:	00d54783          	lbu	a5,13(a0)
    75fc:	00050413          	mv	s0,a0
	if (z_is_thread_queued(thread)) {
    7600:	01879713          	slli	a4,a5,0x18
    7604:	41875713          	srai	a4,a4,0x18
    7608:	00075863          	bgez	a4,7618 <move_thread_to_end_of_prio_q+0x2c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    760c:	07f7f793          	andi	a5,a5,127
    7610:	00f506a3          	sb	a5,13(a0)
	sys_dlist_remove(&thread->base.qnode_dlist);
    7614:	e8dff0ef          	jal	ra,74a0 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    7618:	00d44783          	lbu	a5,13(s0)
	return list->head == list;
    761c:	0000e737          	lui	a4,0xe
    7620:	c8870693          	addi	a3,a4,-888 # dc88 <_kernel>
    7624:	f807e793          	ori	a5,a5,-128
    7628:	00f406a3          	sb	a5,13(s0)
    762c:	01c6a783          	lw	a5,28(a3)
	return (node == list->tail) ? NULL : node->next;
    7630:	0206a583          	lw	a1,32(a3)
    7634:	0000e6b7          	lui	a3,0xe
    7638:	ca468693          	addi	a3,a3,-860 # dca4 <_kernel+0x1c>
    763c:	c8870713          	addi	a4,a4,-888
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7640:	04d78c63          	beq	a5,a3,7698 <move_thread_to_end_of_prio_q+0xac>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7644:	04078a63          	beqz	a5,7698 <move_thread_to_end_of_prio_q+0xac>
	int32_t b1 = thread_1->base.prio;
    7648:	00e40503          	lb	a0,14(s0)
	int32_t b2 = thread_2->base.prio;
    764c:	00e78603          	lb	a2,14(a5)
	if (b1 != b2) {
    7650:	02c50e63          	beq	a0,a2,768c <move_thread_to_end_of_prio_q+0xa0>
		return b2 - b1;
    7654:	40a60633          	sub	a2,a2,a0
		if (z_sched_prio_cmp(thread, t) > 0) {
    7658:	02c05a63          	blez	a2,768c <move_thread_to_end_of_prio_q+0xa0>
	sys_dnode_t *const prev = successor->prev;
    765c:	0047a683          	lw	a3,4(a5)
	node->next = successor;
    7660:	00f42023          	sw	a5,0(s0)
	node->prev = prev;
    7664:	00d42223          	sw	a3,4(s0)
	prev->next = node;
    7668:	0086a023          	sw	s0,0(a3)
	successor->prev = node;
    766c:	0087a223          	sw	s0,4(a5)
	update_cache(thread == _current);
    7670:	00872503          	lw	a0,8(a4)
}
    7674:	00c12083          	lw	ra,12(sp)
	update_cache(thread == _current);
    7678:	40850533          	sub	a0,a0,s0
}
    767c:	00812403          	lw	s0,8(sp)
	update_cache(thread == _current);
    7680:	00153513          	seqz	a0,a0
}
    7684:	01010113          	addi	sp,sp,16
	update_cache(thread == _current);
    7688:	ec1ff06f          	j	7548 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    768c:	00b78663          	beq	a5,a1,7698 <move_thread_to_end_of_prio_q+0xac>
    7690:	0007a783          	lw	a5,0(a5)
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7694:	fa079ce3          	bnez	a5,764c <move_thread_to_end_of_prio_q+0x60>
	node->next = list;
    7698:	00d42023          	sw	a3,0(s0)
	node->prev = tail;
    769c:	00b42223          	sw	a1,4(s0)
	tail->next = node;
    76a0:	0085a023          	sw	s0,0(a1)
	list->tail = node;
    76a4:	02872023          	sw	s0,32(a4)
}
    76a8:	fc9ff06f          	j	7670 <move_thread_to_end_of_prio_q+0x84>

000076ac <ready_thread>:
    76ac:	00d54783          	lbu	a5,13(a0)
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    76b0:	01879713          	slli	a4,a5,0x18
    76b4:	41875713          	srai	a4,a4,0x18
    76b8:	08074863          	bltz	a4,7748 <ready_thread+0x9c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    76bc:	01f7f713          	andi	a4,a5,31
    76c0:	08071463          	bnez	a4,7748 <ready_thread+0x9c>
    76c4:	02052703          	lw	a4,32(a0)
    76c8:	08071063          	bnez	a4,7748 <ready_thread+0x9c>
	thread->base.thread_state |= _THREAD_QUEUED;
    76cc:	f807e793          	ori	a5,a5,-128
	return list->head == list;
    76d0:	0000e737          	lui	a4,0xe
    76d4:	c8870693          	addi	a3,a4,-888 # dc88 <_kernel>
    76d8:	00f506a3          	sb	a5,13(a0)
    76dc:	01c6a783          	lw	a5,28(a3)
	return (node == list->tail) ? NULL : node->next;
    76e0:	0206a583          	lw	a1,32(a3)
    76e4:	0000e6b7          	lui	a3,0xe
    76e8:	ca468693          	addi	a3,a3,-860 # dca4 <_kernel+0x1c>
    76ec:	c8870713          	addi	a4,a4,-888
	return sys_dlist_is_empty(list) ? NULL : list->head;
    76f0:	04d78263          	beq	a5,a3,7734 <ready_thread+0x88>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    76f4:	04078063          	beqz	a5,7734 <ready_thread+0x88>
	int32_t b1 = thread_1->base.prio;
    76f8:	00e50803          	lb	a6,14(a0)
	int32_t b2 = thread_2->base.prio;
    76fc:	00e78603          	lb	a2,14(a5)
	if (b1 != b2) {
    7700:	02c80463          	beq	a6,a2,7728 <ready_thread+0x7c>
		return b2 - b1;
    7704:	41060633          	sub	a2,a2,a6
		if (z_sched_prio_cmp(thread, t) > 0) {
    7708:	02c05063          	blez	a2,7728 <ready_thread+0x7c>
	sys_dnode_t *const prev = successor->prev;
    770c:	0047a703          	lw	a4,4(a5)
	node->next = successor;
    7710:	00f52023          	sw	a5,0(a0)
	node->prev = prev;
    7714:	00e52223          	sw	a4,4(a0)
	prev->next = node;
    7718:	00a72023          	sw	a0,0(a4)
	successor->prev = node;
    771c:	00a7a223          	sw	a0,4(a5)
		update_cache(0);
    7720:	00000513          	li	a0,0
    7724:	e25ff06f          	j	7548 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    7728:	00b78663          	beq	a5,a1,7734 <ready_thread+0x88>
    772c:	0007a783          	lw	a5,0(a5)
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7730:	fc0796e3          	bnez	a5,76fc <ready_thread+0x50>
	node->next = list;
    7734:	00d52023          	sw	a3,0(a0)
	node->prev = tail;
    7738:	00b52223          	sw	a1,4(a0)
	tail->next = node;
    773c:	00a5a023          	sw	a0,0(a1)
	list->tail = node;
    7740:	02a72023          	sw	a0,32(a4)
}
    7744:	fddff06f          	j	7720 <ready_thread+0x74>
}
    7748:	00008067          	ret

0000774c <z_thread_timeout>:
{
    774c:	fe010113          	addi	sp,sp,-32
    7750:	00912a23          	sw	s1,20(sp)
    7754:	00112e23          	sw	ra,28(sp)
    7758:	00812c23          	sw	s0,24(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    775c:	00800493          	li	s1,8
    7760:	3004b4f3          	csrrc	s1,mstatus,s1
		if (!killed) {
    7764:	fed54783          	lbu	a5,-19(a0)
	key = (mstatus & MSTATUS_IEN);
    7768:	0084f493          	andi	s1,s1,8
    776c:	0287f793          	andi	a5,a5,40
    7770:	02079863          	bnez	a5,77a0 <z_thread_timeout+0x54>
    7774:	00050413          	mv	s0,a0
			if (thread->base.pended_on != NULL) {
    7778:	fe842783          	lw	a5,-24(s0)
	struct k_thread *thread = CONTAINER_OF(timeout,
    777c:	fe050513          	addi	a0,a0,-32
			if (thread->base.pended_on != NULL) {
    7780:	00078863          	beqz	a5,7790 <z_thread_timeout+0x44>
				unpend_thread_no_timeout(thread);
    7784:	00a12623          	sw	a0,12(sp)
    7788:	d35ff0ef          	jal	ra,74bc <unpend_thread_no_timeout>
    778c:	00c12503          	lw	a0,12(sp)
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    7790:	fed44783          	lbu	a5,-19(s0)
    7794:	feb7f793          	andi	a5,a5,-21
    7798:	fef406a3          	sb	a5,-19(s0)
			ready_thread(thread);
    779c:	f11ff0ef          	jal	ra,76ac <ready_thread>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    77a0:	3004a4f3          	csrrs	s1,mstatus,s1
}
    77a4:	01c12083          	lw	ra,28(sp)
    77a8:	01812403          	lw	s0,24(sp)
    77ac:	01412483          	lw	s1,20(sp)
    77b0:	02010113          	addi	sp,sp,32
    77b4:	00008067          	ret

000077b8 <unready_thread>:
{
    77b8:	ff010113          	addi	sp,sp,-16
    77bc:	00812423          	sw	s0,8(sp)
    77c0:	00112623          	sw	ra,12(sp)
	return (thread->base.thread_state & state) != 0U;
    77c4:	00d54783          	lbu	a5,13(a0)
    77c8:	00050413          	mv	s0,a0
	if (z_is_thread_queued(thread)) {
    77cc:	01879713          	slli	a4,a5,0x18
    77d0:	41875713          	srai	a4,a4,0x18
    77d4:	00075863          	bgez	a4,77e4 <unready_thread+0x2c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    77d8:	07f7f793          	andi	a5,a5,127
    77dc:	00f506a3          	sb	a5,13(a0)
	sys_dlist_remove(&thread->base.qnode_dlist);
    77e0:	cc1ff0ef          	jal	ra,74a0 <sys_dlist_remove>
	update_cache(thread == _current);
    77e4:	0000e7b7          	lui	a5,0xe
    77e8:	c907a503          	lw	a0,-880(a5) # dc90 <_kernel+0x8>
}
    77ec:	00c12083          	lw	ra,12(sp)
	update_cache(thread == _current);
    77f0:	40850533          	sub	a0,a0,s0
}
    77f4:	00812403          	lw	s0,8(sp)
	update_cache(thread == _current);
    77f8:	00153513          	seqz	a0,a0
}
    77fc:	01010113          	addi	sp,sp,16
	update_cache(thread == _current);
    7800:	d49ff06f          	j	7548 <update_cache>

00007804 <add_to_waitq_locked>:
{
    7804:	ff010113          	addi	sp,sp,-16
    7808:	00812423          	sw	s0,8(sp)
    780c:	00912223          	sw	s1,4(sp)
    7810:	00050413          	mv	s0,a0
    7814:	00112623          	sw	ra,12(sp)
    7818:	00058493          	mv	s1,a1
	unready_thread(thread);
    781c:	f9dff0ef          	jal	ra,77b8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    7820:	00d44783          	lbu	a5,13(s0)
    7824:	0027e793          	ori	a5,a5,2
    7828:	00f406a3          	sb	a5,13(s0)
	if (wait_q != NULL) {
    782c:	02048e63          	beqz	s1,7868 <add_to_waitq_locked+0x64>
	return list->head == list;
    7830:	0004a783          	lw	a5,0(s1)
		thread->base.pended_on = wait_q;
    7834:	00942423          	sw	s1,8(s0)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7838:	04f48a63          	beq	s1,a5,788c <add_to_waitq_locked+0x88>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    783c:	04078863          	beqz	a5,788c <add_to_waitq_locked+0x88>
	int32_t b1 = thread_1->base.prio;
    7840:	00e40683          	lb	a3,14(s0)
	int32_t b2 = thread_2->base.prio;
    7844:	00e78703          	lb	a4,14(a5)
	if (b1 != b2) {
    7848:	02e68a63          	beq	a3,a4,787c <add_to_waitq_locked+0x78>
		return b2 - b1;
    784c:	40d70733          	sub	a4,a4,a3
		if (z_sched_prio_cmp(thread, t) > 0) {
    7850:	02e05663          	blez	a4,787c <add_to_waitq_locked+0x78>
	sys_dnode_t *const prev = successor->prev;
    7854:	0047a703          	lw	a4,4(a5)
	node->next = successor;
    7858:	00f42023          	sw	a5,0(s0)
	node->prev = prev;
    785c:	00e42223          	sw	a4,4(s0)
	prev->next = node;
    7860:	00872023          	sw	s0,0(a4)
	successor->prev = node;
    7864:	0087a223          	sw	s0,4(a5)
}
    7868:	00c12083          	lw	ra,12(sp)
    786c:	00812403          	lw	s0,8(sp)
    7870:	00412483          	lw	s1,4(sp)
    7874:	01010113          	addi	sp,sp,16
    7878:	00008067          	ret
	return (node == list->tail) ? NULL : node->next;
    787c:	0044a703          	lw	a4,4(s1)
    7880:	00e78663          	beq	a5,a4,788c <add_to_waitq_locked+0x88>
    7884:	0007a783          	lw	a5,0(a5)
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7888:	fa079ee3          	bnez	a5,7844 <add_to_waitq_locked+0x40>
	sys_dnode_t *const tail = list->tail;
    788c:	0044a783          	lw	a5,4(s1)
	node->next = list;
    7890:	00942023          	sw	s1,0(s0)
	node->prev = tail;
    7894:	00f42223          	sw	a5,4(s0)
	tail->next = node;
    7898:	0087a023          	sw	s0,0(a5)
	list->tail = node;
    789c:	0084a223          	sw	s0,4(s1)
}
    78a0:	fc9ff06f          	j	7868 <add_to_waitq_locked+0x64>

000078a4 <pend_locked>:
{
    78a4:	fe010113          	addi	sp,sp,-32
    78a8:	00812c23          	sw	s0,24(sp)
    78ac:	00c12623          	sw	a2,12(sp)
    78b0:	00d12423          	sw	a3,8(sp)
    78b4:	00112e23          	sw	ra,28(sp)
    78b8:	00050413          	mv	s0,a0
	add_to_waitq_locked(thread, wait_q);
    78bc:	f49ff0ef          	jal	ra,7804 <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
    78c0:	00c12603          	lw	a2,12(sp)
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    78c4:	fff00593          	li	a1,-1
    78c8:	00812683          	lw	a3,8(sp)
    78cc:	00b61463          	bne	a2,a1,78d4 <pend_locked+0x30>
    78d0:	02c68063          	beq	a3,a2,78f0 <pend_locked+0x4c>
    78d4:	02040513          	addi	a0,s0,32
}
    78d8:	01812403          	lw	s0,24(sp)
    78dc:	01c12083          	lw	ra,28(sp)
    78e0:	000075b7          	lui	a1,0x7
    78e4:	74c58593          	addi	a1,a1,1868 # 774c <z_thread_timeout>
    78e8:	02010113          	addi	sp,sp,32
    78ec:	6e00006f          	j	7fcc <z_add_timeout>
    78f0:	01c12083          	lw	ra,28(sp)
    78f4:	01812403          	lw	s0,24(sp)
    78f8:	02010113          	addi	sp,sp,32
    78fc:	00008067          	ret

00007900 <k_sched_time_slice_set>:
{
    7900:	ff010113          	addi	sp,sp,-16
    7904:	00812423          	sw	s0,8(sp)
    7908:	00912223          	sw	s1,4(sp)
    790c:	00112623          	sw	ra,12(sp)
    7910:	00050793          	mv	a5,a0
    7914:	00058493          	mv	s1,a1
	__asm__ volatile ("csrrc %0, mstatus, %1"
    7918:	00800413          	li	s0,8
    791c:	30043473          	csrrc	s0,mstatus,s0
		_current_cpu->slice_ticks = 0;
    7920:	0000e737          	lui	a4,0xe
		t += off;
    7924:	00950513          	addi	a0,a0,9
    7928:	c8072c23          	sw	zero,-872(a4) # dc98 <_kernel+0x10>
	key = (mstatus & MSTATUS_IEN);
    792c:	00847413          	andi	s0,s0,8
    7930:	00f535b3          	sltu	a1,a0,a5
		if (result32 && (t < BIT64(32))) {
    7934:	02f56c63          	bltu	a0,a5,796c <k_sched_time_slice_set+0x6c>
			return ((uint32_t)t) / (from_hz / to_hz);
    7938:	00a00793          	li	a5,10
    793c:	02f55533          	divu	a0,a0,a5
		slice_time = k_ms_to_ticks_ceil32(slice);
    7940:	0000e7b7          	lui	a5,0xe
    7944:	b2a7a023          	sw	a0,-1248(a5) # db20 <slice_time>
		slice_max_prio = prio;
    7948:	0000e7b7          	lui	a5,0xe
    794c:	b097ae23          	sw	s1,-1252(a5) # db1c <slice_max_prio>
		z_reset_time_slice();
    7950:	ba1ff0ef          	jal	ra,74f0 <z_reset_time_slice>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    7954:	30042473          	csrrs	s0,mstatus,s0
}
    7958:	00c12083          	lw	ra,12(sp)
    795c:	00812403          	lw	s0,8(sp)
    7960:	00412483          	lw	s1,4(sp)
    7964:	01010113          	addi	sp,sp,16
    7968:	00008067          	ret
			return t / ((uint64_t)from_hz / to_hz);
    796c:	00a00613          	li	a2,10
    7970:	00000693          	li	a3,0
    7974:	a19f80ef          	jal	ra,38c <__udivdi3>
    7978:	fc9ff06f          	j	7940 <k_sched_time_slice_set+0x40>

0000797c <z_time_slice>:
{
    797c:	ff010113          	addi	sp,sp,-16
    7980:	00812423          	sw	s0,8(sp)
    7984:	00112623          	sw	ra,12(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    7988:	00800413          	li	s0,8
    798c:	30043473          	csrrc	s0,mstatus,s0
	if (slice_time && sliceable(_current)) {
    7990:	0000e7b7          	lui	a5,0xe
    7994:	b207a703          	lw	a4,-1248(a5) # db20 <slice_time>
    7998:	0000e7b7          	lui	a5,0xe
	key = (mstatus & MSTATUS_IEN);
    799c:	00847413          	andi	s0,s0,8
    79a0:	c8878793          	addi	a5,a5,-888 # dc88 <_kernel>
    79a4:	06070863          	beqz	a4,7a14 <z_time_slice+0x98>
    79a8:	00050693          	mv	a3,a0
    79ac:	0087a503          	lw	a0,8(a5)
		&& !z_is_idle_thread_object(thread);
    79b0:	07f00713          	li	a4,127
    79b4:	00e55603          	lhu	a2,14(a0)
    79b8:	04c76e63          	bltu	a4,a2,7a14 <z_time_slice+0x98>
		&& !z_is_thread_prevented_from_running(thread)
    79bc:	00d54703          	lbu	a4,13(a0)
    79c0:	01f77713          	andi	a4,a4,31
    79c4:	04071863          	bnez	a4,7a14 <z_time_slice+0x98>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    79c8:	0000e737          	lui	a4,0xe
    79cc:	00e50603          	lb	a2,14(a0)
    79d0:	b1c72703          	lw	a4,-1252(a4) # db1c <slice_max_prio>
    79d4:	04e64063          	blt	a2,a4,7a14 <z_time_slice+0x98>
		&& !z_is_idle_thread_object(thread);
    79d8:	0000e737          	lui	a4,0xe
    79dc:	b3870713          	addi	a4,a4,-1224 # db38 <z_idle_threads>
    79e0:	02e50a63          	beq	a0,a4,7a14 <z_time_slice+0x98>
		if (ticks >= _current_cpu->slice_ticks) {
    79e4:	0107a703          	lw	a4,16(a5)
    79e8:	02e6c063          	blt	a3,a4,7a08 <z_time_slice+0x8c>
			move_thread_to_end_of_prio_q(_current);
    79ec:	c01ff0ef          	jal	ra,75ec <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
    79f0:	b01ff0ef          	jal	ra,74f0 <z_reset_time_slice>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    79f4:	30042473          	csrrs	s0,mstatus,s0
}
    79f8:	00c12083          	lw	ra,12(sp)
    79fc:	00812403          	lw	s0,8(sp)
    7a00:	01010113          	addi	sp,sp,16
    7a04:	00008067          	ret
			_current_cpu->slice_ticks -= ticks;
    7a08:	40d70733          	sub	a4,a4,a3
    7a0c:	00e7a823          	sw	a4,16(a5)
    7a10:	fe5ff06f          	j	79f4 <z_time_slice+0x78>
		_current_cpu->slice_ticks = 0;
    7a14:	0007a823          	sw	zero,16(a5)
    7a18:	fddff06f          	j	79f4 <z_time_slice+0x78>

00007a1c <z_ready_thread>:
{
    7a1c:	ff010113          	addi	sp,sp,-16
    7a20:	00812423          	sw	s0,8(sp)
    7a24:	00112623          	sw	ra,12(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    7a28:	00800413          	li	s0,8
    7a2c:	30043473          	csrrc	s0,mstatus,s0
			ready_thread(thread);
    7a30:	c7dff0ef          	jal	ra,76ac <ready_thread>
	key = (mstatus & MSTATUS_IEN);
    7a34:	00847413          	andi	s0,s0,8
	__asm__ volatile ("csrrs %0, mstatus, %1"
    7a38:	30042473          	csrrs	s0,mstatus,s0
}
    7a3c:	00c12083          	lw	ra,12(sp)
    7a40:	00812403          	lw	s0,8(sp)
    7a44:	01010113          	addi	sp,sp,16
    7a48:	00008067          	ret

00007a4c <z_pend_curr>:
{
    7a4c:	ff010113          	addi	sp,sp,-16
    7a50:	00812423          	sw	s0,8(sp)
    7a54:	00112623          	sw	ra,12(sp)
    7a58:	00058413          	mv	s0,a1
	__asm__ volatile ("csrrc %0, mstatus, %1"
    7a5c:	00800793          	li	a5,8
    7a60:	00060593          	mv	a1,a2
    7a64:	00068613          	mv	a2,a3
    7a68:	00070693          	mv	a3,a4
    7a6c:	3007b7f3          	csrrc	a5,mstatus,a5
	pend_locked(_current, wait_q, timeout);
    7a70:	0000e7b7          	lui	a5,0xe
    7a74:	c907a503          	lw	a0,-880(a5) # dc90 <_kernel+0x8>
    7a78:	e2dff0ef          	jal	ra,78a4 <pend_locked>
    7a7c:	00040513          	mv	a0,s0
}
    7a80:	00812403          	lw	s0,8(sp)
    7a84:	00c12083          	lw	ra,12(sp)
    7a88:	01010113          	addi	sp,sp,16
    7a8c:	841f806f          	j	2cc <arch_swap>

00007a90 <z_unpend_thread>:
{
    7a90:	ff010113          	addi	sp,sp,-16
    7a94:	00812423          	sw	s0,8(sp)
    7a98:	00912223          	sw	s1,4(sp)
    7a9c:	00112623          	sw	ra,12(sp)
    7aa0:	00050493          	mv	s1,a0
    7aa4:	00800413          	li	s0,8
    7aa8:	30043473          	csrrc	s0,mstatus,s0
		unpend_thread_no_timeout(thread);
    7aac:	a11ff0ef          	jal	ra,74bc <unpend_thread_no_timeout>
	key = (mstatus & MSTATUS_IEN);
    7ab0:	00847413          	andi	s0,s0,8
	__asm__ volatile ("csrrs %0, mstatus, %1"
    7ab4:	30042473          	csrrs	s0,mstatus,s0
}
    7ab8:	00812403          	lw	s0,8(sp)
    7abc:	00c12083          	lw	ra,12(sp)
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    7ac0:	02048513          	addi	a0,s1,32
    7ac4:	00412483          	lw	s1,4(sp)
    7ac8:	01010113          	addi	sp,sp,16
    7acc:	6b00006f          	j	817c <z_abort_timeout>

00007ad0 <z_set_prio>:
{
    7ad0:	ff010113          	addi	sp,sp,-16
    7ad4:	00812423          	sw	s0,8(sp)
    7ad8:	01212023          	sw	s2,0(sp)
    7adc:	00112623          	sw	ra,12(sp)
    7ae0:	00912223          	sw	s1,4(sp)
    7ae4:	00050413          	mv	s0,a0
	__asm__ volatile ("csrrc %0, mstatus, %1"
    7ae8:	00800913          	li	s2,8
    7aec:	30093973          	csrrc	s2,mstatus,s2
	uint8_t state = thread->base.thread_state;
    7af0:	00d54783          	lbu	a5,13(a0)
				thread->base.prio = prio;
    7af4:	01859493          	slli	s1,a1,0x18
	key = (mstatus & MSTATUS_IEN);
    7af8:	00897913          	andi	s2,s2,8
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    7afc:	01f7f713          	andi	a4,a5,31
    7b00:	4184d493          	srai	s1,s1,0x18
    7b04:	0a071e63          	bnez	a4,7bc0 <z_set_prio+0xf0>
		if (need_sched) {
    7b08:	02052703          	lw	a4,32(a0)
    7b0c:	0a071a63          	bnez	a4,7bc0 <z_set_prio+0xf0>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7b10:	07f7f793          	andi	a5,a5,127
    7b14:	00f506a3          	sb	a5,13(a0)
	sys_dlist_remove(&thread->base.qnode_dlist);
    7b18:	989ff0ef          	jal	ra,74a0 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    7b1c:	00d44783          	lbu	a5,13(s0)
	return list->head == list;
    7b20:	0000e737          	lui	a4,0xe
    7b24:	0000e6b7          	lui	a3,0xe
    7b28:	f807e793          	ori	a5,a5,-128
    7b2c:	00f406a3          	sb	a5,13(s0)
    7b30:	c8870793          	addi	a5,a4,-888 # dc88 <_kernel>
    7b34:	01c7a783          	lw	a5,28(a5)
				thread->base.prio = prio;
    7b38:	00940723          	sb	s1,14(s0)
    7b3c:	ca468693          	addi	a3,a3,-860 # dca4 <_kernel+0x1c>
    7b40:	c8870713          	addi	a4,a4,-888
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7b44:	06d78263          	beq	a5,a3,7ba8 <z_set_prio+0xd8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7b48:	06078063          	beqz	a5,7ba8 <z_set_prio+0xd8>
	return (node == list->tail) ? NULL : node->next;
    7b4c:	02072583          	lw	a1,32(a4)
	int32_t b2 = thread_2->base.prio;
    7b50:	00e78603          	lb	a2,14(a5)
	if (b1 != b2) {
    7b54:	04c48463          	beq	s1,a2,7b9c <z_set_prio+0xcc>
		return b2 - b1;
    7b58:	40960633          	sub	a2,a2,s1
		if (z_sched_prio_cmp(thread, t) > 0) {
    7b5c:	04c05063          	blez	a2,7b9c <z_set_prio+0xcc>
	sys_dnode_t *const prev = successor->prev;
    7b60:	0047a703          	lw	a4,4(a5)
	node->next = successor;
    7b64:	00f42023          	sw	a5,0(s0)
	node->prev = prev;
    7b68:	00e42223          	sw	a4,4(s0)
	prev->next = node;
    7b6c:	00872023          	sw	s0,0(a4)
	successor->prev = node;
    7b70:	0087a223          	sw	s0,4(a5)
			update_cache(1);
    7b74:	00100513          	li	a0,1
    7b78:	9d1ff0ef          	jal	ra,7548 <update_cache>
    7b7c:	00100513          	li	a0,1
	__asm__ volatile ("csrrs %0, mstatus, %1"
    7b80:	30092973          	csrrs	s2,mstatus,s2
}
    7b84:	00c12083          	lw	ra,12(sp)
    7b88:	00812403          	lw	s0,8(sp)
    7b8c:	00412483          	lw	s1,4(sp)
    7b90:	00012903          	lw	s2,0(sp)
    7b94:	01010113          	addi	sp,sp,16
    7b98:	00008067          	ret
	return (node == list->tail) ? NULL : node->next;
    7b9c:	00b78663          	beq	a5,a1,7ba8 <z_set_prio+0xd8>
    7ba0:	0007a783          	lw	a5,0(a5)
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7ba4:	fa0796e3          	bnez	a5,7b50 <z_set_prio+0x80>
	sys_dnode_t *const tail = list->tail;
    7ba8:	02072783          	lw	a5,32(a4)
	node->next = list;
    7bac:	00d42023          	sw	a3,0(s0)
	node->prev = tail;
    7bb0:	00f42223          	sw	a5,4(s0)
	tail->next = node;
    7bb4:	0087a023          	sw	s0,0(a5)
	list->tail = node;
    7bb8:	02872023          	sw	s0,32(a4)
}
    7bbc:	fb9ff06f          	j	7b74 <z_set_prio+0xa4>
			thread->base.prio = prio;
    7bc0:	00940723          	sb	s1,14(s0)
    7bc4:	00000513          	li	a0,0
    7bc8:	fb9ff06f          	j	7b80 <z_set_prio+0xb0>

00007bcc <z_reschedule>:
	return (key & MSTATUS_IEN) == MSTATUS_IEN;
    7bcc:	0085f713          	andi	a4,a1,8
{
    7bd0:	00058513          	mv	a0,a1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    7bd4:	02070263          	beqz	a4,7bf8 <z_reschedule+0x2c>
FUNC_NORETURN void z_riscv_fatal_error(unsigned int reason,
				       const z_arch_esf_t *esf);

static inline bool arch_is_in_isr(void)
{
	return _kernel.cpus[0].nested != 0U;
    7bd8:	0000e7b7          	lui	a5,0xe
    7bdc:	c8878793          	addi	a5,a5,-888 # dc88 <_kernel>
	if (resched(key.key) && need_swap()) {
    7be0:	0007a683          	lw	a3,0(a5)
    7be4:	00069a63          	bnez	a3,7bf8 <z_reschedule+0x2c>
    7be8:	0187a683          	lw	a3,24(a5)
    7bec:	0087a783          	lw	a5,8(a5)
    7bf0:	00f68463          	beq	a3,a5,7bf8 <z_reschedule+0x2c>
    7bf4:	ed8f806f          	j	2cc <arch_swap>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    7bf8:	30072773          	csrrs	a4,mstatus,a4
}
    7bfc:	00008067          	ret

00007c00 <z_sched_start>:
	__asm__ volatile ("csrrc %0, mstatus, %1"
    7c00:	00800593          	li	a1,8
    7c04:	3005b5f3          	csrrc	a1,mstatus,a1
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    7c08:	00d54703          	lbu	a4,13(a0)
	key = (mstatus & MSTATUS_IEN);
    7c0c:	0085f593          	andi	a1,a1,8
	if (z_has_thread_started(thread)) {
    7c10:	00477693          	andi	a3,a4,4
    7c14:	00069663          	bnez	a3,7c20 <z_sched_start+0x20>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    7c18:	3005a5f3          	csrrs	a1,mstatus,a1
		return;
    7c1c:	00008067          	ret
{
    7c20:	fe010113          	addi	sp,sp,-32
    7c24:	00112e23          	sw	ra,28(sp)
	thread->base.thread_state &= ~_THREAD_PRESTART;
    7c28:	ffb77713          	andi	a4,a4,-5
    7c2c:	00e506a3          	sb	a4,13(a0)
    7c30:	00b12623          	sw	a1,12(sp)
	ready_thread(thread);
    7c34:	a79ff0ef          	jal	ra,76ac <ready_thread>
	z_reschedule(&sched_spinlock, key);
    7c38:	00c12583          	lw	a1,12(sp)
}
    7c3c:	01c12083          	lw	ra,28(sp)
	z_reschedule(&sched_spinlock, key);
    7c40:	0000e537          	lui	a0,0xe
    7c44:	cac50513          	addi	a0,a0,-852 # dcac <sched_spinlock>
}
    7c48:	02010113          	addi	sp,sp,32
	z_reschedule(&sched_spinlock, key);
    7c4c:	f81ff06f          	j	7bcc <z_reschedule>

00007c50 <z_reschedule_irqlock>:
	return (key & MSTATUS_IEN) == MSTATUS_IEN;
    7c50:	00857793          	andi	a5,a0,8
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    7c54:	00078a63          	beqz	a5,7c68 <z_reschedule_irqlock+0x18>
	if (resched(key)) {
    7c58:	0000e737          	lui	a4,0xe
    7c5c:	c8872703          	lw	a4,-888(a4) # dc88 <_kernel>
    7c60:	00071463          	bnez	a4,7c68 <z_reschedule_irqlock+0x18>
    7c64:	e68f806f          	j	2cc <arch_swap>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    7c68:	3007a7f3          	csrrs	a5,mstatus,a5
}
    7c6c:	00008067          	ret

00007c70 <z_reschedule_unlocked>:
	__asm__ volatile ("csrrc %0, mstatus, %1"
    7c70:	00800513          	li	a0,8
    7c74:	30053573          	csrrc	a0,mstatus,a0
	(void) z_reschedule_irqlock(arch_irq_lock());
    7c78:	00857513          	andi	a0,a0,8
    7c7c:	fd5ff06f          	j	7c50 <z_reschedule_irqlock>

00007c80 <k_sched_lock>:
    7c80:	00800793          	li	a5,8
    7c84:	3007b7f3          	csrrc	a5,mstatus,a5
	--_current->base.sched_locked;
    7c88:	0000e737          	lui	a4,0xe
    7c8c:	c9072683          	lw	a3,-880(a4) # dc90 <_kernel+0x8>
    7c90:	00f6c703          	lbu	a4,15(a3)
    7c94:	fff70713          	addi	a4,a4,-1
    7c98:	00e687a3          	sb	a4,15(a3)
	key = (mstatus & MSTATUS_IEN);
    7c9c:	0087f793          	andi	a5,a5,8
	__asm__ volatile ("csrrs %0, mstatus, %1"
    7ca0:	3007a7f3          	csrrs	a5,mstatus,a5
}
    7ca4:	00008067          	ret

00007ca8 <k_sched_unlock>:
{
    7ca8:	ff010113          	addi	sp,sp,-16
    7cac:	00812423          	sw	s0,8(sp)
    7cb0:	00112623          	sw	ra,12(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    7cb4:	00800413          	li	s0,8
    7cb8:	30043473          	csrrc	s0,mstatus,s0
		++_current->base.sched_locked;
    7cbc:	0000e7b7          	lui	a5,0xe
    7cc0:	c907a703          	lw	a4,-880(a5) # dc90 <_kernel+0x8>
		update_cache(0);
    7cc4:	00000513          	li	a0,0
	key = (mstatus & MSTATUS_IEN);
    7cc8:	00847413          	andi	s0,s0,8
		++_current->base.sched_locked;
    7ccc:	00f74783          	lbu	a5,15(a4)
    7cd0:	00178793          	addi	a5,a5,1
    7cd4:	00f707a3          	sb	a5,15(a4)
		update_cache(0);
    7cd8:	871ff0ef          	jal	ra,7548 <update_cache>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    7cdc:	30042473          	csrrs	s0,mstatus,s0
}
    7ce0:	00812403          	lw	s0,8(sp)
    7ce4:	00c12083          	lw	ra,12(sp)
    7ce8:	01010113          	addi	sp,sp,16
	z_reschedule_unlocked();
    7cec:	f85ff06f          	j	7c70 <z_reschedule_unlocked>

00007cf0 <z_priq_dumb_best>:
}

struct k_thread *z_priq_dumb_best(sys_dlist_t *pq)
{
    7cf0:	00050793          	mv	a5,a0
	return list->head == list;
    7cf4:	00052503          	lw	a0,0(a0)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7cf8:	00a79463          	bne	a5,a0,7d00 <z_priq_dumb_best+0x10>
	struct k_thread *thread = NULL;
    7cfc:	00000513          	li	a0,0

	if (n != NULL) {
		thread = CONTAINER_OF(n, struct k_thread, base.qnode_dlist);
	}
	return thread;
}
    7d00:	00008067          	ret

00007d04 <z_unpend_first_thread>:
{
    7d04:	ff010113          	addi	sp,sp,-16
    7d08:	00812423          	sw	s0,8(sp)
    7d0c:	00112623          	sw	ra,12(sp)
    7d10:	00912223          	sw	s1,4(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    7d14:	00800413          	li	s0,8
    7d18:	30043473          	csrrc	s0,mstatus,s0
		thread = _priq_wait_best(&wait_q->waitq);
    7d1c:	fd5ff0ef          	jal	ra,7cf0 <z_priq_dumb_best>
	key = (mstatus & MSTATUS_IEN);
    7d20:	00847413          	andi	s0,s0,8
    7d24:	00050493          	mv	s1,a0
		if (thread != NULL) {
    7d28:	00050863          	beqz	a0,7d38 <z_unpend_first_thread+0x34>
			unpend_thread_no_timeout(thread);
    7d2c:	f90ff0ef          	jal	ra,74bc <unpend_thread_no_timeout>
    7d30:	02048513          	addi	a0,s1,32
    7d34:	448000ef          	jal	ra,817c <z_abort_timeout>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    7d38:	30042473          	csrrs	s0,mstatus,s0
}
    7d3c:	00c12083          	lw	ra,12(sp)
    7d40:	00812403          	lw	s0,8(sp)
    7d44:	00048513          	mv	a0,s1
    7d48:	00412483          	lw	s1,4(sp)
    7d4c:	01010113          	addi	sp,sp,16
    7d50:	00008067          	ret

00007d54 <z_unpend_all>:
	}
	return thread;
}

int z_unpend_all(_wait_q_t *wait_q)
{
    7d54:	ff010113          	addi	sp,sp,-16
    7d58:	00912223          	sw	s1,4(sp)
    7d5c:	00112623          	sw	ra,12(sp)
    7d60:	00050493          	mv	s1,a0
    7d64:	00812423          	sw	s0,8(sp)
	int need_sched = 0;
    7d68:	00000513          	li	a0,0
	return list->head == list;
    7d6c:	0004a403          	lw	s0,0(s1)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7d70:	00848463          	beq	s1,s0,7d78 <z_unpend_all+0x24>
	struct k_thread *thread;

	while ((thread = z_waitq_head(wait_q)) != NULL) {
    7d74:	00041c63          	bnez	s0,7d8c <z_unpend_all+0x38>
		z_ready_thread(thread);
		need_sched = 1;
	}

	return need_sched;
}
    7d78:	00c12083          	lw	ra,12(sp)
    7d7c:	00812403          	lw	s0,8(sp)
    7d80:	00412483          	lw	s1,4(sp)
    7d84:	01010113          	addi	sp,sp,16
    7d88:	00008067          	ret
		z_unpend_thread(thread);
    7d8c:	00040513          	mv	a0,s0
    7d90:	d01ff0ef          	jal	ra,7a90 <z_unpend_thread>
		z_ready_thread(thread);
    7d94:	00040513          	mv	a0,s0
    7d98:	c85ff0ef          	jal	ra,7a1c <z_ready_thread>
		need_sched = 1;
    7d9c:	00100513          	li	a0,1
    7da0:	fcdff06f          	j	7d6c <z_unpend_all+0x18>

00007da4 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    7da4:	0000e7b7          	lui	a5,0xe
    7da8:	0000e737          	lui	a4,0xe
    7dac:	c8878793          	addi	a5,a5,-888 # dc88 <_kernel>
    7db0:	ca470713          	addi	a4,a4,-860 # dca4 <_kernel+0x1c>
    7db4:	00e7ae23          	sw	a4,28(a5)
	list->tail = (sys_dnode_t *)list;
    7db8:	02e7a023          	sw	a4,32(a5)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    7dbc:	00000593          	li	a1,0
    7dc0:	00000513          	li	a0,0
    7dc4:	b3dff06f          	j	7900 <k_sched_time_slice_set>

00007dc8 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    7dc8:	0000e7b7          	lui	a5,0xe
    7dcc:	c907a503          	lw	a0,-880(a5) # dc90 <_kernel+0x8>
    7dd0:	00008067          	ret

00007dd4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    7dd4:	fe010113          	addi	sp,sp,-32
    7dd8:	00912a23          	sw	s1,20(sp)
    7ddc:	00112e23          	sw	ra,28(sp)
    7de0:	00812c23          	sw	s0,24(sp)
    7de4:	01212823          	sw	s2,16(sp)
    7de8:	01312623          	sw	s3,12(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    7dec:	00800493          	li	s1,8
    7df0:	3004b4f3          	csrrc	s1,mstatus,s1
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    7df4:	00d54783          	lbu	a5,13(a0)
	key = (mstatus & MSTATUS_IEN);
    7df8:	0084f493          	andi	s1,s1,8
    7dfc:	0087f713          	andi	a4,a5,8
    7e00:	02070263          	beqz	a4,7e24 <z_thread_abort+0x50>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    7e04:	3004a4f3          	csrrs	s1,mstatus,s1
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    7e08:	01c12083          	lw	ra,28(sp)
    7e0c:	01812403          	lw	s0,24(sp)
    7e10:	01412483          	lw	s1,20(sp)
    7e14:	01012903          	lw	s2,16(sp)
    7e18:	00c12983          	lw	s3,12(sp)
    7e1c:	02010113          	addi	sp,sp,32
    7e20:	00008067          	ret
		thread->base.thread_state &= ~_THREAD_ABORTING;
    7e24:	fdf7f713          	andi	a4,a5,-33
    7e28:	00876713          	ori	a4,a4,8
		if (z_is_thread_queued(thread)) {
    7e2c:	01871693          	slli	a3,a4,0x18
    7e30:	4186d693          	srai	a3,a3,0x18
    7e34:	00050413          	mv	s0,a0
    7e38:	0406ce63          	bltz	a3,7e94 <z_thread_abort+0xc0>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    7e3c:	00e506a3          	sb	a4,13(a0)
		if (thread->base.pended_on != NULL) {
    7e40:	00842783          	lw	a5,8(s0)
    7e44:	00078663          	beqz	a5,7e50 <z_thread_abort+0x7c>
			unpend_thread_no_timeout(thread);
    7e48:	00040513          	mv	a0,s0
    7e4c:	e70ff0ef          	jal	ra,74bc <unpend_thread_no_timeout>
    7e50:	02040513          	addi	a0,s0,32
    7e54:	328000ef          	jal	ra,817c <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    7e58:	07040993          	addi	s3,s0,112
	return list->head == list;
    7e5c:	07042903          	lw	s2,112(s0)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7e60:	01390463          	beq	s2,s3,7e68 <z_thread_abort+0x94>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    7e64:	04091263          	bnez	s2,7ea8 <z_thread_abort+0xd4>
		update_cache(1);
    7e68:	00100513          	li	a0,1
    7e6c:	edcff0ef          	jal	ra,7548 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    7e70:	0000e7b7          	lui	a5,0xe
    7e74:	c8878793          	addi	a5,a5,-888 # dc88 <_kernel>
    7e78:	0087a703          	lw	a4,8(a5)
    7e7c:	f88714e3          	bne	a4,s0,7e04 <z_thread_abort+0x30>
    7e80:	0007a783          	lw	a5,0(a5)
    7e84:	f80790e3          	bnez	a5,7e04 <z_thread_abort+0x30>
    7e88:	00048513          	mv	a0,s1
    7e8c:	c40f80ef          	jal	ra,2cc <arch_swap>
	return ret;
    7e90:	f75ff06f          	j	7e04 <z_thread_abort+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7e94:	05f7f793          	andi	a5,a5,95
    7e98:	0087e793          	ori	a5,a5,8
    7e9c:	00f506a3          	sb	a5,13(a0)
	sys_dlist_remove(&thread->base.qnode_dlist);
    7ea0:	e00ff0ef          	jal	ra,74a0 <sys_dlist_remove>
}
    7ea4:	f9dff06f          	j	7e40 <z_thread_abort+0x6c>
		unpend_thread_no_timeout(thread);
    7ea8:	00090513          	mv	a0,s2
    7eac:	e10ff0ef          	jal	ra,74bc <unpend_thread_no_timeout>
    7eb0:	02090513          	addi	a0,s2,32
    7eb4:	2c8000ef          	jal	ra,817c <z_abort_timeout>
		ready_thread(thread);
    7eb8:	00090513          	mv	a0,s2
	thread->arch.swap_return_value = value;
    7ebc:	0a092023          	sw	zero,160(s2)
    7ec0:	fecff0ef          	jal	ra,76ac <ready_thread>
    7ec4:	f99ff06f          	j	7e5c <z_thread_abort+0x88>

00007ec8 <z_impl_k_thread_abort>:
#if !defined(CONFIG_ARCH_HAS_THREAD_ABORT)
void z_impl_k_thread_abort(struct k_thread *thread)
{
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_thread, abort, thread);

	z_thread_abort(thread);
    7ec8:	f0dff06f          	j	7dd4 <z_thread_abort>

00007ecc <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    7ecc:	0000e7b7          	lui	a5,0xe
    7ed0:	b247a783          	lw	a5,-1244(a5) # db24 <announce_remaining>
    7ed4:	00079463          	bnez	a5,7edc <elapsed+0x10>
    7ed8:	e21fe06f          	j	6cf8 <sys_clock_elapsed>
}
    7edc:	00000513          	li	a0,0
    7ee0:	00008067          	ret

00007ee4 <next_timeout>:
	return list->head == list;
    7ee4:	0002f7b7          	lui	a5,0x2f

static int32_t next_timeout(void)
{
    7ee8:	ff010113          	addi	sp,sp,-16
    7eec:	c9078793          	addi	a5,a5,-880 # 2ec90 <timeout_list>
    7ef0:	00812423          	sw	s0,8(sp)
    7ef4:	0007a403          	lw	s0,0(a5)
    7ef8:	00112623          	sw	ra,12(sp)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7efc:	00f41463          	bne	s0,a5,7f04 <next_timeout+0x20>
    7f00:	00000413          	li	s0,0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    7f04:	fc9ff0ef          	jal	ra,7ecc <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
    7f08:	02040c63          	beqz	s0,7f40 <next_timeout+0x5c>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    7f0c:	01042703          	lw	a4,16(s0)
    7f10:	01442783          	lw	a5,20(s0)
    7f14:	41f55693          	srai	a3,a0,0x1f
    7f18:	40a70533          	sub	a0,a4,a0
    7f1c:	00a73733          	sltu	a4,a4,a0
    7f20:	40d787b3          	sub	a5,a5,a3
    7f24:	40e787b3          	sub	a5,a5,a4
	int32_t ret = to == NULL ? MAX_WAIT
    7f28:	00f04663          	bgtz	a5,7f34 <next_timeout+0x50>
    7f2c:	04079063          	bnez	a5,7f6c <next_timeout+0x88>
    7f30:	02050e63          	beqz	a0,7f6c <next_timeout+0x88>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    7f34:	00f04663          	bgtz	a5,7f40 <next_timeout+0x5c>
    7f38:	00079863          	bnez	a5,7f48 <next_timeout+0x64>
    7f3c:	00055663          	bgez	a0,7f48 <next_timeout+0x64>
	int32_t ret = to == NULL ? MAX_WAIT
    7f40:	80000537          	lui	a0,0x80000
    7f44:	fff54513          	not	a0,a0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    7f48:	0000e7b7          	lui	a5,0xe
    7f4c:	c987a783          	lw	a5,-872(a5) # dc98 <_kernel+0x10>
    7f50:	00078663          	beqz	a5,7f5c <next_timeout+0x78>
    7f54:	00a7d463          	bge	a5,a0,7f5c <next_timeout+0x78>
    7f58:	00078513          	mv	a0,a5
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    7f5c:	00c12083          	lw	ra,12(sp)
    7f60:	00812403          	lw	s0,8(sp)
    7f64:	01010113          	addi	sp,sp,16
    7f68:	00008067          	ret
	int32_t ret = to == NULL ? MAX_WAIT
    7f6c:	00000513          	li	a0,0
    7f70:	fd9ff06f          	j	7f48 <next_timeout+0x64>

00007f74 <remove_timeout>:
	return (node == list->tail) ? NULL : node->next;
    7f74:	00052783          	lw	a5,0(a0) # 80000000 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000001>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    7f78:	02050e63          	beqz	a0,7fb4 <remove_timeout+0x40>
	return (node == list->tail) ? NULL : node->next;
    7f7c:	0002f737          	lui	a4,0x2f
    7f80:	c9472703          	lw	a4,-876(a4) # 2ec94 <timeout_list+0x4>
    7f84:	02e50863          	beq	a0,a4,7fb4 <remove_timeout+0x40>
	if (next(t) != NULL) {
    7f88:	02078663          	beqz	a5,7fb4 <remove_timeout+0x40>
		next(t)->dticks += t->dticks;
    7f8c:	0107a703          	lw	a4,16(a5)
    7f90:	01052683          	lw	a3,16(a0)
    7f94:	01452583          	lw	a1,20(a0)
    7f98:	0147a603          	lw	a2,20(a5)
    7f9c:	00d706b3          	add	a3,a4,a3
    7fa0:	00e6b733          	sltu	a4,a3,a4
    7fa4:	00b60633          	add	a2,a2,a1
    7fa8:	00c70733          	add	a4,a4,a2
    7fac:	00d7a823          	sw	a3,16(a5)
    7fb0:	00e7aa23          	sw	a4,20(a5)
	sys_dnode_t *const prev = node->prev;
    7fb4:	00452703          	lw	a4,4(a0)
	prev->next = next;
    7fb8:	00f72023          	sw	a5,0(a4)
	next->prev = prev;
    7fbc:	00e7a223          	sw	a4,4(a5)
	node->next = NULL;
    7fc0:	00052023          	sw	zero,0(a0)
	node->prev = NULL;
    7fc4:	00052223          	sw	zero,4(a0)
}
    7fc8:	00008067          	ret

00007fcc <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    7fcc:	fe010113          	addi	sp,sp,-32
    7fd0:	00812c23          	sw	s0,24(sp)
    7fd4:	00912a23          	sw	s1,20(sp)
    7fd8:	01312623          	sw	s3,12(sp)
    7fdc:	00112e23          	sw	ra,28(sp)
    7fe0:	00068993          	mv	s3,a3
    7fe4:	01212823          	sw	s2,16(sp)
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7fe8:	fff00693          	li	a3,-1
{
    7fec:	00050413          	mv	s0,a0
    7ff0:	00060493          	mv	s1,a2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7ff4:	00d61463          	bne	a2,a3,7ffc <z_add_timeout+0x30>
    7ff8:	16c98463          	beq	s3,a2,8160 <z_add_timeout+0x194>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    7ffc:	00b42423          	sw	a1,8(s0)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    8000:	00800913          	li	s2,8
    8004:	30093973          	csrrc	s2,mstatus,s2

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    8008:	ffe00693          	li	a3,-2
    800c:	409687b3          	sub	a5,a3,s1
    8010:	00f6b733          	sltu	a4,a3,a5
    8014:	fff9c793          	not	a5,s3
    8018:	40e787b3          	sub	a5,a5,a4
	key = (mstatus & MSTATUS_IEN);
    801c:	00897913          	andi	s2,s2,8
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    8020:	0607ce63          	bltz	a5,809c <z_add_timeout+0xd0>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    8024:	0000e7b7          	lui	a5,0xe
    8028:	af878793          	addi	a5,a5,-1288 # daf8 <curr_tick>
    802c:	0007a703          	lw	a4,0(a5)
    8030:	0047a783          	lw	a5,4(a5)
    8034:	40e68733          	sub	a4,a3,a4
    8038:	00e6b6b3          	sltu	a3,a3,a4
    803c:	fff7c793          	not	a5,a5
    8040:	40d787b3          	sub	a5,a5,a3
    8044:	409704b3          	sub	s1,a4,s1
    8048:	00973733          	sltu	a4,a4,s1
    804c:	413786b3          	sub	a3,a5,s3

			to->dticks = MAX(1, ticks);
    8050:	40e686b3          	sub	a3,a3,a4
    8054:	00d04a63          	bgtz	a3,8068 <z_add_timeout+0x9c>
    8058:	00069463          	bnez	a3,8060 <z_add_timeout+0x94>
    805c:	00049663          	bnez	s1,8068 <z_add_timeout+0x9c>
    8060:	00100493          	li	s1,1
    8064:	00000693          	li	a3,0
    8068:	00942823          	sw	s1,16(s0)
	return list->head == list;
    806c:	0002f637          	lui	a2,0x2f
    8070:	c9060713          	addi	a4,a2,-880 # 2ec90 <timeout_list>
    8074:	00072783          	lw	a5,0(a4)
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    8078:	00d42a23          	sw	a3,20(s0)
    807c:	c9060613          	addi	a2,a2,-880
	sys_dnode_t *const tail = list->tail;
    8080:	00472803          	lw	a6,4(a4)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8084:	06c79263          	bne	a5,a2,80e8 <z_add_timeout+0x11c>
	node->next = list;
    8088:	00c42023          	sw	a2,0(s0)
	node->prev = tail;
    808c:	01042223          	sw	a6,4(s0)
	tail->next = node;
    8090:	00882023          	sw	s0,0(a6)
	list->tail = node;
    8094:	00862223          	sw	s0,4(a2)
}
    8098:	09c0006f          	j	8134 <z_add_timeout+0x168>
    809c:	e31ff0ef          	jal	ra,7ecc <elapsed>
    80a0:	00148793          	addi	a5,s1,1
    80a4:	0097b4b3          	sltu	s1,a5,s1
    80a8:	013486b3          	add	a3,s1,s3
    80ac:	41f55493          	srai	s1,a0,0x1f
    80b0:	00a78533          	add	a0,a5,a0
    80b4:	00f537b3          	sltu	a5,a0,a5
    80b8:	009686b3          	add	a3,a3,s1
    80bc:	00d786b3          	add	a3,a5,a3
    80c0:	00a42823          	sw	a0,16(s0)
    80c4:	fa9ff06f          	j	806c <z_add_timeout+0xa0>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    80c8:	40e68733          	sub	a4,a3,a4
    80cc:	00e6b6b3          	sltu	a3,a3,a4
    80d0:	40a585b3          	sub	a1,a1,a0
    80d4:	40d586b3          	sub	a3,a1,a3
    80d8:	00e42823          	sw	a4,16(s0)
    80dc:	00d42a23          	sw	a3,20(s0)
	return (node == list->tail) ? NULL : node->next;
    80e0:	faf804e3          	beq	a6,a5,8088 <z_add_timeout+0xbc>
    80e4:	0007a783          	lw	a5,0(a5)
		for (t = first(); t != NULL; t = next(t)) {
    80e8:	fa0780e3          	beqz	a5,8088 <z_add_timeout+0xbc>
			if (t->dticks > to->dticks) {
    80ec:	0147a503          	lw	a0,20(a5)
    80f0:	01442583          	lw	a1,20(s0)
    80f4:	0107a703          	lw	a4,16(a5)
    80f8:	01042683          	lw	a3,16(s0)
    80fc:	00a5c663          	blt	a1,a0,8108 <z_add_timeout+0x13c>
    8100:	fcb514e3          	bne	a0,a1,80c8 <z_add_timeout+0xfc>
    8104:	fce6f2e3          	bgeu	a3,a4,80c8 <z_add_timeout+0xfc>
				t->dticks -= to->dticks;
    8108:	40d706b3          	sub	a3,a4,a3
    810c:	00d73733          	sltu	a4,a4,a3
    8110:	40b505b3          	sub	a1,a0,a1
    8114:	40e58733          	sub	a4,a1,a4
    8118:	00e7aa23          	sw	a4,20(a5)
	sys_dnode_t *const prev = successor->prev;
    811c:	0047a703          	lw	a4,4(a5)
    8120:	00d7a823          	sw	a3,16(a5)
	node->next = successor;
    8124:	00f42023          	sw	a5,0(s0)
	node->prev = prev;
    8128:	00e42223          	sw	a4,4(s0)
	prev->next = node;
    812c:	00872023          	sw	s0,0(a4)
	successor->prev = node;
    8130:	0087a223          	sw	s0,4(a5)
	return list->head == list;
    8134:	00062783          	lw	a5,0(a2)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8138:	02c78263          	beq	a5,a2,815c <z_add_timeout+0x190>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    813c:	02f41063          	bne	s0,a5,815c <z_add_timeout+0x190>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    8140:	da5ff0ef          	jal	ra,7ee4 <next_timeout>

			if (next_time == 0 ||
    8144:	00050863          	beqz	a0,8154 <z_add_timeout+0x188>
			    _current_cpu->slice_ticks != next_time) {
    8148:	0000e7b7          	lui	a5,0xe
			if (next_time == 0 ||
    814c:	c987a783          	lw	a5,-872(a5) # dc98 <_kernel+0x10>
    8150:	00a78663          	beq	a5,a0,815c <z_add_timeout+0x190>
				sys_clock_set_timeout(next_time, false);
    8154:	00000593          	li	a1,0
    8158:	b9dfe0ef          	jal	ra,6cf4 <sys_clock_set_timeout>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    815c:	30092973          	csrrs	s2,mstatus,s2
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    8160:	01c12083          	lw	ra,28(sp)
    8164:	01812403          	lw	s0,24(sp)
    8168:	01412483          	lw	s1,20(sp)
    816c:	01012903          	lw	s2,16(sp)
    8170:	00c12983          	lw	s3,12(sp)
    8174:	02010113          	addi	sp,sp,32
    8178:	00008067          	ret

0000817c <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    817c:	ff010113          	addi	sp,sp,-16
    8180:	00812423          	sw	s0,8(sp)
    8184:	00112623          	sw	ra,12(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    8188:	00800413          	li	s0,8
    818c:	30043473          	csrrc	s0,mstatus,s0
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    8190:	00052783          	lw	a5,0(a0)
	key = (mstatus & MSTATUS_IEN);
    8194:	00847413          	andi	s0,s0,8
    8198:	02078063          	beqz	a5,81b8 <z_abort_timeout+0x3c>
			remove_timeout(to);
    819c:	dd9ff0ef          	jal	ra,7f74 <remove_timeout>
			ret = 0;
    81a0:	00000513          	li	a0,0
	__asm__ volatile ("csrrs %0, mstatus, %1"
    81a4:	30042473          	csrrs	s0,mstatus,s0
		}
	}

	return ret;
}
    81a8:	00c12083          	lw	ra,12(sp)
    81ac:	00812403          	lw	s0,8(sp)
    81b0:	01010113          	addi	sp,sp,16
    81b4:	00008067          	ret
	int ret = -EINVAL;
    81b8:	fea00513          	li	a0,-22
    81bc:	fe9ff06f          	j	81a4 <z_abort_timeout+0x28>

000081c0 <z_set_timeout_expiry>:
	}
	return ret;
}

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    81c0:	fe010113          	addi	sp,sp,-32
    81c4:	00812c23          	sw	s0,24(sp)
    81c8:	00912a23          	sw	s1,20(sp)
    81cc:	00112e23          	sw	ra,28(sp)
    81d0:	00050493          	mv	s1,a0
    81d4:	00b12623          	sw	a1,12(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    81d8:	00800413          	li	s0,8
    81dc:	30043473          	csrrc	s0,mstatus,s0
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    81e0:	d05ff0ef          	jal	ra,7ee4 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    81e4:	00100793          	li	a5,1
	key = (mstatus & MSTATUS_IEN);
    81e8:	00847413          	andi	s0,s0,8
    81ec:	00a7da63          	bge	a5,a0,8200 <z_set_timeout_expiry+0x40>
    81f0:	00c12583          	lw	a1,12(sp)
    81f4:	00954663          	blt	a0,s1,8200 <z_set_timeout_expiry+0x40>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    81f8:	00048513          	mv	a0,s1
    81fc:	af9fe0ef          	jal	ra,6cf4 <sys_clock_set_timeout>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    8200:	30042473          	csrrs	s0,mstatus,s0
		}
	}
}
    8204:	01c12083          	lw	ra,28(sp)
    8208:	01812403          	lw	s0,24(sp)
    820c:	01412483          	lw	s1,20(sp)
    8210:	02010113          	addi	sp,sp,32
    8214:	00008067          	ret

00008218 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    8218:	fd010113          	addi	sp,sp,-48
    821c:	02812423          	sw	s0,40(sp)
    8220:	02912223          	sw	s1,36(sp)
    8224:	02112623          	sw	ra,44(sp)
    8228:	03212023          	sw	s2,32(sp)
    822c:	01312e23          	sw	s3,28(sp)
    8230:	01412c23          	sw	s4,24(sp)
    8234:	00050493          	mv	s1,a0
	__asm__ volatile ("csrrc %0, mstatus, %1"
    8238:	00800413          	li	s0,8
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    823c:	f40ff0ef          	jal	ra,797c <z_time_slice>
    8240:	30043473          	csrrc	s0,mstatus,s0
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    8244:	0000e937          	lui	s2,0xe
    8248:	b2992223          	sw	s1,-1244(s2) # db24 <announce_remaining>
	return list->head == list;
    824c:	0002f9b7          	lui	s3,0x2f

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    8250:	0000e4b7          	lui	s1,0xe
	key = (mstatus & MSTATUS_IEN);
    8254:	00847413          	andi	s0,s0,8
	while (first() != NULL && first()->dticks <= announce_remaining) {
    8258:	b2490913          	addi	s2,s2,-1244
    825c:	c9098993          	addi	s3,s3,-880 # 2ec90 <timeout_list>
		curr_tick += dt;
    8260:	af848493          	addi	s1,s1,-1288 # daf8 <curr_tick>
	__asm__ volatile ("csrrc %0, mstatus, %1"
    8264:	00800a13          	li	s4,8
	while (first() != NULL && first()->dticks <= announce_remaining) {
    8268:	00092783          	lw	a5,0(s2)
    826c:	0009a503          	lw	a0,0(s3)
		curr_tick += dt;
    8270:	0004a683          	lw	a3,0(s1)
    8274:	0044a883          	lw	a7,4(s1)
    8278:	41f7d593          	srai	a1,a5,0x1f
	return sys_dlist_is_empty(list) ? NULL : list->head;
    827c:	03350a63          	beq	a0,s3,82b0 <sys_clock_announce+0x98>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    8280:	02050863          	beqz	a0,82b0 <sys_clock_announce+0x98>
    8284:	01452603          	lw	a2,20(a0)
    8288:	01052703          	lw	a4,16(a0)
    828c:	00c5c663          	blt	a1,a2,8298 <sys_clock_announce+0x80>
    8290:	06b61663          	bne	a2,a1,82fc <sys_clock_announce+0xe4>
    8294:	06e7f463          	bgeu	a5,a4,82fc <sys_clock_announce+0xe4>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    8298:	40f70833          	sub	a6,a4,a5
    829c:	01073733          	sltu	a4,a4,a6
    82a0:	40b60633          	sub	a2,a2,a1
    82a4:	40e60733          	sub	a4,a2,a4
    82a8:	01052823          	sw	a6,16(a0)
    82ac:	00e52a23          	sw	a4,20(a0)
	}

	curr_tick += announce_remaining;
    82b0:	00d786b3          	add	a3,a5,a3
    82b4:	011585b3          	add	a1,a1,a7
    82b8:	00f6b7b3          	sltu	a5,a3,a5
    82bc:	00b787b3          	add	a5,a5,a1
    82c0:	00d4a023          	sw	a3,0(s1)
    82c4:	00f4a223          	sw	a5,4(s1)
	announce_remaining = 0;
    82c8:	00092023          	sw	zero,0(s2)

	sys_clock_set_timeout(next_timeout(), false);
    82cc:	c19ff0ef          	jal	ra,7ee4 <next_timeout>
    82d0:	00000593          	li	a1,0
    82d4:	a21fe0ef          	jal	ra,6cf4 <sys_clock_set_timeout>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    82d8:	30042473          	csrrs	s0,mstatus,s0

	k_spin_unlock(&timeout_lock, key);
}
    82dc:	02c12083          	lw	ra,44(sp)
    82e0:	02812403          	lw	s0,40(sp)
    82e4:	02412483          	lw	s1,36(sp)
    82e8:	02012903          	lw	s2,32(sp)
    82ec:	01c12983          	lw	s3,28(sp)
    82f0:	01812a03          	lw	s4,24(sp)
    82f4:	03010113          	addi	sp,sp,48
    82f8:	00008067          	ret
		curr_tick += dt;
    82fc:	00d706b3          	add	a3,a4,a3
		announce_remaining -= dt;
    8300:	40e787b3          	sub	a5,a5,a4
		curr_tick += dt;
    8304:	41f75593          	srai	a1,a4,0x1f
    8308:	00e6b633          	sltu	a2,a3,a4
    830c:	011585b3          	add	a1,a1,a7
		announce_remaining -= dt;
    8310:	00f92023          	sw	a5,0(s2)
		t->dticks = 0;
    8314:	00000813          	li	a6,0
    8318:	00000793          	li	a5,0
		curr_tick += dt;
    831c:	00b605b3          	add	a1,a2,a1
		t->dticks = 0;
    8320:	00f52823          	sw	a5,16(a0)
    8324:	01052a23          	sw	a6,20(a0)
		curr_tick += dt;
    8328:	00d4a023          	sw	a3,0(s1)
    832c:	00b4a223          	sw	a1,4(s1)
		remove_timeout(t);
    8330:	00a12623          	sw	a0,12(sp)
    8334:	c41ff0ef          	jal	ra,7f74 <remove_timeout>
    8338:	30042473          	csrrs	s0,mstatus,s0
		t->fn(t);
    833c:	00c12503          	lw	a0,12(sp)
    8340:	00852783          	lw	a5,8(a0)
    8344:	000780e7          	jalr	a5
	__asm__ volatile ("csrrc %0, mstatus, %1"
    8348:	300a3473          	csrrc	s0,mstatus,s4
	key = (mstatus & MSTATUS_IEN);
    834c:	00847413          	andi	s0,s0,8
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    8350:	f19ff06f          	j	8268 <sys_clock_announce+0x50>

00008354 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    8354:	ff010113          	addi	sp,sp,-16
    8358:	00812423          	sw	s0,8(sp)
    835c:	00112623          	sw	ra,12(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    8360:	00800413          	li	s0,8
    8364:	30043473          	csrrc	s0,mstatus,s0
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    8368:	991fe0ef          	jal	ra,6cf8 <sys_clock_elapsed>
    836c:	0000e737          	lui	a4,0xe
    8370:	af870713          	addi	a4,a4,-1288 # daf8 <curr_tick>
    8374:	00050793          	mv	a5,a0
    8378:	00072503          	lw	a0,0(a4)
    837c:	00472583          	lw	a1,4(a4)
	key = (mstatus & MSTATUS_IEN);
    8380:	00847413          	andi	s0,s0,8
    8384:	00a78533          	add	a0,a5,a0
    8388:	00f537b3          	sltu	a5,a0,a5
    838c:	00b785b3          	add	a1,a5,a1
	__asm__ volatile ("csrrs %0, mstatus, %1"
    8390:	30042473          	csrrs	s0,mstatus,s0
	}
	return t;
}
    8394:	00c12083          	lw	ra,12(sp)
    8398:	00812403          	lw	s0,8(sp)
    839c:	01010113          	addi	sp,sp,16
    83a0:	00008067          	ret

000083a4 <z_impl_k_uptime_ticks>:
#endif
}

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    83a4:	fb1ff06f          	j	8354 <sys_clock_tick_get>

000083a8 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
    83a8:	ff010113          	addi	sp,sp,-16
    83ac:	00812423          	sw	s0,8(sp)
    83b0:	00912223          	sw	s1,4(sp)
    83b4:	00112623          	sw	ra,12(sp)
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    83b8:	fff00693          	li	a3,-1
{
    83bc:	00050493          	mv	s1,a0
    83c0:	00058413          	mv	s0,a1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    83c4:	00d51463          	bne	a0,a3,83cc <sys_clock_timeout_end_calc+0x24>
    83c8:	06a58a63          	beq	a1,a0,843c <sys_clock_timeout_end_calc+0x94>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    83cc:	009467b3          	or	a5,s0,s1
    83d0:	00079c63          	bnez	a5,83e8 <sys_clock_timeout_end_calc+0x40>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    83d4:	00812403          	lw	s0,8(sp)
    83d8:	00c12083          	lw	ra,12(sp)
    83dc:	00412483          	lw	s1,4(sp)
    83e0:	01010113          	addi	sp,sp,16
		return sys_clock_tick_get();
    83e4:	f71ff06f          	j	8354 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    83e8:	ffe00593          	li	a1,-2
    83ec:	40958533          	sub	a0,a1,s1
    83f0:	00a5b7b3          	sltu	a5,a1,a0
    83f4:	fff44593          	not	a1,s0
    83f8:	40f585b3          	sub	a1,a1,a5
    83fc:	0205d663          	bgez	a1,8428 <sys_clock_timeout_end_calc+0x80>
		return sys_clock_tick_get() + MAX(1, dt);
    8400:	f55ff0ef          	jal	ra,8354 <sys_clock_tick_get>
    8404:	00804a63          	bgtz	s0,8418 <sys_clock_timeout_end_calc+0x70>
    8408:	00041463          	bnez	s0,8410 <sys_clock_timeout_end_calc+0x68>
    840c:	00049663          	bnez	s1,8418 <sys_clock_timeout_end_calc+0x70>
    8410:	00100493          	li	s1,1
    8414:	00000413          	li	s0,0
    8418:	00a48533          	add	a0,s1,a0
    841c:	009534b3          	sltu	s1,a0,s1
    8420:	00b40433          	add	s0,s0,a1
    8424:	008485b3          	add	a1,s1,s0
}
    8428:	00c12083          	lw	ra,12(sp)
    842c:	00812403          	lw	s0,8(sp)
    8430:	00412483          	lw	s1,4(sp)
    8434:	01010113          	addi	sp,sp,16
    8438:	00008067          	ret
		return UINT64_MAX;
    843c:	fff00513          	li	a0,-1
    8440:	fff00593          	li	a1,-1
    8444:	fe5ff06f          	j	8428 <sys_clock_timeout_end_calc+0x80>

00008448 <z_impl_atomic_add>:
 * @param value the value to add
 *
 * @return The previous value from <target>
 */
atomic_val_t z_impl_atomic_add(atomic_t *target, atomic_val_t value)
{
    8448:	00050713          	mv	a4,a0
	__asm__ volatile ("csrrc %0, mstatus, %1"
    844c:	00800793          	li	a5,8
    8450:	3007b7f3          	csrrc	a5,mstatus,a5
	k_spinlock_key_t key;
	atomic_val_t ret;

	key = k_spin_lock(&lock);

	ret = *target;
    8454:	00052503          	lw	a0,0(a0)
	key = (mstatus & MSTATUS_IEN);
    8458:	0087f793          	andi	a5,a5,8
	*target += value;
    845c:	00b505b3          	add	a1,a0,a1
    8460:	00b72023          	sw	a1,0(a4)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    8464:	3007a7f3          	csrrs	a5,mstatus,a5

	k_spin_unlock(&lock, key);

	return ret;
}
    8468:	00008067          	ret

0000846c <z_heap_aligned_alloc>:
#include <string.h>
#include <sys/math_extras.h>
#include <sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
    846c:	00060793          	mv	a5,a2
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    8470:	00460613          	addi	a2,a2,4
    8474:	02f67063          	bgeu	a2,a5,8494 <z_heap_aligned_alloc+0x28>
	 * Merge a rewind bit with align value (see sys_heap_aligned_alloc()).
	 * This allows for storing the heap pointer right below the aligned
	 * boundary without wasting any memory.
	 */
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
    8478:	00000513          	li	a0,0
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
    847c:	00008067          	ret
		return NULL;
    8480:	00000513          	li	a0,0
}
    8484:	00c12083          	lw	ra,12(sp)
    8488:	00812403          	lw	s0,8(sp)
    848c:	01010113          	addi	sp,sp,16
    8490:	00008067          	ret
{
    8494:	ff010113          	addi	sp,sp,-16
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    8498:	00000693          	li	a3,0
    849c:	00000713          	li	a4,0
    84a0:	0045e593          	ori	a1,a1,4
{
    84a4:	00812423          	sw	s0,8(sp)
    84a8:	00112623          	sw	ra,12(sp)
    84ac:	00050413          	mv	s0,a0
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    84b0:	0c8000ef          	jal	ra,8578 <k_heap_aligned_alloc>
	if (mem == NULL) {
    84b4:	fc0506e3          	beqz	a0,8480 <z_heap_aligned_alloc+0x14>
	*heap_ref = heap;
    84b8:	00852023          	sw	s0,0(a0)
	mem = ++heap_ref;
    84bc:	00450513          	addi	a0,a0,4
	return mem;
    84c0:	fc5ff06f          	j	8484 <z_heap_aligned_alloc+0x18>

000084c4 <k_free>:

void k_free(void *ptr)
{
	struct k_heap **heap_ref;

	if (ptr != NULL) {
    84c4:	00050863          	beqz	a0,84d4 <k_free+0x10>
		heap_ref = ptr;
		ptr = --heap_ref;

		SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_free, *heap_ref);

		k_heap_free(*heap_ref, ptr);
    84c8:	ffc50593          	addi	a1,a0,-4
    84cc:	ffc52503          	lw	a0,-4(a0)
    84d0:	1a00006f          	j	8670 <k_heap_free>

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_free, *heap_ref);
	}
}
    84d4:	00008067          	ret

000084d8 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
    84d8:	00058613          	mv	a2,a1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
    84dc:	00050593          	mv	a1,a0
    84e0:	0002f537          	lui	a0,0x2f
    84e4:	eb050513          	addi	a0,a0,-336 # 2eeb0 <_system_heap>
    84e8:	f85ff06f          	j	846c <z_heap_aligned_alloc>

000084ec <k_malloc>:

	return ret;
}

void *k_malloc(size_t size)
{
    84ec:	00050593          	mv	a1,a0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_malloc, _SYSTEM_HEAP);

	void *ret = k_aligned_alloc(sizeof(void *), size);
    84f0:	00400513          	li	a0,4
    84f4:	fe5ff06f          	j	84d8 <k_aligned_alloc>

000084f8 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    84f8:	0000d637          	lui	a2,0xd
    84fc:	0000d5b7          	lui	a1,0xd
    8500:	0000d537          	lui	a0,0xd
    8504:	3fc60613          	addi	a2,a2,1020 # d3fc <__mprec_tens+0x184>
    8508:	75458593          	addi	a1,a1,1876 # d754 <levels.0+0x28>
    850c:	75c50513          	addi	a0,a0,1884 # d75c <levels.0+0x30>
    8510:	ba8fc06f          	j	48b8 <printk>

00008514 <k_heap_init>:
	sys_dlist_init(&w->waitq);
    8514:	00c50713          	addi	a4,a0,12
	list->head = (sys_dnode_t *)list;
    8518:	00e52623          	sw	a4,12(a0)
	list->tail = (sys_dnode_t *)list;
    851c:	00e52823          	sw	a4,16(a0)
#include <linker/linker-defs.h>

void k_heap_init(struct k_heap *h, void *mem, size_t bytes)
{
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
    8520:	e25fc06f          	j	5344 <sys_heap_init>

00008524 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    8524:	ff010113          	addi	sp,sp,-16
    8528:	00812423          	sw	s0,8(sp)
    852c:	00912223          	sw	s1,4(sp)
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    8530:	0002f437          	lui	s0,0x2f
    8534:	0002f4b7          	lui	s1,0x2f
{
    8538:	00112623          	sw	ra,12(sp)
	STRUCT_SECTION_FOREACH(k_heap, h) {
    853c:	eb040413          	addi	s0,s0,-336 # 2eeb0 <_system_heap>
    8540:	ec448493          	addi	s1,s1,-316 # 2eec4 <__lock___malloc_recursive_mutex>
    8544:	00946e63          	bltu	s0,s1,8560 <statics_init+0x3c>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    8548:	00c12083          	lw	ra,12(sp)
    854c:	00812403          	lw	s0,8(sp)
    8550:	00412483          	lw	s1,4(sp)
    8554:	00000513          	li	a0,0
    8558:	01010113          	addi	sp,sp,16
    855c:	00008067          	ret
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    8560:	00842603          	lw	a2,8(s0)
    8564:	00442583          	lw	a1,4(s0)
    8568:	00040513          	mv	a0,s0
	STRUCT_SECTION_FOREACH(k_heap, h) {
    856c:	01440413          	addi	s0,s0,20
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    8570:	fa5ff0ef          	jal	ra,8514 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    8574:	fd1ff06f          	j	8544 <statics_init+0x20>

00008578 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    8578:	fd010113          	addi	sp,sp,-48
    857c:	03212023          	sw	s2,32(sp)
    8580:	01412c23          	sw	s4,24(sp)
    8584:	00050913          	mv	s2,a0
    8588:	00058a13          	mv	s4,a1
    858c:	00068513          	mv	a0,a3
    8590:	00070593          	mv	a1,a4
    8594:	02812423          	sw	s0,40(sp)
    8598:	02912223          	sw	s1,36(sp)
    859c:	01312e23          	sw	s3,28(sp)
    85a0:	01512a23          	sw	s5,20(sp)
    85a4:	01612823          	sw	s6,16(sp)
    85a8:	02112623          	sw	ra,44(sp)
    85ac:	01712623          	sw	s7,12(sp)
    85b0:	01812423          	sw	s8,8(sp)
    85b4:	01912223          	sw	s9,4(sp)
    85b8:	00060a93          	mv	s5,a2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    85bc:	dedff0ef          	jal	ra,83a8 <sys_clock_timeout_end_calc>
    85c0:	00050493          	mv	s1,a0
    85c4:	00058993          	mv	s3,a1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    85c8:	01490b13          	addi	s6,s2,20
	__asm__ volatile ("csrrc %0, mstatus, %1"
    85cc:	00800413          	li	s0,8
    85d0:	30043473          	csrrc	s0,mstatus,s0
    85d4:	00800c13          	li	s8,8
	key = (mstatus & MSTATUS_IEN);
    85d8:	00847413          	andi	s0,s0,8
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    85dc:	00c90b93          	addi	s7,s2,12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    85e0:	000a8613          	mv	a2,s5
    85e4:	000a0593          	mv	a1,s4
    85e8:	00090513          	mv	a0,s2
    85ec:	b91fc0ef          	jal	ra,517c <sys_heap_aligned_alloc>
    85f0:	00050c93          	mv	s9,a0
		now = sys_clock_tick_get();
    85f4:	d61ff0ef          	jal	ra,8354 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    85f8:	040c8063          	beqz	s9,8638 <k_heap_aligned_alloc+0xc0>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    85fc:	30042473          	csrrs	s0,mstatus,s0

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    8600:	02c12083          	lw	ra,44(sp)
    8604:	02812403          	lw	s0,40(sp)
    8608:	02412483          	lw	s1,36(sp)
    860c:	02012903          	lw	s2,32(sp)
    8610:	01c12983          	lw	s3,28(sp)
    8614:	01812a03          	lw	s4,24(sp)
    8618:	01412a83          	lw	s5,20(sp)
    861c:	01012b03          	lw	s6,16(sp)
    8620:	00c12b83          	lw	s7,12(sp)
    8624:	00812c03          	lw	s8,8(sp)
    8628:	000c8513          	mv	a0,s9
    862c:	00412c83          	lw	s9,4(sp)
    8630:	03010113          	addi	sp,sp,48
    8634:	00008067          	ret
		    (ret != NULL) || ((end - now) <= 0)) {
    8638:	40a486b3          	sub	a3,s1,a0
    863c:	00d4b733          	sltu	a4,s1,a3
    8640:	40b985b3          	sub	a1,s3,a1
    8644:	40e58733          	sub	a4,a1,a4
    8648:	00e04663          	bgtz	a4,8654 <k_heap_aligned_alloc+0xdc>
    864c:	fa0718e3          	bnez	a4,85fc <k_heap_aligned_alloc+0x84>
    8650:	fa0686e3          	beqz	a3,85fc <k_heap_aligned_alloc+0x84>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    8654:	000b8613          	mv	a2,s7
    8658:	00040593          	mv	a1,s0
    865c:	000b0513          	mv	a0,s6
    8660:	becff0ef          	jal	ra,7a4c <z_pend_curr>
	__asm__ volatile ("csrrc %0, mstatus, %1"
    8664:	300c3473          	csrrc	s0,mstatus,s8
	key = (mstatus & MSTATUS_IEN);
    8668:	00847413          	andi	s0,s0,8
    866c:	f75ff06f          	j	85e0 <k_heap_aligned_alloc+0x68>

00008670 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
    8670:	ff010113          	addi	sp,sp,-16
    8674:	00812423          	sw	s0,8(sp)
    8678:	00912223          	sw	s1,4(sp)
    867c:	00112623          	sw	ra,12(sp)
    8680:	00050493          	mv	s1,a0
	__asm__ volatile ("csrrc %0, mstatus, %1"
    8684:	00800413          	li	s0,8
    8688:	30043473          	csrrc	s0,mstatus,s0
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
    868c:	9c1fc0ef          	jal	ra,504c <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
    8690:	00c48513          	addi	a0,s1,12
	key = (mstatus & MSTATUS_IEN);
    8694:	00847413          	andi	s0,s0,8
    8698:	ebcff0ef          	jal	ra,7d54 <z_unpend_all>
    869c:	02050063          	beqz	a0,86bc <k_heap_free+0x4c>
		z_reschedule(&h->lock, key);
    86a0:	00040593          	mv	a1,s0
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    86a4:	00812403          	lw	s0,8(sp)
    86a8:	00c12083          	lw	ra,12(sp)
		z_reschedule(&h->lock, key);
    86ac:	01448513          	addi	a0,s1,20
}
    86b0:	00412483          	lw	s1,4(sp)
    86b4:	01010113          	addi	sp,sp,16
		z_reschedule(&h->lock, key);
    86b8:	d14ff06f          	j	7bcc <z_reschedule>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    86bc:	30042473          	csrrs	s0,mstatus,s0
}
    86c0:	00c12083          	lw	ra,12(sp)
    86c4:	00812403          	lw	s0,8(sp)
    86c8:	00412483          	lw	s1,4(sp)
    86cc:	01010113          	addi	sp,sp,16
    86d0:	00008067          	ret

000086d4 <malloc>:
    86d4:	0002f7b7          	lui	a5,0x2f
    86d8:	00050593          	mv	a1,a0
    86dc:	c9c7a503          	lw	a0,-868(a5) # 2ec9c <_impure_ptr>
    86e0:	1080006f          	j	87e8 <_malloc_r>

000086e4 <_free_r>:
    86e4:	10058063          	beqz	a1,87e4 <_free_r+0x100>
    86e8:	ffc5a783          	lw	a5,-4(a1)
    86ec:	fe010113          	addi	sp,sp,-32
    86f0:	00812c23          	sw	s0,24(sp)
    86f4:	00112e23          	sw	ra,28(sp)
    86f8:	ffc58413          	addi	s0,a1,-4
    86fc:	0007d463          	bgez	a5,8704 <_free_r+0x20>
    8700:	00f40433          	add	s0,s0,a5
    8704:	00a12623          	sw	a0,12(sp)
    8708:	1d5020ef          	jal	ra,b0dc <__malloc_lock>
    870c:	0000e737          	lui	a4,0xe
    8710:	b2872783          	lw	a5,-1240(a4) # db28 <__malloc_free_list>
    8714:	00c12503          	lw	a0,12(sp)
    8718:	00070613          	mv	a2,a4
    871c:	00079e63          	bnez	a5,8738 <_free_r+0x54>
    8720:	00042223          	sw	zero,4(s0)
    8724:	b2872423          	sw	s0,-1240(a4)
    8728:	01812403          	lw	s0,24(sp)
    872c:	01c12083          	lw	ra,28(sp)
    8730:	02010113          	addi	sp,sp,32
    8734:	1b50206f          	j	b0e8 <__malloc_unlock>
    8738:	02f47663          	bgeu	s0,a5,8764 <_free_r+0x80>
    873c:	00042683          	lw	a3,0(s0)
    8740:	00d40733          	add	a4,s0,a3
    8744:	00e79a63          	bne	a5,a4,8758 <_free_r+0x74>
    8748:	0007a703          	lw	a4,0(a5)
    874c:	0047a783          	lw	a5,4(a5)
    8750:	00d70733          	add	a4,a4,a3
    8754:	00e42023          	sw	a4,0(s0)
    8758:	00f42223          	sw	a5,4(s0)
    875c:	b2862423          	sw	s0,-1240(a2)
    8760:	fc9ff06f          	j	8728 <_free_r+0x44>
    8764:	00078713          	mv	a4,a5
    8768:	0047a783          	lw	a5,4(a5)
    876c:	00078463          	beqz	a5,8774 <_free_r+0x90>
    8770:	fef47ae3          	bgeu	s0,a5,8764 <_free_r+0x80>
    8774:	00072683          	lw	a3,0(a4)
    8778:	00d70633          	add	a2,a4,a3
    877c:	02861863          	bne	a2,s0,87ac <_free_r+0xc8>
    8780:	00042603          	lw	a2,0(s0)
    8784:	00c686b3          	add	a3,a3,a2
    8788:	00d72023          	sw	a3,0(a4)
    878c:	00d70633          	add	a2,a4,a3
    8790:	f8c79ce3          	bne	a5,a2,8728 <_free_r+0x44>
    8794:	0007a603          	lw	a2,0(a5)
    8798:	0047a783          	lw	a5,4(a5)
    879c:	00d606b3          	add	a3,a2,a3
    87a0:	00d72023          	sw	a3,0(a4)
    87a4:	00f72223          	sw	a5,4(a4)
    87a8:	f81ff06f          	j	8728 <_free_r+0x44>
    87ac:	00c47863          	bgeu	s0,a2,87bc <_free_r+0xd8>
    87b0:	00c00793          	li	a5,12
    87b4:	00f52023          	sw	a5,0(a0)
    87b8:	f71ff06f          	j	8728 <_free_r+0x44>
    87bc:	00042603          	lw	a2,0(s0)
    87c0:	00c406b3          	add	a3,s0,a2
    87c4:	00d79a63          	bne	a5,a3,87d8 <_free_r+0xf4>
    87c8:	0007a683          	lw	a3,0(a5)
    87cc:	0047a783          	lw	a5,4(a5)
    87d0:	00c686b3          	add	a3,a3,a2
    87d4:	00d42023          	sw	a3,0(s0)
    87d8:	00f42223          	sw	a5,4(s0)
    87dc:	00872223          	sw	s0,4(a4)
    87e0:	f49ff06f          	j	8728 <_free_r+0x44>
    87e4:	00008067          	ret

000087e8 <_malloc_r>:
    87e8:	fe010113          	addi	sp,sp,-32
    87ec:	00912a23          	sw	s1,20(sp)
    87f0:	00358493          	addi	s1,a1,3
    87f4:	ffc4f493          	andi	s1,s1,-4
    87f8:	01212823          	sw	s2,16(sp)
    87fc:	00112e23          	sw	ra,28(sp)
    8800:	00812c23          	sw	s0,24(sp)
    8804:	01312623          	sw	s3,12(sp)
    8808:	00848493          	addi	s1,s1,8
    880c:	00c00793          	li	a5,12
    8810:	00050913          	mv	s2,a0
    8814:	06f4f863          	bgeu	s1,a5,8884 <_malloc_r+0x9c>
    8818:	00c00493          	li	s1,12
    881c:	06b4e663          	bltu	s1,a1,8888 <_malloc_r+0xa0>
    8820:	00090513          	mv	a0,s2
    8824:	0b9020ef          	jal	ra,b0dc <__malloc_lock>
    8828:	0000e7b7          	lui	a5,0xe
    882c:	b287a703          	lw	a4,-1240(a5) # db28 <__malloc_free_list>
    8830:	b2878693          	addi	a3,a5,-1240
    8834:	00070413          	mv	s0,a4
    8838:	06041c63          	bnez	s0,88b0 <_malloc_r+0xc8>
    883c:	0000e437          	lui	s0,0xe
    8840:	b2c40413          	addi	s0,s0,-1236 # db2c <__malloc_sbrk_start>
    8844:	00042783          	lw	a5,0(s0)
    8848:	00079a63          	bnez	a5,885c <_malloc_r+0x74>
    884c:	00000593          	li	a1,0
    8850:	00090513          	mv	a0,s2
    8854:	058010ef          	jal	ra,98ac <_sbrk_r>
    8858:	00a42023          	sw	a0,0(s0)
    885c:	00048593          	mv	a1,s1
    8860:	00090513          	mv	a0,s2
    8864:	048010ef          	jal	ra,98ac <_sbrk_r>
    8868:	fff00993          	li	s3,-1
    886c:	0b351a63          	bne	a0,s3,8920 <_malloc_r+0x138>
    8870:	00c00793          	li	a5,12
    8874:	00f92023          	sw	a5,0(s2)
    8878:	00090513          	mv	a0,s2
    887c:	06d020ef          	jal	ra,b0e8 <__malloc_unlock>
    8880:	0100006f          	j	8890 <_malloc_r+0xa8>
    8884:	f804dce3          	bgez	s1,881c <_malloc_r+0x34>
    8888:	00c00793          	li	a5,12
    888c:	00f92023          	sw	a5,0(s2)
    8890:	00000513          	li	a0,0
    8894:	01c12083          	lw	ra,28(sp)
    8898:	01812403          	lw	s0,24(sp)
    889c:	01412483          	lw	s1,20(sp)
    88a0:	01012903          	lw	s2,16(sp)
    88a4:	00c12983          	lw	s3,12(sp)
    88a8:	02010113          	addi	sp,sp,32
    88ac:	00008067          	ret
    88b0:	00042783          	lw	a5,0(s0)
    88b4:	409787b3          	sub	a5,a5,s1
    88b8:	0407ce63          	bltz	a5,8914 <_malloc_r+0x12c>
    88bc:	00b00613          	li	a2,11
    88c0:	00f67a63          	bgeu	a2,a5,88d4 <_malloc_r+0xec>
    88c4:	00f42023          	sw	a5,0(s0)
    88c8:	00f40433          	add	s0,s0,a5
    88cc:	00942023          	sw	s1,0(s0)
    88d0:	0100006f          	j	88e0 <_malloc_r+0xf8>
    88d4:	00442783          	lw	a5,4(s0)
    88d8:	02871a63          	bne	a4,s0,890c <_malloc_r+0x124>
    88dc:	00f6a023          	sw	a5,0(a3)
    88e0:	00090513          	mv	a0,s2
    88e4:	005020ef          	jal	ra,b0e8 <__malloc_unlock>
    88e8:	00b40513          	addi	a0,s0,11
    88ec:	00440793          	addi	a5,s0,4
    88f0:	ff857513          	andi	a0,a0,-8
    88f4:	40f50733          	sub	a4,a0,a5
    88f8:	f8f50ee3          	beq	a0,a5,8894 <_malloc_r+0xac>
    88fc:	00e40433          	add	s0,s0,a4
    8900:	40a787b3          	sub	a5,a5,a0
    8904:	00f42023          	sw	a5,0(s0)
    8908:	f8dff06f          	j	8894 <_malloc_r+0xac>
    890c:	00f72223          	sw	a5,4(a4)
    8910:	fd1ff06f          	j	88e0 <_malloc_r+0xf8>
    8914:	00040713          	mv	a4,s0
    8918:	00442403          	lw	s0,4(s0)
    891c:	f1dff06f          	j	8838 <_malloc_r+0x50>
    8920:	00350413          	addi	s0,a0,3
    8924:	ffc47413          	andi	s0,s0,-4
    8928:	fa8502e3          	beq	a0,s0,88cc <_malloc_r+0xe4>
    892c:	40a405b3          	sub	a1,s0,a0
    8930:	00090513          	mv	a0,s2
    8934:	779000ef          	jal	ra,98ac <_sbrk_r>
    8938:	f9351ae3          	bne	a0,s3,88cc <_malloc_r+0xe4>
    893c:	f35ff06f          	j	8870 <_malloc_r+0x88>

00008940 <__cvt>:
    8940:	fd010113          	addi	sp,sp,-48
    8944:	02812423          	sw	s0,40(sp)
    8948:	03212023          	sw	s2,32(sp)
    894c:	01412c23          	sw	s4,24(sp)
    8950:	01512a23          	sw	s5,20(sp)
    8954:	01612823          	sw	s6,16(sp)
    8958:	02112623          	sw	ra,44(sp)
    895c:	02912223          	sw	s1,36(sp)
    8960:	01312e23          	sw	s3,28(sp)
    8964:	00070b13          	mv	s6,a4
    8968:	00058a13          	mv	s4,a1
    896c:	00060413          	mv	s0,a2
    8970:	00068913          	mv	s2,a3
    8974:	00080a93          	mv	s5,a6
    8978:	00000713          	li	a4,0
    897c:	00065863          	bgez	a2,898c <__cvt+0x4c>
    8980:	80000737          	lui	a4,0x80000
    8984:	00c74433          	xor	s0,a4,a2
    8988:	02d00713          	li	a4,45
    898c:	00e78023          	sb	a4,0(a5)
    8990:	fdf8f493          	andi	s1,a7,-33
    8994:	04600793          	li	a5,70
    8998:	00300693          	li	a3,3
    899c:	00f48a63          	beq	s1,a5,89b0 <__cvt+0x70>
    89a0:	04500793          	li	a5,69
    89a4:	00200693          	li	a3,2
    89a8:	00f49463          	bne	s1,a5,89b0 <__cvt+0x70>
    89ac:	00190913          	addi	s2,s2,1
    89b0:	000a8793          	mv	a5,s5
    89b4:	00c10893          	addi	a7,sp,12
    89b8:	00810813          	addi	a6,sp,8
    89bc:	00090713          	mv	a4,s2
    89c0:	000a0593          	mv	a1,s4
    89c4:	00040613          	mv	a2,s0
    89c8:	174010ef          	jal	ra,9b3c <_dtoa_r>
    89cc:	04700793          	li	a5,71
    89d0:	00050993          	mv	s3,a0
    89d4:	00f49663          	bne	s1,a5,89e0 <__cvt+0xa0>
    89d8:	001b7613          	andi	a2,s6,1
    89dc:	06060863          	beqz	a2,8a4c <__cvt+0x10c>
    89e0:	04600793          	li	a5,70
    89e4:	01298b33          	add	s6,s3,s2
    89e8:	02f49e63          	bne	s1,a5,8a24 <__cvt+0xe4>
    89ec:	0009c703          	lbu	a4,0(s3)
    89f0:	03000793          	li	a5,48
    89f4:	02f71463          	bne	a4,a5,8a1c <__cvt+0xdc>
    89f8:	00000613          	li	a2,0
    89fc:	00000693          	li	a3,0
    8a00:	000a0513          	mv	a0,s4
    8a04:	00040593          	mv	a1,s0
    8a08:	8b0fb0ef          	jal	ra,3ab8 <__eqdf2>
    8a0c:	00050863          	beqz	a0,8a1c <__cvt+0xdc>
    8a10:	00100613          	li	a2,1
    8a14:	412606b3          	sub	a3,a2,s2
    8a18:	00daa023          	sw	a3,0(s5)
    8a1c:	000aa783          	lw	a5,0(s5)
    8a20:	00fb0b33          	add	s6,s6,a5
    8a24:	00000613          	li	a2,0
    8a28:	00000693          	li	a3,0
    8a2c:	000a0513          	mv	a0,s4
    8a30:	00040593          	mv	a1,s0
    8a34:	884fb0ef          	jal	ra,3ab8 <__eqdf2>
    8a38:	00051463          	bnez	a0,8a40 <__cvt+0x100>
    8a3c:	01612623          	sw	s6,12(sp)
    8a40:	03000713          	li	a4,48
    8a44:	00c12783          	lw	a5,12(sp)
    8a48:	0567e063          	bltu	a5,s6,8a88 <__cvt+0x148>
    8a4c:	00c12783          	lw	a5,12(sp)
    8a50:	03012703          	lw	a4,48(sp)
    8a54:	02c12083          	lw	ra,44(sp)
    8a58:	02812403          	lw	s0,40(sp)
    8a5c:	413787b3          	sub	a5,a5,s3
    8a60:	00f72023          	sw	a5,0(a4) # 80000000 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000001>
    8a64:	02412483          	lw	s1,36(sp)
    8a68:	02012903          	lw	s2,32(sp)
    8a6c:	01812a03          	lw	s4,24(sp)
    8a70:	01412a83          	lw	s5,20(sp)
    8a74:	01012b03          	lw	s6,16(sp)
    8a78:	00098513          	mv	a0,s3
    8a7c:	01c12983          	lw	s3,28(sp)
    8a80:	03010113          	addi	sp,sp,48
    8a84:	00008067          	ret
    8a88:	00178693          	addi	a3,a5,1
    8a8c:	00d12623          	sw	a3,12(sp)
    8a90:	00e78023          	sb	a4,0(a5)
    8a94:	fb1ff06f          	j	8a44 <__cvt+0x104>

00008a98 <__exponent>:
    8a98:	00c50023          	sb	a2,0(a0)
    8a9c:	00250793          	addi	a5,a0,2
    8aa0:	02b00713          	li	a4,43
    8aa4:	0005d663          	bgez	a1,8ab0 <__exponent+0x18>
    8aa8:	40b005b3          	neg	a1,a1
    8aac:	02d00713          	li	a4,45
    8ab0:	00e500a3          	sb	a4,1(a0)
    8ab4:	00900713          	li	a4,9
    8ab8:	08b75263          	bge	a4,a1,8b3c <__exponent+0xa4>
    8abc:	ff010113          	addi	sp,sp,-16
    8ac0:	00f10713          	addi	a4,sp,15
    8ac4:	00070813          	mv	a6,a4
    8ac8:	00a00893          	li	a7,10
    8acc:	06300313          	li	t1,99
    8ad0:	0315e633          	rem	a2,a1,a7
    8ad4:	00070693          	mv	a3,a4
    8ad8:	fff70713          	addi	a4,a4,-1
    8adc:	03060613          	addi	a2,a2,48
    8ae0:	fec68fa3          	sb	a2,-1(a3)
    8ae4:	00058613          	mv	a2,a1
    8ae8:	0315c5b3          	div	a1,a1,a7
    8aec:	fec342e3          	blt	t1,a2,8ad0 <__exponent+0x38>
    8af0:	ffe68893          	addi	a7,a3,-2
    8af4:	03058593          	addi	a1,a1,48
    8af8:	feb70fa3          	sb	a1,-1(a4)
    8afc:	00078613          	mv	a2,a5
    8b00:	00088713          	mv	a4,a7
    8b04:	03076263          	bltu	a4,a6,8b28 <__exponent+0x90>
    8b08:	00000713          	li	a4,0
    8b0c:	01186663          	bltu	a6,a7,8b18 <__exponent+0x80>
    8b10:	01110713          	addi	a4,sp,17
    8b14:	40d70733          	sub	a4,a4,a3
    8b18:	00e787b3          	add	a5,a5,a4
    8b1c:	40a78533          	sub	a0,a5,a0
    8b20:	01010113          	addi	sp,sp,16
    8b24:	00008067          	ret
    8b28:	00074583          	lbu	a1,0(a4)
    8b2c:	00170713          	addi	a4,a4,1
    8b30:	00160613          	addi	a2,a2,1
    8b34:	feb60fa3          	sb	a1,-1(a2)
    8b38:	fcdff06f          	j	8b04 <__exponent+0x6c>
    8b3c:	03000793          	li	a5,48
    8b40:	00f50123          	sb	a5,2(a0)
    8b44:	03058593          	addi	a1,a1,48
    8b48:	00450793          	addi	a5,a0,4
    8b4c:	00b501a3          	sb	a1,3(a0)
    8b50:	40a78533          	sub	a0,a5,a0
    8b54:	00008067          	ret

00008b58 <_printf_float>:
    8b58:	f8010113          	addi	sp,sp,-128
    8b5c:	06112e23          	sw	ra,124(sp)
    8b60:	06812c23          	sw	s0,120(sp)
    8b64:	06912a23          	sw	s1,116(sp)
    8b68:	00058413          	mv	s0,a1
    8b6c:	07212823          	sw	s2,112(sp)
    8b70:	07312623          	sw	s3,108(sp)
    8b74:	07412423          	sw	s4,104(sp)
    8b78:	07512223          	sw	s5,100(sp)
    8b7c:	00070a13          	mv	s4,a4
    8b80:	07612023          	sw	s6,96(sp)
    8b84:	05712e23          	sw	s7,92(sp)
    8b88:	05812c23          	sw	s8,88(sp)
    8b8c:	00060913          	mv	s2,a2
    8b90:	00068993          	mv	s3,a3
    8b94:	05912a23          	sw	s9,84(sp)
    8b98:	05a12823          	sw	s10,80(sp)
    8b9c:	05b12623          	sw	s11,76(sp)
    8ba0:	00050493          	mv	s1,a0
    8ba4:	508020ef          	jal	ra,b0ac <_localeconv_r>
    8ba8:	00052c03          	lw	s8,0(a0)
    8bac:	000c0513          	mv	a0,s8
    8bb0:	549000ef          	jal	ra,98f8 <strlen>
    8bb4:	00042b03          	lw	s6,0(s0)
    8bb8:	02012c23          	sw	zero,56(sp)
    8bbc:	01844a83          	lbu	s5,24(s0)
    8bc0:	100b7713          	andi	a4,s6,256
    8bc4:	000a2783          	lw	a5,0(s4)
    8bc8:	00050b93          	mv	s7,a0
    8bcc:	12070c63          	beqz	a4,8d04 <_printf_float+0x1ac>
    8bd0:	00478713          	addi	a4,a5,4
    8bd4:	00ea2023          	sw	a4,0(s4)
    8bd8:	0007a783          	lw	a5,0(a5)
    8bdc:	02010513          	addi	a0,sp,32
    8be0:	0007a703          	lw	a4,0(a5)
    8be4:	02e12023          	sw	a4,32(sp)
    8be8:	0047a703          	lw	a4,4(a5)
    8bec:	02e12223          	sw	a4,36(sp)
    8bf0:	0087a703          	lw	a4,8(a5)
    8bf4:	02e12423          	sw	a4,40(sp)
    8bf8:	00c7a783          	lw	a5,12(a5)
    8bfc:	02f12623          	sw	a5,44(sp)
    8c00:	99cfb0ef          	jal	ra,3d9c <__trunctfdf2>
    8c04:	04a42423          	sw	a0,72(s0)
    8c08:	04b42623          	sw	a1,76(s0)
    8c0c:	04c42a03          	lw	s4,76(s0)
    8c10:	0000d737          	lui	a4,0xd
    8c14:	04842c83          	lw	s9,72(s0)
    8c18:	ff872d03          	lw	s10,-8(a4) # cff8 <__device_handles_end+0x8>
    8c1c:	ffc72d83          	lw	s11,-4(a4)
    8c20:	001a1793          	slli	a5,s4,0x1
    8c24:	0017d793          	srli	a5,a5,0x1
    8c28:	000d0613          	mv	a2,s10
    8c2c:	000d8693          	mv	a3,s11
    8c30:	000c8513          	mv	a0,s9
    8c34:	00078593          	mv	a1,a5
    8c38:	00f12e23          	sw	a5,28(sp)
    8c3c:	fedfa0ef          	jal	ra,3c28 <__unorddf2>
    8c40:	0e051463          	bnez	a0,8d28 <_printf_float+0x1d0>
    8c44:	01c12783          	lw	a5,28(sp)
    8c48:	000d0613          	mv	a2,s10
    8c4c:	000d8693          	mv	a3,s11
    8c50:	000c8513          	mv	a0,s9
    8c54:	00078593          	mv	a1,a5
    8c58:	eedfa0ef          	jal	ra,3b44 <__ledf2>
    8c5c:	0ca05663          	blez	a0,8d28 <_printf_float+0x1d0>
    8c60:	00000613          	li	a2,0
    8c64:	00000693          	li	a3,0
    8c68:	000c8513          	mv	a0,s9
    8c6c:	000a0593          	mv	a1,s4
    8c70:	ed5fa0ef          	jal	ra,3b44 <__ledf2>
    8c74:	00055663          	bgez	a0,8c80 <_printf_float+0x128>
    8c78:	02d00793          	li	a5,45
    8c7c:	04f401a3          	sb	a5,67(s0)
    8c80:	04700793          	li	a5,71
    8c84:	0d57fe63          	bgeu	a5,s5,8d60 <_printf_float+0x208>
    8c88:	0000ea37          	lui	s4,0xe
    8c8c:	88ca0a13          	addi	s4,s4,-1908 # d88c <_ctype_+0x108>
    8c90:	ffbb7b13          	andi	s6,s6,-5
    8c94:	00300793          	li	a5,3
    8c98:	01642023          	sw	s6,0(s0)
    8c9c:	00f42823          	sw	a5,16(s0)
    8ca0:	00000b13          	li	s6,0
    8ca4:	00098713          	mv	a4,s3
    8ca8:	00090693          	mv	a3,s2
    8cac:	03c10613          	addi	a2,sp,60
    8cb0:	00040593          	mv	a1,s0
    8cb4:	00048513          	mv	a0,s1
    8cb8:	634000ef          	jal	ra,92ec <_printf_common>
    8cbc:	fff00c93          	li	s9,-1
    8cc0:	23951a63          	bne	a0,s9,8ef4 <_printf_float+0x39c>
    8cc4:	fff00513          	li	a0,-1
    8cc8:	07c12083          	lw	ra,124(sp)
    8ccc:	07812403          	lw	s0,120(sp)
    8cd0:	07412483          	lw	s1,116(sp)
    8cd4:	07012903          	lw	s2,112(sp)
    8cd8:	06c12983          	lw	s3,108(sp)
    8cdc:	06812a03          	lw	s4,104(sp)
    8ce0:	06412a83          	lw	s5,100(sp)
    8ce4:	06012b03          	lw	s6,96(sp)
    8ce8:	05c12b83          	lw	s7,92(sp)
    8cec:	05812c03          	lw	s8,88(sp)
    8cf0:	05412c83          	lw	s9,84(sp)
    8cf4:	05012d03          	lw	s10,80(sp)
    8cf8:	04c12d83          	lw	s11,76(sp)
    8cfc:	08010113          	addi	sp,sp,128
    8d00:	00008067          	ret
    8d04:	00778793          	addi	a5,a5,7
    8d08:	ff87f793          	andi	a5,a5,-8
    8d0c:	00878713          	addi	a4,a5,8
    8d10:	00ea2023          	sw	a4,0(s4)
    8d14:	0007a703          	lw	a4,0(a5)
    8d18:	0047a783          	lw	a5,4(a5)
    8d1c:	04e42423          	sw	a4,72(s0)
    8d20:	04f42623          	sw	a5,76(s0)
    8d24:	ee9ff06f          	j	8c0c <_printf_float+0xb4>
    8d28:	000c8613          	mv	a2,s9
    8d2c:	000a0693          	mv	a3,s4
    8d30:	000c8513          	mv	a0,s9
    8d34:	000a0593          	mv	a1,s4
    8d38:	ef1fa0ef          	jal	ra,3c28 <__unorddf2>
    8d3c:	02050e63          	beqz	a0,8d78 <_printf_float+0x220>
    8d40:	000a5663          	bgez	s4,8d4c <_printf_float+0x1f4>
    8d44:	02d00793          	li	a5,45
    8d48:	04f401a3          	sb	a5,67(s0)
    8d4c:	04700793          	li	a5,71
    8d50:	0157fe63          	bgeu	a5,s5,8d6c <_printf_float+0x214>
    8d54:	0000ea37          	lui	s4,0xe
    8d58:	894a0a13          	addi	s4,s4,-1900 # d894 <_ctype_+0x110>
    8d5c:	f35ff06f          	j	8c90 <_printf_float+0x138>
    8d60:	0000ea37          	lui	s4,0xe
    8d64:	888a0a13          	addi	s4,s4,-1912 # d888 <_ctype_+0x104>
    8d68:	f29ff06f          	j	8c90 <_printf_float+0x138>
    8d6c:	0000ea37          	lui	s4,0xe
    8d70:	890a0a13          	addi	s4,s4,-1904 # d890 <_ctype_+0x10c>
    8d74:	f1dff06f          	j	8c90 <_printf_float+0x138>
    8d78:	00442783          	lw	a5,4(s0)
    8d7c:	fff00713          	li	a4,-1
    8d80:	0dfafd13          	andi	s10,s5,223
    8d84:	0ce79263          	bne	a5,a4,8e48 <_printf_float+0x2f0>
    8d88:	00600793          	li	a5,6
    8d8c:	00f42223          	sw	a5,4(s0)
    8d90:	00442683          	lw	a3,4(s0)
    8d94:	400b6713          	ori	a4,s6,1024
    8d98:	03810793          	addi	a5,sp,56
    8d9c:	00f12023          	sw	a5,0(sp)
    8da0:	000a0613          	mv	a2,s4
    8da4:	03310793          	addi	a5,sp,51
    8da8:	000c8593          	mv	a1,s9
    8dac:	00e42023          	sw	a4,0(s0)
    8db0:	00012223          	sw	zero,4(sp)
    8db4:	000a8893          	mv	a7,s5
    8db8:	03410813          	addi	a6,sp,52
    8dbc:	00048513          	mv	a0,s1
    8dc0:	b81ff0ef          	jal	ra,8940 <__cvt>
    8dc4:	04700793          	li	a5,71
    8dc8:	03412583          	lw	a1,52(sp)
    8dcc:	00050a13          	mv	s4,a0
    8dd0:	00fd1e63          	bne	s10,a5,8dec <_printf_float+0x294>
    8dd4:	ffd00793          	li	a5,-3
    8dd8:	00f5c663          	blt	a1,a5,8de4 <_printf_float+0x28c>
    8ddc:	00442783          	lw	a5,4(s0)
    8de0:	0cb7dc63          	bge	a5,a1,8eb8 <_printf_float+0x360>
    8de4:	ffea8a93          	addi	s5,s5,-2
    8de8:	0ffafa93          	andi	s5,s5,255
    8dec:	06500793          	li	a5,101
    8df0:	0757e663          	bltu	a5,s5,8e5c <_printf_float+0x304>
    8df4:	fff58593          	addi	a1,a1,-1
    8df8:	000a8613          	mv	a2,s5
    8dfc:	05040513          	addi	a0,s0,80
    8e00:	02b12a23          	sw	a1,52(sp)
    8e04:	c95ff0ef          	jal	ra,8a98 <__exponent>
    8e08:	03812703          	lw	a4,56(sp)
    8e0c:	00100693          	li	a3,1
    8e10:	00050b13          	mv	s6,a0
    8e14:	00a707b3          	add	a5,a4,a0
    8e18:	00f42823          	sw	a5,16(s0)
    8e1c:	00e6c863          	blt	a3,a4,8e2c <_printf_float+0x2d4>
    8e20:	00042703          	lw	a4,0(s0)
    8e24:	00177713          	andi	a4,a4,1
    8e28:	00070663          	beqz	a4,8e34 <_printf_float+0x2dc>
    8e2c:	00178793          	addi	a5,a5,1
    8e30:	00f42823          	sw	a5,16(s0)
    8e34:	03314783          	lbu	a5,51(sp)
    8e38:	e60786e3          	beqz	a5,8ca4 <_printf_float+0x14c>
    8e3c:	02d00793          	li	a5,45
    8e40:	04f401a3          	sb	a5,67(s0)
    8e44:	e61ff06f          	j	8ca4 <_printf_float+0x14c>
    8e48:	04700713          	li	a4,71
    8e4c:	f4ed12e3          	bne	s10,a4,8d90 <_printf_float+0x238>
    8e50:	f40790e3          	bnez	a5,8d90 <_printf_float+0x238>
    8e54:	00100793          	li	a5,1
    8e58:	f35ff06f          	j	8d8c <_printf_float+0x234>
    8e5c:	06600793          	li	a5,102
    8e60:	04fa9e63          	bne	s5,a5,8ebc <_printf_float+0x364>
    8e64:	00442783          	lw	a5,4(s0)
    8e68:	02b05463          	blez	a1,8e90 <_printf_float+0x338>
    8e6c:	00b42823          	sw	a1,16(s0)
    8e70:	00079863          	bnez	a5,8e80 <_printf_float+0x328>
    8e74:	00042703          	lw	a4,0(s0)
    8e78:	00177713          	andi	a4,a4,1
    8e7c:	02070863          	beqz	a4,8eac <_printf_float+0x354>
    8e80:	00178793          	addi	a5,a5,1
    8e84:	00b787b3          	add	a5,a5,a1
    8e88:	00f42823          	sw	a5,16(s0)
    8e8c:	0200006f          	j	8eac <_printf_float+0x354>
    8e90:	00079a63          	bnez	a5,8ea4 <_printf_float+0x34c>
    8e94:	00042703          	lw	a4,0(s0)
    8e98:	00100693          	li	a3,1
    8e9c:	00177713          	andi	a4,a4,1
    8ea0:	00070463          	beqz	a4,8ea8 <_printf_float+0x350>
    8ea4:	00278693          	addi	a3,a5,2
    8ea8:	00d42823          	sw	a3,16(s0)
    8eac:	04b42c23          	sw	a1,88(s0)
    8eb0:	00000b13          	li	s6,0
    8eb4:	f81ff06f          	j	8e34 <_printf_float+0x2dc>
    8eb8:	06700a93          	li	s5,103
    8ebc:	03812783          	lw	a5,56(sp)
    8ec0:	00f5ce63          	blt	a1,a5,8edc <_printf_float+0x384>
    8ec4:	00042783          	lw	a5,0(s0)
    8ec8:	00b42823          	sw	a1,16(s0)
    8ecc:	0017f793          	andi	a5,a5,1
    8ed0:	fc078ee3          	beqz	a5,8eac <_printf_float+0x354>
    8ed4:	00158793          	addi	a5,a1,1
    8ed8:	fb1ff06f          	j	8e88 <_printf_float+0x330>
    8edc:	00100713          	li	a4,1
    8ee0:	00b04663          	bgtz	a1,8eec <_printf_float+0x394>
    8ee4:	00200713          	li	a4,2
    8ee8:	40b70733          	sub	a4,a4,a1
    8eec:	00e787b3          	add	a5,a5,a4
    8ef0:	f99ff06f          	j	8e88 <_printf_float+0x330>
    8ef4:	00042783          	lw	a5,0(s0)
    8ef8:	4007f713          	andi	a4,a5,1024
    8efc:	02071e63          	bnez	a4,8f38 <_printf_float+0x3e0>
    8f00:	01042683          	lw	a3,16(s0)
    8f04:	000a0613          	mv	a2,s4
    8f08:	00090593          	mv	a1,s2
    8f0c:	00048513          	mv	a0,s1
    8f10:	000980e7          	jalr	s3
    8f14:	db9508e3          	beq	a0,s9,8cc4 <_printf_float+0x16c>
    8f18:	00042783          	lw	a5,0(s0)
    8f1c:	0027f793          	andi	a5,a5,2
    8f20:	3a079e63          	bnez	a5,92dc <_printf_float+0x784>
    8f24:	03c12783          	lw	a5,60(sp)
    8f28:	00c42503          	lw	a0,12(s0)
    8f2c:	d8f55ee3          	bge	a0,a5,8cc8 <_printf_float+0x170>
    8f30:	00078513          	mv	a0,a5
    8f34:	d95ff06f          	j	8cc8 <_printf_float+0x170>
    8f38:	06500713          	li	a4,101
    8f3c:	29577863          	bgeu	a4,s5,91cc <_printf_float+0x674>
    8f40:	04842503          	lw	a0,72(s0)
    8f44:	04c42583          	lw	a1,76(s0)
    8f48:	00000613          	li	a2,0
    8f4c:	00000693          	li	a3,0
    8f50:	b69fa0ef          	jal	ra,3ab8 <__eqdf2>
    8f54:	08051663          	bnez	a0,8fe0 <_printf_float+0x488>
    8f58:	0000d637          	lui	a2,0xd
    8f5c:	00100693          	li	a3,1
    8f60:	70860613          	addi	a2,a2,1800 # d708 <gpio_veerwolf_driver_api+0x28>
    8f64:	00090593          	mv	a1,s2
    8f68:	00048513          	mv	a0,s1
    8f6c:	000980e7          	jalr	s3
    8f70:	d5950ae3          	beq	a0,s9,8cc4 <_printf_float+0x16c>
    8f74:	03412703          	lw	a4,52(sp)
    8f78:	03812783          	lw	a5,56(sp)
    8f7c:	00f74863          	blt	a4,a5,8f8c <_printf_float+0x434>
    8f80:	00042783          	lw	a5,0(s0)
    8f84:	0017f793          	andi	a5,a5,1
    8f88:	f80788e3          	beqz	a5,8f18 <_printf_float+0x3c0>
    8f8c:	000b8693          	mv	a3,s7
    8f90:	000c0613          	mv	a2,s8
    8f94:	00090593          	mv	a1,s2
    8f98:	00048513          	mv	a0,s1
    8f9c:	000980e7          	jalr	s3
    8fa0:	fff00793          	li	a5,-1
    8fa4:	d2f500e3          	beq	a0,a5,8cc4 <_printf_float+0x16c>
    8fa8:	00000a13          	li	s4,0
    8fac:	01a40a93          	addi	s5,s0,26
    8fb0:	fff00b13          	li	s6,-1
    8fb4:	03812783          	lw	a5,56(sp)
    8fb8:	fff78793          	addi	a5,a5,-1
    8fbc:	f4fa5ee3          	bge	s4,a5,8f18 <_printf_float+0x3c0>
    8fc0:	00100693          	li	a3,1
    8fc4:	000a8613          	mv	a2,s5
    8fc8:	00090593          	mv	a1,s2
    8fcc:	00048513          	mv	a0,s1
    8fd0:	000980e7          	jalr	s3
    8fd4:	cf6508e3          	beq	a0,s6,8cc4 <_printf_float+0x16c>
    8fd8:	001a0a13          	addi	s4,s4,1
    8fdc:	fd9ff06f          	j	8fb4 <_printf_float+0x45c>
    8fe0:	03412783          	lw	a5,52(sp)
    8fe4:	0af04863          	bgtz	a5,9094 <_printf_float+0x53c>
    8fe8:	0000d637          	lui	a2,0xd
    8fec:	00100693          	li	a3,1
    8ff0:	70860613          	addi	a2,a2,1800 # d708 <gpio_veerwolf_driver_api+0x28>
    8ff4:	00090593          	mv	a1,s2
    8ff8:	00048513          	mv	a0,s1
    8ffc:	000980e7          	jalr	s3
    9000:	cd9502e3          	beq	a0,s9,8cc4 <_printf_float+0x16c>
    9004:	03412783          	lw	a5,52(sp)
    9008:	03812703          	lw	a4,56(sp)
    900c:	00e7e7b3          	or	a5,a5,a4
    9010:	00079863          	bnez	a5,9020 <_printf_float+0x4c8>
    9014:	00042783          	lw	a5,0(s0)
    9018:	0017f793          	andi	a5,a5,1
    901c:	ee078ee3          	beqz	a5,8f18 <_printf_float+0x3c0>
    9020:	000b8693          	mv	a3,s7
    9024:	000c0613          	mv	a2,s8
    9028:	00090593          	mv	a1,s2
    902c:	00048513          	mv	a0,s1
    9030:	000980e7          	jalr	s3
    9034:	fff00793          	li	a5,-1
    9038:	c8f506e3          	beq	a0,a5,8cc4 <_printf_float+0x16c>
    903c:	00000a93          	li	s5,0
    9040:	01a40b13          	addi	s6,s0,26
    9044:	fff00b93          	li	s7,-1
    9048:	03412783          	lw	a5,52(sp)
    904c:	40f007b3          	neg	a5,a5
    9050:	02fac263          	blt	s5,a5,9074 <_printf_float+0x51c>
    9054:	03812683          	lw	a3,56(sp)
    9058:	000a0613          	mv	a2,s4
    905c:	00090593          	mv	a1,s2
    9060:	00048513          	mv	a0,s1
    9064:	000980e7          	jalr	s3
    9068:	fff00793          	li	a5,-1
    906c:	eaf516e3          	bne	a0,a5,8f18 <_printf_float+0x3c0>
    9070:	c55ff06f          	j	8cc4 <_printf_float+0x16c>
    9074:	00100693          	li	a3,1
    9078:	000b0613          	mv	a2,s6
    907c:	00090593          	mv	a1,s2
    9080:	00048513          	mv	a0,s1
    9084:	000980e7          	jalr	s3
    9088:	c3750ee3          	beq	a0,s7,8cc4 <_printf_float+0x16c>
    908c:	001a8a93          	addi	s5,s5,1
    9090:	fb9ff06f          	j	9048 <_printf_float+0x4f0>
    9094:	05842783          	lw	a5,88(s0)
    9098:	03812a83          	lw	s5,56(sp)
    909c:	0157d463          	bge	a5,s5,90a4 <_printf_float+0x54c>
    90a0:	00078a93          	mv	s5,a5
    90a4:	0b504463          	bgtz	s5,914c <_printf_float+0x5f4>
    90a8:	00000b13          	li	s6,0
    90ac:	01a40d13          	addi	s10,s0,26
    90b0:	fff00d93          	li	s11,-1
    90b4:	05842c83          	lw	s9,88(s0)
    90b8:	000a8793          	mv	a5,s5
    90bc:	000ad463          	bgez	s5,90c4 <_printf_float+0x56c>
    90c0:	00000793          	li	a5,0
    90c4:	40fc87b3          	sub	a5,s9,a5
    90c8:	0afb4263          	blt	s6,a5,916c <_printf_float+0x614>
    90cc:	03412703          	lw	a4,52(sp)
    90d0:	03812783          	lw	a5,56(sp)
    90d4:	0af74c63          	blt	a4,a5,918c <_printf_float+0x634>
    90d8:	00042783          	lw	a5,0(s0)
    90dc:	0017f793          	andi	a5,a5,1
    90e0:	0a079663          	bnez	a5,918c <_printf_float+0x634>
    90e4:	03812a83          	lw	s5,56(sp)
    90e8:	03412703          	lw	a4,52(sp)
    90ec:	419a87b3          	sub	a5,s5,s9
    90f0:	40ea8ab3          	sub	s5,s5,a4
    90f4:	0157d463          	bge	a5,s5,90fc <_printf_float+0x5a4>
    90f8:	00078a93          	mv	s5,a5
    90fc:	0b504863          	bgtz	s5,91ac <_printf_float+0x654>
    9100:	00000a13          	li	s4,0
    9104:	01a40b13          	addi	s6,s0,26
    9108:	fff00b93          	li	s7,-1
    910c:	03412703          	lw	a4,52(sp)
    9110:	03812783          	lw	a5,56(sp)
    9114:	40e787b3          	sub	a5,a5,a4
    9118:	000a8713          	mv	a4,s5
    911c:	000ad463          	bgez	s5,9124 <_printf_float+0x5cc>
    9120:	00000713          	li	a4,0
    9124:	40e787b3          	sub	a5,a5,a4
    9128:	defa58e3          	bge	s4,a5,8f18 <_printf_float+0x3c0>
    912c:	00100693          	li	a3,1
    9130:	000b0613          	mv	a2,s6
    9134:	00090593          	mv	a1,s2
    9138:	00048513          	mv	a0,s1
    913c:	000980e7          	jalr	s3
    9140:	b97502e3          	beq	a0,s7,8cc4 <_printf_float+0x16c>
    9144:	001a0a13          	addi	s4,s4,1
    9148:	fc5ff06f          	j	910c <_printf_float+0x5b4>
    914c:	000a8693          	mv	a3,s5
    9150:	000a0613          	mv	a2,s4
    9154:	00090593          	mv	a1,s2
    9158:	00048513          	mv	a0,s1
    915c:	000980e7          	jalr	s3
    9160:	fff00793          	li	a5,-1
    9164:	f4f512e3          	bne	a0,a5,90a8 <_printf_float+0x550>
    9168:	b5dff06f          	j	8cc4 <_printf_float+0x16c>
    916c:	00100693          	li	a3,1
    9170:	000d0613          	mv	a2,s10
    9174:	00090593          	mv	a1,s2
    9178:	00048513          	mv	a0,s1
    917c:	000980e7          	jalr	s3
    9180:	b5b502e3          	beq	a0,s11,8cc4 <_printf_float+0x16c>
    9184:	001b0b13          	addi	s6,s6,1
    9188:	f2dff06f          	j	90b4 <_printf_float+0x55c>
    918c:	000b8693          	mv	a3,s7
    9190:	000c0613          	mv	a2,s8
    9194:	00090593          	mv	a1,s2
    9198:	00048513          	mv	a0,s1
    919c:	000980e7          	jalr	s3
    91a0:	fff00793          	li	a5,-1
    91a4:	f4f510e3          	bne	a0,a5,90e4 <_printf_float+0x58c>
    91a8:	b1dff06f          	j	8cc4 <_printf_float+0x16c>
    91ac:	000a8693          	mv	a3,s5
    91b0:	019a0633          	add	a2,s4,s9
    91b4:	00090593          	mv	a1,s2
    91b8:	00048513          	mv	a0,s1
    91bc:	000980e7          	jalr	s3
    91c0:	fff00793          	li	a5,-1
    91c4:	f2f51ee3          	bne	a0,a5,9100 <_printf_float+0x5a8>
    91c8:	afdff06f          	j	8cc4 <_printf_float+0x16c>
    91cc:	03812683          	lw	a3,56(sp)
    91d0:	00100713          	li	a4,1
    91d4:	00d74663          	blt	a4,a3,91e0 <_printf_float+0x688>
    91d8:	0017f793          	andi	a5,a5,1
    91dc:	0a078a63          	beqz	a5,9290 <_printf_float+0x738>
    91e0:	00100693          	li	a3,1
    91e4:	000a0613          	mv	a2,s4
    91e8:	00090593          	mv	a1,s2
    91ec:	00048513          	mv	a0,s1
    91f0:	000980e7          	jalr	s3
    91f4:	fff00a93          	li	s5,-1
    91f8:	ad5506e3          	beq	a0,s5,8cc4 <_printf_float+0x16c>
    91fc:	000b8693          	mv	a3,s7
    9200:	000c0613          	mv	a2,s8
    9204:	00090593          	mv	a1,s2
    9208:	00048513          	mv	a0,s1
    920c:	000980e7          	jalr	s3
    9210:	ab550ae3          	beq	a0,s5,8cc4 <_printf_float+0x16c>
    9214:	04842503          	lw	a0,72(s0)
    9218:	04c42583          	lw	a1,76(s0)
    921c:	00000613          	li	a2,0
    9220:	00000693          	li	a3,0
    9224:	895fa0ef          	jal	ra,3ab8 <__eqdf2>
    9228:	04050c63          	beqz	a0,9280 <_printf_float+0x728>
    922c:	03812683          	lw	a3,56(sp)
    9230:	001a0613          	addi	a2,s4,1
    9234:	00090593          	mv	a1,s2
    9238:	fff68693          	addi	a3,a3,-1
    923c:	00048513          	mv	a0,s1
    9240:	000980e7          	jalr	s3
    9244:	a95500e3          	beq	a0,s5,8cc4 <_printf_float+0x16c>
    9248:	000b0693          	mv	a3,s6
    924c:	05040613          	addi	a2,s0,80
    9250:	e0dff06f          	j	905c <_printf_float+0x504>
    9254:	00100693          	li	a3,1
    9258:	000a8613          	mv	a2,s5
    925c:	00090593          	mv	a1,s2
    9260:	00048513          	mv	a0,s1
    9264:	000980e7          	jalr	s3
    9268:	a5750ee3          	beq	a0,s7,8cc4 <_printf_float+0x16c>
    926c:	001a0a13          	addi	s4,s4,1
    9270:	03812783          	lw	a5,56(sp)
    9274:	fff78793          	addi	a5,a5,-1
    9278:	fcfa4ee3          	blt	s4,a5,9254 <_printf_float+0x6fc>
    927c:	fcdff06f          	j	9248 <_printf_float+0x6f0>
    9280:	00000a13          	li	s4,0
    9284:	01a40a93          	addi	s5,s0,26
    9288:	fff00b93          	li	s7,-1
    928c:	fe5ff06f          	j	9270 <_printf_float+0x718>
    9290:	00100693          	li	a3,1
    9294:	000a0613          	mv	a2,s4
    9298:	00090593          	mv	a1,s2
    929c:	00048513          	mv	a0,s1
    92a0:	000980e7          	jalr	s3
    92a4:	fb9512e3          	bne	a0,s9,9248 <_printf_float+0x6f0>
    92a8:	a1dff06f          	j	8cc4 <_printf_float+0x16c>
    92ac:	00100693          	li	a3,1
    92b0:	000a8613          	mv	a2,s5
    92b4:	00090593          	mv	a1,s2
    92b8:	00048513          	mv	a0,s1
    92bc:	000980e7          	jalr	s3
    92c0:	a16502e3          	beq	a0,s6,8cc4 <_printf_float+0x16c>
    92c4:	001a0a13          	addi	s4,s4,1
    92c8:	00c42783          	lw	a5,12(s0)
    92cc:	03c12703          	lw	a4,60(sp)
    92d0:	40e787b3          	sub	a5,a5,a4
    92d4:	fcfa4ce3          	blt	s4,a5,92ac <_printf_float+0x754>
    92d8:	c4dff06f          	j	8f24 <_printf_float+0x3cc>
    92dc:	00000a13          	li	s4,0
    92e0:	01940a93          	addi	s5,s0,25
    92e4:	fff00b13          	li	s6,-1
    92e8:	fe1ff06f          	j	92c8 <_printf_float+0x770>

000092ec <_printf_common>:
    92ec:	fd010113          	addi	sp,sp,-48
    92f0:	01412c23          	sw	s4,24(sp)
    92f4:	0105a783          	lw	a5,16(a1)
    92f8:	00070a13          	mv	s4,a4
    92fc:	0085a703          	lw	a4,8(a1)
    9300:	02812423          	sw	s0,40(sp)
    9304:	02912223          	sw	s1,36(sp)
    9308:	01312e23          	sw	s3,28(sp)
    930c:	01512a23          	sw	s5,20(sp)
    9310:	02112623          	sw	ra,44(sp)
    9314:	03212023          	sw	s2,32(sp)
    9318:	01612823          	sw	s6,16(sp)
    931c:	01712623          	sw	s7,12(sp)
    9320:	00050993          	mv	s3,a0
    9324:	00058413          	mv	s0,a1
    9328:	00060493          	mv	s1,a2
    932c:	00068a93          	mv	s5,a3
    9330:	00e7d463          	bge	a5,a4,9338 <_printf_common+0x4c>
    9334:	00070793          	mv	a5,a4
    9338:	00f4a023          	sw	a5,0(s1)
    933c:	04344703          	lbu	a4,67(s0)
    9340:	00070663          	beqz	a4,934c <_printf_common+0x60>
    9344:	00178793          	addi	a5,a5,1
    9348:	00f4a023          	sw	a5,0(s1)
    934c:	00042783          	lw	a5,0(s0)
    9350:	0207f793          	andi	a5,a5,32
    9354:	00078863          	beqz	a5,9364 <_printf_common+0x78>
    9358:	0004a783          	lw	a5,0(s1)
    935c:	00278793          	addi	a5,a5,2
    9360:	00f4a023          	sw	a5,0(s1)
    9364:	00042903          	lw	s2,0(s0)
    9368:	00697913          	andi	s2,s2,6
    936c:	00091e63          	bnez	s2,9388 <_printf_common+0x9c>
    9370:	01940b13          	addi	s6,s0,25
    9374:	fff00b93          	li	s7,-1
    9378:	00c42783          	lw	a5,12(s0)
    937c:	0004a703          	lw	a4,0(s1)
    9380:	40e787b3          	sub	a5,a5,a4
    9384:	08f94263          	blt	s2,a5,9408 <_printf_common+0x11c>
    9388:	04344783          	lbu	a5,67(s0)
    938c:	00f036b3          	snez	a3,a5
    9390:	00042783          	lw	a5,0(s0)
    9394:	0207f793          	andi	a5,a5,32
    9398:	0c079063          	bnez	a5,9458 <_printf_common+0x16c>
    939c:	04340613          	addi	a2,s0,67
    93a0:	000a8593          	mv	a1,s5
    93a4:	00098513          	mv	a0,s3
    93a8:	000a00e7          	jalr	s4
    93ac:	fff00793          	li	a5,-1
    93b0:	06f50863          	beq	a0,a5,9420 <_printf_common+0x134>
    93b4:	00042783          	lw	a5,0(s0)
    93b8:	00400613          	li	a2,4
    93bc:	0004a703          	lw	a4,0(s1)
    93c0:	0067f793          	andi	a5,a5,6
    93c4:	00c42683          	lw	a3,12(s0)
    93c8:	00000493          	li	s1,0
    93cc:	00c79863          	bne	a5,a2,93dc <_printf_common+0xf0>
    93d0:	40e684b3          	sub	s1,a3,a4
    93d4:	0004d463          	bgez	s1,93dc <_printf_common+0xf0>
    93d8:	00000493          	li	s1,0
    93dc:	00842783          	lw	a5,8(s0)
    93e0:	01042703          	lw	a4,16(s0)
    93e4:	00f75663          	bge	a4,a5,93f0 <_printf_common+0x104>
    93e8:	40e787b3          	sub	a5,a5,a4
    93ec:	00f484b3          	add	s1,s1,a5
    93f0:	00000913          	li	s2,0
    93f4:	01a40413          	addi	s0,s0,26
    93f8:	fff00b13          	li	s6,-1
    93fc:	09249063          	bne	s1,s2,947c <_printf_common+0x190>
    9400:	00000513          	li	a0,0
    9404:	0200006f          	j	9424 <_printf_common+0x138>
    9408:	00100693          	li	a3,1
    940c:	000b0613          	mv	a2,s6
    9410:	000a8593          	mv	a1,s5
    9414:	00098513          	mv	a0,s3
    9418:	000a00e7          	jalr	s4
    941c:	03751a63          	bne	a0,s7,9450 <_printf_common+0x164>
    9420:	fff00513          	li	a0,-1
    9424:	02c12083          	lw	ra,44(sp)
    9428:	02812403          	lw	s0,40(sp)
    942c:	02412483          	lw	s1,36(sp)
    9430:	02012903          	lw	s2,32(sp)
    9434:	01c12983          	lw	s3,28(sp)
    9438:	01812a03          	lw	s4,24(sp)
    943c:	01412a83          	lw	s5,20(sp)
    9440:	01012b03          	lw	s6,16(sp)
    9444:	00c12b83          	lw	s7,12(sp)
    9448:	03010113          	addi	sp,sp,48
    944c:	00008067          	ret
    9450:	00190913          	addi	s2,s2,1
    9454:	f25ff06f          	j	9378 <_printf_common+0x8c>
    9458:	00d40733          	add	a4,s0,a3
    945c:	03000613          	li	a2,48
    9460:	04c701a3          	sb	a2,67(a4)
    9464:	04544703          	lbu	a4,69(s0)
    9468:	00168793          	addi	a5,a3,1
    946c:	00f407b3          	add	a5,s0,a5
    9470:	00268693          	addi	a3,a3,2
    9474:	04e781a3          	sb	a4,67(a5)
    9478:	f25ff06f          	j	939c <_printf_common+0xb0>
    947c:	00100693          	li	a3,1
    9480:	00040613          	mv	a2,s0
    9484:	000a8593          	mv	a1,s5
    9488:	00098513          	mv	a0,s3
    948c:	000a00e7          	jalr	s4
    9490:	f96508e3          	beq	a0,s6,9420 <_printf_common+0x134>
    9494:	00190913          	addi	s2,s2,1
    9498:	f65ff06f          	j	93fc <_printf_common+0x110>

0000949c <_printf_i>:
    949c:	fd010113          	addi	sp,sp,-48
    94a0:	02812423          	sw	s0,40(sp)
    94a4:	02912223          	sw	s1,36(sp)
    94a8:	03212023          	sw	s2,32(sp)
    94ac:	01312e23          	sw	s3,28(sp)
    94b0:	02112623          	sw	ra,44(sp)
    94b4:	01412c23          	sw	s4,24(sp)
    94b8:	01512a23          	sw	s5,20(sp)
    94bc:	01612823          	sw	s6,16(sp)
    94c0:	0185c883          	lbu	a7,24(a1)
    94c4:	07800793          	li	a5,120
    94c8:	00050493          	mv	s1,a0
    94cc:	00058413          	mv	s0,a1
    94d0:	00060913          	mv	s2,a2
    94d4:	00068993          	mv	s3,a3
    94d8:	0117ee63          	bltu	a5,a7,94f4 <_printf_i+0x58>
    94dc:	06200793          	li	a5,98
    94e0:	04358693          	addi	a3,a1,67
    94e4:	0117ee63          	bltu	a5,a7,9500 <_printf_i+0x64>
    94e8:	28088a63          	beqz	a7,977c <_printf_i+0x2e0>
    94ec:	05800793          	li	a5,88
    94f0:	1cf88063          	beq	a7,a5,96b0 <_printf_i+0x214>
    94f4:	04240a93          	addi	s5,s0,66
    94f8:	05140123          	sb	a7,66(s0)
    94fc:	0440006f          	j	9540 <_printf_i+0xa4>
    9500:	f9d88793          	addi	a5,a7,-99
    9504:	0ff7f793          	andi	a5,a5,255
    9508:	01500613          	li	a2,21
    950c:	fef664e3          	bltu	a2,a5,94f4 <_printf_i+0x58>
    9510:	0000e637          	lui	a2,0xe
    9514:	00279793          	slli	a5,a5,0x2
    9518:	8c060613          	addi	a2,a2,-1856 # d8c0 <_ctype_+0x13c>
    951c:	00c787b3          	add	a5,a5,a2
    9520:	0007a783          	lw	a5,0(a5)
    9524:	00078067          	jr	a5
    9528:	00072783          	lw	a5,0(a4)
    952c:	04258a93          	addi	s5,a1,66
    9530:	00478693          	addi	a3,a5,4
    9534:	0007a783          	lw	a5,0(a5)
    9538:	00d72023          	sw	a3,0(a4)
    953c:	04f58123          	sb	a5,66(a1)
    9540:	00100793          	li	a5,1
    9544:	2740006f          	j	97b8 <_printf_i+0x31c>
    9548:	0005a783          	lw	a5,0(a1)
    954c:	00072503          	lw	a0,0(a4)
    9550:	0807f613          	andi	a2,a5,128
    9554:	00450593          	addi	a1,a0,4
    9558:	02060663          	beqz	a2,9584 <_printf_i+0xe8>
    955c:	00052783          	lw	a5,0(a0)
    9560:	00b72023          	sw	a1,0(a4)
    9564:	0000e837          	lui	a6,0xe
    9568:	0007d863          	bgez	a5,9578 <_printf_i+0xdc>
    956c:	02d00713          	li	a4,45
    9570:	40f007b3          	neg	a5,a5
    9574:	04e401a3          	sb	a4,67(s0)
    9578:	89880813          	addi	a6,a6,-1896 # d898 <_ctype_+0x114>
    957c:	00a00713          	li	a4,10
    9580:	0680006f          	j	95e8 <_printf_i+0x14c>
    9584:	0407f613          	andi	a2,a5,64
    9588:	00052783          	lw	a5,0(a0)
    958c:	00b72023          	sw	a1,0(a4)
    9590:	fc060ae3          	beqz	a2,9564 <_printf_i+0xc8>
    9594:	01079793          	slli	a5,a5,0x10
    9598:	4107d793          	srai	a5,a5,0x10
    959c:	fc9ff06f          	j	9564 <_printf_i+0xc8>
    95a0:	0005a603          	lw	a2,0(a1)
    95a4:	00072783          	lw	a5,0(a4)
    95a8:	08067513          	andi	a0,a2,128
    95ac:	00478593          	addi	a1,a5,4
    95b0:	00050863          	beqz	a0,95c0 <_printf_i+0x124>
    95b4:	00b72023          	sw	a1,0(a4)
    95b8:	0007a783          	lw	a5,0(a5)
    95bc:	0140006f          	j	95d0 <_printf_i+0x134>
    95c0:	04067613          	andi	a2,a2,64
    95c4:	00b72023          	sw	a1,0(a4)
    95c8:	fe0608e3          	beqz	a2,95b8 <_printf_i+0x11c>
    95cc:	0007d783          	lhu	a5,0(a5)
    95d0:	0000e837          	lui	a6,0xe
    95d4:	06f00713          	li	a4,111
    95d8:	89880813          	addi	a6,a6,-1896 # d898 <_ctype_+0x114>
    95dc:	14e88e63          	beq	a7,a4,9738 <_printf_i+0x29c>
    95e0:	00a00713          	li	a4,10
    95e4:	040401a3          	sb	zero,67(s0)
    95e8:	00442603          	lw	a2,4(s0)
    95ec:	00c42423          	sw	a2,8(s0)
    95f0:	00064863          	bltz	a2,9600 <_printf_i+0x164>
    95f4:	00042583          	lw	a1,0(s0)
    95f8:	ffb5f593          	andi	a1,a1,-5
    95fc:	00b42023          	sw	a1,0(s0)
    9600:	00079663          	bnez	a5,960c <_printf_i+0x170>
    9604:	00068a93          	mv	s5,a3
    9608:	02060463          	beqz	a2,9630 <_printf_i+0x194>
    960c:	00068a93          	mv	s5,a3
    9610:	02e7f633          	remu	a2,a5,a4
    9614:	fffa8a93          	addi	s5,s5,-1
    9618:	00c80633          	add	a2,a6,a2
    961c:	00064603          	lbu	a2,0(a2)
    9620:	00ca8023          	sb	a2,0(s5)
    9624:	00078613          	mv	a2,a5
    9628:	02e7d7b3          	divu	a5,a5,a4
    962c:	fee672e3          	bgeu	a2,a4,9610 <_printf_i+0x174>
    9630:	00800793          	li	a5,8
    9634:	02f71463          	bne	a4,a5,965c <_printf_i+0x1c0>
    9638:	00042783          	lw	a5,0(s0)
    963c:	0017f793          	andi	a5,a5,1
    9640:	00078e63          	beqz	a5,965c <_printf_i+0x1c0>
    9644:	00442703          	lw	a4,4(s0)
    9648:	01042783          	lw	a5,16(s0)
    964c:	00e7c863          	blt	a5,a4,965c <_printf_i+0x1c0>
    9650:	03000793          	li	a5,48
    9654:	fefa8fa3          	sb	a5,-1(s5)
    9658:	fffa8a93          	addi	s5,s5,-1
    965c:	415686b3          	sub	a3,a3,s5
    9660:	00d42823          	sw	a3,16(s0)
    9664:	00098713          	mv	a4,s3
    9668:	00090693          	mv	a3,s2
    966c:	00c10613          	addi	a2,sp,12
    9670:	00040593          	mv	a1,s0
    9674:	00048513          	mv	a0,s1
    9678:	c75ff0ef          	jal	ra,92ec <_printf_common>
    967c:	fff00a13          	li	s4,-1
    9680:	15451263          	bne	a0,s4,97c4 <_printf_i+0x328>
    9684:	fff00513          	li	a0,-1
    9688:	02c12083          	lw	ra,44(sp)
    968c:	02812403          	lw	s0,40(sp)
    9690:	02412483          	lw	s1,36(sp)
    9694:	02012903          	lw	s2,32(sp)
    9698:	01c12983          	lw	s3,28(sp)
    969c:	01812a03          	lw	s4,24(sp)
    96a0:	01412a83          	lw	s5,20(sp)
    96a4:	01012b03          	lw	s6,16(sp)
    96a8:	03010113          	addi	sp,sp,48
    96ac:	00008067          	ret
    96b0:	0000e837          	lui	a6,0xe
    96b4:	051582a3          	sb	a7,69(a1)
    96b8:	89880813          	addi	a6,a6,-1896 # d898 <_ctype_+0x114>
    96bc:	00042603          	lw	a2,0(s0)
    96c0:	00072583          	lw	a1,0(a4)
    96c4:	08067513          	andi	a0,a2,128
    96c8:	0005a783          	lw	a5,0(a1)
    96cc:	00458593          	addi	a1,a1,4
    96d0:	04050863          	beqz	a0,9720 <_printf_i+0x284>
    96d4:	00b72023          	sw	a1,0(a4)
    96d8:	00167713          	andi	a4,a2,1
    96dc:	00070663          	beqz	a4,96e8 <_printf_i+0x24c>
    96e0:	02066613          	ori	a2,a2,32
    96e4:	00c42023          	sw	a2,0(s0)
    96e8:	01000713          	li	a4,16
    96ec:	ee079ce3          	bnez	a5,95e4 <_printf_i+0x148>
    96f0:	00042603          	lw	a2,0(s0)
    96f4:	fdf67613          	andi	a2,a2,-33
    96f8:	00c42023          	sw	a2,0(s0)
    96fc:	ee9ff06f          	j	95e4 <_printf_i+0x148>
    9700:	0005a783          	lw	a5,0(a1)
    9704:	0207e793          	ori	a5,a5,32
    9708:	00f5a023          	sw	a5,0(a1)
    970c:	07800793          	li	a5,120
    9710:	0000e837          	lui	a6,0xe
    9714:	04f402a3          	sb	a5,69(s0)
    9718:	8ac80813          	addi	a6,a6,-1876 # d8ac <_ctype_+0x128>
    971c:	fa1ff06f          	j	96bc <_printf_i+0x220>
    9720:	04067513          	andi	a0,a2,64
    9724:	00b72023          	sw	a1,0(a4)
    9728:	fa0508e3          	beqz	a0,96d8 <_printf_i+0x23c>
    972c:	01079793          	slli	a5,a5,0x10
    9730:	0107d793          	srli	a5,a5,0x10
    9734:	fa5ff06f          	j	96d8 <_printf_i+0x23c>
    9738:	00800713          	li	a4,8
    973c:	ea9ff06f          	j	95e4 <_printf_i+0x148>
    9740:	0005a603          	lw	a2,0(a1)
    9744:	00072783          	lw	a5,0(a4)
    9748:	0145a583          	lw	a1,20(a1)
    974c:	08067813          	andi	a6,a2,128
    9750:	00478513          	addi	a0,a5,4
    9754:	00080a63          	beqz	a6,9768 <_printf_i+0x2cc>
    9758:	00a72023          	sw	a0,0(a4)
    975c:	0007a783          	lw	a5,0(a5)
    9760:	00b7a023          	sw	a1,0(a5)
    9764:	0180006f          	j	977c <_printf_i+0x2e0>
    9768:	00a72023          	sw	a0,0(a4)
    976c:	04067613          	andi	a2,a2,64
    9770:	0007a783          	lw	a5,0(a5)
    9774:	fe0606e3          	beqz	a2,9760 <_printf_i+0x2c4>
    9778:	00b79023          	sh	a1,0(a5)
    977c:	00042823          	sw	zero,16(s0)
    9780:	00068a93          	mv	s5,a3
    9784:	ee1ff06f          	j	9664 <_printf_i+0x1c8>
    9788:	00072783          	lw	a5,0(a4)
    978c:	0045a603          	lw	a2,4(a1)
    9790:	00000593          	li	a1,0
    9794:	00478693          	addi	a3,a5,4
    9798:	00d72023          	sw	a3,0(a4)
    979c:	0007aa83          	lw	s5,0(a5)
    97a0:	000a8513          	mv	a0,s5
    97a4:	115010ef          	jal	ra,b0b8 <memchr>
    97a8:	00050663          	beqz	a0,97b4 <_printf_i+0x318>
    97ac:	41550533          	sub	a0,a0,s5
    97b0:	00a42223          	sw	a0,4(s0)
    97b4:	00442783          	lw	a5,4(s0)
    97b8:	00f42823          	sw	a5,16(s0)
    97bc:	040401a3          	sb	zero,67(s0)
    97c0:	ea5ff06f          	j	9664 <_printf_i+0x1c8>
    97c4:	01042683          	lw	a3,16(s0)
    97c8:	000a8613          	mv	a2,s5
    97cc:	00090593          	mv	a1,s2
    97d0:	00048513          	mv	a0,s1
    97d4:	000980e7          	jalr	s3
    97d8:	eb4506e3          	beq	a0,s4,9684 <_printf_i+0x1e8>
    97dc:	00042783          	lw	a5,0(s0)
    97e0:	0027f793          	andi	a5,a5,2
    97e4:	04079463          	bnez	a5,982c <_printf_i+0x390>
    97e8:	00c12783          	lw	a5,12(sp)
    97ec:	00c42503          	lw	a0,12(s0)
    97f0:	e8f55ce3          	bge	a0,a5,9688 <_printf_i+0x1ec>
    97f4:	00078513          	mv	a0,a5
    97f8:	e91ff06f          	j	9688 <_printf_i+0x1ec>
    97fc:	00100693          	li	a3,1
    9800:	000a8613          	mv	a2,s5
    9804:	00090593          	mv	a1,s2
    9808:	00048513          	mv	a0,s1
    980c:	000980e7          	jalr	s3
    9810:	e7650ae3          	beq	a0,s6,9684 <_printf_i+0x1e8>
    9814:	001a0a13          	addi	s4,s4,1
    9818:	00c42783          	lw	a5,12(s0)
    981c:	00c12703          	lw	a4,12(sp)
    9820:	40e787b3          	sub	a5,a5,a4
    9824:	fcfa4ce3          	blt	s4,a5,97fc <_printf_i+0x360>
    9828:	fc1ff06f          	j	97e8 <_printf_i+0x34c>
    982c:	00000a13          	li	s4,0
    9830:	01940a93          	addi	s5,s0,25
    9834:	fff00b13          	li	s6,-1
    9838:	fe1ff06f          	j	9818 <_printf_i+0x37c>

0000983c <iprintf>:
    983c:	fb010113          	addi	sp,sp,-80
    9840:	04f12223          	sw	a5,68(sp)
    9844:	0002f7b7          	lui	a5,0x2f
    9848:	02812423          	sw	s0,40(sp)
    984c:	00050413          	mv	s0,a0
    9850:	c9c7a503          	lw	a0,-868(a5) # 2ec9c <_impure_ptr>
    9854:	02112623          	sw	ra,44(sp)
    9858:	02b12a23          	sw	a1,52(sp)
    985c:	02c12c23          	sw	a2,56(sp)
    9860:	02d12e23          	sw	a3,60(sp)
    9864:	04e12023          	sw	a4,64(sp)
    9868:	05012423          	sw	a6,72(sp)
    986c:	05112623          	sw	a7,76(sp)
    9870:	00050c63          	beqz	a0,9888 <iprintf+0x4c>
    9874:	01852783          	lw	a5,24(a0)
    9878:	00079863          	bnez	a5,9888 <iprintf+0x4c>
    987c:	00a12623          	sw	a0,12(sp)
    9880:	5c4010ef          	jal	ra,ae44 <__sinit>
    9884:	00c12503          	lw	a0,12(sp)
    9888:	00852583          	lw	a1,8(a0)
    988c:	03410693          	addi	a3,sp,52
    9890:	00040613          	mv	a2,s0
    9894:	00d12e23          	sw	a3,28(sp)
    9898:	5f8020ef          	jal	ra,be90 <_vfiprintf_r>
    989c:	02c12083          	lw	ra,44(sp)
    98a0:	02812403          	lw	s0,40(sp)
    98a4:	05010113          	addi	sp,sp,80
    98a8:	00008067          	ret

000098ac <_sbrk_r>:
    98ac:	ff010113          	addi	sp,sp,-16
    98b0:	00812423          	sw	s0,8(sp)
    98b4:	00912223          	sw	s1,4(sp)
    98b8:	00050413          	mv	s0,a0
    98bc:	0000e4b7          	lui	s1,0xe
    98c0:	00058513          	mv	a0,a1
    98c4:	00112623          	sw	ra,12(sp)
    98c8:	b204a823          	sw	zero,-1232(s1) # db30 <errno>
    98cc:	b3dfc0ef          	jal	ra,6408 <_sbrk>
    98d0:	fff00793          	li	a5,-1
    98d4:	00f51863          	bne	a0,a5,98e4 <_sbrk_r+0x38>
    98d8:	b304a783          	lw	a5,-1232(s1)
    98dc:	00078463          	beqz	a5,98e4 <_sbrk_r+0x38>
    98e0:	00f42023          	sw	a5,0(s0)
    98e4:	00c12083          	lw	ra,12(sp)
    98e8:	00812403          	lw	s0,8(sp)
    98ec:	00412483          	lw	s1,4(sp)
    98f0:	01010113          	addi	sp,sp,16
    98f4:	00008067          	ret

000098f8 <strlen>:
    98f8:	00050793          	mv	a5,a0
    98fc:	0007c703          	lbu	a4,0(a5)
    9900:	00178793          	addi	a5,a5,1
    9904:	fe071ce3          	bnez	a4,98fc <strlen+0x4>
    9908:	40a78533          	sub	a0,a5,a0
    990c:	fff50513          	addi	a0,a0,-1
    9910:	00008067          	ret

00009914 <strncpy>:
    9914:	00050793          	mv	a5,a0
    9918:	00060e63          	beqz	a2,9934 <strncpy+0x20>
    991c:	0005c703          	lbu	a4,0(a1)
    9920:	00158593          	addi	a1,a1,1
    9924:	00178793          	addi	a5,a5,1
    9928:	fee78fa3          	sb	a4,-1(a5)
    992c:	fff60613          	addi	a2,a2,-1
    9930:	fe0714e3          	bnez	a4,9918 <strncpy+0x4>
    9934:	00c78633          	add	a2,a5,a2
    9938:	00c79463          	bne	a5,a2,9940 <strncpy+0x2c>
    993c:	00008067          	ret
    9940:	00178793          	addi	a5,a5,1
    9944:	fe078fa3          	sb	zero,-1(a5)
    9948:	ff1ff06f          	j	9938 <strncpy+0x24>

0000994c <strnlen>:
    994c:	00b505b3          	add	a1,a0,a1
    9950:	00050793          	mv	a5,a0
    9954:	00b78663          	beq	a5,a1,9960 <strnlen+0x14>
    9958:	0007c703          	lbu	a4,0(a5)
    995c:	00071663          	bnez	a4,9968 <strnlen+0x1c>
    9960:	40a78533          	sub	a0,a5,a0
    9964:	00008067          	ret
    9968:	00178793          	addi	a5,a5,1
    996c:	fe9ff06f          	j	9954 <strnlen+0x8>

00009970 <quorem>:
    9970:	fe010113          	addi	sp,sp,-32
    9974:	00812c23          	sw	s0,24(sp)
    9978:	01052783          	lw	a5,16(a0)
    997c:	0105a403          	lw	s0,16(a1)
    9980:	00112e23          	sw	ra,28(sp)
    9984:	00912a23          	sw	s1,20(sp)
    9988:	01212823          	sw	s2,16(sp)
    998c:	01312623          	sw	s3,12(sp)
    9990:	01412423          	sw	s4,8(sp)
    9994:	01512223          	sw	s5,4(sp)
    9998:	1887ce63          	blt	a5,s0,9b34 <quorem+0x1c4>
    999c:	fff40413          	addi	s0,s0,-1
    99a0:	00241613          	slli	a2,s0,0x2
    99a4:	01458a13          	addi	s4,a1,20
    99a8:	00ca0ab3          	add	s5,s4,a2
    99ac:	01450993          	addi	s3,a0,20
    99b0:	000aa783          	lw	a5,0(s5)
    99b4:	00c98633          	add	a2,s3,a2
    99b8:	00062703          	lw	a4,0(a2)
    99bc:	00178793          	addi	a5,a5,1
    99c0:	00050913          	mv	s2,a0
    99c4:	02f754b3          	divu	s1,a4,a5
    99c8:	08f76863          	bltu	a4,a5,9a58 <quorem+0xe8>
    99cc:	00010537          	lui	a0,0x10
    99d0:	000a0813          	mv	a6,s4
    99d4:	00098893          	mv	a7,s3
    99d8:	00000313          	li	t1,0
    99dc:	00000e13          	li	t3,0
    99e0:	fff50513          	addi	a0,a0,-1 # ffff <kheap__system_heap+0x154f>
    99e4:	00082683          	lw	a3,0(a6)
    99e8:	00488893          	addi	a7,a7,4
    99ec:	00480813          	addi	a6,a6,4
    99f0:	00a6f7b3          	and	a5,a3,a0
    99f4:	0106d693          	srli	a3,a3,0x10
    99f8:	029787b3          	mul	a5,a5,s1
    99fc:	029686b3          	mul	a3,a3,s1
    9a00:	006787b3          	add	a5,a5,t1
    9a04:	0107d713          	srli	a4,a5,0x10
    9a08:	00a7f7b3          	and	a5,a5,a0
    9a0c:	40fe07b3          	sub	a5,t3,a5
    9a10:	00e686b3          	add	a3,a3,a4
    9a14:	ffc8a703          	lw	a4,-4(a7)
    9a18:	0106d313          	srli	t1,a3,0x10
    9a1c:	00a6f6b3          	and	a3,a3,a0
    9a20:	00a77e33          	and	t3,a4,a0
    9a24:	01c787b3          	add	a5,a5,t3
    9a28:	01075713          	srli	a4,a4,0x10
    9a2c:	40d70733          	sub	a4,a4,a3
    9a30:	4107d693          	srai	a3,a5,0x10
    9a34:	00d70733          	add	a4,a4,a3
    9a38:	41075e13          	srai	t3,a4,0x10
    9a3c:	00a7f7b3          	and	a5,a5,a0
    9a40:	01071713          	slli	a4,a4,0x10
    9a44:	00f767b3          	or	a5,a4,a5
    9a48:	fef8ae23          	sw	a5,-4(a7)
    9a4c:	f90afce3          	bgeu	s5,a6,99e4 <quorem+0x74>
    9a50:	00062783          	lw	a5,0(a2)
    9a54:	0a078a63          	beqz	a5,9b08 <quorem+0x198>
    9a58:	00090513          	mv	a0,s2
    9a5c:	795010ef          	jal	ra,b9f0 <__mcmp>
    9a60:	06054a63          	bltz	a0,9ad4 <quorem+0x164>
    9a64:	000106b7          	lui	a3,0x10
    9a68:	00148493          	addi	s1,s1,1
    9a6c:	00098613          	mv	a2,s3
    9a70:	00000593          	li	a1,0
    9a74:	fff68693          	addi	a3,a3,-1 # ffff <kheap__system_heap+0x154f>
    9a78:	000a2503          	lw	a0,0(s4)
    9a7c:	00062783          	lw	a5,0(a2)
    9a80:	00460613          	addi	a2,a2,4
    9a84:	00d57733          	and	a4,a0,a3
    9a88:	40e585b3          	sub	a1,a1,a4
    9a8c:	00d7f733          	and	a4,a5,a3
    9a90:	00e58733          	add	a4,a1,a4
    9a94:	0107d793          	srli	a5,a5,0x10
    9a98:	01055513          	srli	a0,a0,0x10
    9a9c:	41075593          	srai	a1,a4,0x10
    9aa0:	40a787b3          	sub	a5,a5,a0
    9aa4:	00b787b3          	add	a5,a5,a1
    9aa8:	4107d593          	srai	a1,a5,0x10
    9aac:	00d77733          	and	a4,a4,a3
    9ab0:	01079793          	slli	a5,a5,0x10
    9ab4:	00e7e7b3          	or	a5,a5,a4
    9ab8:	004a0a13          	addi	s4,s4,4
    9abc:	fef62e23          	sw	a5,-4(a2)
    9ac0:	fb4afce3          	bgeu	s5,s4,9a78 <quorem+0x108>
    9ac4:	00241793          	slli	a5,s0,0x2
    9ac8:	00f987b3          	add	a5,s3,a5
    9acc:	0007a703          	lw	a4,0(a5)
    9ad0:	04070a63          	beqz	a4,9b24 <quorem+0x1b4>
    9ad4:	00048513          	mv	a0,s1
    9ad8:	01c12083          	lw	ra,28(sp)
    9adc:	01812403          	lw	s0,24(sp)
    9ae0:	01412483          	lw	s1,20(sp)
    9ae4:	01012903          	lw	s2,16(sp)
    9ae8:	00c12983          	lw	s3,12(sp)
    9aec:	00812a03          	lw	s4,8(sp)
    9af0:	00412a83          	lw	s5,4(sp)
    9af4:	02010113          	addi	sp,sp,32
    9af8:	00008067          	ret
    9afc:	00062783          	lw	a5,0(a2)
    9b00:	00079863          	bnez	a5,9b10 <quorem+0x1a0>
    9b04:	fff40413          	addi	s0,s0,-1
    9b08:	ffc60613          	addi	a2,a2,-4
    9b0c:	fec9e8e3          	bltu	s3,a2,9afc <quorem+0x18c>
    9b10:	00892823          	sw	s0,16(s2)
    9b14:	f45ff06f          	j	9a58 <quorem+0xe8>
    9b18:	0007a703          	lw	a4,0(a5)
    9b1c:	00071863          	bnez	a4,9b2c <quorem+0x1bc>
    9b20:	fff40413          	addi	s0,s0,-1
    9b24:	ffc78793          	addi	a5,a5,-4
    9b28:	fef9e8e3          	bltu	s3,a5,9b18 <quorem+0x1a8>
    9b2c:	00892823          	sw	s0,16(s2)
    9b30:	fa5ff06f          	j	9ad4 <quorem+0x164>
    9b34:	00000513          	li	a0,0
    9b38:	fa1ff06f          	j	9ad8 <quorem+0x168>

00009b3c <_dtoa_r>:
    9b3c:	f5010113          	addi	sp,sp,-176
    9b40:	02f12c23          	sw	a5,56(sp)
    9b44:	02452783          	lw	a5,36(a0)
    9b48:	0a812423          	sw	s0,168(sp)
    9b4c:	0a912223          	sw	s1,164(sp)
    9b50:	0b212023          	sw	s2,160(sp)
    9b54:	09312e23          	sw	s3,156(sp)
    9b58:	09512a23          	sw	s5,148(sp)
    9b5c:	09612823          	sw	s6,144(sp)
    9b60:	0a112623          	sw	ra,172(sp)
    9b64:	09412c23          	sw	s4,152(sp)
    9b68:	09712623          	sw	s7,140(sp)
    9b6c:	09812423          	sw	s8,136(sp)
    9b70:	09912223          	sw	s9,132(sp)
    9b74:	09a12023          	sw	s10,128(sp)
    9b78:	07b12e23          	sw	s11,124(sp)
    9b7c:	00d12a23          	sw	a3,20(sp)
    9b80:	02e12023          	sw	a4,32(sp)
    9b84:	03112223          	sw	a7,36(sp)
    9b88:	00050493          	mv	s1,a0
    9b8c:	00058a93          	mv	s5,a1
    9b90:	00060413          	mv	s0,a2
    9b94:	00080913          	mv	s2,a6
    9b98:	00058993          	mv	s3,a1
    9b9c:	00060b13          	mv	s6,a2
    9ba0:	04079063          	bnez	a5,9be0 <_dtoa_r+0xa4>
    9ba4:	01000513          	li	a0,16
    9ba8:	b2dfe0ef          	jal	ra,86d4 <malloc>
    9bac:	02a4a223          	sw	a0,36(s1)
    9bb0:	02051063          	bnez	a0,9bd0 <_dtoa_r+0x94>
    9bb4:	0000e6b7          	lui	a3,0xe
    9bb8:	92868693          	addi	a3,a3,-1752 # d928 <_ctype_+0x1a4>
    9bbc:	00000613          	li	a2,0
    9bc0:	0ea00593          	li	a1,234
    9bc4:	0000e537          	lui	a0,0xe
    9bc8:	94050513          	addi	a0,a0,-1728 # d940 <_ctype_+0x1bc>
    9bcc:	331020ef          	jal	ra,c6fc <__assert_func>
    9bd0:	00052223          	sw	zero,4(a0)
    9bd4:	00052423          	sw	zero,8(a0)
    9bd8:	00052023          	sw	zero,0(a0)
    9bdc:	00052623          	sw	zero,12(a0)
    9be0:	0244a783          	lw	a5,36(s1)
    9be4:	0007a583          	lw	a1,0(a5)
    9be8:	02058463          	beqz	a1,9c10 <_dtoa_r+0xd4>
    9bec:	0047a703          	lw	a4,4(a5)
    9bf0:	00100793          	li	a5,1
    9bf4:	00048513          	mv	a0,s1
    9bf8:	00e797b3          	sll	a5,a5,a4
    9bfc:	00f5a423          	sw	a5,8(a1)
    9c00:	00e5a223          	sw	a4,4(a1)
    9c04:	5f0010ef          	jal	ra,b1f4 <_Bfree>
    9c08:	0244a783          	lw	a5,36(s1)
    9c0c:	0007a023          	sw	zero,0(a5)
    9c10:	04045c63          	bgez	s0,9c68 <_dtoa_r+0x12c>
    9c14:	00100793          	li	a5,1
    9c18:	00141413          	slli	s0,s0,0x1
    9c1c:	00f92023          	sw	a5,0(s2)
    9c20:	00145b13          	srli	s6,s0,0x1
    9c24:	7ff007b7          	lui	a5,0x7ff00
    9c28:	00fb7733          	and	a4,s6,a5
    9c2c:	0af71863          	bne	a4,a5,9cdc <_dtoa_r+0x1a0>
    9c30:	03812703          	lw	a4,56(sp)
    9c34:	000027b7          	lui	a5,0x2
    9c38:	00cb1b13          	slli	s6,s6,0xc
    9c3c:	70f78793          	addi	a5,a5,1807 # 270f <__divsf3+0xf7>
    9c40:	00cb5b13          	srli	s6,s6,0xc
    9c44:	00f72023          	sw	a5,0(a4)
    9c48:	015b6ab3          	or	s5,s6,s5
    9c4c:	000a9463          	bnez	s5,9c54 <_dtoa_r+0x118>
    9c50:	0540106f          	j	aca4 <_dtoa_r+0x1168>
    9c54:	02412783          	lw	a5,36(sp)
    9c58:	0000e537          	lui	a0,0xe
    9c5c:	06079663          	bnez	a5,9cc8 <_dtoa_r+0x18c>
    9c60:	92450793          	addi	a5,a0,-1756 # d924 <_ctype_+0x1a0>
    9c64:	0540106f          	j	acb8 <_dtoa_r+0x117c>
    9c68:	00092023          	sw	zero,0(s2)
    9c6c:	fb9ff06f          	j	9c24 <_dtoa_r+0xe8>
    9c70:	91850793          	addi	a5,a0,-1768
    9c74:	00f12823          	sw	a5,16(sp)
    9c78:	0000e7b7          	lui	a5,0xe
    9c7c:	92078793          	addi	a5,a5,-1760 # d920 <_ctype_+0x19c>
    9c80:	02412703          	lw	a4,36(sp)
    9c84:	00f72023          	sw	a5,0(a4)
    9c88:	0ac12083          	lw	ra,172(sp)
    9c8c:	0a812403          	lw	s0,168(sp)
    9c90:	01012503          	lw	a0,16(sp)
    9c94:	0a412483          	lw	s1,164(sp)
    9c98:	0a012903          	lw	s2,160(sp)
    9c9c:	09c12983          	lw	s3,156(sp)
    9ca0:	09812a03          	lw	s4,152(sp)
    9ca4:	09412a83          	lw	s5,148(sp)
    9ca8:	09012b03          	lw	s6,144(sp)
    9cac:	08c12b83          	lw	s7,140(sp)
    9cb0:	08812c03          	lw	s8,136(sp)
    9cb4:	08412c83          	lw	s9,132(sp)
    9cb8:	08012d03          	lw	s10,128(sp)
    9cbc:	07c12d83          	lw	s11,124(sp)
    9cc0:	0b010113          	addi	sp,sp,176
    9cc4:	00008067          	ret
    9cc8:	92450793          	addi	a5,a0,-1756
    9ccc:	00f12823          	sw	a5,16(sp)
    9cd0:	0000e7b7          	lui	a5,0xe
    9cd4:	92778793          	addi	a5,a5,-1753 # d927 <_ctype_+0x1a3>
    9cd8:	fa9ff06f          	j	9c80 <_dtoa_r+0x144>
    9cdc:	00000613          	li	a2,0
    9ce0:	00000693          	li	a3,0
    9ce4:	000a8513          	mv	a0,s5
    9ce8:	000b0593          	mv	a1,s6
    9cec:	03512623          	sw	s5,44(sp)
    9cf0:	03612823          	sw	s6,48(sp)
    9cf4:	dc5f90ef          	jal	ra,3ab8 <__eqdf2>
    9cf8:	02051c63          	bnez	a0,9d30 <_dtoa_r+0x1f4>
    9cfc:	03812703          	lw	a4,56(sp)
    9d00:	00100793          	li	a5,1
    9d04:	00f72023          	sw	a5,0(a4)
    9d08:	0000d737          	lui	a4,0xd
    9d0c:	70870793          	addi	a5,a4,1800 # d708 <gpio_veerwolf_driver_api+0x28>
    9d10:	00f12823          	sw	a5,16(sp)
    9d14:	02412783          	lw	a5,36(sp)
    9d18:	f60788e3          	beqz	a5,9c88 <_dtoa_r+0x14c>
    9d1c:	02412683          	lw	a3,36(sp)
    9d20:	0000d7b7          	lui	a5,0xd
    9d24:	70978793          	addi	a5,a5,1801 # d709 <gpio_veerwolf_driver_api+0x29>
    9d28:	00f6a023          	sw	a5,0(a3)
    9d2c:	f5dff06f          	j	9c88 <_dtoa_r+0x14c>
    9d30:	06810713          	addi	a4,sp,104
    9d34:	06c10693          	addi	a3,sp,108
    9d38:	000b0613          	mv	a2,s6
    9d3c:	000a8593          	mv	a1,s5
    9d40:	00048513          	mv	a0,s1
    9d44:	6fd010ef          	jal	ra,bc40 <__d2b>
    9d48:	014b5913          	srli	s2,s6,0x14
    9d4c:	00a12623          	sw	a0,12(sp)
    9d50:	7ff97913          	andi	s2,s2,2047
    9d54:	06812a03          	lw	s4,104(sp)
    9d58:	1a090063          	beqz	s2,9ef8 <_dtoa_r+0x3bc>
    9d5c:	03012783          	lw	a5,48(sp)
    9d60:	02c12503          	lw	a0,44(sp)
    9d64:	c0190913          	addi	s2,s2,-1023
    9d68:	00c79593          	slli	a1,a5,0xc
    9d6c:	00c5d593          	srli	a1,a1,0xc
    9d70:	3ff007b7          	lui	a5,0x3ff00
    9d74:	00f5e5b3          	or	a1,a1,a5
    9d78:	04012c23          	sw	zero,88(sp)
    9d7c:	0000d7b7          	lui	a5,0xd
    9d80:	0007a603          	lw	a2,0(a5) # d000 <__device_handles_end+0x10>
    9d84:	0047a683          	lw	a3,4(a5)
    9d88:	bc9f70ef          	jal	ra,1950 <__subdf3>
    9d8c:	0000d7b7          	lui	a5,0xd
    9d90:	0087a603          	lw	a2,8(a5) # d008 <__device_handles_end+0x18>
    9d94:	00c7a683          	lw	a3,12(a5)
    9d98:	df0f70ef          	jal	ra,1388 <__muldf3>
    9d9c:	0000d7b7          	lui	a5,0xd
    9da0:	0107a603          	lw	a2,16(a5) # d010 <__device_handles_end+0x20>
    9da4:	0147a683          	lw	a3,20(a5)
    9da8:	d38f90ef          	jal	ra,32e0 <__adddf3>
    9dac:	00050b93          	mv	s7,a0
    9db0:	00090513          	mv	a0,s2
    9db4:	00058a93          	mv	s5,a1
    9db8:	f3df90ef          	jal	ra,3cf4 <__floatsidf>
    9dbc:	0000d7b7          	lui	a5,0xd
    9dc0:	0187a603          	lw	a2,24(a5) # d018 <__device_handles_end+0x28>
    9dc4:	01c7a683          	lw	a3,28(a5)
    9dc8:	dc0f70ef          	jal	ra,1388 <__muldf3>
    9dcc:	00050613          	mv	a2,a0
    9dd0:	00058693          	mv	a3,a1
    9dd4:	000b8513          	mv	a0,s7
    9dd8:	000a8593          	mv	a1,s5
    9ddc:	d04f90ef          	jal	ra,32e0 <__adddf3>
    9de0:	00050b93          	mv	s7,a0
    9de4:	00058a93          	mv	s5,a1
    9de8:	e8df90ef          	jal	ra,3c74 <__fixdfsi>
    9dec:	00050413          	mv	s0,a0
    9df0:	00000613          	li	a2,0
    9df4:	00000693          	li	a3,0
    9df8:	000b8513          	mv	a0,s7
    9dfc:	000a8593          	mv	a1,s5
    9e00:	d45f90ef          	jal	ra,3b44 <__ledf2>
    9e04:	02055063          	bgez	a0,9e24 <_dtoa_r+0x2e8>
    9e08:	00040513          	mv	a0,s0
    9e0c:	ee9f90ef          	jal	ra,3cf4 <__floatsidf>
    9e10:	000b8613          	mv	a2,s7
    9e14:	000a8693          	mv	a3,s5
    9e18:	ca1f90ef          	jal	ra,3ab8 <__eqdf2>
    9e1c:	00050463          	beqz	a0,9e24 <_dtoa_r+0x2e8>
    9e20:	fff40413          	addi	s0,s0,-1
    9e24:	00100713          	li	a4,1
    9e28:	01600793          	li	a5,22
    9e2c:	02e12a23          	sw	a4,52(sp)
    9e30:	0287ea63          	bltu	a5,s0,9e64 <_dtoa_r+0x328>
    9e34:	0000d737          	lui	a4,0xd
    9e38:	00341793          	slli	a5,s0,0x3
    9e3c:	27870713          	addi	a4,a4,632 # d278 <__mprec_tens>
    9e40:	00e787b3          	add	a5,a5,a4
    9e44:	0007a603          	lw	a2,0(a5)
    9e48:	0047a683          	lw	a3,4(a5)
    9e4c:	02c12503          	lw	a0,44(sp)
    9e50:	03012583          	lw	a1,48(sp)
    9e54:	cf1f90ef          	jal	ra,3b44 <__ledf2>
    9e58:	00055463          	bgez	a0,9e60 <_dtoa_r+0x324>
    9e5c:	fff40413          	addi	s0,s0,-1
    9e60:	02012a23          	sw	zero,52(sp)
    9e64:	412a0933          	sub	s2,s4,s2
    9e68:	fff90c13          	addi	s8,s2,-1
    9e6c:	00000b93          	li	s7,0
    9e70:	000c5863          	bgez	s8,9e80 <_dtoa_r+0x344>
    9e74:	00100b93          	li	s7,1
    9e78:	412b8bb3          	sub	s7,s7,s2
    9e7c:	00000c13          	li	s8,0
    9e80:	0c044663          	bltz	s0,9f4c <_dtoa_r+0x410>
    9e84:	008c0c33          	add	s8,s8,s0
    9e88:	02812423          	sw	s0,40(sp)
    9e8c:	00000c93          	li	s9,0
    9e90:	01412703          	lw	a4,20(sp)
    9e94:	00900793          	li	a5,9
    9e98:	14e7e863          	bltu	a5,a4,9fe8 <_dtoa_r+0x4ac>
    9e9c:	00500793          	li	a5,5
    9ea0:	00100913          	li	s2,1
    9ea4:	00e7d863          	bge	a5,a4,9eb4 <_dtoa_r+0x378>
    9ea8:	ffc70793          	addi	a5,a4,-4
    9eac:	00f12a23          	sw	a5,20(sp)
    9eb0:	00000913          	li	s2,0
    9eb4:	01412703          	lw	a4,20(sp)
    9eb8:	00400793          	li	a5,4
    9ebc:	0af70063          	beq	a4,a5,9f5c <_dtoa_r+0x420>
    9ec0:	00500793          	li	a5,5
    9ec4:	10f70063          	beq	a4,a5,9fc4 <_dtoa_r+0x488>
    9ec8:	00200793          	li	a5,2
    9ecc:	0ef70863          	beq	a4,a5,9fbc <_dtoa_r+0x480>
    9ed0:	00300793          	li	a5,3
    9ed4:	00012e23          	sw	zero,28(sp)
    9ed8:	0ef70a63          	beq	a4,a5,9fcc <_dtoa_r+0x490>
    9edc:	00100793          	li	a5,1
    9ee0:	00f12e23          	sw	a5,28(sp)
    9ee4:	fff00d93          	li	s11,-1
    9ee8:	fff00d13          	li	s10,-1
    9eec:	01200793          	li	a5,18
    9ef0:	02012023          	sw	zero,32(sp)
    9ef4:	08c0006f          	j	9f80 <_dtoa_r+0x444>
    9ef8:	06c12903          	lw	s2,108(sp)
    9efc:	02000793          	li	a5,32
    9f00:	012a0933          	add	s2,s4,s2
    9f04:	43290593          	addi	a1,s2,1074
    9f08:	02b7dc63          	bge	a5,a1,9f40 <_dtoa_r+0x404>
    9f0c:	04000513          	li	a0,64
    9f10:	40b50533          	sub	a0,a0,a1
    9f14:	41290593          	addi	a1,s2,1042
    9f18:	00ab1533          	sll	a0,s6,a0
    9f1c:	00badab3          	srl	s5,s5,a1
    9f20:	01556533          	or	a0,a0,s5
    9f24:	a18f80ef          	jal	ra,213c <__floatunsidf>
    9f28:	fe1007b7          	lui	a5,0xfe100
    9f2c:	00b785b3          	add	a1,a5,a1
    9f30:	00100793          	li	a5,1
    9f34:	fff90913          	addi	s2,s2,-1
    9f38:	04f12c23          	sw	a5,88(sp)
    9f3c:	e41ff06f          	j	9d7c <_dtoa_r+0x240>
    9f40:	40b78533          	sub	a0,a5,a1
    9f44:	00aa9533          	sll	a0,s5,a0
    9f48:	fddff06f          	j	9f24 <_dtoa_r+0x3e8>
    9f4c:	408b8bb3          	sub	s7,s7,s0
    9f50:	40800cb3          	neg	s9,s0
    9f54:	02012423          	sw	zero,40(sp)
    9f58:	f39ff06f          	j	9e90 <_dtoa_r+0x354>
    9f5c:	00100793          	li	a5,1
    9f60:	00f12e23          	sw	a5,28(sp)
    9f64:	02012783          	lw	a5,32(sp)
    9f68:	08f04663          	bgtz	a5,9ff4 <_dtoa_r+0x4b8>
    9f6c:	00100713          	li	a4,1
    9f70:	00100d93          	li	s11,1
    9f74:	00100d13          	li	s10,1
    9f78:	00100793          	li	a5,1
    9f7c:	02e12023          	sw	a4,32(sp)
    9f80:	0244a683          	lw	a3,36(s1)
    9f84:	00400713          	li	a4,4
    9f88:	0006a223          	sw	zero,4(a3)
    9f8c:	01470613          	addi	a2,a4,20
    9f90:	0046a583          	lw	a1,4(a3)
    9f94:	06c7f863          	bgeu	a5,a2,a004 <_dtoa_r+0x4c8>
    9f98:	00048513          	mv	a0,s1
    9f9c:	158010ef          	jal	ra,b0f4 <_Balloc>
    9fa0:	00a12823          	sw	a0,16(sp)
    9fa4:	06051863          	bnez	a0,a014 <_dtoa_r+0x4d8>
    9fa8:	0000e6b7          	lui	a3,0xe
    9fac:	9a468693          	addi	a3,a3,-1628 # d9a4 <_ctype_+0x220>
    9fb0:	00000613          	li	a2,0
    9fb4:	1aa00593          	li	a1,426
    9fb8:	c0dff06f          	j	9bc4 <_dtoa_r+0x88>
    9fbc:	00012e23          	sw	zero,28(sp)
    9fc0:	fa5ff06f          	j	9f64 <_dtoa_r+0x428>
    9fc4:	00100793          	li	a5,1
    9fc8:	00f12e23          	sw	a5,28(sp)
    9fcc:	02012783          	lw	a5,32(sp)
    9fd0:	00f40db3          	add	s11,s0,a5
    9fd4:	001d8d13          	addi	s10,s11,1
    9fd8:	000d0793          	mv	a5,s10
    9fdc:	fba042e3          	bgtz	s10,9f80 <_dtoa_r+0x444>
    9fe0:	00100793          	li	a5,1
    9fe4:	f9dff06f          	j	9f80 <_dtoa_r+0x444>
    9fe8:	00100913          	li	s2,1
    9fec:	00012a23          	sw	zero,20(sp)
    9ff0:	eedff06f          	j	9edc <_dtoa_r+0x3a0>
    9ff4:	02012d83          	lw	s11,32(sp)
    9ff8:	000d8d13          	mv	s10,s11
    9ffc:	000d8793          	mv	a5,s11
    a000:	f81ff06f          	j	9f80 <_dtoa_r+0x444>
    a004:	00158593          	addi	a1,a1,1
    a008:	00b6a223          	sw	a1,4(a3)
    a00c:	00171713          	slli	a4,a4,0x1
    a010:	f7dff06f          	j	9f8c <_dtoa_r+0x450>
    a014:	0244a783          	lw	a5,36(s1)
    a018:	01012703          	lw	a4,16(sp)
    a01c:	00e7a023          	sw	a4,0(a5) # fe100000 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfe100001>
    a020:	00e00793          	li	a5,14
    a024:	19a7ea63          	bltu	a5,s10,a1b8 <_dtoa_r+0x67c>
    a028:	18090863          	beqz	s2,a1b8 <_dtoa_r+0x67c>
    a02c:	24805263          	blez	s0,a270 <_dtoa_r+0x734>
    a030:	00f47793          	andi	a5,s0,15
    a034:	0000d737          	lui	a4,0xd
    a038:	27870713          	addi	a4,a4,632 # d278 <__mprec_tens>
    a03c:	00379793          	slli	a5,a5,0x3
    a040:	40445a93          	srai	s5,s0,0x4
    a044:	00e787b3          	add	a5,a5,a4
    a048:	0000d937          	lui	s2,0xd
    a04c:	010af693          	andi	a3,s5,16
    a050:	0007a703          	lw	a4,0(a5)
    a054:	25090913          	addi	s2,s2,592 # d250 <__mprec_bigtens>
    a058:	0047a783          	lw	a5,4(a5)
    a05c:	00200a13          	li	s4,2
    a060:	02068c63          	beqz	a3,a098 <_dtoa_r+0x55c>
    a064:	02092603          	lw	a2,32(s2)
    a068:	02492683          	lw	a3,36(s2)
    a06c:	02c12503          	lw	a0,44(sp)
    a070:	03012583          	lw	a1,48(sp)
    a074:	02f12e23          	sw	a5,60(sp)
    a078:	00e12c23          	sw	a4,24(sp)
    a07c:	b49f60ef          	jal	ra,bc4 <__divdf3>
    a080:	03c12783          	lw	a5,60(sp)
    a084:	01812703          	lw	a4,24(sp)
    a088:	00fafa93          	andi	s5,s5,15
    a08c:	00050993          	mv	s3,a0
    a090:	00058b13          	mv	s6,a1
    a094:	00300a13          	li	s4,3
    a098:	1a0a9263          	bnez	s5,a23c <_dtoa_r+0x700>
    a09c:	00098513          	mv	a0,s3
    a0a0:	00070613          	mv	a2,a4
    a0a4:	00078693          	mv	a3,a5
    a0a8:	000b0593          	mv	a1,s6
    a0ac:	b19f60ef          	jal	ra,bc4 <__divdf3>
    a0b0:	00050993          	mv	s3,a0
    a0b4:	00058b13          	mv	s6,a1
    a0b8:	03412783          	lw	a5,52(sp)
    a0bc:	24078263          	beqz	a5,a300 <_dtoa_r+0x7c4>
    a0c0:	0000d7b7          	lui	a5,0xd
    a0c4:	0207a603          	lw	a2,32(a5) # d020 <__device_handles_end+0x30>
    a0c8:	0247a683          	lw	a3,36(a5)
    a0cc:	00098513          	mv	a0,s3
    a0d0:	000b0593          	mv	a1,s6
    a0d4:	a71f90ef          	jal	ra,3b44 <__ledf2>
    a0d8:	22055463          	bgez	a0,a300 <_dtoa_r+0x7c4>
    a0dc:	220d0863          	beqz	s10,a30c <_dtoa_r+0x7d0>
    a0e0:	0db05863          	blez	s11,a1b0 <_dtoa_r+0x674>
    a0e4:	fff40793          	addi	a5,s0,-1
    a0e8:	00f12c23          	sw	a5,24(sp)
    a0ec:	0000d7b7          	lui	a5,0xd
    a0f0:	0287a603          	lw	a2,40(a5) # d028 <__device_handles_end+0x38>
    a0f4:	02c7a683          	lw	a3,44(a5)
    a0f8:	00098513          	mv	a0,s3
    a0fc:	000b0593          	mv	a1,s6
    a100:	a88f70ef          	jal	ra,1388 <__muldf3>
    a104:	00050993          	mv	s3,a0
    a108:	00058b13          	mv	s6,a1
    a10c:	001a0a13          	addi	s4,s4,1
    a110:	000d8713          	mv	a4,s11
    a114:	000a0513          	mv	a0,s4
    a118:	04e12423          	sw	a4,72(sp)
    a11c:	03612e23          	sw	s6,60(sp)
    a120:	05312023          	sw	s3,64(sp)
    a124:	bd1f90ef          	jal	ra,3cf4 <__floatsidf>
    a128:	000b0693          	mv	a3,s6
    a12c:	00098613          	mv	a2,s3
    a130:	a58f70ef          	jal	ra,1388 <__muldf3>
    a134:	0000d6b7          	lui	a3,0xd
    a138:	0306a603          	lw	a2,48(a3) # d030 <__device_handles_end+0x40>
    a13c:	0346a683          	lw	a3,52(a3)
    a140:	000b0913          	mv	s2,s6
    a144:	00098a93          	mv	s5,s3
    a148:	998f90ef          	jal	ra,32e0 <__adddf3>
    a14c:	04812703          	lw	a4,72(sp)
    a150:	fcc008b7          	lui	a7,0xfcc00
    a154:	00050b13          	mv	s6,a0
    a158:	00b88a33          	add	s4,a7,a1
    a15c:	1a071e63          	bnez	a4,a318 <_dtoa_r+0x7dc>
    a160:	0000d737          	lui	a4,0xd
    a164:	03872603          	lw	a2,56(a4) # d038 <__device_handles_end+0x48>
    a168:	03c72683          	lw	a3,60(a4)
    a16c:	00098513          	mv	a0,s3
    a170:	00090593          	mv	a1,s2
    a174:	fdcf70ef          	jal	ra,1950 <__subdf3>
    a178:	000b0613          	mv	a2,s6
    a17c:	000a0693          	mv	a3,s4
    a180:	00050993          	mv	s3,a0
    a184:	00058913          	mv	s2,a1
    a188:	91cf70ef          	jal	ra,12a4 <__gedf2>
    a18c:	06a040e3          	bgtz	a0,a9ec <_dtoa_r+0xeb0>
    a190:	800007b7          	lui	a5,0x80000
    a194:	0147c7b3          	xor	a5,a5,s4
    a198:	000b0613          	mv	a2,s6
    a19c:	00078693          	mv	a3,a5
    a1a0:	00098513          	mv	a0,s3
    a1a4:	00090593          	mv	a1,s2
    a1a8:	99df90ef          	jal	ra,3b44 <__ledf2>
    a1ac:	02054ae3          	bltz	a0,a9e0 <_dtoa_r+0xea4>
    a1b0:	02c12983          	lw	s3,44(sp)
    a1b4:	03012b03          	lw	s6,48(sp)
    a1b8:	06c12783          	lw	a5,108(sp)
    a1bc:	4e07cc63          	bltz	a5,a6b4 <_dtoa_r+0xb78>
    a1c0:	00e00713          	li	a4,14
    a1c4:	4e874863          	blt	a4,s0,a6b4 <_dtoa_r+0xb78>
    a1c8:	0000d737          	lui	a4,0xd
    a1cc:	00341793          	slli	a5,s0,0x3
    a1d0:	27870713          	addi	a4,a4,632 # d278 <__mprec_tens>
    a1d4:	00e787b3          	add	a5,a5,a4
    a1d8:	0007aa03          	lw	s4,0(a5) # 80000000 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000001>
    a1dc:	0047aa83          	lw	s5,4(a5)
    a1e0:	02012783          	lw	a5,32(sp)
    a1e4:	3607de63          	bgez	a5,a560 <_dtoa_r+0xa24>
    a1e8:	37a04c63          	bgtz	s10,a560 <_dtoa_r+0xa24>
    a1ec:	7e0d1a63          	bnez	s10,a9e0 <_dtoa_r+0xea4>
    a1f0:	0000d7b7          	lui	a5,0xd
    a1f4:	0387a603          	lw	a2,56(a5) # d038 <__device_handles_end+0x48>
    a1f8:	03c7a683          	lw	a3,60(a5)
    a1fc:	000a0513          	mv	a0,s4
    a200:	000a8593          	mv	a1,s5
    a204:	984f70ef          	jal	ra,1388 <__muldf3>
    a208:	00098613          	mv	a2,s3
    a20c:	000b0693          	mv	a3,s6
    a210:	894f70ef          	jal	ra,12a4 <__gedf2>
    a214:	00000a13          	li	s4,0
    a218:	00000913          	li	s2,0
    a21c:	78055063          	bgez	a0,a99c <_dtoa_r+0xe60>
    a220:	01012783          	lw	a5,16(sp)
    a224:	01012703          	lw	a4,16(sp)
    a228:	00140413          	addi	s0,s0,1
    a22c:	00178993          	addi	s3,a5,1
    a230:	03100793          	li	a5,49
    a234:	00f70023          	sb	a5,0(a4)
    a238:	7700006f          	j	a9a8 <_dtoa_r+0xe6c>
    a23c:	001af693          	andi	a3,s5,1
    a240:	02068263          	beqz	a3,a264 <_dtoa_r+0x728>
    a244:	00092603          	lw	a2,0(s2)
    a248:	00492683          	lw	a3,4(s2)
    a24c:	00070513          	mv	a0,a4
    a250:	00078593          	mv	a1,a5
    a254:	934f70ef          	jal	ra,1388 <__muldf3>
    a258:	001a0a13          	addi	s4,s4,1
    a25c:	00050713          	mv	a4,a0
    a260:	00058793          	mv	a5,a1
    a264:	401ada93          	srai	s5,s5,0x1
    a268:	00890913          	addi	s2,s2,8
    a26c:	e2dff06f          	j	a098 <_dtoa_r+0x55c>
    a270:	00200a13          	li	s4,2
    a274:	e40402e3          	beqz	s0,a0b8 <_dtoa_r+0x57c>
    a278:	40800933          	neg	s2,s0
    a27c:	00f97793          	andi	a5,s2,15
    a280:	0000d737          	lui	a4,0xd
    a284:	27870713          	addi	a4,a4,632 # d278 <__mprec_tens>
    a288:	00379793          	slli	a5,a5,0x3
    a28c:	00e787b3          	add	a5,a5,a4
    a290:	0007a603          	lw	a2,0(a5)
    a294:	0047a683          	lw	a3,4(a5)
    a298:	02c12503          	lw	a0,44(sp)
    a29c:	03012583          	lw	a1,48(sp)
    a2a0:	0000dab7          	lui	s5,0xd
    a2a4:	40495913          	srai	s2,s2,0x4
    a2a8:	8e0f70ef          	jal	ra,1388 <__muldf3>
    a2ac:	00050793          	mv	a5,a0
    a2b0:	00050993          	mv	s3,a0
    a2b4:	00058b13          	mv	s6,a1
    a2b8:	250a8a93          	addi	s5,s5,592 # d250 <__mprec_bigtens>
    a2bc:	00000713          	li	a4,0
    a2c0:	00091863          	bnez	s2,a2d0 <_dtoa_r+0x794>
    a2c4:	de070ae3          	beqz	a4,a0b8 <_dtoa_r+0x57c>
    a2c8:	00078993          	mv	s3,a5
    a2cc:	de9ff06f          	j	a0b4 <_dtoa_r+0x578>
    a2d0:	00197693          	andi	a3,s2,1
    a2d4:	02068063          	beqz	a3,a2f4 <_dtoa_r+0x7b8>
    a2d8:	000aa603          	lw	a2,0(s5)
    a2dc:	004aa683          	lw	a3,4(s5)
    a2e0:	00078513          	mv	a0,a5
    a2e4:	001a0a13          	addi	s4,s4,1
    a2e8:	8a0f70ef          	jal	ra,1388 <__muldf3>
    a2ec:	00050793          	mv	a5,a0
    a2f0:	00100713          	li	a4,1
    a2f4:	40195913          	srai	s2,s2,0x1
    a2f8:	008a8a93          	addi	s5,s5,8
    a2fc:	fc5ff06f          	j	a2c0 <_dtoa_r+0x784>
    a300:	00812c23          	sw	s0,24(sp)
    a304:	000d0713          	mv	a4,s10
    a308:	e0dff06f          	j	a114 <_dtoa_r+0x5d8>
    a30c:	00812c23          	sw	s0,24(sp)
    a310:	00000713          	li	a4,0
    a314:	e01ff06f          	j	a114 <_dtoa_r+0x5d8>
    a318:	fff70793          	addi	a5,a4,-1
    a31c:	0000d6b7          	lui	a3,0xd
    a320:	27868693          	addi	a3,a3,632 # d278 <__mprec_tens>
    a324:	00379793          	slli	a5,a5,0x3
    a328:	00d787b3          	add	a5,a5,a3
    a32c:	0007a603          	lw	a2,0(a5)
    a330:	0047a683          	lw	a3,4(a5)
    a334:	01012783          	lw	a5,16(sp)
    a338:	00e787b3          	add	a5,a5,a4
    a33c:	02f12e23          	sw	a5,60(sp)
    a340:	01c12783          	lw	a5,28(sp)
    a344:	10078863          	beqz	a5,a454 <_dtoa_r+0x918>
    a348:	0000d7b7          	lui	a5,0xd
    a34c:	0447a583          	lw	a1,68(a5) # d044 <__device_handles_end+0x54>
    a350:	04a12023          	sw	a0,64(sp)
    a354:	0407a503          	lw	a0,64(a5)
    a358:	86df60ef          	jal	ra,bc4 <__divdf3>
    a35c:	000b0613          	mv	a2,s6
    a360:	000a0693          	mv	a3,s4
    a364:	decf70ef          	jal	ra,1950 <__subdf3>
    a368:	0000d7b7          	lui	a5,0xd
    a36c:	0247a803          	lw	a6,36(a5) # d024 <__device_handles_end+0x34>
    a370:	0207a783          	lw	a5,32(a5)
    a374:	01012983          	lw	s3,16(sp)
    a378:	05012623          	sw	a6,76(sp)
    a37c:	04f12423          	sw	a5,72(sp)
    a380:	0000d7b7          	lui	a5,0xd
    a384:	02c7a803          	lw	a6,44(a5) # d02c <__device_handles_end+0x3c>
    a388:	0287a783          	lw	a5,40(a5)
    a38c:	00050a13          	mv	s4,a0
    a390:	00058b13          	mv	s6,a1
    a394:	04f12023          	sw	a5,64(sp)
    a398:	05012223          	sw	a6,68(sp)
    a39c:	00090593          	mv	a1,s2
    a3a0:	000a8513          	mv	a0,s5
    a3a4:	8d1f90ef          	jal	ra,3c74 <__fixdfsi>
    a3a8:	04a12823          	sw	a0,80(sp)
    a3ac:	949f90ef          	jal	ra,3cf4 <__floatsidf>
    a3b0:	00050613          	mv	a2,a0
    a3b4:	00058693          	mv	a3,a1
    a3b8:	000a8513          	mv	a0,s5
    a3bc:	00090593          	mv	a1,s2
    a3c0:	d90f70ef          	jal	ra,1950 <__subdf3>
    a3c4:	05012783          	lw	a5,80(sp)
    a3c8:	00198993          	addi	s3,s3,1
    a3cc:	000a0613          	mv	a2,s4
    a3d0:	03078793          	addi	a5,a5,48
    a3d4:	fef98fa3          	sb	a5,-1(s3)
    a3d8:	000b0693          	mv	a3,s6
    a3dc:	00050913          	mv	s2,a0
    a3e0:	00058a93          	mv	s5,a1
    a3e4:	f60f90ef          	jal	ra,3b44 <__ledf2>
    a3e8:	14054c63          	bltz	a0,a540 <_dtoa_r+0xa04>
    a3ec:	04812503          	lw	a0,72(sp)
    a3f0:	04c12583          	lw	a1,76(sp)
    a3f4:	00090613          	mv	a2,s2
    a3f8:	000a8693          	mv	a3,s5
    a3fc:	d54f70ef          	jal	ra,1950 <__subdf3>
    a400:	000a0613          	mv	a2,s4
    a404:	000b0693          	mv	a3,s6
    a408:	f3cf90ef          	jal	ra,3b44 <__ledf2>
    a40c:	22054c63          	bltz	a0,a644 <_dtoa_r+0xb08>
    a410:	03c12783          	lw	a5,60(sp)
    a414:	d8f98ee3          	beq	s3,a5,a1b0 <_dtoa_r+0x674>
    a418:	04012603          	lw	a2,64(sp)
    a41c:	04412683          	lw	a3,68(sp)
    a420:	000a0513          	mv	a0,s4
    a424:	000b0593          	mv	a1,s6
    a428:	f61f60ef          	jal	ra,1388 <__muldf3>
    a42c:	04012603          	lw	a2,64(sp)
    a430:	04412683          	lw	a3,68(sp)
    a434:	00050a13          	mv	s4,a0
    a438:	00058b13          	mv	s6,a1
    a43c:	00090513          	mv	a0,s2
    a440:	000a8593          	mv	a1,s5
    a444:	f45f60ef          	jal	ra,1388 <__muldf3>
    a448:	00050a93          	mv	s5,a0
    a44c:	00058913          	mv	s2,a1
    a450:	f4dff06f          	j	a39c <_dtoa_r+0x860>
    a454:	000a0593          	mv	a1,s4
    a458:	f31f60ef          	jal	ra,1388 <__muldf3>
    a45c:	03c12783          	lw	a5,60(sp)
    a460:	01012983          	lw	s3,16(sp)
    a464:	04a12423          	sw	a0,72(sp)
    a468:	04f12023          	sw	a5,64(sp)
    a46c:	0000d7b7          	lui	a5,0xd
    a470:	02c7a803          	lw	a6,44(a5) # d02c <__device_handles_end+0x3c>
    a474:	0287a783          	lw	a5,40(a5)
    a478:	00058b13          	mv	s6,a1
    a47c:	05012a23          	sw	a6,84(sp)
    a480:	04f12823          	sw	a5,80(sp)
    a484:	00090593          	mv	a1,s2
    a488:	000a8513          	mv	a0,s5
    a48c:	fe8f90ef          	jal	ra,3c74 <__fixdfsi>
    a490:	04a12e23          	sw	a0,92(sp)
    a494:	861f90ef          	jal	ra,3cf4 <__floatsidf>
    a498:	00050613          	mv	a2,a0
    a49c:	00058693          	mv	a3,a1
    a4a0:	000a8513          	mv	a0,s5
    a4a4:	00090593          	mv	a1,s2
    a4a8:	ca8f70ef          	jal	ra,1950 <__subdf3>
    a4ac:	05c12783          	lw	a5,92(sp)
    a4b0:	00198993          	addi	s3,s3,1
    a4b4:	00050a13          	mv	s4,a0
    a4b8:	03078793          	addi	a5,a5,48
    a4bc:	fef98fa3          	sb	a5,-1(s3)
    a4c0:	03c12783          	lw	a5,60(sp)
    a4c4:	00058913          	mv	s2,a1
    a4c8:	08f99063          	bne	s3,a5,a548 <_dtoa_r+0xa0c>
    a4cc:	0000dab7          	lui	s5,0xd
    a4d0:	040aa603          	lw	a2,64(s5) # d040 <__device_handles_end+0x50>
    a4d4:	044aa683          	lw	a3,68(s5)
    a4d8:	04812503          	lw	a0,72(sp)
    a4dc:	000b0593          	mv	a1,s6
    a4e0:	e01f80ef          	jal	ra,32e0 <__adddf3>
    a4e4:	00050613          	mv	a2,a0
    a4e8:	00058693          	mv	a3,a1
    a4ec:	000a0513          	mv	a0,s4
    a4f0:	00090593          	mv	a1,s2
    a4f4:	db1f60ef          	jal	ra,12a4 <__gedf2>
    a4f8:	14a04663          	bgtz	a0,a644 <_dtoa_r+0xb08>
    a4fc:	04812603          	lw	a2,72(sp)
    a500:	040aa503          	lw	a0,64(s5)
    a504:	044aa583          	lw	a1,68(s5)
    a508:	000b0693          	mv	a3,s6
    a50c:	c44f70ef          	jal	ra,1950 <__subdf3>
    a510:	00050613          	mv	a2,a0
    a514:	00058693          	mv	a3,a1
    a518:	000a0513          	mv	a0,s4
    a51c:	00090593          	mv	a1,s2
    a520:	e24f90ef          	jal	ra,3b44 <__ledf2>
    a524:	c80556e3          	bgez	a0,a1b0 <_dtoa_r+0x674>
    a528:	03000793          	li	a5,48
    a52c:	04012983          	lw	s3,64(sp)
    a530:	fff98713          	addi	a4,s3,-1
    a534:	04e12023          	sw	a4,64(sp)
    a538:	fff9c703          	lbu	a4,-1(s3)
    a53c:	fef708e3          	beq	a4,a5,a52c <_dtoa_r+0x9f0>
    a540:	01812403          	lw	s0,24(sp)
    a544:	0d00006f          	j	a614 <_dtoa_r+0xad8>
    a548:	05012603          	lw	a2,80(sp)
    a54c:	05412683          	lw	a3,84(sp)
    a550:	e39f60ef          	jal	ra,1388 <__muldf3>
    a554:	00050a93          	mv	s5,a0
    a558:	00058913          	mv	s2,a1
    a55c:	f29ff06f          	j	a484 <_dtoa_r+0x948>
    a560:	01012783          	lw	a5,16(sp)
    a564:	000b0c93          	mv	s9,s6
    a568:	00098d93          	mv	s11,s3
    a56c:	00178c13          	addi	s8,a5,1
    a570:	01a78d33          	add	s10,a5,s10
    a574:	0000d7b7          	lui	a5,0xd
    a578:	0287ab03          	lw	s6,40(a5) # d028 <__device_handles_end+0x38>
    a57c:	02c7ab83          	lw	s7,44(a5)
    a580:	000a0613          	mv	a2,s4
    a584:	000a8693          	mv	a3,s5
    a588:	000d8513          	mv	a0,s11
    a58c:	000c8593          	mv	a1,s9
    a590:	e34f60ef          	jal	ra,bc4 <__divdf3>
    a594:	ee0f90ef          	jal	ra,3c74 <__fixdfsi>
    a598:	00050913          	mv	s2,a0
    a59c:	f58f90ef          	jal	ra,3cf4 <__floatsidf>
    a5a0:	000a0613          	mv	a2,s4
    a5a4:	000a8693          	mv	a3,s5
    a5a8:	de1f60ef          	jal	ra,1388 <__muldf3>
    a5ac:	00058693          	mv	a3,a1
    a5b0:	00050613          	mv	a2,a0
    a5b4:	000c8593          	mv	a1,s9
    a5b8:	000d8513          	mv	a0,s11
    a5bc:	b94f70ef          	jal	ra,1950 <__subdf3>
    a5c0:	03090693          	addi	a3,s2,48
    a5c4:	fedc0fa3          	sb	a3,-1(s8)
    a5c8:	000c0993          	mv	s3,s8
    a5cc:	0b8d1e63          	bne	s10,s8,a688 <_dtoa_r+0xb4c>
    a5d0:	00050613          	mv	a2,a0
    a5d4:	00058693          	mv	a3,a1
    a5d8:	d09f80ef          	jal	ra,32e0 <__adddf3>
    a5dc:	000a0613          	mv	a2,s4
    a5e0:	000a8693          	mv	a3,s5
    a5e4:	00050b93          	mv	s7,a0
    a5e8:	00058b13          	mv	s6,a1
    a5ec:	cb9f60ef          	jal	ra,12a4 <__gedf2>
    a5f0:	04a04863          	bgtz	a0,a640 <_dtoa_r+0xb04>
    a5f4:	000a0613          	mv	a2,s4
    a5f8:	000a8693          	mv	a3,s5
    a5fc:	000b8513          	mv	a0,s7
    a600:	000b0593          	mv	a1,s6
    a604:	cb4f90ef          	jal	ra,3ab8 <__eqdf2>
    a608:	00051663          	bnez	a0,a614 <_dtoa_r+0xad8>
    a60c:	00197913          	andi	s2,s2,1
    a610:	02091863          	bnez	s2,a640 <_dtoa_r+0xb04>
    a614:	00c12583          	lw	a1,12(sp)
    a618:	00048513          	mv	a0,s1
    a61c:	3d9000ef          	jal	ra,b1f4 <_Bfree>
    a620:	03812783          	lw	a5,56(sp)
    a624:	00098023          	sb	zero,0(s3)
    a628:	00140513          	addi	a0,s0,1
    a62c:	00a7a023          	sw	a0,0(a5)
    a630:	02412783          	lw	a5,36(sp)
    a634:	e4078a63          	beqz	a5,9c88 <_dtoa_r+0x14c>
    a638:	0137a023          	sw	s3,0(a5)
    a63c:	e4cff06f          	j	9c88 <_dtoa_r+0x14c>
    a640:	00812c23          	sw	s0,24(sp)
    a644:	00098793          	mv	a5,s3
    a648:	03900713          	li	a4,57
    a64c:	00078993          	mv	s3,a5
    a650:	fff7c683          	lbu	a3,-1(a5)
    a654:	fff78793          	addi	a5,a5,-1
    a658:	02e69063          	bne	a3,a4,a678 <_dtoa_r+0xb3c>
    a65c:	01012683          	lw	a3,16(sp)
    a660:	fef696e3          	bne	a3,a5,a64c <_dtoa_r+0xb10>
    a664:	01812703          	lw	a4,24(sp)
    a668:	00170713          	addi	a4,a4,1
    a66c:	00e12c23          	sw	a4,24(sp)
    a670:	03000713          	li	a4,48
    a674:	00e68023          	sb	a4,0(a3)
    a678:	0007c703          	lbu	a4,0(a5)
    a67c:	00170713          	addi	a4,a4,1
    a680:	00e78023          	sb	a4,0(a5)
    a684:	ebdff06f          	j	a540 <_dtoa_r+0xa04>
    a688:	000b0613          	mv	a2,s6
    a68c:	000b8693          	mv	a3,s7
    a690:	cf9f60ef          	jal	ra,1388 <__muldf3>
    a694:	00000613          	li	a2,0
    a698:	00000693          	li	a3,0
    a69c:	00050d93          	mv	s11,a0
    a6a0:	00058c93          	mv	s9,a1
    a6a4:	001c0c13          	addi	s8,s8,1
    a6a8:	c10f90ef          	jal	ra,3ab8 <__eqdf2>
    a6ac:	ec051ae3          	bnez	a0,a580 <_dtoa_r+0xa44>
    a6b0:	f65ff06f          	j	a614 <_dtoa_r+0xad8>
    a6b4:	01c12703          	lw	a4,28(sp)
    a6b8:	16070c63          	beqz	a4,a830 <_dtoa_r+0xcf4>
    a6bc:	01412683          	lw	a3,20(sp)
    a6c0:	00100713          	li	a4,1
    a6c4:	12d74463          	blt	a4,a3,a7ec <_dtoa_r+0xcb0>
    a6c8:	05812703          	lw	a4,88(sp)
    a6cc:	43378793          	addi	a5,a5,1075
    a6d0:	00071863          	bnez	a4,a6e0 <_dtoa_r+0xba4>
    a6d4:	06812703          	lw	a4,104(sp)
    a6d8:	03600793          	li	a5,54
    a6dc:	40e787b3          	sub	a5,a5,a4
    a6e0:	000c8a13          	mv	s4,s9
    a6e4:	000b8a93          	mv	s5,s7
    a6e8:	00100593          	li	a1,1
    a6ec:	00048513          	mv	a0,s1
    a6f0:	00fb8bb3          	add	s7,s7,a5
    a6f4:	00fc0c33          	add	s8,s8,a5
    a6f8:	5d5000ef          	jal	ra,b4cc <__i2b>
    a6fc:	00050913          	mv	s2,a0
    a700:	03505063          	blez	s5,a720 <_dtoa_r+0xbe4>
    a704:	01805e63          	blez	s8,a720 <_dtoa_r+0xbe4>
    a708:	000a8793          	mv	a5,s5
    a70c:	015c5463          	bge	s8,s5,a714 <_dtoa_r+0xbd8>
    a710:	000c0793          	mv	a5,s8
    a714:	40fb8bb3          	sub	s7,s7,a5
    a718:	40fa8ab3          	sub	s5,s5,a5
    a71c:	40fc0c33          	sub	s8,s8,a5
    a720:	060c8263          	beqz	s9,a784 <_dtoa_r+0xc48>
    a724:	01c12783          	lw	a5,28(sp)
    a728:	10078c63          	beqz	a5,a840 <_dtoa_r+0xd04>
    a72c:	05405063          	blez	s4,a76c <_dtoa_r+0xc30>
    a730:	00090593          	mv	a1,s2
    a734:	000a0613          	mv	a2,s4
    a738:	00048513          	mv	a0,s1
    a73c:	7ed000ef          	jal	ra,b728 <__pow5mult>
    a740:	00c12603          	lw	a2,12(sp)
    a744:	00050593          	mv	a1,a0
    a748:	00050913          	mv	s2,a0
    a74c:	00048513          	mv	a0,s1
    a750:	5d1000ef          	jal	ra,b520 <__multiply>
    a754:	00c12583          	lw	a1,12(sp)
    a758:	00a12c23          	sw	a0,24(sp)
    a75c:	00048513          	mv	a0,s1
    a760:	295000ef          	jal	ra,b1f4 <_Bfree>
    a764:	01812783          	lw	a5,24(sp)
    a768:	00f12623          	sw	a5,12(sp)
    a76c:	414c8633          	sub	a2,s9,s4
    a770:	014c8a63          	beq	s9,s4,a784 <_dtoa_r+0xc48>
    a774:	00c12583          	lw	a1,12(sp)
    a778:	00048513          	mv	a0,s1
    a77c:	7ad000ef          	jal	ra,b728 <__pow5mult>
    a780:	00a12623          	sw	a0,12(sp)
    a784:	00100593          	li	a1,1
    a788:	00048513          	mv	a0,s1
    a78c:	541000ef          	jal	ra,b4cc <__i2b>
    a790:	02812783          	lw	a5,40(sp)
    a794:	00050a13          	mv	s4,a0
    a798:	0af05863          	blez	a5,a848 <_dtoa_r+0xd0c>
    a79c:	00078613          	mv	a2,a5
    a7a0:	00050593          	mv	a1,a0
    a7a4:	00048513          	mv	a0,s1
    a7a8:	781000ef          	jal	ra,b728 <__pow5mult>
    a7ac:	01412703          	lw	a4,20(sp)
    a7b0:	00100793          	li	a5,1
    a7b4:	00050a13          	mv	s4,a0
    a7b8:	00000c93          	li	s9,0
    a7bc:	0ae7c463          	blt	a5,a4,a864 <_dtoa_r+0xd28>
    a7c0:	00000c93          	li	s9,0
    a7c4:	08099a63          	bnez	s3,a858 <_dtoa_r+0xd1c>
    a7c8:	00cb1793          	slli	a5,s6,0xc
    a7cc:	08079663          	bnez	a5,a858 <_dtoa_r+0xd1c>
    a7d0:	7ff005b7          	lui	a1,0x7ff00
    a7d4:	00bb7b33          	and	s6,s6,a1
    a7d8:	080b0063          	beqz	s6,a858 <_dtoa_r+0xd1c>
    a7dc:	001b8b93          	addi	s7,s7,1
    a7e0:	001c0c13          	addi	s8,s8,1
    a7e4:	00100c93          	li	s9,1
    a7e8:	0700006f          	j	a858 <_dtoa_r+0xd1c>
    a7ec:	fffd0a13          	addi	s4,s10,-1
    a7f0:	014ccc63          	blt	s9,s4,a808 <_dtoa_r+0xccc>
    a7f4:	414c8a33          	sub	s4,s9,s4
    a7f8:	020d5663          	bgez	s10,a824 <_dtoa_r+0xce8>
    a7fc:	41ab8ab3          	sub	s5,s7,s10
    a800:	00000793          	li	a5,0
    a804:	ee5ff06f          	j	a6e8 <_dtoa_r+0xbac>
    a808:	02812783          	lw	a5,40(sp)
    a80c:	419a0cb3          	sub	s9,s4,s9
    a810:	019787b3          	add	a5,a5,s9
    a814:	02f12423          	sw	a5,40(sp)
    a818:	000a0c93          	mv	s9,s4
    a81c:	00000a13          	li	s4,0
    a820:	fd9ff06f          	j	a7f8 <_dtoa_r+0xcbc>
    a824:	000b8a93          	mv	s5,s7
    a828:	000d0793          	mv	a5,s10
    a82c:	ebdff06f          	j	a6e8 <_dtoa_r+0xbac>
    a830:	000c8a13          	mv	s4,s9
    a834:	000b8a93          	mv	s5,s7
    a838:	00000913          	li	s2,0
    a83c:	ec5ff06f          	j	a700 <_dtoa_r+0xbc4>
    a840:	000c8613          	mv	a2,s9
    a844:	f31ff06f          	j	a774 <_dtoa_r+0xc38>
    a848:	01412703          	lw	a4,20(sp)
    a84c:	00100793          	li	a5,1
    a850:	00000c93          	li	s9,0
    a854:	f6e7d6e3          	bge	a5,a4,a7c0 <_dtoa_r+0xc84>
    a858:	02812783          	lw	a5,40(sp)
    a85c:	00100513          	li	a0,1
    a860:	02078263          	beqz	a5,a884 <_dtoa_r+0xd48>
    a864:	010a2783          	lw	a5,16(s4)
    a868:	00378793          	addi	a5,a5,3
    a86c:	00279793          	slli	a5,a5,0x2
    a870:	00fa07b3          	add	a5,s4,a5
    a874:	0047a503          	lw	a0,4(a5)
    a878:	331000ef          	jal	ra,b3a8 <__hi0bits>
    a87c:	02000793          	li	a5,32
    a880:	40a78533          	sub	a0,a5,a0
    a884:	00ac0533          	add	a0,s8,a0
    a888:	01f57513          	andi	a0,a0,31
    a88c:	0c050463          	beqz	a0,a954 <_dtoa_r+0xe18>
    a890:	02000793          	li	a5,32
    a894:	40a787b3          	sub	a5,a5,a0
    a898:	00400713          	li	a4,4
    a89c:	0af75863          	bge	a4,a5,a94c <_dtoa_r+0xe10>
    a8a0:	01c00793          	li	a5,28
    a8a4:	40a78533          	sub	a0,a5,a0
    a8a8:	00ab8bb3          	add	s7,s7,a0
    a8ac:	00aa8ab3          	add	s5,s5,a0
    a8b0:	00ac0c33          	add	s8,s8,a0
    a8b4:	01705c63          	blez	s7,a8cc <_dtoa_r+0xd90>
    a8b8:	00c12583          	lw	a1,12(sp)
    a8bc:	000b8613          	mv	a2,s7
    a8c0:	00048513          	mv	a0,s1
    a8c4:	7a9000ef          	jal	ra,b86c <__lshift>
    a8c8:	00a12623          	sw	a0,12(sp)
    a8cc:	01805c63          	blez	s8,a8e4 <_dtoa_r+0xda8>
    a8d0:	000a0593          	mv	a1,s4
    a8d4:	000c0613          	mv	a2,s8
    a8d8:	00048513          	mv	a0,s1
    a8dc:	791000ef          	jal	ra,b86c <__lshift>
    a8e0:	00050a13          	mv	s4,a0
    a8e4:	03412783          	lw	a5,52(sp)
    a8e8:	06078a63          	beqz	a5,a95c <_dtoa_r+0xe20>
    a8ec:	00c12503          	lw	a0,12(sp)
    a8f0:	000a0593          	mv	a1,s4
    a8f4:	0fc010ef          	jal	ra,b9f0 <__mcmp>
    a8f8:	06055263          	bgez	a0,a95c <_dtoa_r+0xe20>
    a8fc:	00c12583          	lw	a1,12(sp)
    a900:	00000693          	li	a3,0
    a904:	00a00613          	li	a2,10
    a908:	00048513          	mv	a0,s1
    a90c:	17d000ef          	jal	ra,b288 <__multadd>
    a910:	01c12783          	lw	a5,28(sp)
    a914:	00a12623          	sw	a0,12(sp)
    a918:	fff40413          	addi	s0,s0,-1
    a91c:	3a078263          	beqz	a5,acc0 <_dtoa_r+0x1184>
    a920:	00090593          	mv	a1,s2
    a924:	00000693          	li	a3,0
    a928:	00a00613          	li	a2,10
    a92c:	00048513          	mv	a0,s1
    a930:	159000ef          	jal	ra,b288 <__multadd>
    a934:	00050913          	mv	s2,a0
    a938:	0db04863          	bgtz	s11,aa08 <_dtoa_r+0xecc>
    a93c:	01412703          	lw	a4,20(sp)
    a940:	00200793          	li	a5,2
    a944:	02e7c663          	blt	a5,a4,a970 <_dtoa_r+0xe34>
    a948:	0c00006f          	j	aa08 <_dtoa_r+0xecc>
    a94c:	f6e784e3          	beq	a5,a4,a8b4 <_dtoa_r+0xd78>
    a950:	00078513          	mv	a0,a5
    a954:	01c50513          	addi	a0,a0,28
    a958:	f51ff06f          	j	a8a8 <_dtoa_r+0xd6c>
    a95c:	0ba04063          	bgtz	s10,a9fc <_dtoa_r+0xec0>
    a960:	01412703          	lw	a4,20(sp)
    a964:	00200793          	li	a5,2
    a968:	08e7da63          	bge	a5,a4,a9fc <_dtoa_r+0xec0>
    a96c:	000d0d93          	mv	s11,s10
    a970:	020d9663          	bnez	s11,a99c <_dtoa_r+0xe60>
    a974:	000a0593          	mv	a1,s4
    a978:	00000693          	li	a3,0
    a97c:	00500613          	li	a2,5
    a980:	00048513          	mv	a0,s1
    a984:	105000ef          	jal	ra,b288 <__multadd>
    a988:	00050a13          	mv	s4,a0
    a98c:	00050593          	mv	a1,a0
    a990:	00c12503          	lw	a0,12(sp)
    a994:	05c010ef          	jal	ra,b9f0 <__mcmp>
    a998:	88a044e3          	bgtz	a0,a220 <_dtoa_r+0x6e4>
    a99c:	02012783          	lw	a5,32(sp)
    a9a0:	01012983          	lw	s3,16(sp)
    a9a4:	fff7c413          	not	s0,a5
    a9a8:	00000b13          	li	s6,0
    a9ac:	000a0593          	mv	a1,s4
    a9b0:	00048513          	mv	a0,s1
    a9b4:	041000ef          	jal	ra,b1f4 <_Bfree>
    a9b8:	c4090ee3          	beqz	s2,a614 <_dtoa_r+0xad8>
    a9bc:	000b0a63          	beqz	s6,a9d0 <_dtoa_r+0xe94>
    a9c0:	012b0863          	beq	s6,s2,a9d0 <_dtoa_r+0xe94>
    a9c4:	000b0593          	mv	a1,s6
    a9c8:	00048513          	mv	a0,s1
    a9cc:	029000ef          	jal	ra,b1f4 <_Bfree>
    a9d0:	00090593          	mv	a1,s2
    a9d4:	00048513          	mv	a0,s1
    a9d8:	01d000ef          	jal	ra,b1f4 <_Bfree>
    a9dc:	c39ff06f          	j	a614 <_dtoa_r+0xad8>
    a9e0:	00000a13          	li	s4,0
    a9e4:	00000913          	li	s2,0
    a9e8:	fb5ff06f          	j	a99c <_dtoa_r+0xe60>
    a9ec:	01812403          	lw	s0,24(sp)
    a9f0:	00000a13          	li	s4,0
    a9f4:	00000913          	li	s2,0
    a9f8:	829ff06f          	j	a220 <_dtoa_r+0x6e4>
    a9fc:	01c12783          	lw	a5,28(sp)
    aa00:	000d0d93          	mv	s11,s10
    aa04:	2c078663          	beqz	a5,acd0 <_dtoa_r+0x1194>
    aa08:	01505c63          	blez	s5,aa20 <_dtoa_r+0xee4>
    aa0c:	00090593          	mv	a1,s2
    aa10:	000a8613          	mv	a2,s5
    aa14:	00048513          	mv	a0,s1
    aa18:	655000ef          	jal	ra,b86c <__lshift>
    aa1c:	00050913          	mv	s2,a0
    aa20:	00090513          	mv	a0,s2
    aa24:	040c8a63          	beqz	s9,aa78 <_dtoa_r+0xf3c>
    aa28:	00492583          	lw	a1,4(s2)
    aa2c:	00048513          	mv	a0,s1
    aa30:	6c4000ef          	jal	ra,b0f4 <_Balloc>
    aa34:	00050a93          	mv	s5,a0
    aa38:	00051c63          	bnez	a0,aa50 <_dtoa_r+0xf14>
    aa3c:	0000e6b7          	lui	a3,0xe
    aa40:	9a468693          	addi	a3,a3,-1628 # d9a4 <_ctype_+0x220>
    aa44:	00000613          	li	a2,0
    aa48:	2ea00593          	li	a1,746
    aa4c:	978ff06f          	j	9bc4 <_dtoa_r+0x88>
    aa50:	01092603          	lw	a2,16(s2)
    aa54:	00c90593          	addi	a1,s2,12
    aa58:	00c50513          	addi	a0,a0,12
    aa5c:	00260613          	addi	a2,a2,2
    aa60:	00261613          	slli	a2,a2,0x2
    aa64:	83df80ef          	jal	ra,32a0 <memcpy>
    aa68:	00100613          	li	a2,1
    aa6c:	000a8593          	mv	a1,s5
    aa70:	00048513          	mv	a0,s1
    aa74:	5f9000ef          	jal	ra,b86c <__lshift>
    aa78:	01012783          	lw	a5,16(sp)
    aa7c:	00090b13          	mv	s6,s2
    aa80:	00050913          	mv	s2,a0
    aa84:	00178c13          	addi	s8,a5,1
    aa88:	01b787b3          	add	a5,a5,s11
    aa8c:	00f12c23          	sw	a5,24(sp)
    aa90:	0019fd93          	andi	s11,s3,1
    aa94:	00c12503          	lw	a0,12(sp)
    aa98:	000a0593          	mv	a1,s4
    aa9c:	fffc0d13          	addi	s10,s8,-1
    aaa0:	ed1fe0ef          	jal	ra,9970 <quorem>
    aaa4:	00050c93          	mv	s9,a0
    aaa8:	03050a93          	addi	s5,a0,48
    aaac:	00c12503          	lw	a0,12(sp)
    aab0:	000b0593          	mv	a1,s6
    aab4:	73d000ef          	jal	ra,b9f0 <__mcmp>
    aab8:	000a0593          	mv	a1,s4
    aabc:	00050b93          	mv	s7,a0
    aac0:	00090613          	mv	a2,s2
    aac4:	00048513          	mv	a0,s1
    aac8:	77d000ef          	jal	ra,ba44 <__mdiff>
    aacc:	00c52683          	lw	a3,12(a0)
    aad0:	00050593          	mv	a1,a0
    aad4:	00100713          	li	a4,1
    aad8:	00069c63          	bnez	a3,aaf0 <_dtoa_r+0xfb4>
    aadc:	00a12e23          	sw	a0,28(sp)
    aae0:	00c12503          	lw	a0,12(sp)
    aae4:	70d000ef          	jal	ra,b9f0 <__mcmp>
    aae8:	01c12583          	lw	a1,28(sp)
    aaec:	00050713          	mv	a4,a0
    aaf0:	00048513          	mv	a0,s1
    aaf4:	00e12e23          	sw	a4,28(sp)
    aaf8:	6fc000ef          	jal	ra,b1f4 <_Bfree>
    aafc:	01412783          	lw	a5,20(sp)
    ab00:	01c12703          	lw	a4,28(sp)
    ab04:	000c0993          	mv	s3,s8
    ab08:	00e7e6b3          	or	a3,a5,a4
    ab0c:	01b6e6b3          	or	a3,a3,s11
    ab10:	00069e63          	bnez	a3,ab2c <_dtoa_r+0xff0>
    ab14:	03900713          	li	a4,57
    ab18:	06ea8063          	beq	s5,a4,ab78 <_dtoa_r+0x103c>
    ab1c:	01705463          	blez	s7,ab24 <_dtoa_r+0xfe8>
    ab20:	031c8a93          	addi	s5,s9,49
    ab24:	015d0023          	sb	s5,0(s10)
    ab28:	e85ff06f          	j	a9ac <_dtoa_r+0xe70>
    ab2c:	000bca63          	bltz	s7,ab40 <_dtoa_r+0x1004>
    ab30:	01412783          	lw	a5,20(sp)
    ab34:	0177ebb3          	or	s7,a5,s7
    ab38:	01bbebb3          	or	s7,s7,s11
    ab3c:	060b9463          	bnez	s7,aba4 <_dtoa_r+0x1068>
    ab40:	fee052e3          	blez	a4,ab24 <_dtoa_r+0xfe8>
    ab44:	00c12583          	lw	a1,12(sp)
    ab48:	00100613          	li	a2,1
    ab4c:	00048513          	mv	a0,s1
    ab50:	51d000ef          	jal	ra,b86c <__lshift>
    ab54:	000a0593          	mv	a1,s4
    ab58:	00a12623          	sw	a0,12(sp)
    ab5c:	695000ef          	jal	ra,b9f0 <__mcmp>
    ab60:	00a04863          	bgtz	a0,ab70 <_dtoa_r+0x1034>
    ab64:	fc0510e3          	bnez	a0,ab24 <_dtoa_r+0xfe8>
    ab68:	001af713          	andi	a4,s5,1
    ab6c:	fa070ce3          	beqz	a4,ab24 <_dtoa_r+0xfe8>
    ab70:	03900713          	li	a4,57
    ab74:	faea96e3          	bne	s5,a4,ab20 <_dtoa_r+0xfe4>
    ab78:	03900793          	li	a5,57
    ab7c:	00fd0023          	sb	a5,0(s10)
    ab80:	00098793          	mv	a5,s3
    ab84:	03900693          	li	a3,57
    ab88:	00078993          	mv	s3,a5
    ab8c:	fff9c703          	lbu	a4,-1(s3)
    ab90:	fff78793          	addi	a5,a5,-1
    ab94:	0ed70c63          	beq	a4,a3,ac8c <_dtoa_r+0x1150>
    ab98:	00170713          	addi	a4,a4,1
    ab9c:	00e78023          	sb	a4,0(a5)
    aba0:	e0dff06f          	j	a9ac <_dtoa_r+0xe70>
    aba4:	00e05c63          	blez	a4,abbc <_dtoa_r+0x1080>
    aba8:	03900713          	li	a4,57
    abac:	fcea86e3          	beq	s5,a4,ab78 <_dtoa_r+0x103c>
    abb0:	001a8793          	addi	a5,s5,1
    abb4:	00fd0023          	sb	a5,0(s10)
    abb8:	df5ff06f          	j	a9ac <_dtoa_r+0xe70>
    abbc:	01812783          	lw	a5,24(sp)
    abc0:	ff5c0fa3          	sb	s5,-1(s8)
    abc4:	09878063          	beq	a5,s8,ac44 <_dtoa_r+0x1108>
    abc8:	00c12583          	lw	a1,12(sp)
    abcc:	00000693          	li	a3,0
    abd0:	00a00613          	li	a2,10
    abd4:	00048513          	mv	a0,s1
    abd8:	6b0000ef          	jal	ra,b288 <__multadd>
    abdc:	00a12623          	sw	a0,12(sp)
    abe0:	00000693          	li	a3,0
    abe4:	00a00613          	li	a2,10
    abe8:	000b0593          	mv	a1,s6
    abec:	00048513          	mv	a0,s1
    abf0:	012b1c63          	bne	s6,s2,ac08 <_dtoa_r+0x10cc>
    abf4:	694000ef          	jal	ra,b288 <__multadd>
    abf8:	00050b13          	mv	s6,a0
    abfc:	00050913          	mv	s2,a0
    ac00:	001c0c13          	addi	s8,s8,1
    ac04:	e91ff06f          	j	aa94 <_dtoa_r+0xf58>
    ac08:	680000ef          	jal	ra,b288 <__multadd>
    ac0c:	00090593          	mv	a1,s2
    ac10:	00050b13          	mv	s6,a0
    ac14:	00000693          	li	a3,0
    ac18:	00a00613          	li	a2,10
    ac1c:	00048513          	mv	a0,s1
    ac20:	668000ef          	jal	ra,b288 <__multadd>
    ac24:	00050913          	mv	s2,a0
    ac28:	fd9ff06f          	j	ac00 <_dtoa_r+0x10c4>
    ac2c:	00100993          	li	s3,1
    ac30:	01b05463          	blez	s11,ac38 <_dtoa_r+0x10fc>
    ac34:	000d8993          	mv	s3,s11
    ac38:	01012783          	lw	a5,16(sp)
    ac3c:	00000b13          	li	s6,0
    ac40:	013789b3          	add	s3,a5,s3
    ac44:	00c12583          	lw	a1,12(sp)
    ac48:	00100613          	li	a2,1
    ac4c:	00048513          	mv	a0,s1
    ac50:	41d000ef          	jal	ra,b86c <__lshift>
    ac54:	000a0593          	mv	a1,s4
    ac58:	00a12623          	sw	a0,12(sp)
    ac5c:	595000ef          	jal	ra,b9f0 <__mcmp>
    ac60:	f2a040e3          	bgtz	a0,ab80 <_dtoa_r+0x1044>
    ac64:	00051663          	bnez	a0,ac70 <_dtoa_r+0x1134>
    ac68:	001af793          	andi	a5,s5,1
    ac6c:	f0079ae3          	bnez	a5,ab80 <_dtoa_r+0x1044>
    ac70:	00098793          	mv	a5,s3
    ac74:	03000713          	li	a4,48
    ac78:	00078993          	mv	s3,a5
    ac7c:	fff7c683          	lbu	a3,-1(a5)
    ac80:	fff78793          	addi	a5,a5,-1
    ac84:	fee68ae3          	beq	a3,a4,ac78 <_dtoa_r+0x113c>
    ac88:	d25ff06f          	j	a9ac <_dtoa_r+0xe70>
    ac8c:	01012703          	lw	a4,16(sp)
    ac90:	eef71ce3          	bne	a4,a5,ab88 <_dtoa_r+0x104c>
    ac94:	03100793          	li	a5,49
    ac98:	00140413          	addi	s0,s0,1
    ac9c:	00f70023          	sb	a5,0(a4)
    aca0:	d0dff06f          	j	a9ac <_dtoa_r+0xe70>
    aca4:	02412783          	lw	a5,36(sp)
    aca8:	0000e537          	lui	a0,0xe
    acac:	00078463          	beqz	a5,acb4 <_dtoa_r+0x1178>
    acb0:	fc1fe06f          	j	9c70 <_dtoa_r+0x134>
    acb4:	91850793          	addi	a5,a0,-1768 # d918 <_ctype_+0x194>
    acb8:	00f12823          	sw	a5,16(sp)
    acbc:	fcdfe06f          	j	9c88 <_dtoa_r+0x14c>
    acc0:	01b04863          	bgtz	s11,acd0 <_dtoa_r+0x1194>
    acc4:	01412703          	lw	a4,20(sp)
    acc8:	00200793          	li	a5,2
    accc:	cae7c2e3          	blt	a5,a4,a970 <_dtoa_r+0xe34>
    acd0:	00000993          	li	s3,0
    acd4:	00c12503          	lw	a0,12(sp)
    acd8:	000a0593          	mv	a1,s4
    acdc:	c95fe0ef          	jal	ra,9970 <quorem>
    ace0:	01012783          	lw	a5,16(sp)
    ace4:	03050a93          	addi	s5,a0,48
    ace8:	01378733          	add	a4,a5,s3
    acec:	01570023          	sb	s5,0(a4)
    acf0:	00198993          	addi	s3,s3,1
    acf4:	f3b9dce3          	bge	s3,s11,ac2c <_dtoa_r+0x10f0>
    acf8:	00c12583          	lw	a1,12(sp)
    acfc:	00000693          	li	a3,0
    ad00:	00a00613          	li	a2,10
    ad04:	00048513          	mv	a0,s1
    ad08:	580000ef          	jal	ra,b288 <__multadd>
    ad0c:	00a12623          	sw	a0,12(sp)
    ad10:	fc5ff06f          	j	acd4 <_dtoa_r+0x1198>

0000ad14 <std>:
    ad14:	ff010113          	addi	sp,sp,-16
    ad18:	00812423          	sw	s0,8(sp)
    ad1c:	00112623          	sw	ra,12(sp)
    ad20:	00050413          	mv	s0,a0
    ad24:	00b51623          	sh	a1,12(a0)
    ad28:	00c51723          	sh	a2,14(a0)
    ad2c:	00052023          	sw	zero,0(a0)
    ad30:	00052223          	sw	zero,4(a0)
    ad34:	00052423          	sw	zero,8(a0)
    ad38:	06052223          	sw	zero,100(a0)
    ad3c:	00052823          	sw	zero,16(a0)
    ad40:	00052a23          	sw	zero,20(a0)
    ad44:	00052c23          	sw	zero,24(a0)
    ad48:	00800613          	li	a2,8
    ad4c:	00000593          	li	a1,0
    ad50:	05c50513          	addi	a0,a0,92
    ad54:	d70f80ef          	jal	ra,32c4 <memset>
    ad58:	0000c7b7          	lui	a5,0xc
    ad5c:	2c478793          	addi	a5,a5,708 # c2c4 <__sread>
    ad60:	02f42223          	sw	a5,36(s0)
    ad64:	0000c7b7          	lui	a5,0xc
    ad68:	31478793          	addi	a5,a5,788 # c314 <__swrite>
    ad6c:	02f42423          	sw	a5,40(s0)
    ad70:	0000c7b7          	lui	a5,0xc
    ad74:	39878793          	addi	a5,a5,920 # c398 <__sseek>
    ad78:	02f42623          	sw	a5,44(s0)
    ad7c:	0000c7b7          	lui	a5,0xc
    ad80:	3f078793          	addi	a5,a5,1008 # c3f0 <__sclose>
    ad84:	00c12083          	lw	ra,12(sp)
    ad88:	02842023          	sw	s0,32(s0)
    ad8c:	02f42823          	sw	a5,48(s0)
    ad90:	00812403          	lw	s0,8(sp)
    ad94:	01010113          	addi	sp,sp,16
    ad98:	00008067          	ret

0000ad9c <_cleanup_r>:
    ad9c:	0000d5b7          	lui	a1,0xd
    ada0:	99058593          	addi	a1,a1,-1648 # c990 <_fflush_r>
    ada4:	2580006f          	j	affc <_fwalk_reent>

0000ada8 <__sfmoreglue>:
    ada8:	ff010113          	addi	sp,sp,-16
    adac:	00912223          	sw	s1,4(sp)
    adb0:	06800613          	li	a2,104
    adb4:	fff58493          	addi	s1,a1,-1
    adb8:	02c484b3          	mul	s1,s1,a2
    adbc:	01212023          	sw	s2,0(sp)
    adc0:	00058913          	mv	s2,a1
    adc4:	00812423          	sw	s0,8(sp)
    adc8:	00112623          	sw	ra,12(sp)
    adcc:	07448593          	addi	a1,s1,116
    add0:	a19fd0ef          	jal	ra,87e8 <_malloc_r>
    add4:	00050413          	mv	s0,a0
    add8:	02050063          	beqz	a0,adf8 <__sfmoreglue+0x50>
    addc:	00052023          	sw	zero,0(a0)
    ade0:	01252223          	sw	s2,4(a0)
    ade4:	00c50513          	addi	a0,a0,12
    ade8:	00a42423          	sw	a0,8(s0)
    adec:	06848613          	addi	a2,s1,104
    adf0:	00000593          	li	a1,0
    adf4:	cd0f80ef          	jal	ra,32c4 <memset>
    adf8:	00c12083          	lw	ra,12(sp)
    adfc:	00040513          	mv	a0,s0
    ae00:	00812403          	lw	s0,8(sp)
    ae04:	00412483          	lw	s1,4(sp)
    ae08:	00012903          	lw	s2,0(sp)
    ae0c:	01010113          	addi	sp,sp,16
    ae10:	00008067          	ret

0000ae14 <__sfp_lock_acquire>:
    ae14:	0002f537          	lui	a0,0x2f
    ae18:	ed850513          	addi	a0,a0,-296 # 2eed8 <__lock___sfp_recursive_mutex>
    ae1c:	e50fb06f          	j	646c <__retarget_lock_acquire_recursive>

0000ae20 <__sfp_lock_release>:
    ae20:	0002f537          	lui	a0,0x2f
    ae24:	ed850513          	addi	a0,a0,-296 # 2eed8 <__lock___sfp_recursive_mutex>
    ae28:	e50fb06f          	j	6478 <__retarget_lock_release_recursive>

0000ae2c <__sinit_lock_acquire>:
    ae2c:	0002f537          	lui	a0,0x2f
    ae30:	eec50513          	addi	a0,a0,-276 # 2eeec <__lock___sinit_recursive_mutex>
    ae34:	e38fb06f          	j	646c <__retarget_lock_acquire_recursive>

0000ae38 <__sinit_lock_release>:
    ae38:	0002f537          	lui	a0,0x2f
    ae3c:	eec50513          	addi	a0,a0,-276 # 2eeec <__lock___sinit_recursive_mutex>
    ae40:	e38fb06f          	j	6478 <__retarget_lock_release_recursive>

0000ae44 <__sinit>:
    ae44:	ff010113          	addi	sp,sp,-16
    ae48:	00812423          	sw	s0,8(sp)
    ae4c:	00112623          	sw	ra,12(sp)
    ae50:	00050413          	mv	s0,a0
    ae54:	fd9ff0ef          	jal	ra,ae2c <__sinit_lock_acquire>
    ae58:	01842783          	lw	a5,24(s0)
    ae5c:	00078a63          	beqz	a5,ae70 <__sinit+0x2c>
    ae60:	00812403          	lw	s0,8(sp)
    ae64:	00c12083          	lw	ra,12(sp)
    ae68:	01010113          	addi	sp,sp,16
    ae6c:	fcdff06f          	j	ae38 <__sinit_lock_release>
    ae70:	0000b7b7          	lui	a5,0xb
    ae74:	d9c78793          	addi	a5,a5,-612 # ad9c <_cleanup_r>
    ae78:	02f42423          	sw	a5,40(s0)
    ae7c:	0000d7b7          	lui	a5,0xd
    ae80:	0587a783          	lw	a5,88(a5) # d058 <_global_impure_ptr>
    ae84:	04042423          	sw	zero,72(s0)
    ae88:	04042623          	sw	zero,76(s0)
    ae8c:	04042823          	sw	zero,80(s0)
    ae90:	00879663          	bne	a5,s0,ae9c <__sinit+0x58>
    ae94:	00100793          	li	a5,1
    ae98:	00f42c23          	sw	a5,24(s0)
    ae9c:	00040513          	mv	a0,s0
    aea0:	05c000ef          	jal	ra,aefc <__sfp>
    aea4:	00a42223          	sw	a0,4(s0)
    aea8:	00040513          	mv	a0,s0
    aeac:	050000ef          	jal	ra,aefc <__sfp>
    aeb0:	00a42423          	sw	a0,8(s0)
    aeb4:	00040513          	mv	a0,s0
    aeb8:	044000ef          	jal	ra,aefc <__sfp>
    aebc:	00a42623          	sw	a0,12(s0)
    aec0:	00442503          	lw	a0,4(s0)
    aec4:	00000613          	li	a2,0
    aec8:	00400593          	li	a1,4
    aecc:	e49ff0ef          	jal	ra,ad14 <std>
    aed0:	00842503          	lw	a0,8(s0)
    aed4:	00100613          	li	a2,1
    aed8:	00900593          	li	a1,9
    aedc:	e39ff0ef          	jal	ra,ad14 <std>
    aee0:	00c42503          	lw	a0,12(s0)
    aee4:	00200613          	li	a2,2
    aee8:	01200593          	li	a1,18
    aeec:	e29ff0ef          	jal	ra,ad14 <std>
    aef0:	00100793          	li	a5,1
    aef4:	00f42c23          	sw	a5,24(s0)
    aef8:	f69ff06f          	j	ae60 <__sinit+0x1c>

0000aefc <__sfp>:
    aefc:	ff010113          	addi	sp,sp,-16
    af00:	00912223          	sw	s1,4(sp)
    af04:	01212023          	sw	s2,0(sp)
    af08:	00112623          	sw	ra,12(sp)
    af0c:	00812423          	sw	s0,8(sp)
    af10:	00050913          	mv	s2,a0
    af14:	f01ff0ef          	jal	ra,ae14 <__sfp_lock_acquire>
    af18:	0000d7b7          	lui	a5,0xd
    af1c:	0587a483          	lw	s1,88(a5) # d058 <_global_impure_ptr>
    af20:	0184a783          	lw	a5,24(s1)
    af24:	00079663          	bnez	a5,af30 <__sfp+0x34>
    af28:	00048513          	mv	a0,s1
    af2c:	f19ff0ef          	jal	ra,ae44 <__sinit>
    af30:	04848493          	addi	s1,s1,72
    af34:	0084a403          	lw	s0,8(s1)
    af38:	0044a783          	lw	a5,4(s1)
    af3c:	fff78793          	addi	a5,a5,-1
    af40:	0007da63          	bgez	a5,af54 <__sfp+0x58>
    af44:	0004a783          	lw	a5,0(s1)
    af48:	08078663          	beqz	a5,afd4 <__sfp+0xd8>
    af4c:	0004a483          	lw	s1,0(s1)
    af50:	fe5ff06f          	j	af34 <__sfp+0x38>
    af54:	00c41703          	lh	a4,12(s0)
    af58:	06071a63          	bnez	a4,afcc <__sfp+0xd0>
    af5c:	ffff07b7          	lui	a5,0xffff0
    af60:	00178793          	addi	a5,a5,1 # ffff0001 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff0002>
    af64:	00f42623          	sw	a5,12(s0)
    af68:	05840513          	addi	a0,s0,88
    af6c:	06042223          	sw	zero,100(s0)
    af70:	cd0fb0ef          	jal	ra,6440 <__retarget_lock_init_recursive>
    af74:	eadff0ef          	jal	ra,ae20 <__sfp_lock_release>
    af78:	00800613          	li	a2,8
    af7c:	00042023          	sw	zero,0(s0)
    af80:	00042423          	sw	zero,8(s0)
    af84:	00042223          	sw	zero,4(s0)
    af88:	00042823          	sw	zero,16(s0)
    af8c:	00042a23          	sw	zero,20(s0)
    af90:	00042c23          	sw	zero,24(s0)
    af94:	00000593          	li	a1,0
    af98:	05c40513          	addi	a0,s0,92
    af9c:	b28f80ef          	jal	ra,32c4 <memset>
    afa0:	02042a23          	sw	zero,52(s0)
    afa4:	02042c23          	sw	zero,56(s0)
    afa8:	04042423          	sw	zero,72(s0)
    afac:	04042623          	sw	zero,76(s0)
    afb0:	00c12083          	lw	ra,12(sp)
    afb4:	00040513          	mv	a0,s0
    afb8:	00812403          	lw	s0,8(sp)
    afbc:	00412483          	lw	s1,4(sp)
    afc0:	00012903          	lw	s2,0(sp)
    afc4:	01010113          	addi	sp,sp,16
    afc8:	00008067          	ret
    afcc:	06840413          	addi	s0,s0,104
    afd0:	f6dff06f          	j	af3c <__sfp+0x40>
    afd4:	00400593          	li	a1,4
    afd8:	00090513          	mv	a0,s2
    afdc:	dcdff0ef          	jal	ra,ada8 <__sfmoreglue>
    afe0:	00a4a023          	sw	a0,0(s1)
    afe4:	00050413          	mv	s0,a0
    afe8:	f60512e3          	bnez	a0,af4c <__sfp+0x50>
    afec:	e35ff0ef          	jal	ra,ae20 <__sfp_lock_release>
    aff0:	00c00793          	li	a5,12
    aff4:	00f92023          	sw	a5,0(s2)
    aff8:	fb9ff06f          	j	afb0 <__sfp+0xb4>

0000affc <_fwalk_reent>:
    affc:	fd010113          	addi	sp,sp,-48
    b000:	02812423          	sw	s0,40(sp)
    b004:	03212023          	sw	s2,32(sp)
    b008:	01312e23          	sw	s3,28(sp)
    b00c:	01412c23          	sw	s4,24(sp)
    b010:	01612823          	sw	s6,16(sp)
    b014:	01712623          	sw	s7,12(sp)
    b018:	02112623          	sw	ra,44(sp)
    b01c:	02912223          	sw	s1,36(sp)
    b020:	01512a23          	sw	s5,20(sp)
    b024:	00050913          	mv	s2,a0
    b028:	00058a13          	mv	s4,a1
    b02c:	04850413          	addi	s0,a0,72
    b030:	00000993          	li	s3,0
    b034:	00100b13          	li	s6,1
    b038:	fff00b93          	li	s7,-1
    b03c:	00842483          	lw	s1,8(s0)
    b040:	00442a83          	lw	s5,4(s0)
    b044:	fffa8a93          	addi	s5,s5,-1
    b048:	020ade63          	bgez	s5,b084 <_fwalk_reent+0x88>
    b04c:	00042403          	lw	s0,0(s0)
    b050:	fe0416e3          	bnez	s0,b03c <_fwalk_reent+0x40>
    b054:	02c12083          	lw	ra,44(sp)
    b058:	02812403          	lw	s0,40(sp)
    b05c:	02412483          	lw	s1,36(sp)
    b060:	02012903          	lw	s2,32(sp)
    b064:	01812a03          	lw	s4,24(sp)
    b068:	01412a83          	lw	s5,20(sp)
    b06c:	01012b03          	lw	s6,16(sp)
    b070:	00c12b83          	lw	s7,12(sp)
    b074:	00098513          	mv	a0,s3
    b078:	01c12983          	lw	s3,28(sp)
    b07c:	03010113          	addi	sp,sp,48
    b080:	00008067          	ret
    b084:	00c4d783          	lhu	a5,12(s1)
    b088:	00fb7e63          	bgeu	s6,a5,b0a4 <_fwalk_reent+0xa8>
    b08c:	00e49783          	lh	a5,14(s1)
    b090:	01778a63          	beq	a5,s7,b0a4 <_fwalk_reent+0xa8>
    b094:	00048593          	mv	a1,s1
    b098:	00090513          	mv	a0,s2
    b09c:	000a00e7          	jalr	s4
    b0a0:	00a9e9b3          	or	s3,s3,a0
    b0a4:	06848493          	addi	s1,s1,104
    b0a8:	f9dff06f          	j	b044 <_fwalk_reent+0x48>

0000b0ac <_localeconv_r>:
    b0ac:	0002f537          	lui	a0,0x2f
    b0b0:	c0050513          	addi	a0,a0,-1024 # 2ec00 <__global_locale+0xf0>
    b0b4:	00008067          	ret

0000b0b8 <memchr>:
    b0b8:	0ff5f593          	andi	a1,a1,255
    b0bc:	00c50633          	add	a2,a0,a2
    b0c0:	00c51663          	bne	a0,a2,b0cc <memchr+0x14>
    b0c4:	00000513          	li	a0,0
    b0c8:	00008067          	ret
    b0cc:	00054783          	lbu	a5,0(a0)
    b0d0:	feb78ce3          	beq	a5,a1,b0c8 <memchr+0x10>
    b0d4:	00150513          	addi	a0,a0,1
    b0d8:	fe9ff06f          	j	b0c0 <memchr+0x8>

0000b0dc <__malloc_lock>:
    b0dc:	0002f537          	lui	a0,0x2f
    b0e0:	ec450513          	addi	a0,a0,-316 # 2eec4 <__lock___malloc_recursive_mutex>
    b0e4:	b88fb06f          	j	646c <__retarget_lock_acquire_recursive>

0000b0e8 <__malloc_unlock>:
    b0e8:	0002f537          	lui	a0,0x2f
    b0ec:	ec450513          	addi	a0,a0,-316 # 2eec4 <__lock___malloc_recursive_mutex>
    b0f0:	b88fb06f          	j	6478 <__retarget_lock_release_recursive>

0000b0f4 <_Balloc>:
    b0f4:	02452783          	lw	a5,36(a0)
    b0f8:	ff010113          	addi	sp,sp,-16
    b0fc:	00812423          	sw	s0,8(sp)
    b100:	00912223          	sw	s1,4(sp)
    b104:	00112623          	sw	ra,12(sp)
    b108:	01212023          	sw	s2,0(sp)
    b10c:	00050413          	mv	s0,a0
    b110:	00058493          	mv	s1,a1
    b114:	04079063          	bnez	a5,b154 <_Balloc+0x60>
    b118:	01000513          	li	a0,16
    b11c:	db8fd0ef          	jal	ra,86d4 <malloc>
    b120:	02a42223          	sw	a0,36(s0)
    b124:	02051063          	bnez	a0,b144 <_Balloc+0x50>
    b128:	0000e6b7          	lui	a3,0xe
    b12c:	0000e537          	lui	a0,0xe
    b130:	92868693          	addi	a3,a3,-1752 # d928 <_ctype_+0x1a4>
    b134:	00000613          	li	a2,0
    b138:	06600593          	li	a1,102
    b13c:	a1850513          	addi	a0,a0,-1512 # da18 <__sf_fake_stdout+0x20>
    b140:	5bc010ef          	jal	ra,c6fc <__assert_func>
    b144:	00052223          	sw	zero,4(a0)
    b148:	00052423          	sw	zero,8(a0)
    b14c:	00052023          	sw	zero,0(a0)
    b150:	00052623          	sw	zero,12(a0)
    b154:	02442903          	lw	s2,36(s0)
    b158:	00c92783          	lw	a5,12(s2)
    b15c:	04078463          	beqz	a5,b1a4 <_Balloc+0xb0>
    b160:	02442703          	lw	a4,36(s0)
    b164:	00249793          	slli	a5,s1,0x2
    b168:	00c72703          	lw	a4,12(a4)
    b16c:	00f707b3          	add	a5,a4,a5
    b170:	0007a503          	lw	a0,0(a5)
    b174:	06051663          	bnez	a0,b1e0 <_Balloc+0xec>
    b178:	00100913          	li	s2,1
    b17c:	00991933          	sll	s2,s2,s1
    b180:	00590613          	addi	a2,s2,5
    b184:	00261613          	slli	a2,a2,0x2
    b188:	00100593          	li	a1,1
    b18c:	00040513          	mv	a0,s0
    b190:	40d000ef          	jal	ra,bd9c <_calloc_r>
    b194:	02050863          	beqz	a0,b1c4 <_Balloc+0xd0>
    b198:	00952223          	sw	s1,4(a0)
    b19c:	01252423          	sw	s2,8(a0)
    b1a0:	0480006f          	j	b1e8 <_Balloc+0xf4>
    b1a4:	02100613          	li	a2,33
    b1a8:	00400593          	li	a1,4
    b1ac:	00040513          	mv	a0,s0
    b1b0:	3ed000ef          	jal	ra,bd9c <_calloc_r>
    b1b4:	02442783          	lw	a5,36(s0)
    b1b8:	00a92623          	sw	a0,12(s2)
    b1bc:	00c7a783          	lw	a5,12(a5)
    b1c0:	fa0790e3          	bnez	a5,b160 <_Balloc+0x6c>
    b1c4:	00000513          	li	a0,0
    b1c8:	00c12083          	lw	ra,12(sp)
    b1cc:	00812403          	lw	s0,8(sp)
    b1d0:	00412483          	lw	s1,4(sp)
    b1d4:	00012903          	lw	s2,0(sp)
    b1d8:	01010113          	addi	sp,sp,16
    b1dc:	00008067          	ret
    b1e0:	00052703          	lw	a4,0(a0)
    b1e4:	00e7a023          	sw	a4,0(a5)
    b1e8:	00052823          	sw	zero,16(a0)
    b1ec:	00052623          	sw	zero,12(a0)
    b1f0:	fd9ff06f          	j	b1c8 <_Balloc+0xd4>

0000b1f4 <_Bfree>:
    b1f4:	02452783          	lw	a5,36(a0)
    b1f8:	ff010113          	addi	sp,sp,-16
    b1fc:	00812423          	sw	s0,8(sp)
    b200:	00912223          	sw	s1,4(sp)
    b204:	00112623          	sw	ra,12(sp)
    b208:	00050493          	mv	s1,a0
    b20c:	00058413          	mv	s0,a1
    b210:	04079063          	bnez	a5,b250 <_Bfree+0x5c>
    b214:	01000513          	li	a0,16
    b218:	cbcfd0ef          	jal	ra,86d4 <malloc>
    b21c:	02a4a223          	sw	a0,36(s1)
    b220:	02051063          	bnez	a0,b240 <_Bfree+0x4c>
    b224:	0000e6b7          	lui	a3,0xe
    b228:	0000e537          	lui	a0,0xe
    b22c:	92868693          	addi	a3,a3,-1752 # d928 <_ctype_+0x1a4>
    b230:	00000613          	li	a2,0
    b234:	08a00593          	li	a1,138
    b238:	a1850513          	addi	a0,a0,-1512 # da18 <__sf_fake_stdout+0x20>
    b23c:	4c0010ef          	jal	ra,c6fc <__assert_func>
    b240:	00052223          	sw	zero,4(a0)
    b244:	00052423          	sw	zero,8(a0)
    b248:	00052023          	sw	zero,0(a0)
    b24c:	00052623          	sw	zero,12(a0)
    b250:	02040263          	beqz	s0,b274 <_Bfree+0x80>
    b254:	0244a683          	lw	a3,36(s1)
    b258:	00442783          	lw	a5,4(s0)
    b25c:	00279713          	slli	a4,a5,0x2
    b260:	00c6a783          	lw	a5,12(a3)
    b264:	00e787b3          	add	a5,a5,a4
    b268:	0007a703          	lw	a4,0(a5)
    b26c:	00e42023          	sw	a4,0(s0)
    b270:	0087a023          	sw	s0,0(a5)
    b274:	00c12083          	lw	ra,12(sp)
    b278:	00812403          	lw	s0,8(sp)
    b27c:	00412483          	lw	s1,4(sp)
    b280:	01010113          	addi	sp,sp,16
    b284:	00008067          	ret

0000b288 <__multadd>:
    b288:	fe010113          	addi	sp,sp,-32
    b28c:	00812c23          	sw	s0,24(sp)
    b290:	01212823          	sw	s2,16(sp)
    b294:	01312623          	sw	s3,12(sp)
    b298:	0105a903          	lw	s2,16(a1)
    b29c:	00058413          	mv	s0,a1
    b2a0:	00068993          	mv	s3,a3
    b2a4:	01458693          	addi	a3,a1,20
    b2a8:	000105b7          	lui	a1,0x10
    b2ac:	00912a23          	sw	s1,20(sp)
    b2b0:	00112e23          	sw	ra,28(sp)
    b2b4:	00050493          	mv	s1,a0
    b2b8:	01412423          	sw	s4,8(sp)
    b2bc:	00000513          	li	a0,0
    b2c0:	fff58593          	addi	a1,a1,-1 # ffff <kheap__system_heap+0x154f>
    b2c4:	0006a783          	lw	a5,0(a3)
    b2c8:	00468693          	addi	a3,a3,4
    b2cc:	00150513          	addi	a0,a0,1
    b2d0:	00b7f733          	and	a4,a5,a1
    b2d4:	02c70733          	mul	a4,a4,a2
    b2d8:	0107d793          	srli	a5,a5,0x10
    b2dc:	02c787b3          	mul	a5,a5,a2
    b2e0:	01370733          	add	a4,a4,s3
    b2e4:	01075813          	srli	a6,a4,0x10
    b2e8:	00b77733          	and	a4,a4,a1
    b2ec:	010787b3          	add	a5,a5,a6
    b2f0:	0107d993          	srli	s3,a5,0x10
    b2f4:	01079793          	slli	a5,a5,0x10
    b2f8:	00e787b3          	add	a5,a5,a4
    b2fc:	fef6ae23          	sw	a5,-4(a3)
    b300:	fd2542e3          	blt	a0,s2,b2c4 <__multadd+0x3c>
    b304:	08098063          	beqz	s3,b384 <__multadd+0xfc>
    b308:	00842783          	lw	a5,8(s0)
    b30c:	06f94063          	blt	s2,a5,b36c <__multadd+0xe4>
    b310:	00442583          	lw	a1,4(s0)
    b314:	00048513          	mv	a0,s1
    b318:	00158593          	addi	a1,a1,1
    b31c:	dd9ff0ef          	jal	ra,b0f4 <_Balloc>
    b320:	00050a13          	mv	s4,a0
    b324:	02051063          	bnez	a0,b344 <__multadd+0xbc>
    b328:	0000e6b7          	lui	a3,0xe
    b32c:	0000e537          	lui	a0,0xe
    b330:	9a468693          	addi	a3,a3,-1628 # d9a4 <_ctype_+0x220>
    b334:	00000613          	li	a2,0
    b338:	0b500593          	li	a1,181
    b33c:	a1850513          	addi	a0,a0,-1512 # da18 <__sf_fake_stdout+0x20>
    b340:	3bc010ef          	jal	ra,c6fc <__assert_func>
    b344:	01042603          	lw	a2,16(s0)
    b348:	00c40593          	addi	a1,s0,12
    b34c:	00c50513          	addi	a0,a0,12
    b350:	00260613          	addi	a2,a2,2
    b354:	00261613          	slli	a2,a2,0x2
    b358:	f49f70ef          	jal	ra,32a0 <memcpy>
    b35c:	00040593          	mv	a1,s0
    b360:	00048513          	mv	a0,s1
    b364:	e91ff0ef          	jal	ra,b1f4 <_Bfree>
    b368:	000a0413          	mv	s0,s4
    b36c:	00490793          	addi	a5,s2,4
    b370:	00279793          	slli	a5,a5,0x2
    b374:	00f407b3          	add	a5,s0,a5
    b378:	0137a223          	sw	s3,4(a5)
    b37c:	00190913          	addi	s2,s2,1
    b380:	01242823          	sw	s2,16(s0)
    b384:	01c12083          	lw	ra,28(sp)
    b388:	00040513          	mv	a0,s0
    b38c:	01812403          	lw	s0,24(sp)
    b390:	01412483          	lw	s1,20(sp)
    b394:	01012903          	lw	s2,16(sp)
    b398:	00c12983          	lw	s3,12(sp)
    b39c:	00812a03          	lw	s4,8(sp)
    b3a0:	02010113          	addi	sp,sp,32
    b3a4:	00008067          	ret

0000b3a8 <__hi0bits>:
    b3a8:	ffff0737          	lui	a4,0xffff0
    b3ac:	00e57733          	and	a4,a0,a4
    b3b0:	00050793          	mv	a5,a0
    b3b4:	00000513          	li	a0,0
    b3b8:	00071663          	bnez	a4,b3c4 <__hi0bits+0x1c>
    b3bc:	01079793          	slli	a5,a5,0x10
    b3c0:	01000513          	li	a0,16
    b3c4:	ff000737          	lui	a4,0xff000
    b3c8:	00e7f733          	and	a4,a5,a4
    b3cc:	00071663          	bnez	a4,b3d8 <__hi0bits+0x30>
    b3d0:	00850513          	addi	a0,a0,8
    b3d4:	00879793          	slli	a5,a5,0x8
    b3d8:	f0000737          	lui	a4,0xf0000
    b3dc:	00e7f733          	and	a4,a5,a4
    b3e0:	00071663          	bnez	a4,b3ec <__hi0bits+0x44>
    b3e4:	00450513          	addi	a0,a0,4
    b3e8:	00479793          	slli	a5,a5,0x4
    b3ec:	c0000737          	lui	a4,0xc0000
    b3f0:	00e7f733          	and	a4,a5,a4
    b3f4:	00071663          	bnez	a4,b400 <__hi0bits+0x58>
    b3f8:	00250513          	addi	a0,a0,2
    b3fc:	00279793          	slli	a5,a5,0x2
    b400:	0007cc63          	bltz	a5,b418 <__hi0bits+0x70>
    b404:	40000737          	lui	a4,0x40000
    b408:	00e7f7b3          	and	a5,a5,a4
    b40c:	00150513          	addi	a0,a0,1
    b410:	00079463          	bnez	a5,b418 <__hi0bits+0x70>
    b414:	02000513          	li	a0,32
    b418:	00008067          	ret

0000b41c <__lo0bits>:
    b41c:	00052783          	lw	a5,0(a0)
    b420:	00050713          	mv	a4,a0
    b424:	0077f693          	andi	a3,a5,7
    b428:	02068c63          	beqz	a3,b460 <__lo0bits+0x44>
    b42c:	0017f693          	andi	a3,a5,1
    b430:	00000513          	li	a0,0
    b434:	08069a63          	bnez	a3,b4c8 <__lo0bits+0xac>
    b438:	0027f693          	andi	a3,a5,2
    b43c:	00068a63          	beqz	a3,b450 <__lo0bits+0x34>
    b440:	0017d793          	srli	a5,a5,0x1
    b444:	00f72023          	sw	a5,0(a4) # 40000000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3d050f80>
    b448:	00100513          	li	a0,1
    b44c:	00008067          	ret
    b450:	0027d793          	srli	a5,a5,0x2
    b454:	00f72023          	sw	a5,0(a4)
    b458:	00200513          	li	a0,2
    b45c:	00008067          	ret
    b460:	01079693          	slli	a3,a5,0x10
    b464:	0106d693          	srli	a3,a3,0x10
    b468:	00000513          	li	a0,0
    b46c:	00069663          	bnez	a3,b478 <__lo0bits+0x5c>
    b470:	0107d793          	srli	a5,a5,0x10
    b474:	01000513          	li	a0,16
    b478:	0ff7f693          	andi	a3,a5,255
    b47c:	00069663          	bnez	a3,b488 <__lo0bits+0x6c>
    b480:	00850513          	addi	a0,a0,8
    b484:	0087d793          	srli	a5,a5,0x8
    b488:	00f7f693          	andi	a3,a5,15
    b48c:	00069663          	bnez	a3,b498 <__lo0bits+0x7c>
    b490:	00450513          	addi	a0,a0,4
    b494:	0047d793          	srli	a5,a5,0x4
    b498:	0037f693          	andi	a3,a5,3
    b49c:	00069663          	bnez	a3,b4a8 <__lo0bits+0x8c>
    b4a0:	00250513          	addi	a0,a0,2
    b4a4:	0027d793          	srli	a5,a5,0x2
    b4a8:	0017f693          	andi	a3,a5,1
    b4ac:	00069863          	bnez	a3,b4bc <__lo0bits+0xa0>
    b4b0:	0017d793          	srli	a5,a5,0x1
    b4b4:	00150513          	addi	a0,a0,1
    b4b8:	00078663          	beqz	a5,b4c4 <__lo0bits+0xa8>
    b4bc:	00f72023          	sw	a5,0(a4)
    b4c0:	00008067          	ret
    b4c4:	02000513          	li	a0,32
    b4c8:	00008067          	ret

0000b4cc <__i2b>:
    b4cc:	ff010113          	addi	sp,sp,-16
    b4d0:	00812423          	sw	s0,8(sp)
    b4d4:	00058413          	mv	s0,a1
    b4d8:	00100593          	li	a1,1
    b4dc:	00112623          	sw	ra,12(sp)
    b4e0:	c15ff0ef          	jal	ra,b0f4 <_Balloc>
    b4e4:	02051063          	bnez	a0,b504 <__i2b+0x38>
    b4e8:	0000e6b7          	lui	a3,0xe
    b4ec:	0000e537          	lui	a0,0xe
    b4f0:	9a468693          	addi	a3,a3,-1628 # d9a4 <_ctype_+0x220>
    b4f4:	00000613          	li	a2,0
    b4f8:	14000593          	li	a1,320
    b4fc:	a1850513          	addi	a0,a0,-1512 # da18 <__sf_fake_stdout+0x20>
    b500:	1fc010ef          	jal	ra,c6fc <__assert_func>
    b504:	00c12083          	lw	ra,12(sp)
    b508:	00852a23          	sw	s0,20(a0)
    b50c:	00812403          	lw	s0,8(sp)
    b510:	00100713          	li	a4,1
    b514:	00e52823          	sw	a4,16(a0)
    b518:	01010113          	addi	sp,sp,16
    b51c:	00008067          	ret

0000b520 <__multiply>:
    b520:	0105a703          	lw	a4,16(a1)
    b524:	01062783          	lw	a5,16(a2)
    b528:	fe010113          	addi	sp,sp,-32
    b52c:	00812c23          	sw	s0,24(sp)
    b530:	01212823          	sw	s2,16(sp)
    b534:	00112e23          	sw	ra,28(sp)
    b538:	00912a23          	sw	s1,20(sp)
    b53c:	01312623          	sw	s3,12(sp)
    b540:	01412423          	sw	s4,8(sp)
    b544:	00058413          	mv	s0,a1
    b548:	00060913          	mv	s2,a2
    b54c:	00f75663          	bge	a4,a5,b558 <__multiply+0x38>
    b550:	00060413          	mv	s0,a2
    b554:	00058913          	mv	s2,a1
    b558:	01042a03          	lw	s4,16(s0)
    b55c:	01092983          	lw	s3,16(s2)
    b560:	00842783          	lw	a5,8(s0)
    b564:	00442583          	lw	a1,4(s0)
    b568:	013a04b3          	add	s1,s4,s3
    b56c:	0097d463          	bge	a5,s1,b574 <__multiply+0x54>
    b570:	00158593          	addi	a1,a1,1
    b574:	b81ff0ef          	jal	ra,b0f4 <_Balloc>
    b578:	02051063          	bnez	a0,b598 <__multiply+0x78>
    b57c:	0000e6b7          	lui	a3,0xe
    b580:	0000e537          	lui	a0,0xe
    b584:	9a468693          	addi	a3,a3,-1628 # d9a4 <_ctype_+0x220>
    b588:	00000613          	li	a2,0
    b58c:	15d00593          	li	a1,349
    b590:	a1850513          	addi	a0,a0,-1512 # da18 <__sf_fake_stdout+0x20>
    b594:	168010ef          	jal	ra,c6fc <__assert_func>
    b598:	01450693          	addi	a3,a0,20
    b59c:	00249813          	slli	a6,s1,0x2
    b5a0:	01068833          	add	a6,a3,a6
    b5a4:	00068793          	mv	a5,a3
    b5a8:	0707ec63          	bltu	a5,a6,b620 <__multiply+0x100>
    b5ac:	01440313          	addi	t1,s0,20
    b5b0:	002a1593          	slli	a1,s4,0x2
    b5b4:	01490613          	addi	a2,s2,20
    b5b8:	00299893          	slli	a7,s3,0x2
    b5bc:	00b305b3          	add	a1,t1,a1
    b5c0:	01540793          	addi	a5,s0,21
    b5c4:	011608b3          	add	a7,a2,a7
    b5c8:	00400e13          	li	t3,4
    b5cc:	00f5ea63          	bltu	a1,a5,b5e0 <__multiply+0xc0>
    b5d0:	40858433          	sub	s0,a1,s0
    b5d4:	feb40413          	addi	s0,s0,-21
    b5d8:	ffc47413          	andi	s0,s0,-4
    b5dc:	00440e13          	addi	t3,s0,4
    b5e0:	00010eb7          	lui	t4,0x10
    b5e4:	fffe8e93          	addi	t4,t4,-1 # ffff <kheap__system_heap+0x154f>
    b5e8:	05166263          	bltu	a2,a7,b62c <__multiply+0x10c>
    b5ec:	00905863          	blez	s1,b5fc <__multiply+0xdc>
    b5f0:	ffc82783          	lw	a5,-4(a6)
    b5f4:	ffc80813          	addi	a6,a6,-4
    b5f8:	12078463          	beqz	a5,b720 <__multiply+0x200>
    b5fc:	01c12083          	lw	ra,28(sp)
    b600:	01812403          	lw	s0,24(sp)
    b604:	00952823          	sw	s1,16(a0)
    b608:	01012903          	lw	s2,16(sp)
    b60c:	01412483          	lw	s1,20(sp)
    b610:	00c12983          	lw	s3,12(sp)
    b614:	00812a03          	lw	s4,8(sp)
    b618:	02010113          	addi	sp,sp,32
    b61c:	00008067          	ret
    b620:	0007a023          	sw	zero,0(a5)
    b624:	00478793          	addi	a5,a5,4
    b628:	f81ff06f          	j	b5a8 <__multiply+0x88>
    b62c:	00062f83          	lw	t6,0(a2)
    b630:	01dfffb3          	and	t6,t6,t4
    b634:	060f8663          	beqz	t6,b6a0 <__multiply+0x180>
    b638:	00068393          	mv	t2,a3
    b63c:	00030293          	mv	t0,t1
    b640:	00000913          	li	s2,0
    b644:	0002a703          	lw	a4,0(t0)
    b648:	0003a403          	lw	s0,0(t2)
    b64c:	00438393          	addi	t2,t2,4
    b650:	01d77f33          	and	t5,a4,t4
    b654:	03ff0f33          	mul	t5,t5,t6
    b658:	01d477b3          	and	a5,s0,t4
    b65c:	01045413          	srli	s0,s0,0x10
    b660:	00428293          	addi	t0,t0,4
    b664:	00ff0f33          	add	t5,t5,a5
    b668:	01075793          	srli	a5,a4,0x10
    b66c:	03f787b3          	mul	a5,a5,t6
    b670:	012f0f33          	add	t5,t5,s2
    b674:	010f5713          	srli	a4,t5,0x10
    b678:	01df7f33          	and	t5,t5,t4
    b67c:	008787b3          	add	a5,a5,s0
    b680:	00e787b3          	add	a5,a5,a4
    b684:	0107d913          	srli	s2,a5,0x10
    b688:	01079793          	slli	a5,a5,0x10
    b68c:	01e7e7b3          	or	a5,a5,t5
    b690:	fef3ae23          	sw	a5,-4(t2)
    b694:	fab2e8e3          	bltu	t0,a1,b644 <__multiply+0x124>
    b698:	01c687b3          	add	a5,a3,t3
    b69c:	0127a023          	sw	s2,0(a5)
    b6a0:	00265383          	lhu	t2,2(a2)
    b6a4:	06038863          	beqz	t2,b714 <__multiply+0x1f4>
    b6a8:	0006a783          	lw	a5,0(a3)
    b6ac:	00068f93          	mv	t6,a3
    b6b0:	00030f13          	mv	t5,t1
    b6b4:	00000293          	li	t0,0
    b6b8:	000f2703          	lw	a4,0(t5)
    b6bc:	002fd403          	lhu	s0,2(t6)
    b6c0:	01d7f7b3          	and	a5,a5,t4
    b6c4:	01d77733          	and	a4,a4,t4
    b6c8:	02770733          	mul	a4,a4,t2
    b6cc:	004f8f93          	addi	t6,t6,4
    b6d0:	004f0f13          	addi	t5,t5,4
    b6d4:	00870733          	add	a4,a4,s0
    b6d8:	00570733          	add	a4,a4,t0
    b6dc:	01071293          	slli	t0,a4,0x10
    b6e0:	00f2e7b3          	or	a5,t0,a5
    b6e4:	feffae23          	sw	a5,-4(t6)
    b6e8:	ffef5783          	lhu	a5,-2(t5)
    b6ec:	000fa283          	lw	t0,0(t6)
    b6f0:	01075713          	srli	a4,a4,0x10
    b6f4:	027787b3          	mul	a5,a5,t2
    b6f8:	01d2f2b3          	and	t0,t0,t4
    b6fc:	005787b3          	add	a5,a5,t0
    b700:	00e787b3          	add	a5,a5,a4
    b704:	0107d293          	srli	t0,a5,0x10
    b708:	fabf68e3          	bltu	t5,a1,b6b8 <__multiply+0x198>
    b70c:	01c68733          	add	a4,a3,t3
    b710:	00f72023          	sw	a5,0(a4)
    b714:	00460613          	addi	a2,a2,4
    b718:	00468693          	addi	a3,a3,4
    b71c:	ecdff06f          	j	b5e8 <__multiply+0xc8>
    b720:	fff48493          	addi	s1,s1,-1
    b724:	ec9ff06f          	j	b5ec <__multiply+0xcc>

0000b728 <__pow5mult>:
    b728:	fe010113          	addi	sp,sp,-32
    b72c:	00912a23          	sw	s1,20(sp)
    b730:	01212823          	sw	s2,16(sp)
    b734:	01312623          	sw	s3,12(sp)
    b738:	00112e23          	sw	ra,28(sp)
    b73c:	00812c23          	sw	s0,24(sp)
    b740:	01412423          	sw	s4,8(sp)
    b744:	00367793          	andi	a5,a2,3
    b748:	00050913          	mv	s2,a0
    b74c:	00060493          	mv	s1,a2
    b750:	00058993          	mv	s3,a1
    b754:	02078463          	beqz	a5,b77c <__pow5mult+0x54>
    b758:	fff78793          	addi	a5,a5,-1
    b75c:	0000e737          	lui	a4,0xe
    b760:	a7c70713          	addi	a4,a4,-1412 # da7c <p05.0>
    b764:	00279793          	slli	a5,a5,0x2
    b768:	00f707b3          	add	a5,a4,a5
    b76c:	0007a603          	lw	a2,0(a5)
    b770:	00000693          	li	a3,0
    b774:	b15ff0ef          	jal	ra,b288 <__multadd>
    b778:	00050993          	mv	s3,a0
    b77c:	4024d493          	srai	s1,s1,0x2
    b780:	0c048463          	beqz	s1,b848 <__pow5mult+0x120>
    b784:	02492783          	lw	a5,36(s2)
    b788:	04079063          	bnez	a5,b7c8 <__pow5mult+0xa0>
    b78c:	01000513          	li	a0,16
    b790:	f45fc0ef          	jal	ra,86d4 <malloc>
    b794:	02a92223          	sw	a0,36(s2)
    b798:	02051063          	bnez	a0,b7b8 <__pow5mult+0x90>
    b79c:	0000e6b7          	lui	a3,0xe
    b7a0:	0000e537          	lui	a0,0xe
    b7a4:	92868693          	addi	a3,a3,-1752 # d928 <_ctype_+0x1a4>
    b7a8:	00000613          	li	a2,0
    b7ac:	1ae00593          	li	a1,430
    b7b0:	a1850513          	addi	a0,a0,-1512 # da18 <__sf_fake_stdout+0x20>
    b7b4:	749000ef          	jal	ra,c6fc <__assert_func>
    b7b8:	00052223          	sw	zero,4(a0)
    b7bc:	00052423          	sw	zero,8(a0)
    b7c0:	00052023          	sw	zero,0(a0)
    b7c4:	00052623          	sw	zero,12(a0)
    b7c8:	02492a03          	lw	s4,36(s2)
    b7cc:	008a2403          	lw	s0,8(s4)
    b7d0:	00041e63          	bnez	s0,b7ec <__pow5mult+0xc4>
    b7d4:	27100593          	li	a1,625
    b7d8:	00090513          	mv	a0,s2
    b7dc:	cf1ff0ef          	jal	ra,b4cc <__i2b>
    b7e0:	00aa2423          	sw	a0,8(s4)
    b7e4:	00050413          	mv	s0,a0
    b7e8:	00052023          	sw	zero,0(a0)
    b7ec:	0014f793          	andi	a5,s1,1
    b7f0:	02078463          	beqz	a5,b818 <__pow5mult+0xf0>
    b7f4:	00098593          	mv	a1,s3
    b7f8:	00040613          	mv	a2,s0
    b7fc:	00090513          	mv	a0,s2
    b800:	d21ff0ef          	jal	ra,b520 <__multiply>
    b804:	00050a13          	mv	s4,a0
    b808:	00098593          	mv	a1,s3
    b80c:	00090513          	mv	a0,s2
    b810:	9e5ff0ef          	jal	ra,b1f4 <_Bfree>
    b814:	000a0993          	mv	s3,s4
    b818:	4014d493          	srai	s1,s1,0x1
    b81c:	02048663          	beqz	s1,b848 <__pow5mult+0x120>
    b820:	00042503          	lw	a0,0(s0)
    b824:	00051e63          	bnez	a0,b840 <__pow5mult+0x118>
    b828:	00040613          	mv	a2,s0
    b82c:	00040593          	mv	a1,s0
    b830:	00090513          	mv	a0,s2
    b834:	cedff0ef          	jal	ra,b520 <__multiply>
    b838:	00a42023          	sw	a0,0(s0)
    b83c:	00052023          	sw	zero,0(a0)
    b840:	00050413          	mv	s0,a0
    b844:	fa9ff06f          	j	b7ec <__pow5mult+0xc4>
    b848:	01c12083          	lw	ra,28(sp)
    b84c:	01812403          	lw	s0,24(sp)
    b850:	01412483          	lw	s1,20(sp)
    b854:	01012903          	lw	s2,16(sp)
    b858:	00812a03          	lw	s4,8(sp)
    b85c:	00098513          	mv	a0,s3
    b860:	00c12983          	lw	s3,12(sp)
    b864:	02010113          	addi	sp,sp,32
    b868:	00008067          	ret

0000b86c <__lshift>:
    b86c:	fe010113          	addi	sp,sp,-32
    b870:	00812c23          	sw	s0,24(sp)
    b874:	00058413          	mv	s0,a1
    b878:	01612023          	sw	s6,0(sp)
    b87c:	01042b03          	lw	s6,16(s0)
    b880:	00912a23          	sw	s1,20(sp)
    b884:	0045a583          	lw	a1,4(a1)
    b888:	40565493          	srai	s1,a2,0x5
    b88c:	00842783          	lw	a5,8(s0)
    b890:	01648b33          	add	s6,s1,s6
    b894:	01212823          	sw	s2,16(sp)
    b898:	01412423          	sw	s4,8(sp)
    b89c:	01512223          	sw	s5,4(sp)
    b8a0:	00112e23          	sw	ra,28(sp)
    b8a4:	01312623          	sw	s3,12(sp)
    b8a8:	00050a93          	mv	s5,a0
    b8ac:	00060913          	mv	s2,a2
    b8b0:	001b0a13          	addi	s4,s6,1
    b8b4:	0347c863          	blt	a5,s4,b8e4 <__lshift+0x78>
    b8b8:	000a8513          	mv	a0,s5
    b8bc:	839ff0ef          	jal	ra,b0f4 <_Balloc>
    b8c0:	00050993          	mv	s3,a0
    b8c4:	02051663          	bnez	a0,b8f0 <__lshift+0x84>
    b8c8:	0000e6b7          	lui	a3,0xe
    b8cc:	0000e537          	lui	a0,0xe
    b8d0:	9a468693          	addi	a3,a3,-1628 # d9a4 <_ctype_+0x220>
    b8d4:	00000613          	li	a2,0
    b8d8:	1d900593          	li	a1,473
    b8dc:	a1850513          	addi	a0,a0,-1512 # da18 <__sf_fake_stdout+0x20>
    b8e0:	61d000ef          	jal	ra,c6fc <__assert_func>
    b8e4:	00158593          	addi	a1,a1,1
    b8e8:	00179793          	slli	a5,a5,0x1
    b8ec:	fc9ff06f          	j	b8b4 <__lshift+0x48>
    b8f0:	01450793          	addi	a5,a0,20
    b8f4:	00078693          	mv	a3,a5
    b8f8:	00000713          	li	a4,0
    b8fc:	00468693          	addi	a3,a3,4
    b900:	0c974663          	blt	a4,s1,b9cc <__lshift+0x160>
    b904:	0004d463          	bgez	s1,b90c <__lshift+0xa0>
    b908:	00000493          	li	s1,0
    b90c:	00249493          	slli	s1,s1,0x2
    b910:	009786b3          	add	a3,a5,s1
    b914:	01042783          	lw	a5,16(s0)
    b918:	01440713          	addi	a4,s0,20
    b91c:	01f97613          	andi	a2,s2,31
    b920:	00279793          	slli	a5,a5,0x2
    b924:	00f707b3          	add	a5,a4,a5
    b928:	0a060863          	beqz	a2,b9d8 <__lshift+0x16c>
    b92c:	02000813          	li	a6,32
    b930:	40c80833          	sub	a6,a6,a2
    b934:	00068893          	mv	a7,a3
    b938:	00000593          	li	a1,0
    b93c:	00072503          	lw	a0,0(a4)
    b940:	00488893          	addi	a7,a7,4 # fcc00004 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfcc00005>
    b944:	00470713          	addi	a4,a4,4
    b948:	00c51533          	sll	a0,a0,a2
    b94c:	00b565b3          	or	a1,a0,a1
    b950:	feb8ae23          	sw	a1,-4(a7)
    b954:	ffc72583          	lw	a1,-4(a4)
    b958:	0105d5b3          	srl	a1,a1,a6
    b95c:	fef760e3          	bltu	a4,a5,b93c <__lshift+0xd0>
    b960:	01540713          	addi	a4,s0,21
    b964:	00400613          	li	a2,4
    b968:	00e7ea63          	bltu	a5,a4,b97c <__lshift+0x110>
    b96c:	408787b3          	sub	a5,a5,s0
    b970:	feb78793          	addi	a5,a5,-21
    b974:	ffc7f793          	andi	a5,a5,-4
    b978:	00478613          	addi	a2,a5,4
    b97c:	00c686b3          	add	a3,a3,a2
    b980:	00b6a023          	sw	a1,0(a3)
    b984:	00058463          	beqz	a1,b98c <__lshift+0x120>
    b988:	002b0a13          	addi	s4,s6,2
    b98c:	fffa0a13          	addi	s4,s4,-1
    b990:	0149a823          	sw	s4,16(s3)
    b994:	000a8513          	mv	a0,s5
    b998:	00040593          	mv	a1,s0
    b99c:	859ff0ef          	jal	ra,b1f4 <_Bfree>
    b9a0:	01c12083          	lw	ra,28(sp)
    b9a4:	01812403          	lw	s0,24(sp)
    b9a8:	01412483          	lw	s1,20(sp)
    b9ac:	01012903          	lw	s2,16(sp)
    b9b0:	00812a03          	lw	s4,8(sp)
    b9b4:	00412a83          	lw	s5,4(sp)
    b9b8:	00012b03          	lw	s6,0(sp)
    b9bc:	00098513          	mv	a0,s3
    b9c0:	00c12983          	lw	s3,12(sp)
    b9c4:	02010113          	addi	sp,sp,32
    b9c8:	00008067          	ret
    b9cc:	fe06ae23          	sw	zero,-4(a3)
    b9d0:	00170713          	addi	a4,a4,1
    b9d4:	f29ff06f          	j	b8fc <__lshift+0x90>
    b9d8:	00072603          	lw	a2,0(a4)
    b9dc:	00470713          	addi	a4,a4,4
    b9e0:	00468693          	addi	a3,a3,4
    b9e4:	fec6ae23          	sw	a2,-4(a3)
    b9e8:	fef768e3          	bltu	a4,a5,b9d8 <__lshift+0x16c>
    b9ec:	fa1ff06f          	j	b98c <__lshift+0x120>

0000b9f0 <__mcmp>:
    b9f0:	01052683          	lw	a3,16(a0)
    b9f4:	0105a703          	lw	a4,16(a1)
    b9f8:	00050793          	mv	a5,a0
    b9fc:	40e68533          	sub	a0,a3,a4
    ba00:	04e69063          	bne	a3,a4,ba40 <__mcmp+0x50>
    ba04:	00271713          	slli	a4,a4,0x2
    ba08:	01478793          	addi	a5,a5,20
    ba0c:	01458593          	addi	a1,a1,20
    ba10:	00e786b3          	add	a3,a5,a4
    ba14:	00e585b3          	add	a1,a1,a4
    ba18:	ffc6a603          	lw	a2,-4(a3)
    ba1c:	ffc5a703          	lw	a4,-4(a1)
    ba20:	ffc68693          	addi	a3,a3,-4
    ba24:	ffc58593          	addi	a1,a1,-4
    ba28:	00e60a63          	beq	a2,a4,ba3c <__mcmp+0x4c>
    ba2c:	fff00513          	li	a0,-1
    ba30:	00e66863          	bltu	a2,a4,ba40 <__mcmp+0x50>
    ba34:	00100513          	li	a0,1
    ba38:	00008067          	ret
    ba3c:	fcd7eee3          	bltu	a5,a3,ba18 <__mcmp+0x28>
    ba40:	00008067          	ret

0000ba44 <__mdiff>:
    ba44:	fe010113          	addi	sp,sp,-32
    ba48:	00812c23          	sw	s0,24(sp)
    ba4c:	00058413          	mv	s0,a1
    ba50:	01212823          	sw	s2,16(sp)
    ba54:	00060593          	mv	a1,a2
    ba58:	00050913          	mv	s2,a0
    ba5c:	00040513          	mv	a0,s0
    ba60:	00912a23          	sw	s1,20(sp)
    ba64:	00112e23          	sw	ra,28(sp)
    ba68:	01312623          	sw	s3,12(sp)
    ba6c:	00060493          	mv	s1,a2
    ba70:	f81ff0ef          	jal	ra,b9f0 <__mcmp>
    ba74:	04051c63          	bnez	a0,bacc <__mdiff+0x88>
    ba78:	00000593          	li	a1,0
    ba7c:	00090513          	mv	a0,s2
    ba80:	e74ff0ef          	jal	ra,b0f4 <_Balloc>
    ba84:	02051063          	bnez	a0,baa4 <__mdiff+0x60>
    ba88:	0000e6b7          	lui	a3,0xe
    ba8c:	9a468693          	addi	a3,a3,-1628 # d9a4 <_ctype_+0x220>
    ba90:	00000613          	li	a2,0
    ba94:	23200593          	li	a1,562
    ba98:	0000e537          	lui	a0,0xe
    ba9c:	a1850513          	addi	a0,a0,-1512 # da18 <__sf_fake_stdout+0x20>
    baa0:	45d000ef          	jal	ra,c6fc <__assert_func>
    baa4:	00100793          	li	a5,1
    baa8:	00f52823          	sw	a5,16(a0)
    baac:	00052a23          	sw	zero,20(a0)
    bab0:	01c12083          	lw	ra,28(sp)
    bab4:	01812403          	lw	s0,24(sp)
    bab8:	01412483          	lw	s1,20(sp)
    babc:	01012903          	lw	s2,16(sp)
    bac0:	00c12983          	lw	s3,12(sp)
    bac4:	02010113          	addi	sp,sp,32
    bac8:	00008067          	ret
    bacc:	00100993          	li	s3,1
    bad0:	00054a63          	bltz	a0,bae4 <__mdiff+0xa0>
    bad4:	00048793          	mv	a5,s1
    bad8:	00000993          	li	s3,0
    badc:	00040493          	mv	s1,s0
    bae0:	00078413          	mv	s0,a5
    bae4:	0044a583          	lw	a1,4(s1)
    bae8:	00090513          	mv	a0,s2
    baec:	e08ff0ef          	jal	ra,b0f4 <_Balloc>
    baf0:	00051c63          	bnez	a0,bb08 <__mdiff+0xc4>
    baf4:	0000e6b7          	lui	a3,0xe
    baf8:	9a468693          	addi	a3,a3,-1628 # d9a4 <_ctype_+0x220>
    bafc:	00000613          	li	a2,0
    bb00:	24000593          	li	a1,576
    bb04:	f95ff06f          	j	ba98 <__mdiff+0x54>
    bb08:	0104a803          	lw	a6,16(s1)
    bb0c:	01042703          	lw	a4,16(s0)
    bb10:	01448893          	addi	a7,s1,20
    bb14:	00281693          	slli	a3,a6,0x2
    bb18:	01440793          	addi	a5,s0,20
    bb1c:	00271713          	slli	a4,a4,0x2
    bb20:	00010eb7          	lui	t4,0x10
    bb24:	01352623          	sw	s3,12(a0)
    bb28:	00d886b3          	add	a3,a7,a3
    bb2c:	00e787b3          	add	a5,a5,a4
    bb30:	01450613          	addi	a2,a0,20
    bb34:	01400e13          	li	t3,20
    bb38:	00000313          	li	t1,0
    bb3c:	fffe8e93          	addi	t4,t4,-1 # ffff <kheap__system_heap+0x154f>
    bb40:	01c48733          	add	a4,s1,t3
    bb44:	00072703          	lw	a4,0(a4)
    bb48:	01c405b3          	add	a1,s0,t3
    bb4c:	0005af03          	lw	t5,0(a1)
    bb50:	01d775b3          	and	a1,a4,t4
    bb54:	006585b3          	add	a1,a1,t1
    bb58:	01df7333          	and	t1,t5,t4
    bb5c:	406585b3          	sub	a1,a1,t1
    bb60:	010f5f13          	srli	t5,t5,0x10
    bb64:	01075713          	srli	a4,a4,0x10
    bb68:	4105d313          	srai	t1,a1,0x10
    bb6c:	41e70733          	sub	a4,a4,t5
    bb70:	00670733          	add	a4,a4,t1
    bb74:	41075313          	srai	t1,a4,0x10
    bb78:	01d5f5b3          	and	a1,a1,t4
    bb7c:	01071713          	slli	a4,a4,0x10
    bb80:	01c50f33          	add	t5,a0,t3
    bb84:	00b76733          	or	a4,a4,a1
    bb88:	004e0e13          	addi	t3,t3,4
    bb8c:	00ef2023          	sw	a4,0(t5)
    bb90:	008e0733          	add	a4,t3,s0
    bb94:	faf766e3          	bltu	a4,a5,bb40 <__mdiff+0xfc>
    bb98:	01540593          	addi	a1,s0,21
    bb9c:	00400713          	li	a4,4
    bba0:	00b7ea63          	bltu	a5,a1,bbb4 <__mdiff+0x170>
    bba4:	408787b3          	sub	a5,a5,s0
    bba8:	feb78793          	addi	a5,a5,-21
    bbac:	ffc7f793          	andi	a5,a5,-4
    bbb0:	00478713          	addi	a4,a5,4
    bbb4:	00e888b3          	add	a7,a7,a4
    bbb8:	00010e37          	lui	t3,0x10
    bbbc:	00e60733          	add	a4,a2,a4
    bbc0:	00070e93          	mv	t4,a4
    bbc4:	00088593          	mv	a1,a7
    bbc8:	fffe0e13          	addi	t3,t3,-1 # ffff <kheap__system_heap+0x154f>
    bbcc:	02d5ea63          	bltu	a1,a3,bc00 <__mdiff+0x1bc>
    bbd0:	ffd88613          	addi	a2,a7,-3
    bbd4:	00000793          	li	a5,0
    bbd8:	00c6e863          	bltu	a3,a2,bbe8 <__mdiff+0x1a4>
    bbdc:	00368693          	addi	a3,a3,3
    bbe0:	411687b3          	sub	a5,a3,a7
    bbe4:	ffc7f793          	andi	a5,a5,-4
    bbe8:	00f707b3          	add	a5,a4,a5
    bbec:	ffc7a703          	lw	a4,-4(a5)
    bbf0:	ffc78793          	addi	a5,a5,-4
    bbf4:	04070263          	beqz	a4,bc38 <__mdiff+0x1f4>
    bbf8:	01052823          	sw	a6,16(a0)
    bbfc:	eb5ff06f          	j	bab0 <__mdiff+0x6c>
    bc00:	0005a783          	lw	a5,0(a1)
    bc04:	004e8e93          	addi	t4,t4,4
    bc08:	00458593          	addi	a1,a1,4
    bc0c:	01c7f633          	and	a2,a5,t3
    bc10:	00660633          	add	a2,a2,t1
    bc14:	41065313          	srai	t1,a2,0x10
    bc18:	0107d793          	srli	a5,a5,0x10
    bc1c:	006787b3          	add	a5,a5,t1
    bc20:	4107d313          	srai	t1,a5,0x10
    bc24:	01c67633          	and	a2,a2,t3
    bc28:	01079793          	slli	a5,a5,0x10
    bc2c:	00c7e7b3          	or	a5,a5,a2
    bc30:	fefeae23          	sw	a5,-4(t4)
    bc34:	f99ff06f          	j	bbcc <__mdiff+0x188>
    bc38:	fff80813          	addi	a6,a6,-1
    bc3c:	fb1ff06f          	j	bbec <__mdiff+0x1a8>

0000bc40 <__d2b>:
    bc40:	fd010113          	addi	sp,sp,-48
    bc44:	02912223          	sw	s1,36(sp)
    bc48:	00058493          	mv	s1,a1
    bc4c:	00100593          	li	a1,1
    bc50:	02812423          	sw	s0,40(sp)
    bc54:	03212023          	sw	s2,32(sp)
    bc58:	01312e23          	sw	s3,28(sp)
    bc5c:	02112623          	sw	ra,44(sp)
    bc60:	01412c23          	sw	s4,24(sp)
    bc64:	00060413          	mv	s0,a2
    bc68:	00068993          	mv	s3,a3
    bc6c:	00070913          	mv	s2,a4
    bc70:	c84ff0ef          	jal	ra,b0f4 <_Balloc>
    bc74:	02051063          	bnez	a0,bc94 <__d2b+0x54>
    bc78:	0000e6b7          	lui	a3,0xe
    bc7c:	0000e537          	lui	a0,0xe
    bc80:	9a468693          	addi	a3,a3,-1628 # d9a4 <_ctype_+0x220>
    bc84:	00000613          	li	a2,0
    bc88:	30a00593          	li	a1,778
    bc8c:	a1850513          	addi	a0,a0,-1512 # da18 <__sf_fake_stdout+0x20>
    bc90:	26d000ef          	jal	ra,c6fc <__assert_func>
    bc94:	00100737          	lui	a4,0x100
    bc98:	fff70793          	addi	a5,a4,-1 # fffff <__data_region_end+0xd10ff>
    bc9c:	0087f7b3          	and	a5,a5,s0
    bca0:	01445413          	srli	s0,s0,0x14
    bca4:	7ff47413          	andi	s0,s0,2047
    bca8:	00050a13          	mv	s4,a0
    bcac:	08041a63          	bnez	s0,bd40 <__d2b+0x100>
    bcb0:	00f12623          	sw	a5,12(sp)
    bcb4:	08048e63          	beqz	s1,bd50 <__d2b+0x110>
    bcb8:	00810513          	addi	a0,sp,8
    bcbc:	00912423          	sw	s1,8(sp)
    bcc0:	f5cff0ef          	jal	ra,b41c <__lo0bits>
    bcc4:	00812683          	lw	a3,8(sp)
    bcc8:	08050063          	beqz	a0,bd48 <__d2b+0x108>
    bccc:	00c12703          	lw	a4,12(sp)
    bcd0:	02000793          	li	a5,32
    bcd4:	40a787b3          	sub	a5,a5,a0
    bcd8:	00f717b3          	sll	a5,a4,a5
    bcdc:	00d7e7b3          	or	a5,a5,a3
    bce0:	00a75733          	srl	a4,a4,a0
    bce4:	00fa2a23          	sw	a5,20(s4)
    bce8:	00e12623          	sw	a4,12(sp)
    bcec:	00c12483          	lw	s1,12(sp)
    bcf0:	009a2c23          	sw	s1,24(s4)
    bcf4:	009034b3          	snez	s1,s1
    bcf8:	00148493          	addi	s1,s1,1
    bcfc:	009a2823          	sw	s1,16(s4)
    bd00:	06040a63          	beqz	s0,bd74 <__d2b+0x134>
    bd04:	bcd40413          	addi	s0,s0,-1075
    bd08:	00a40433          	add	s0,s0,a0
    bd0c:	03500793          	li	a5,53
    bd10:	0089a023          	sw	s0,0(s3)
    bd14:	40a78533          	sub	a0,a5,a0
    bd18:	00a92023          	sw	a0,0(s2)
    bd1c:	02c12083          	lw	ra,44(sp)
    bd20:	02812403          	lw	s0,40(sp)
    bd24:	02412483          	lw	s1,36(sp)
    bd28:	02012903          	lw	s2,32(sp)
    bd2c:	01c12983          	lw	s3,28(sp)
    bd30:	000a0513          	mv	a0,s4
    bd34:	01812a03          	lw	s4,24(sp)
    bd38:	03010113          	addi	sp,sp,48
    bd3c:	00008067          	ret
    bd40:	00e7e7b3          	or	a5,a5,a4
    bd44:	f6dff06f          	j	bcb0 <__d2b+0x70>
    bd48:	00da2a23          	sw	a3,20(s4)
    bd4c:	fa1ff06f          	j	bcec <__d2b+0xac>
    bd50:	00c10513          	addi	a0,sp,12
    bd54:	ec8ff0ef          	jal	ra,b41c <__lo0bits>
    bd58:	00c12783          	lw	a5,12(sp)
    bd5c:	02050513          	addi	a0,a0,32
    bd60:	00100493          	li	s1,1
    bd64:	00fa2a23          	sw	a5,20(s4)
    bd68:	00100793          	li	a5,1
    bd6c:	00fa2823          	sw	a5,16(s4)
    bd70:	f91ff06f          	j	bd00 <__d2b+0xc0>
    bd74:	bce50793          	addi	a5,a0,-1074
    bd78:	00f9a023          	sw	a5,0(s3)
    bd7c:	00249793          	slli	a5,s1,0x2
    bd80:	00fa07b3          	add	a5,s4,a5
    bd84:	0107a503          	lw	a0,16(a5)
    bd88:	00549493          	slli	s1,s1,0x5
    bd8c:	e1cff0ef          	jal	ra,b3a8 <__hi0bits>
    bd90:	40a484b3          	sub	s1,s1,a0
    bd94:	00992023          	sw	s1,0(s2)
    bd98:	f85ff06f          	j	bd1c <__d2b+0xdc>

0000bd9c <_calloc_r>:
    bd9c:	02c58633          	mul	a2,a1,a2
    bda0:	fe010113          	addi	sp,sp,-32
    bda4:	00812c23          	sw	s0,24(sp)
    bda8:	00112e23          	sw	ra,28(sp)
    bdac:	00060593          	mv	a1,a2
    bdb0:	00c12623          	sw	a2,12(sp)
    bdb4:	a35fc0ef          	jal	ra,87e8 <_malloc_r>
    bdb8:	00050413          	mv	s0,a0
    bdbc:	00050863          	beqz	a0,bdcc <_calloc_r+0x30>
    bdc0:	00c12603          	lw	a2,12(sp)
    bdc4:	00000593          	li	a1,0
    bdc8:	cfcf70ef          	jal	ra,32c4 <memset>
    bdcc:	01c12083          	lw	ra,28(sp)
    bdd0:	00040513          	mv	a0,s0
    bdd4:	01812403          	lw	s0,24(sp)
    bdd8:	02010113          	addi	sp,sp,32
    bddc:	00008067          	ret

0000bde0 <__sfputc_r>:
    bde0:	00862783          	lw	a5,8(a2)
    bde4:	fff78793          	addi	a5,a5,-1
    bde8:	00f62423          	sw	a5,8(a2)
    bdec:	0007dc63          	bgez	a5,be04 <__sfputc_r+0x24>
    bdf0:	01862703          	lw	a4,24(a2)
    bdf4:	00e7c663          	blt	a5,a4,be00 <__sfputc_r+0x20>
    bdf8:	00a00793          	li	a5,10
    bdfc:	00f59463          	bne	a1,a5,be04 <__sfputc_r+0x24>
    be00:	5f80006f          	j	c3f8 <__swbuf_r>
    be04:	00062783          	lw	a5,0(a2)
    be08:	00058513          	mv	a0,a1
    be0c:	00178713          	addi	a4,a5,1
    be10:	00e62023          	sw	a4,0(a2)
    be14:	00b78023          	sb	a1,0(a5)
    be18:	00008067          	ret

0000be1c <__sfputs_r>:
    be1c:	fe010113          	addi	sp,sp,-32
    be20:	00812c23          	sw	s0,24(sp)
    be24:	00912a23          	sw	s1,20(sp)
    be28:	01212823          	sw	s2,16(sp)
    be2c:	01312623          	sw	s3,12(sp)
    be30:	01412423          	sw	s4,8(sp)
    be34:	00112e23          	sw	ra,28(sp)
    be38:	00050913          	mv	s2,a0
    be3c:	00058993          	mv	s3,a1
    be40:	00060413          	mv	s0,a2
    be44:	00d604b3          	add	s1,a2,a3
    be48:	fff00a13          	li	s4,-1
    be4c:	00941663          	bne	s0,s1,be58 <__sfputs_r+0x3c>
    be50:	00000513          	li	a0,0
    be54:	01c0006f          	j	be70 <__sfputs_r+0x54>
    be58:	00044583          	lbu	a1,0(s0)
    be5c:	00098613          	mv	a2,s3
    be60:	00090513          	mv	a0,s2
    be64:	f7dff0ef          	jal	ra,bde0 <__sfputc_r>
    be68:	00140413          	addi	s0,s0,1
    be6c:	ff4510e3          	bne	a0,s4,be4c <__sfputs_r+0x30>
    be70:	01c12083          	lw	ra,28(sp)
    be74:	01812403          	lw	s0,24(sp)
    be78:	01412483          	lw	s1,20(sp)
    be7c:	01012903          	lw	s2,16(sp)
    be80:	00c12983          	lw	s3,12(sp)
    be84:	00812a03          	lw	s4,8(sp)
    be88:	02010113          	addi	sp,sp,32
    be8c:	00008067          	ret

0000be90 <_vfiprintf_r>:
    be90:	f5010113          	addi	sp,sp,-176
    be94:	0a812423          	sw	s0,168(sp)
    be98:	0a912223          	sw	s1,164(sp)
    be9c:	0b212023          	sw	s2,160(sp)
    bea0:	09312e23          	sw	s3,156(sp)
    bea4:	0a112623          	sw	ra,172(sp)
    bea8:	09412c23          	sw	s4,152(sp)
    beac:	09512a23          	sw	s5,148(sp)
    beb0:	09612823          	sw	s6,144(sp)
    beb4:	09712623          	sw	s7,140(sp)
    beb8:	09812423          	sw	s8,136(sp)
    bebc:	09912223          	sw	s9,132(sp)
    bec0:	09a12023          	sw	s10,128(sp)
    bec4:	07b12e23          	sw	s11,124(sp)
    bec8:	00050993          	mv	s3,a0
    becc:	00058413          	mv	s0,a1
    bed0:	00060913          	mv	s2,a2
    bed4:	00068493          	mv	s1,a3
    bed8:	00050863          	beqz	a0,bee8 <_vfiprintf_r+0x58>
    bedc:	01852783          	lw	a5,24(a0)
    bee0:	00079463          	bnez	a5,bee8 <_vfiprintf_r+0x58>
    bee4:	f61fe0ef          	jal	ra,ae44 <__sinit>
    bee8:	0000e7b7          	lui	a5,0xe
    beec:	9d878793          	addi	a5,a5,-1576 # d9d8 <__sf_fake_stdin>
    bef0:	08f41c63          	bne	s0,a5,bf88 <_vfiprintf_r+0xf8>
    bef4:	0049a403          	lw	s0,4(s3)
    bef8:	06442783          	lw	a5,100(s0)
    befc:	0017f793          	andi	a5,a5,1
    bf00:	00079c63          	bnez	a5,bf18 <_vfiprintf_r+0x88>
    bf04:	00c45783          	lhu	a5,12(s0)
    bf08:	2007f793          	andi	a5,a5,512
    bf0c:	00079663          	bnez	a5,bf18 <_vfiprintf_r+0x88>
    bf10:	05842503          	lw	a0,88(s0)
    bf14:	d58fa0ef          	jal	ra,646c <__retarget_lock_acquire_recursive>
    bf18:	00c45783          	lhu	a5,12(s0)
    bf1c:	0087f793          	andi	a5,a5,8
    bf20:	00078663          	beqz	a5,bf2c <_vfiprintf_r+0x9c>
    bf24:	01042783          	lw	a5,16(s0)
    bf28:	0a079063          	bnez	a5,bfc8 <_vfiprintf_r+0x138>
    bf2c:	00040593          	mv	a1,s0
    bf30:	00098513          	mv	a0,s3
    bf34:	650000ef          	jal	ra,c584 <__swsetup_r>
    bf38:	08050863          	beqz	a0,bfc8 <_vfiprintf_r+0x138>
    bf3c:	06442783          	lw	a5,100(s0)
    bf40:	0017f793          	andi	a5,a5,1
    bf44:	06078663          	beqz	a5,bfb0 <_vfiprintf_r+0x120>
    bf48:	fff00513          	li	a0,-1
    bf4c:	0ac12083          	lw	ra,172(sp)
    bf50:	0a812403          	lw	s0,168(sp)
    bf54:	0a412483          	lw	s1,164(sp)
    bf58:	0a012903          	lw	s2,160(sp)
    bf5c:	09c12983          	lw	s3,156(sp)
    bf60:	09812a03          	lw	s4,152(sp)
    bf64:	09412a83          	lw	s5,148(sp)
    bf68:	09012b03          	lw	s6,144(sp)
    bf6c:	08c12b83          	lw	s7,140(sp)
    bf70:	08812c03          	lw	s8,136(sp)
    bf74:	08412c83          	lw	s9,132(sp)
    bf78:	08012d03          	lw	s10,128(sp)
    bf7c:	07c12d83          	lw	s11,124(sp)
    bf80:	0b010113          	addi	sp,sp,176
    bf84:	00008067          	ret
    bf88:	0000e7b7          	lui	a5,0xe
    bf8c:	9f878793          	addi	a5,a5,-1544 # d9f8 <__sf_fake_stdout>
    bf90:	00f41663          	bne	s0,a5,bf9c <_vfiprintf_r+0x10c>
    bf94:	0089a403          	lw	s0,8(s3)
    bf98:	f61ff06f          	j	bef8 <_vfiprintf_r+0x68>
    bf9c:	0000e7b7          	lui	a5,0xe
    bfa0:	9b878793          	addi	a5,a5,-1608 # d9b8 <__sf_fake_stderr>
    bfa4:	f4f41ae3          	bne	s0,a5,bef8 <_vfiprintf_r+0x68>
    bfa8:	00c9a403          	lw	s0,12(s3)
    bfac:	f4dff06f          	j	bef8 <_vfiprintf_r+0x68>
    bfb0:	00c45783          	lhu	a5,12(s0)
    bfb4:	2007f793          	andi	a5,a5,512
    bfb8:	f80798e3          	bnez	a5,bf48 <_vfiprintf_r+0xb8>
    bfbc:	05842503          	lw	a0,88(s0)
    bfc0:	cb8fa0ef          	jal	ra,6478 <__retarget_lock_release_recursive>
    bfc4:	f85ff06f          	j	bf48 <_vfiprintf_r+0xb8>
    bfc8:	02000793          	li	a5,32
    bfcc:	02f104a3          	sb	a5,41(sp)
    bfd0:	00009ab7          	lui	s5,0x9
    bfd4:	03000793          	li	a5,48
    bfd8:	02012223          	sw	zero,36(sp)
    bfdc:	02f10523          	sb	a5,42(sp)
    bfe0:	00912623          	sw	s1,12(sp)
    bfe4:	02500c93          	li	s9,37
    bfe8:	0000eb37          	lui	s6,0xe
    bfec:	0000ebb7          	lui	s7,0xe
    bff0:	0000ed37          	lui	s10,0xe
    bff4:	0000cc37          	lui	s8,0xc
    bff8:	b58a8a93          	addi	s5,s5,-1192 # 8b58 <_printf_float>
    bffc:	00090493          	mv	s1,s2
    c000:	0004c783          	lbu	a5,0(s1)
    c004:	00078463          	beqz	a5,c00c <_vfiprintf_r+0x17c>
    c008:	0d979c63          	bne	a5,s9,c0e0 <_vfiprintf_r+0x250>
    c00c:	41248db3          	sub	s11,s1,s2
    c010:	03248663          	beq	s1,s2,c03c <_vfiprintf_r+0x1ac>
    c014:	000d8693          	mv	a3,s11
    c018:	00090613          	mv	a2,s2
    c01c:	00040593          	mv	a1,s0
    c020:	00098513          	mv	a0,s3
    c024:	df9ff0ef          	jal	ra,be1c <__sfputs_r>
    c028:	fff00793          	li	a5,-1
    c02c:	24f50463          	beq	a0,a5,c274 <_vfiprintf_r+0x3e4>
    c030:	02412783          	lw	a5,36(sp)
    c034:	01b787b3          	add	a5,a5,s11
    c038:	02f12223          	sw	a5,36(sp)
    c03c:	0004c783          	lbu	a5,0(s1)
    c040:	22078a63          	beqz	a5,c274 <_vfiprintf_r+0x3e4>
    c044:	fff00793          	li	a5,-1
    c048:	00148913          	addi	s2,s1,1
    c04c:	00012823          	sw	zero,16(sp)
    c050:	00012e23          	sw	zero,28(sp)
    c054:	00f12a23          	sw	a5,20(sp)
    c058:	00012c23          	sw	zero,24(sp)
    c05c:	040109a3          	sb	zero,83(sp)
    c060:	06012423          	sw	zero,104(sp)
    c064:	00100d93          	li	s11,1
    c068:	00094583          	lbu	a1,0(s2)
    c06c:	00500613          	li	a2,5
    c070:	a88b0513          	addi	a0,s6,-1400 # da88 <p05.0+0xc>
    c074:	844ff0ef          	jal	ra,b0b8 <memchr>
    c078:	01012783          	lw	a5,16(sp)
    c07c:	00190493          	addi	s1,s2,1
    c080:	06051463          	bnez	a0,c0e8 <_vfiprintf_r+0x258>
    c084:	0107f713          	andi	a4,a5,16
    c088:	00070663          	beqz	a4,c094 <_vfiprintf_r+0x204>
    c08c:	02000713          	li	a4,32
    c090:	04e109a3          	sb	a4,83(sp)
    c094:	0087f713          	andi	a4,a5,8
    c098:	00070663          	beqz	a4,c0a4 <_vfiprintf_r+0x214>
    c09c:	02b00713          	li	a4,43
    c0a0:	04e109a3          	sb	a4,83(sp)
    c0a4:	00094683          	lbu	a3,0(s2)
    c0a8:	02a00713          	li	a4,42
    c0ac:	04e68c63          	beq	a3,a4,c104 <_vfiprintf_r+0x274>
    c0b0:	01c12783          	lw	a5,28(sp)
    c0b4:	00090493          	mv	s1,s2
    c0b8:	00000693          	li	a3,0
    c0bc:	00900613          	li	a2,9
    c0c0:	00a00513          	li	a0,10
    c0c4:	0004c703          	lbu	a4,0(s1)
    c0c8:	00148593          	addi	a1,s1,1
    c0cc:	fd070713          	addi	a4,a4,-48
    c0d0:	08e67c63          	bgeu	a2,a4,c168 <_vfiprintf_r+0x2d8>
    c0d4:	04068463          	beqz	a3,c11c <_vfiprintf_r+0x28c>
    c0d8:	00f12e23          	sw	a5,28(sp)
    c0dc:	0400006f          	j	c11c <_vfiprintf_r+0x28c>
    c0e0:	00148493          	addi	s1,s1,1
    c0e4:	f1dff06f          	j	c000 <_vfiprintf_r+0x170>
    c0e8:	a88b0713          	addi	a4,s6,-1400
    c0ec:	40e50533          	sub	a0,a0,a4
    c0f0:	00ad9533          	sll	a0,s11,a0
    c0f4:	00a7e7b3          	or	a5,a5,a0
    c0f8:	00f12823          	sw	a5,16(sp)
    c0fc:	00048913          	mv	s2,s1
    c100:	f69ff06f          	j	c068 <_vfiprintf_r+0x1d8>
    c104:	00c12703          	lw	a4,12(sp)
    c108:	00470693          	addi	a3,a4,4
    c10c:	00072703          	lw	a4,0(a4)
    c110:	00d12623          	sw	a3,12(sp)
    c114:	04074063          	bltz	a4,c154 <_vfiprintf_r+0x2c4>
    c118:	00e12e23          	sw	a4,28(sp)
    c11c:	0004c703          	lbu	a4,0(s1)
    c120:	02e00793          	li	a5,46
    c124:	08f71663          	bne	a4,a5,c1b0 <_vfiprintf_r+0x320>
    c128:	0014c703          	lbu	a4,1(s1)
    c12c:	02a00793          	li	a5,42
    c130:	04f71a63          	bne	a4,a5,c184 <_vfiprintf_r+0x2f4>
    c134:	00c12783          	lw	a5,12(sp)
    c138:	00248493          	addi	s1,s1,2
    c13c:	00478713          	addi	a4,a5,4
    c140:	0007a783          	lw	a5,0(a5)
    c144:	00e12623          	sw	a4,12(sp)
    c148:	0207ca63          	bltz	a5,c17c <_vfiprintf_r+0x2ec>
    c14c:	00f12a23          	sw	a5,20(sp)
    c150:	0600006f          	j	c1b0 <_vfiprintf_r+0x320>
    c154:	40e00733          	neg	a4,a4
    c158:	0027e793          	ori	a5,a5,2
    c15c:	00e12e23          	sw	a4,28(sp)
    c160:	00f12823          	sw	a5,16(sp)
    c164:	fb9ff06f          	j	c11c <_vfiprintf_r+0x28c>
    c168:	02a787b3          	mul	a5,a5,a0
    c16c:	00058493          	mv	s1,a1
    c170:	00100693          	li	a3,1
    c174:	00e787b3          	add	a5,a5,a4
    c178:	f4dff06f          	j	c0c4 <_vfiprintf_r+0x234>
    c17c:	fff00793          	li	a5,-1
    c180:	fcdff06f          	j	c14c <_vfiprintf_r+0x2bc>
    c184:	00148493          	addi	s1,s1,1
    c188:	00012a23          	sw	zero,20(sp)
    c18c:	00000693          	li	a3,0
    c190:	00000793          	li	a5,0
    c194:	00900613          	li	a2,9
    c198:	00a00513          	li	a0,10
    c19c:	0004c703          	lbu	a4,0(s1)
    c1a0:	00148593          	addi	a1,s1,1
    c1a4:	fd070713          	addi	a4,a4,-48
    c1a8:	08e67263          	bgeu	a2,a4,c22c <_vfiprintf_r+0x39c>
    c1ac:	fa0690e3          	bnez	a3,c14c <_vfiprintf_r+0x2bc>
    c1b0:	0004c583          	lbu	a1,0(s1)
    c1b4:	00300613          	li	a2,3
    c1b8:	a90b8513          	addi	a0,s7,-1392 # da90 <p05.0+0x14>
    c1bc:	efdfe0ef          	jal	ra,b0b8 <memchr>
    c1c0:	02050263          	beqz	a0,c1e4 <_vfiprintf_r+0x354>
    c1c4:	a90b8793          	addi	a5,s7,-1392
    c1c8:	40f50533          	sub	a0,a0,a5
    c1cc:	04000793          	li	a5,64
    c1d0:	00a797b3          	sll	a5,a5,a0
    c1d4:	01012503          	lw	a0,16(sp)
    c1d8:	00148493          	addi	s1,s1,1
    c1dc:	00f56533          	or	a0,a0,a5
    c1e0:	00a12823          	sw	a0,16(sp)
    c1e4:	0004c583          	lbu	a1,0(s1)
    c1e8:	00600613          	li	a2,6
    c1ec:	a94d0513          	addi	a0,s10,-1388 # da94 <p05.0+0x18>
    c1f0:	00148913          	addi	s2,s1,1
    c1f4:	02b10423          	sb	a1,40(sp)
    c1f8:	ec1fe0ef          	jal	ra,b0b8 <memchr>
    c1fc:	0a050663          	beqz	a0,c2a8 <_vfiprintf_r+0x418>
    c200:	040a9863          	bnez	s5,c250 <_vfiprintf_r+0x3c0>
    c204:	01012703          	lw	a4,16(sp)
    c208:	00c12783          	lw	a5,12(sp)
    c20c:	10077713          	andi	a4,a4,256
    c210:	02070863          	beqz	a4,c240 <_vfiprintf_r+0x3b0>
    c214:	00478793          	addi	a5,a5,4
    c218:	00f12623          	sw	a5,12(sp)
    c21c:	02412783          	lw	a5,36(sp)
    c220:	014787b3          	add	a5,a5,s4
    c224:	02f12223          	sw	a5,36(sp)
    c228:	dd5ff06f          	j	bffc <_vfiprintf_r+0x16c>
    c22c:	02a787b3          	mul	a5,a5,a0
    c230:	00058493          	mv	s1,a1
    c234:	00100693          	li	a3,1
    c238:	00e787b3          	add	a5,a5,a4
    c23c:	f61ff06f          	j	c19c <_vfiprintf_r+0x30c>
    c240:	00778793          	addi	a5,a5,7
    c244:	ff87f793          	andi	a5,a5,-8
    c248:	00878793          	addi	a5,a5,8
    c24c:	fcdff06f          	j	c218 <_vfiprintf_r+0x388>
    c250:	00c10713          	addi	a4,sp,12
    c254:	e1cc0693          	addi	a3,s8,-484 # be1c <__sfputs_r>
    c258:	00040613          	mv	a2,s0
    c25c:	01010593          	addi	a1,sp,16
    c260:	00098513          	mv	a0,s3
    c264:	8f5fc0ef          	jal	ra,8b58 <_printf_float>
    c268:	fff00793          	li	a5,-1
    c26c:	00050a13          	mv	s4,a0
    c270:	faf516e3          	bne	a0,a5,c21c <_vfiprintf_r+0x38c>
    c274:	06442783          	lw	a5,100(s0)
    c278:	0017f793          	andi	a5,a5,1
    c27c:	00079c63          	bnez	a5,c294 <_vfiprintf_r+0x404>
    c280:	00c45783          	lhu	a5,12(s0)
    c284:	2007f793          	andi	a5,a5,512
    c288:	00079663          	bnez	a5,c294 <_vfiprintf_r+0x404>
    c28c:	05842503          	lw	a0,88(s0)
    c290:	9e8fa0ef          	jal	ra,6478 <__retarget_lock_release_recursive>
    c294:	00c45783          	lhu	a5,12(s0)
    c298:	0407f793          	andi	a5,a5,64
    c29c:	ca0796e3          	bnez	a5,bf48 <_vfiprintf_r+0xb8>
    c2a0:	02412503          	lw	a0,36(sp)
    c2a4:	ca9ff06f          	j	bf4c <_vfiprintf_r+0xbc>
    c2a8:	00c10713          	addi	a4,sp,12
    c2ac:	e1cc0693          	addi	a3,s8,-484
    c2b0:	00040613          	mv	a2,s0
    c2b4:	01010593          	addi	a1,sp,16
    c2b8:	00098513          	mv	a0,s3
    c2bc:	9e0fd0ef          	jal	ra,949c <_printf_i>
    c2c0:	fa9ff06f          	j	c268 <_vfiprintf_r+0x3d8>

0000c2c4 <__sread>:
    c2c4:	ff010113          	addi	sp,sp,-16
    c2c8:	00812423          	sw	s0,8(sp)
    c2cc:	00058413          	mv	s0,a1
    c2d0:	00e59583          	lh	a1,14(a1)
    c2d4:	00112623          	sw	ra,12(sp)
    c2d8:	20d000ef          	jal	ra,cce4 <_read_r>
    c2dc:	02054063          	bltz	a0,c2fc <__sread+0x38>
    c2e0:	05442783          	lw	a5,84(s0)
    c2e4:	00a787b3          	add	a5,a5,a0
    c2e8:	04f42a23          	sw	a5,84(s0)
    c2ec:	00c12083          	lw	ra,12(sp)
    c2f0:	00812403          	lw	s0,8(sp)
    c2f4:	01010113          	addi	sp,sp,16
    c2f8:	00008067          	ret
    c2fc:	00c45783          	lhu	a5,12(s0)
    c300:	fffff737          	lui	a4,0xfffff
    c304:	fff70713          	addi	a4,a4,-1 # ffffefff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfffff000>
    c308:	00e7f7b3          	and	a5,a5,a4
    c30c:	00f41623          	sh	a5,12(s0)
    c310:	fddff06f          	j	c2ec <__sread+0x28>

0000c314 <__swrite>:
    c314:	00c5d783          	lhu	a5,12(a1)
    c318:	fe010113          	addi	sp,sp,-32
    c31c:	00812c23          	sw	s0,24(sp)
    c320:	00912a23          	sw	s1,20(sp)
    c324:	01212823          	sw	s2,16(sp)
    c328:	01312623          	sw	s3,12(sp)
    c32c:	00112e23          	sw	ra,28(sp)
    c330:	1007f793          	andi	a5,a5,256
    c334:	00050493          	mv	s1,a0
    c338:	00058413          	mv	s0,a1
    c33c:	00060913          	mv	s2,a2
    c340:	00068993          	mv	s3,a3
    c344:	00078a63          	beqz	a5,c358 <__swrite+0x44>
    c348:	00e59583          	lh	a1,14(a1)
    c34c:	00200693          	li	a3,2
    c350:	00000613          	li	a2,0
    c354:	760000ef          	jal	ra,cab4 <_lseek_r>
    c358:	00c45783          	lhu	a5,12(s0)
    c35c:	fffff737          	lui	a4,0xfffff
    c360:	fff70713          	addi	a4,a4,-1 # ffffefff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfffff000>
    c364:	00e7f7b3          	and	a5,a5,a4
    c368:	00e41583          	lh	a1,14(s0)
    c36c:	00f41623          	sh	a5,12(s0)
    c370:	01812403          	lw	s0,24(sp)
    c374:	01c12083          	lw	ra,28(sp)
    c378:	00098693          	mv	a3,s3
    c37c:	00090613          	mv	a2,s2
    c380:	00c12983          	lw	s3,12(sp)
    c384:	01012903          	lw	s2,16(sp)
    c388:	00048513          	mv	a0,s1
    c38c:	01412483          	lw	s1,20(sp)
    c390:	02010113          	addi	sp,sp,32
    c394:	19c0006f          	j	c530 <_write_r>

0000c398 <__sseek>:
    c398:	ff010113          	addi	sp,sp,-16
    c39c:	00812423          	sw	s0,8(sp)
    c3a0:	00058413          	mv	s0,a1
    c3a4:	00e59583          	lh	a1,14(a1)
    c3a8:	00112623          	sw	ra,12(sp)
    c3ac:	708000ef          	jal	ra,cab4 <_lseek_r>
    c3b0:	fff00793          	li	a5,-1
    c3b4:	00c45703          	lhu	a4,12(s0)
    c3b8:	02f51263          	bne	a0,a5,c3dc <__sseek+0x44>
    c3bc:	fffff7b7          	lui	a5,0xfffff
    c3c0:	fff78793          	addi	a5,a5,-1 # ffffefff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfffff000>
    c3c4:	00e7f7b3          	and	a5,a5,a4
    c3c8:	00f41623          	sh	a5,12(s0)
    c3cc:	00c12083          	lw	ra,12(sp)
    c3d0:	00812403          	lw	s0,8(sp)
    c3d4:	01010113          	addi	sp,sp,16
    c3d8:	00008067          	ret
    c3dc:	000017b7          	lui	a5,0x1
    c3e0:	00f767b3          	or	a5,a4,a5
    c3e4:	00f41623          	sh	a5,12(s0)
    c3e8:	04a42a23          	sw	a0,84(s0)
    c3ec:	fe1ff06f          	j	c3cc <__sseek+0x34>

0000c3f0 <__sclose>:
    c3f0:	00e59583          	lh	a1,14(a1)
    c3f4:	35c0006f          	j	c750 <_close_r>

0000c3f8 <__swbuf_r>:
    c3f8:	fe010113          	addi	sp,sp,-32
    c3fc:	00812c23          	sw	s0,24(sp)
    c400:	00912a23          	sw	s1,20(sp)
    c404:	01212823          	sw	s2,16(sp)
    c408:	00112e23          	sw	ra,28(sp)
    c40c:	01312623          	sw	s3,12(sp)
    c410:	00050493          	mv	s1,a0
    c414:	00058913          	mv	s2,a1
    c418:	00060413          	mv	s0,a2
    c41c:	00050863          	beqz	a0,c42c <__swbuf_r+0x34>
    c420:	01852783          	lw	a5,24(a0)
    c424:	00079463          	bnez	a5,c42c <__swbuf_r+0x34>
    c428:	a1dfe0ef          	jal	ra,ae44 <__sinit>
    c42c:	0000e7b7          	lui	a5,0xe
    c430:	9d878793          	addi	a5,a5,-1576 # d9d8 <__sf_fake_stdin>
    c434:	0af41e63          	bne	s0,a5,c4f0 <__swbuf_r+0xf8>
    c438:	0044a403          	lw	s0,4(s1)
    c43c:	01842783          	lw	a5,24(s0)
    c440:	00f42423          	sw	a5,8(s0)
    c444:	00c45783          	lhu	a5,12(s0)
    c448:	0087f793          	andi	a5,a5,8
    c44c:	0c078663          	beqz	a5,c518 <__swbuf_r+0x120>
    c450:	01042783          	lw	a5,16(s0)
    c454:	0c078263          	beqz	a5,c518 <__swbuf_r+0x120>
    c458:	01042783          	lw	a5,16(s0)
    c45c:	00042503          	lw	a0,0(s0)
    c460:	0ff97993          	andi	s3,s2,255
    c464:	0ff97913          	andi	s2,s2,255
    c468:	40f50533          	sub	a0,a0,a5
    c46c:	01442783          	lw	a5,20(s0)
    c470:	00f54a63          	blt	a0,a5,c484 <__swbuf_r+0x8c>
    c474:	00040593          	mv	a1,s0
    c478:	00048513          	mv	a0,s1
    c47c:	514000ef          	jal	ra,c990 <_fflush_r>
    c480:	0a051463          	bnez	a0,c528 <__swbuf_r+0x130>
    c484:	00842783          	lw	a5,8(s0)
    c488:	00150513          	addi	a0,a0,1
    c48c:	fff78793          	addi	a5,a5,-1
    c490:	00f42423          	sw	a5,8(s0)
    c494:	00042783          	lw	a5,0(s0)
    c498:	00178713          	addi	a4,a5,1
    c49c:	00e42023          	sw	a4,0(s0)
    c4a0:	01378023          	sb	s3,0(a5)
    c4a4:	01442783          	lw	a5,20(s0)
    c4a8:	00a78c63          	beq	a5,a0,c4c0 <__swbuf_r+0xc8>
    c4ac:	00c45783          	lhu	a5,12(s0)
    c4b0:	0017f793          	andi	a5,a5,1
    c4b4:	00078e63          	beqz	a5,c4d0 <__swbuf_r+0xd8>
    c4b8:	00a00793          	li	a5,10
    c4bc:	00f91a63          	bne	s2,a5,c4d0 <__swbuf_r+0xd8>
    c4c0:	00040593          	mv	a1,s0
    c4c4:	00048513          	mv	a0,s1
    c4c8:	4c8000ef          	jal	ra,c990 <_fflush_r>
    c4cc:	04051e63          	bnez	a0,c528 <__swbuf_r+0x130>
    c4d0:	01c12083          	lw	ra,28(sp)
    c4d4:	01812403          	lw	s0,24(sp)
    c4d8:	01412483          	lw	s1,20(sp)
    c4dc:	00c12983          	lw	s3,12(sp)
    c4e0:	00090513          	mv	a0,s2
    c4e4:	01012903          	lw	s2,16(sp)
    c4e8:	02010113          	addi	sp,sp,32
    c4ec:	00008067          	ret
    c4f0:	0000e7b7          	lui	a5,0xe
    c4f4:	9f878793          	addi	a5,a5,-1544 # d9f8 <__sf_fake_stdout>
    c4f8:	00f41663          	bne	s0,a5,c504 <__swbuf_r+0x10c>
    c4fc:	0084a403          	lw	s0,8(s1)
    c500:	f3dff06f          	j	c43c <__swbuf_r+0x44>
    c504:	0000e7b7          	lui	a5,0xe
    c508:	9b878793          	addi	a5,a5,-1608 # d9b8 <__sf_fake_stderr>
    c50c:	f2f418e3          	bne	s0,a5,c43c <__swbuf_r+0x44>
    c510:	00c4a403          	lw	s0,12(s1)
    c514:	f29ff06f          	j	c43c <__swbuf_r+0x44>
    c518:	00040593          	mv	a1,s0
    c51c:	00048513          	mv	a0,s1
    c520:	064000ef          	jal	ra,c584 <__swsetup_r>
    c524:	f2050ae3          	beqz	a0,c458 <__swbuf_r+0x60>
    c528:	fff00913          	li	s2,-1
    c52c:	fa5ff06f          	j	c4d0 <__swbuf_r+0xd8>

0000c530 <_write_r>:
    c530:	ff010113          	addi	sp,sp,-16
    c534:	00812423          	sw	s0,8(sp)
    c538:	00912223          	sw	s1,4(sp)
    c53c:	00050413          	mv	s0,a0
    c540:	0000e4b7          	lui	s1,0xe
    c544:	00058513          	mv	a0,a1
    c548:	00060593          	mv	a1,a2
    c54c:	00068613          	mv	a2,a3
    c550:	00112623          	sw	ra,12(sp)
    c554:	b204a823          	sw	zero,-1232(s1) # db30 <errno>
    c558:	e51f90ef          	jal	ra,63a8 <_write>
    c55c:	fff00793          	li	a5,-1
    c560:	00f51863          	bne	a0,a5,c570 <_write_r+0x40>
    c564:	b304a783          	lw	a5,-1232(s1)
    c568:	00078463          	beqz	a5,c570 <_write_r+0x40>
    c56c:	00f42023          	sw	a5,0(s0)
    c570:	00c12083          	lw	ra,12(sp)
    c574:	00812403          	lw	s0,8(sp)
    c578:	00412483          	lw	s1,4(sp)
    c57c:	01010113          	addi	sp,sp,16
    c580:	00008067          	ret

0000c584 <__swsetup_r>:
    c584:	ff010113          	addi	sp,sp,-16
    c588:	0002f7b7          	lui	a5,0x2f
    c58c:	00912223          	sw	s1,4(sp)
    c590:	c9c7a483          	lw	s1,-868(a5) # 2ec9c <_impure_ptr>
    c594:	00812423          	sw	s0,8(sp)
    c598:	01212023          	sw	s2,0(sp)
    c59c:	00112623          	sw	ra,12(sp)
    c5a0:	00050913          	mv	s2,a0
    c5a4:	00058413          	mv	s0,a1
    c5a8:	00048a63          	beqz	s1,c5bc <__swsetup_r+0x38>
    c5ac:	0184a783          	lw	a5,24(s1)
    c5b0:	00079663          	bnez	a5,c5bc <__swsetup_r+0x38>
    c5b4:	00048513          	mv	a0,s1
    c5b8:	88dfe0ef          	jal	ra,ae44 <__sinit>
    c5bc:	0000e7b7          	lui	a5,0xe
    c5c0:	9d878793          	addi	a5,a5,-1576 # d9d8 <__sf_fake_stdin>
    c5c4:	02f41e63          	bne	s0,a5,c600 <__swsetup_r+0x7c>
    c5c8:	0044a403          	lw	s0,4(s1)
    c5cc:	00c41783          	lh	a5,12(s0)
    c5d0:	01079713          	slli	a4,a5,0x10
    c5d4:	0087f693          	andi	a3,a5,8
    c5d8:	01075713          	srli	a4,a4,0x10
    c5dc:	08069a63          	bnez	a3,c670 <__swsetup_r+0xec>
    c5e0:	01077693          	andi	a3,a4,16
    c5e4:	04069263          	bnez	a3,c628 <__swsetup_r+0xa4>
    c5e8:	00900713          	li	a4,9
    c5ec:	00e92023          	sw	a4,0(s2)
    c5f0:	0407e793          	ori	a5,a5,64
    c5f4:	00f41623          	sh	a5,12(s0)
    c5f8:	fff00513          	li	a0,-1
    c5fc:	0d00006f          	j	c6cc <__swsetup_r+0x148>
    c600:	0000e7b7          	lui	a5,0xe
    c604:	9f878793          	addi	a5,a5,-1544 # d9f8 <__sf_fake_stdout>
    c608:	00f41663          	bne	s0,a5,c614 <__swsetup_r+0x90>
    c60c:	0084a403          	lw	s0,8(s1)
    c610:	fbdff06f          	j	c5cc <__swsetup_r+0x48>
    c614:	0000e7b7          	lui	a5,0xe
    c618:	9b878793          	addi	a5,a5,-1608 # d9b8 <__sf_fake_stderr>
    c61c:	faf418e3          	bne	s0,a5,c5cc <__swsetup_r+0x48>
    c620:	00c4a403          	lw	s0,12(s1)
    c624:	fa9ff06f          	j	c5cc <__swsetup_r+0x48>
    c628:	00477713          	andi	a4,a4,4
    c62c:	02070c63          	beqz	a4,c664 <__swsetup_r+0xe0>
    c630:	03442583          	lw	a1,52(s0)
    c634:	00058c63          	beqz	a1,c64c <__swsetup_r+0xc8>
    c638:	04440793          	addi	a5,s0,68
    c63c:	00f58663          	beq	a1,a5,c648 <__swsetup_r+0xc4>
    c640:	00090513          	mv	a0,s2
    c644:	8a0fc0ef          	jal	ra,86e4 <_free_r>
    c648:	02042a23          	sw	zero,52(s0)
    c64c:	00c45783          	lhu	a5,12(s0)
    c650:	00042223          	sw	zero,4(s0)
    c654:	fdb7f793          	andi	a5,a5,-37
    c658:	00f41623          	sh	a5,12(s0)
    c65c:	01042783          	lw	a5,16(s0)
    c660:	00f42023          	sw	a5,0(s0)
    c664:	00c45783          	lhu	a5,12(s0)
    c668:	0087e793          	ori	a5,a5,8
    c66c:	00f41623          	sh	a5,12(s0)
    c670:	01042783          	lw	a5,16(s0)
    c674:	02079063          	bnez	a5,c694 <__swsetup_r+0x110>
    c678:	00c45783          	lhu	a5,12(s0)
    c67c:	20000713          	li	a4,512
    c680:	2807f793          	andi	a5,a5,640
    c684:	00e78863          	beq	a5,a4,c694 <__swsetup_r+0x110>
    c688:	00040593          	mv	a1,s0
    c68c:	00090513          	mv	a0,s2
    c690:	508000ef          	jal	ra,cb98 <__smakebuf_r>
    c694:	00c41783          	lh	a5,12(s0)
    c698:	01079713          	slli	a4,a5,0x10
    c69c:	0017f693          	andi	a3,a5,1
    c6a0:	01075713          	srli	a4,a4,0x10
    c6a4:	04068063          	beqz	a3,c6e4 <__swsetup_r+0x160>
    c6a8:	01442683          	lw	a3,20(s0)
    c6ac:	00042423          	sw	zero,8(s0)
    c6b0:	40d006b3          	neg	a3,a3
    c6b4:	00d42c23          	sw	a3,24(s0)
    c6b8:	01042683          	lw	a3,16(s0)
    c6bc:	00000513          	li	a0,0
    c6c0:	00069663          	bnez	a3,c6cc <__swsetup_r+0x148>
    c6c4:	08077713          	andi	a4,a4,128
    c6c8:	f20714e3          	bnez	a4,c5f0 <__swsetup_r+0x6c>
    c6cc:	00c12083          	lw	ra,12(sp)
    c6d0:	00812403          	lw	s0,8(sp)
    c6d4:	00412483          	lw	s1,4(sp)
    c6d8:	00012903          	lw	s2,0(sp)
    c6dc:	01010113          	addi	sp,sp,16
    c6e0:	00008067          	ret
    c6e4:	00277693          	andi	a3,a4,2
    c6e8:	00000613          	li	a2,0
    c6ec:	00069463          	bnez	a3,c6f4 <__swsetup_r+0x170>
    c6f0:	01442603          	lw	a2,20(s0)
    c6f4:	00c42423          	sw	a2,8(s0)
    c6f8:	fc1ff06f          	j	c6b8 <__swsetup_r+0x134>

0000c6fc <__assert_func>:
    c6fc:	0002f7b7          	lui	a5,0x2f
    c700:	c9c7a783          	lw	a5,-868(a5) # 2ec9c <_impure_ptr>
    c704:	ff010113          	addi	sp,sp,-16
    c708:	00060813          	mv	a6,a2
    c70c:	00112623          	sw	ra,12(sp)
    c710:	00050893          	mv	a7,a0
    c714:	00058713          	mv	a4,a1
    c718:	00c7a503          	lw	a0,12(a5)
    c71c:	00068613          	mv	a2,a3
    c720:	02080063          	beqz	a6,c740 <__assert_func+0x44>
    c724:	0000e7b7          	lui	a5,0xe
    c728:	a9c78793          	addi	a5,a5,-1380 # da9c <p05.0+0x20>
    c72c:	0000e5b7          	lui	a1,0xe
    c730:	00088693          	mv	a3,a7
    c734:	aac58593          	addi	a1,a1,-1364 # daac <p05.0+0x30>
    c738:	334000ef          	jal	ra,ca6c <fiprintf>
    c73c:	62c000ef          	jal	ra,cd68 <abort>
    c740:	0000d837          	lui	a6,0xd
    c744:	3fc80793          	addi	a5,a6,1020 # d3fc <__mprec_tens+0x184>
    c748:	3fc80813          	addi	a6,a6,1020
    c74c:	fe1ff06f          	j	c72c <__assert_func+0x30>

0000c750 <_close_r>:
    c750:	ff010113          	addi	sp,sp,-16
    c754:	00812423          	sw	s0,8(sp)
    c758:	00912223          	sw	s1,4(sp)
    c75c:	00050413          	mv	s0,a0
    c760:	0000e4b7          	lui	s1,0xe
    c764:	00058513          	mv	a0,a1
    c768:	00112623          	sw	ra,12(sp)
    c76c:	b204a823          	sw	zero,-1232(s1) # db30 <errno>
    c770:	c45f90ef          	jal	ra,63b4 <_close>
    c774:	fff00793          	li	a5,-1
    c778:	00f51863          	bne	a0,a5,c788 <_close_r+0x38>
    c77c:	b304a783          	lw	a5,-1232(s1)
    c780:	00078463          	beqz	a5,c788 <_close_r+0x38>
    c784:	00f42023          	sw	a5,0(s0)
    c788:	00c12083          	lw	ra,12(sp)
    c78c:	00812403          	lw	s0,8(sp)
    c790:	00412483          	lw	s1,4(sp)
    c794:	01010113          	addi	sp,sp,16
    c798:	00008067          	ret

0000c79c <__sflush_r>:
    c79c:	00c5d783          	lhu	a5,12(a1)
    c7a0:	fe010113          	addi	sp,sp,-32
    c7a4:	00812c23          	sw	s0,24(sp)
    c7a8:	00912a23          	sw	s1,20(sp)
    c7ac:	00112e23          	sw	ra,28(sp)
    c7b0:	01212823          	sw	s2,16(sp)
    c7b4:	01312623          	sw	s3,12(sp)
    c7b8:	0087f713          	andi	a4,a5,8
    c7bc:	00050493          	mv	s1,a0
    c7c0:	00058413          	mv	s0,a1
    c7c4:	16071263          	bnez	a4,c928 <__sflush_r+0x18c>
    c7c8:	0045a703          	lw	a4,4(a1)
    c7cc:	00e04a63          	bgtz	a4,c7e0 <__sflush_r+0x44>
    c7d0:	0405a703          	lw	a4,64(a1)
    c7d4:	00e04663          	bgtz	a4,c7e0 <__sflush_r+0x44>
    c7d8:	00000513          	li	a0,0
    c7dc:	1240006f          	j	c900 <__sflush_r+0x164>
    c7e0:	02c42703          	lw	a4,44(s0)
    c7e4:	fe070ae3          	beqz	a4,c7d8 <__sflush_r+0x3c>
    c7e8:	000016b7          	lui	a3,0x1
    c7ec:	0004a903          	lw	s2,0(s1)
    c7f0:	00d7f7b3          	and	a5,a5,a3
    c7f4:	0004a023          	sw	zero,0(s1)
    c7f8:	0c078063          	beqz	a5,c8b8 <__sflush_r+0x11c>
    c7fc:	05442503          	lw	a0,84(s0)
    c800:	00c45783          	lhu	a5,12(s0)
    c804:	0047f793          	andi	a5,a5,4
    c808:	00078e63          	beqz	a5,c824 <__sflush_r+0x88>
    c80c:	00442783          	lw	a5,4(s0)
    c810:	40f50533          	sub	a0,a0,a5
    c814:	03442783          	lw	a5,52(s0)
    c818:	00078663          	beqz	a5,c824 <__sflush_r+0x88>
    c81c:	04042783          	lw	a5,64(s0)
    c820:	40f50533          	sub	a0,a0,a5
    c824:	02c42783          	lw	a5,44(s0)
    c828:	02042583          	lw	a1,32(s0)
    c82c:	00050613          	mv	a2,a0
    c830:	00000693          	li	a3,0
    c834:	00048513          	mv	a0,s1
    c838:	000780e7          	jalr	a5
    c83c:	fff00793          	li	a5,-1
    c840:	00c45703          	lhu	a4,12(s0)
    c844:	02f51263          	bne	a0,a5,c868 <__sflush_r+0xcc>
    c848:	0004a683          	lw	a3,0(s1)
    c84c:	01d00793          	li	a5,29
    c850:	0cd7e663          	bltu	a5,a3,c91c <__sflush_r+0x180>
    c854:	204007b7          	lui	a5,0x20400
    c858:	00178793          	addi	a5,a5,1 # 20400001 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d450f81>
    c85c:	00d7d7b3          	srl	a5,a5,a3
    c860:	0017f793          	andi	a5,a5,1
    c864:	0a078c63          	beqz	a5,c91c <__sflush_r+0x180>
    c868:	01042783          	lw	a5,16(s0)
    c86c:	00042223          	sw	zero,4(s0)
    c870:	00f42023          	sw	a5,0(s0)
    c874:	000017b7          	lui	a5,0x1
    c878:	00f77733          	and	a4,a4,a5
    c87c:	00070c63          	beqz	a4,c894 <__sflush_r+0xf8>
    c880:	fff00793          	li	a5,-1
    c884:	00f51663          	bne	a0,a5,c890 <__sflush_r+0xf4>
    c888:	0004a783          	lw	a5,0(s1)
    c88c:	00079463          	bnez	a5,c894 <__sflush_r+0xf8>
    c890:	04a42a23          	sw	a0,84(s0)
    c894:	03442583          	lw	a1,52(s0)
    c898:	0124a023          	sw	s2,0(s1)
    c89c:	f2058ee3          	beqz	a1,c7d8 <__sflush_r+0x3c>
    c8a0:	04440793          	addi	a5,s0,68
    c8a4:	00f58663          	beq	a1,a5,c8b0 <__sflush_r+0x114>
    c8a8:	00048513          	mv	a0,s1
    c8ac:	e39fb0ef          	jal	ra,86e4 <_free_r>
    c8b0:	02042a23          	sw	zero,52(s0)
    c8b4:	f25ff06f          	j	c7d8 <__sflush_r+0x3c>
    c8b8:	02042583          	lw	a1,32(s0)
    c8bc:	00100693          	li	a3,1
    c8c0:	00000613          	li	a2,0
    c8c4:	00048513          	mv	a0,s1
    c8c8:	000700e7          	jalr	a4
    c8cc:	fff00793          	li	a5,-1
    c8d0:	f2f518e3          	bne	a0,a5,c800 <__sflush_r+0x64>
    c8d4:	0004a783          	lw	a5,0(s1)
    c8d8:	f20784e3          	beqz	a5,c800 <__sflush_r+0x64>
    c8dc:	01d00713          	li	a4,29
    c8e0:	00e78663          	beq	a5,a4,c8ec <__sflush_r+0x150>
    c8e4:	01600713          	li	a4,22
    c8e8:	00e79663          	bne	a5,a4,c8f4 <__sflush_r+0x158>
    c8ec:	0124a023          	sw	s2,0(s1)
    c8f0:	ee9ff06f          	j	c7d8 <__sflush_r+0x3c>
    c8f4:	00c45783          	lhu	a5,12(s0)
    c8f8:	0407e793          	ori	a5,a5,64
    c8fc:	00f41623          	sh	a5,12(s0)
    c900:	01c12083          	lw	ra,28(sp)
    c904:	01812403          	lw	s0,24(sp)
    c908:	01412483          	lw	s1,20(sp)
    c90c:	01012903          	lw	s2,16(sp)
    c910:	00c12983          	lw	s3,12(sp)
    c914:	02010113          	addi	sp,sp,32
    c918:	00008067          	ret
    c91c:	04076713          	ori	a4,a4,64
    c920:	00e41623          	sh	a4,12(s0)
    c924:	fddff06f          	j	c900 <__sflush_r+0x164>
    c928:	0105a983          	lw	s3,16(a1)
    c92c:	ea0986e3          	beqz	s3,c7d8 <__sflush_r+0x3c>
    c930:	0005a903          	lw	s2,0(a1)
    c934:	0037f793          	andi	a5,a5,3
    c938:	0135a023          	sw	s3,0(a1)
    c93c:	41390933          	sub	s2,s2,s3
    c940:	00000713          	li	a4,0
    c944:	00079463          	bnez	a5,c94c <__sflush_r+0x1b0>
    c948:	0145a703          	lw	a4,20(a1)
    c94c:	00e42423          	sw	a4,8(s0)
    c950:	e92054e3          	blez	s2,c7d8 <__sflush_r+0x3c>
    c954:	02842783          	lw	a5,40(s0)
    c958:	02042583          	lw	a1,32(s0)
    c95c:	00090693          	mv	a3,s2
    c960:	00098613          	mv	a2,s3
    c964:	00048513          	mv	a0,s1
    c968:	000780e7          	jalr	a5 # 1000 <__divdf3+0x43c>
    c96c:	00a04c63          	bgtz	a0,c984 <__sflush_r+0x1e8>
    c970:	00c45783          	lhu	a5,12(s0)
    c974:	fff00513          	li	a0,-1
    c978:	0407e793          	ori	a5,a5,64
    c97c:	00f41623          	sh	a5,12(s0)
    c980:	f81ff06f          	j	c900 <__sflush_r+0x164>
    c984:	00a989b3          	add	s3,s3,a0
    c988:	40a90933          	sub	s2,s2,a0
    c98c:	fc5ff06f          	j	c950 <__sflush_r+0x1b4>

0000c990 <_fflush_r>:
    c990:	0105a783          	lw	a5,16(a1)
    c994:	ff010113          	addi	sp,sp,-16
    c998:	00112623          	sw	ra,12(sp)
    c99c:	00812423          	sw	s0,8(sp)
    c9a0:	00912223          	sw	s1,4(sp)
    c9a4:	02079063          	bnez	a5,c9c4 <_fflush_r+0x34>
    c9a8:	00000493          	li	s1,0
    c9ac:	00c12083          	lw	ra,12(sp)
    c9b0:	00812403          	lw	s0,8(sp)
    c9b4:	00048513          	mv	a0,s1
    c9b8:	00412483          	lw	s1,4(sp)
    c9bc:	01010113          	addi	sp,sp,16
    c9c0:	00008067          	ret
    c9c4:	00050493          	mv	s1,a0
    c9c8:	00058413          	mv	s0,a1
    c9cc:	00050863          	beqz	a0,c9dc <_fflush_r+0x4c>
    c9d0:	01852783          	lw	a5,24(a0)
    c9d4:	00079463          	bnez	a5,c9dc <_fflush_r+0x4c>
    c9d8:	c6cfe0ef          	jal	ra,ae44 <__sinit>
    c9dc:	0000e7b7          	lui	a5,0xe
    c9e0:	9d878793          	addi	a5,a5,-1576 # d9d8 <__sf_fake_stdin>
    c9e4:	06f41063          	bne	s0,a5,ca44 <_fflush_r+0xb4>
    c9e8:	0044a403          	lw	s0,4(s1)
    c9ec:	00c41783          	lh	a5,12(s0)
    c9f0:	fa078ce3          	beqz	a5,c9a8 <_fflush_r+0x18>
    c9f4:	06442703          	lw	a4,100(s0)
    c9f8:	00177713          	andi	a4,a4,1
    c9fc:	00071a63          	bnez	a4,ca10 <_fflush_r+0x80>
    ca00:	2007f793          	andi	a5,a5,512
    ca04:	00079663          	bnez	a5,ca10 <_fflush_r+0x80>
    ca08:	05842503          	lw	a0,88(s0)
    ca0c:	a61f90ef          	jal	ra,646c <__retarget_lock_acquire_recursive>
    ca10:	00048513          	mv	a0,s1
    ca14:	00040593          	mv	a1,s0
    ca18:	d85ff0ef          	jal	ra,c79c <__sflush_r>
    ca1c:	06442783          	lw	a5,100(s0)
    ca20:	00050493          	mv	s1,a0
    ca24:	0017f793          	andi	a5,a5,1
    ca28:	f80792e3          	bnez	a5,c9ac <_fflush_r+0x1c>
    ca2c:	00c45783          	lhu	a5,12(s0)
    ca30:	2007f793          	andi	a5,a5,512
    ca34:	f6079ce3          	bnez	a5,c9ac <_fflush_r+0x1c>
    ca38:	05842503          	lw	a0,88(s0)
    ca3c:	a3df90ef          	jal	ra,6478 <__retarget_lock_release_recursive>
    ca40:	f6dff06f          	j	c9ac <_fflush_r+0x1c>
    ca44:	0000e7b7          	lui	a5,0xe
    ca48:	9f878793          	addi	a5,a5,-1544 # d9f8 <__sf_fake_stdout>
    ca4c:	00f41663          	bne	s0,a5,ca58 <_fflush_r+0xc8>
    ca50:	0084a403          	lw	s0,8(s1)
    ca54:	f99ff06f          	j	c9ec <_fflush_r+0x5c>
    ca58:	0000e7b7          	lui	a5,0xe
    ca5c:	9b878793          	addi	a5,a5,-1608 # d9b8 <__sf_fake_stderr>
    ca60:	f8f416e3          	bne	s0,a5,c9ec <_fflush_r+0x5c>
    ca64:	00c4a403          	lw	s0,12(s1)
    ca68:	f85ff06f          	j	c9ec <_fflush_r+0x5c>

0000ca6c <fiprintf>:
    ca6c:	fc010113          	addi	sp,sp,-64
    ca70:	02f12a23          	sw	a5,52(sp)
    ca74:	0002f7b7          	lui	a5,0x2f
    ca78:	02c12423          	sw	a2,40(sp)
    ca7c:	00058613          	mv	a2,a1
    ca80:	00050593          	mv	a1,a0
    ca84:	c9c7a503          	lw	a0,-868(a5) # 2ec9c <_impure_ptr>
    ca88:	02d12623          	sw	a3,44(sp)
    ca8c:	02810693          	addi	a3,sp,40
    ca90:	00112e23          	sw	ra,28(sp)
    ca94:	02e12823          	sw	a4,48(sp)
    ca98:	03012c23          	sw	a6,56(sp)
    ca9c:	03112e23          	sw	a7,60(sp)
    caa0:	00d12623          	sw	a3,12(sp)
    caa4:	becff0ef          	jal	ra,be90 <_vfiprintf_r>
    caa8:	01c12083          	lw	ra,28(sp)
    caac:	04010113          	addi	sp,sp,64
    cab0:	00008067          	ret

0000cab4 <_lseek_r>:
    cab4:	ff010113          	addi	sp,sp,-16
    cab8:	00812423          	sw	s0,8(sp)
    cabc:	00912223          	sw	s1,4(sp)
    cac0:	00050413          	mv	s0,a0
    cac4:	0000e4b7          	lui	s1,0xe
    cac8:	00058513          	mv	a0,a1
    cacc:	00060593          	mv	a1,a2
    cad0:	00068613          	mv	a2,a3
    cad4:	00112623          	sw	ra,12(sp)
    cad8:	b204a823          	sw	zero,-1232(s1) # db30 <errno>
    cadc:	8e1f90ef          	jal	ra,63bc <_lseek>
    cae0:	fff00793          	li	a5,-1
    cae4:	00f51863          	bne	a0,a5,caf4 <_lseek_r+0x40>
    cae8:	b304a783          	lw	a5,-1232(s1)
    caec:	00078463          	beqz	a5,caf4 <_lseek_r+0x40>
    caf0:	00f42023          	sw	a5,0(s0)
    caf4:	00c12083          	lw	ra,12(sp)
    caf8:	00812403          	lw	s0,8(sp)
    cafc:	00412483          	lw	s1,4(sp)
    cb00:	01010113          	addi	sp,sp,16
    cb04:	00008067          	ret

0000cb08 <__swhatbuf_r>:
    cb08:	f9010113          	addi	sp,sp,-112
    cb0c:	07212023          	sw	s2,96(sp)
    cb10:	00058913          	mv	s2,a1
    cb14:	00e59583          	lh	a1,14(a1)
    cb18:	06812423          	sw	s0,104(sp)
    cb1c:	06912223          	sw	s1,100(sp)
    cb20:	06112623          	sw	ra,108(sp)
    cb24:	00060413          	mv	s0,a2
    cb28:	00068493          	mv	s1,a3
    cb2c:	0005de63          	bgez	a1,cb48 <__swhatbuf_r+0x40>
    cb30:	00c91783          	lh	a5,12(s2)
    cb34:	0004a023          	sw	zero,0(s1)
    cb38:	0807f793          	andi	a5,a5,128
    cb3c:	02079c63          	bnez	a5,cb74 <__swhatbuf_r+0x6c>
    cb40:	40000793          	li	a5,1024
    cb44:	0340006f          	j	cb78 <__swhatbuf_r+0x70>
    cb48:	00810613          	addi	a2,sp,8
    cb4c:	234000ef          	jal	ra,cd80 <_fstat_r>
    cb50:	fe0540e3          	bltz	a0,cb30 <__swhatbuf_r+0x28>
    cb54:	00c12703          	lw	a4,12(sp)
    cb58:	0000f7b7          	lui	a5,0xf
    cb5c:	00e7f7b3          	and	a5,a5,a4
    cb60:	ffffe737          	lui	a4,0xffffe
    cb64:	00e787b3          	add	a5,a5,a4
    cb68:	0017b793          	seqz	a5,a5
    cb6c:	00f4a023          	sw	a5,0(s1)
    cb70:	fd1ff06f          	j	cb40 <__swhatbuf_r+0x38>
    cb74:	04000793          	li	a5,64
    cb78:	06c12083          	lw	ra,108(sp)
    cb7c:	00f42023          	sw	a5,0(s0)
    cb80:	06812403          	lw	s0,104(sp)
    cb84:	06412483          	lw	s1,100(sp)
    cb88:	06012903          	lw	s2,96(sp)
    cb8c:	00000513          	li	a0,0
    cb90:	07010113          	addi	sp,sp,112
    cb94:	00008067          	ret

0000cb98 <__smakebuf_r>:
    cb98:	00c5d783          	lhu	a5,12(a1)
    cb9c:	fe010113          	addi	sp,sp,-32
    cba0:	00812c23          	sw	s0,24(sp)
    cba4:	00112e23          	sw	ra,28(sp)
    cba8:	00912a23          	sw	s1,20(sp)
    cbac:	01212823          	sw	s2,16(sp)
    cbb0:	0027f793          	andi	a5,a5,2
    cbb4:	00058413          	mv	s0,a1
    cbb8:	02078863          	beqz	a5,cbe8 <__smakebuf_r+0x50>
    cbbc:	04740793          	addi	a5,s0,71
    cbc0:	00f42023          	sw	a5,0(s0)
    cbc4:	00f42823          	sw	a5,16(s0)
    cbc8:	00100793          	li	a5,1
    cbcc:	00f42a23          	sw	a5,20(s0)
    cbd0:	01c12083          	lw	ra,28(sp)
    cbd4:	01812403          	lw	s0,24(sp)
    cbd8:	01412483          	lw	s1,20(sp)
    cbdc:	01012903          	lw	s2,16(sp)
    cbe0:	02010113          	addi	sp,sp,32
    cbe4:	00008067          	ret
    cbe8:	00c10693          	addi	a3,sp,12
    cbec:	00810613          	addi	a2,sp,8
    cbf0:	00050913          	mv	s2,a0
    cbf4:	f15ff0ef          	jal	ra,cb08 <__swhatbuf_r>
    cbf8:	00812583          	lw	a1,8(sp)
    cbfc:	00050493          	mv	s1,a0
    cc00:	00090513          	mv	a0,s2
    cc04:	be5fb0ef          	jal	ra,87e8 <_malloc_r>
    cc08:	02051063          	bnez	a0,cc28 <__smakebuf_r+0x90>
    cc0c:	00c41783          	lh	a5,12(s0)
    cc10:	2007f713          	andi	a4,a5,512
    cc14:	fa071ee3          	bnez	a4,cbd0 <__smakebuf_r+0x38>
    cc18:	ffc7f793          	andi	a5,a5,-4
    cc1c:	0027e793          	ori	a5,a5,2
    cc20:	00f41623          	sh	a5,12(s0)
    cc24:	f99ff06f          	j	cbbc <__smakebuf_r+0x24>
    cc28:	0000b7b7          	lui	a5,0xb
    cc2c:	d9c78793          	addi	a5,a5,-612 # ad9c <_cleanup_r>
    cc30:	02f92423          	sw	a5,40(s2)
    cc34:	00c45783          	lhu	a5,12(s0)
    cc38:	00a42023          	sw	a0,0(s0)
    cc3c:	00a42823          	sw	a0,16(s0)
    cc40:	0807e793          	ori	a5,a5,128
    cc44:	00f41623          	sh	a5,12(s0)
    cc48:	00812783          	lw	a5,8(sp)
    cc4c:	00f42a23          	sw	a5,20(s0)
    cc50:	00c12783          	lw	a5,12(sp)
    cc54:	02078263          	beqz	a5,cc78 <__smakebuf_r+0xe0>
    cc58:	00e41583          	lh	a1,14(s0)
    cc5c:	00090513          	mv	a0,s2
    cc60:	170000ef          	jal	ra,cdd0 <_isatty_r>
    cc64:	00050a63          	beqz	a0,cc78 <__smakebuf_r+0xe0>
    cc68:	00c45783          	lhu	a5,12(s0)
    cc6c:	ffc7f793          	andi	a5,a5,-4
    cc70:	0017e793          	ori	a5,a5,1
    cc74:	00f41623          	sh	a5,12(s0)
    cc78:	00c45503          	lhu	a0,12(s0)
    cc7c:	00a4e4b3          	or	s1,s1,a0
    cc80:	00941623          	sh	s1,12(s0)
    cc84:	f4dff06f          	j	cbd0 <__smakebuf_r+0x38>

0000cc88 <__ascii_mbtowc>:
    cc88:	02059a63          	bnez	a1,ccbc <__ascii_mbtowc+0x34>
    cc8c:	ff010113          	addi	sp,sp,-16
    cc90:	00c10593          	addi	a1,sp,12
    cc94:	00000513          	li	a0,0
    cc98:	00060e63          	beqz	a2,ccb4 <__ascii_mbtowc+0x2c>
    cc9c:	ffe00513          	li	a0,-2
    cca0:	00068a63          	beqz	a3,ccb4 <__ascii_mbtowc+0x2c>
    cca4:	00064783          	lbu	a5,0(a2)
    cca8:	00f5a023          	sw	a5,0(a1)
    ccac:	00064503          	lbu	a0,0(a2)
    ccb0:	00a03533          	snez	a0,a0
    ccb4:	01010113          	addi	sp,sp,16
    ccb8:	00008067          	ret
    ccbc:	00000513          	li	a0,0
    ccc0:	02060063          	beqz	a2,cce0 <__ascii_mbtowc+0x58>
    ccc4:	ffe00513          	li	a0,-2
    ccc8:	00068c63          	beqz	a3,cce0 <__ascii_mbtowc+0x58>
    cccc:	00064783          	lbu	a5,0(a2)
    ccd0:	00f5a023          	sw	a5,0(a1)
    ccd4:	00064503          	lbu	a0,0(a2)
    ccd8:	00a03533          	snez	a0,a0
    ccdc:	00008067          	ret
    cce0:	00008067          	ret

0000cce4 <_read_r>:
    cce4:	ff010113          	addi	sp,sp,-16
    cce8:	00812423          	sw	s0,8(sp)
    ccec:	00912223          	sw	s1,4(sp)
    ccf0:	00050413          	mv	s0,a0
    ccf4:	0000e4b7          	lui	s1,0xe
    ccf8:	00058513          	mv	a0,a1
    ccfc:	00060593          	mv	a1,a2
    cd00:	00068613          	mv	a2,a3
    cd04:	00112623          	sw	ra,12(sp)
    cd08:	b204a823          	sw	zero,-1232(s1) # db30 <errno>
    cd0c:	e90f90ef          	jal	ra,639c <_read>
    cd10:	fff00793          	li	a5,-1
    cd14:	00f51863          	bne	a0,a5,cd24 <_read_r+0x40>
    cd18:	b304a783          	lw	a5,-1232(s1)
    cd1c:	00078463          	beqz	a5,cd24 <_read_r+0x40>
    cd20:	00f42023          	sw	a5,0(s0)
    cd24:	00c12083          	lw	ra,12(sp)
    cd28:	00812403          	lw	s0,8(sp)
    cd2c:	00412483          	lw	s1,4(sp)
    cd30:	01010113          	addi	sp,sp,16
    cd34:	00008067          	ret

0000cd38 <__ascii_wctomb>:
    cd38:	02058463          	beqz	a1,cd60 <__ascii_wctomb+0x28>
    cd3c:	0ff00793          	li	a5,255
    cd40:	00c7fa63          	bgeu	a5,a2,cd54 <__ascii_wctomb+0x1c>
    cd44:	08a00793          	li	a5,138
    cd48:	00f52023          	sw	a5,0(a0)
    cd4c:	fff00513          	li	a0,-1
    cd50:	00008067          	ret
    cd54:	00c58023          	sb	a2,0(a1)
    cd58:	00100513          	li	a0,1
    cd5c:	00008067          	ret
    cd60:	00000513          	li	a0,0
    cd64:	00008067          	ret

0000cd68 <abort>:
    cd68:	ff010113          	addi	sp,sp,-16
    cd6c:	00600513          	li	a0,6
    cd70:	00112623          	sw	ra,12(sp)
    cd74:	158000ef          	jal	ra,cecc <raise>
    cd78:	00100513          	li	a0,1
    cd7c:	e70f90ef          	jal	ra,63ec <_exit>

0000cd80 <_fstat_r>:
    cd80:	ff010113          	addi	sp,sp,-16
    cd84:	00812423          	sw	s0,8(sp)
    cd88:	00912223          	sw	s1,4(sp)
    cd8c:	00050413          	mv	s0,a0
    cd90:	0000e4b7          	lui	s1,0xe
    cd94:	00058513          	mv	a0,a1
    cd98:	00060593          	mv	a1,a2
    cd9c:	00112623          	sw	ra,12(sp)
    cda0:	b204a823          	sw	zero,-1232(s1) # db30 <errno>
    cda4:	e38f90ef          	jal	ra,63dc <_fstat>
    cda8:	fff00793          	li	a5,-1
    cdac:	00f51863          	bne	a0,a5,cdbc <_fstat_r+0x3c>
    cdb0:	b304a783          	lw	a5,-1232(s1)
    cdb4:	00078463          	beqz	a5,cdbc <_fstat_r+0x3c>
    cdb8:	00f42023          	sw	a5,0(s0)
    cdbc:	00c12083          	lw	ra,12(sp)
    cdc0:	00812403          	lw	s0,8(sp)
    cdc4:	00412483          	lw	s1,4(sp)
    cdc8:	01010113          	addi	sp,sp,16
    cdcc:	00008067          	ret

0000cdd0 <_isatty_r>:
    cdd0:	ff010113          	addi	sp,sp,-16
    cdd4:	00812423          	sw	s0,8(sp)
    cdd8:	00912223          	sw	s1,4(sp)
    cddc:	00050413          	mv	s0,a0
    cde0:	0000e4b7          	lui	s1,0xe
    cde4:	00058513          	mv	a0,a1
    cde8:	00112623          	sw	ra,12(sp)
    cdec:	b204a823          	sw	zero,-1232(s1) # db30 <errno>
    cdf0:	dd4f90ef          	jal	ra,63c4 <_isatty>
    cdf4:	fff00793          	li	a5,-1
    cdf8:	00f51863          	bne	a0,a5,ce08 <_isatty_r+0x38>
    cdfc:	b304a783          	lw	a5,-1232(s1)
    ce00:	00078463          	beqz	a5,ce08 <_isatty_r+0x38>
    ce04:	00f42023          	sw	a5,0(s0)
    ce08:	00c12083          	lw	ra,12(sp)
    ce0c:	00812403          	lw	s0,8(sp)
    ce10:	00412483          	lw	s1,4(sp)
    ce14:	01010113          	addi	sp,sp,16
    ce18:	00008067          	ret

0000ce1c <_raise_r>:
    ce1c:	fe010113          	addi	sp,sp,-32
    ce20:	00812c23          	sw	s0,24(sp)
    ce24:	00112e23          	sw	ra,28(sp)
    ce28:	01f00793          	li	a5,31
    ce2c:	00050413          	mv	s0,a0
    ce30:	02b7f063          	bgeu	a5,a1,ce50 <_raise_r+0x34>
    ce34:	01600793          	li	a5,22
    ce38:	00f52023          	sw	a5,0(a0)
    ce3c:	fff00513          	li	a0,-1
    ce40:	01c12083          	lw	ra,28(sp)
    ce44:	01812403          	lw	s0,24(sp)
    ce48:	02010113          	addi	sp,sp,32
    ce4c:	00008067          	ret
    ce50:	04452783          	lw	a5,68(a0)
    ce54:	00058613          	mv	a2,a1
    ce58:	00078a63          	beqz	a5,ce6c <_raise_r+0x50>
    ce5c:	00259713          	slli	a4,a1,0x2
    ce60:	00e787b3          	add	a5,a5,a4
    ce64:	0007a703          	lw	a4,0(a5)
    ce68:	02071663          	bnez	a4,ce94 <_raise_r+0x78>
    ce6c:	00040513          	mv	a0,s0
    ce70:	00c12623          	sw	a2,12(sp)
    ce74:	0b8000ef          	jal	ra,cf2c <_getpid_r>
    ce78:	00050593          	mv	a1,a0
    ce7c:	00040513          	mv	a0,s0
    ce80:	01812403          	lw	s0,24(sp)
    ce84:	00c12603          	lw	a2,12(sp)
    ce88:	01c12083          	lw	ra,28(sp)
    ce8c:	02010113          	addi	sp,sp,32
    ce90:	04c0006f          	j	cedc <_kill_r>
    ce94:	00100693          	li	a3,1
    ce98:	00000513          	li	a0,0
    ce9c:	fad702e3          	beq	a4,a3,ce40 <_raise_r+0x24>
    cea0:	fff00693          	li	a3,-1
    cea4:	00d71a63          	bne	a4,a3,ceb8 <_raise_r+0x9c>
    cea8:	01600793          	li	a5,22
    ceac:	00f42023          	sw	a5,0(s0)
    ceb0:	00100513          	li	a0,1
    ceb4:	f8dff06f          	j	ce40 <_raise_r+0x24>
    ceb8:	00058513          	mv	a0,a1
    cebc:	0007a023          	sw	zero,0(a5)
    cec0:	000700e7          	jalr	a4 # ffffe000 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffffe001>
    cec4:	00000513          	li	a0,0
    cec8:	f79ff06f          	j	ce40 <_raise_r+0x24>

0000cecc <raise>:
    cecc:	0002f7b7          	lui	a5,0x2f
    ced0:	00050593          	mv	a1,a0
    ced4:	c9c7a503          	lw	a0,-868(a5) # 2ec9c <_impure_ptr>
    ced8:	f45ff06f          	j	ce1c <_raise_r>

0000cedc <_kill_r>:
    cedc:	ff010113          	addi	sp,sp,-16
    cee0:	00812423          	sw	s0,8(sp)
    cee4:	00912223          	sw	s1,4(sp)
    cee8:	00050413          	mv	s0,a0
    ceec:	0000e4b7          	lui	s1,0xe
    cef0:	00058513          	mv	a0,a1
    cef4:	00060593          	mv	a1,a2
    cef8:	00112623          	sw	ra,12(sp)
    cefc:	b204a823          	sw	zero,-1232(s1) # db30 <errno>
    cf00:	cccf90ef          	jal	ra,63cc <_kill>
    cf04:	fff00793          	li	a5,-1
    cf08:	00f51863          	bne	a0,a5,cf18 <_kill_r+0x3c>
    cf0c:	b304a783          	lw	a5,-1232(s1)
    cf10:	00078463          	beqz	a5,cf18 <_kill_r+0x3c>
    cf14:	00f42023          	sw	a5,0(s0)
    cf18:	00c12083          	lw	ra,12(sp)
    cf1c:	00812403          	lw	s0,8(sp)
    cf20:	00412483          	lw	s1,4(sp)
    cf24:	01010113          	addi	sp,sp,16
    cf28:	00008067          	ret

0000cf2c <_getpid_r>:
    cf2c:	ca8f906f          	j	63d4 <_getpid>
