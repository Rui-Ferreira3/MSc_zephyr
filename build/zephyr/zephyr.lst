
zephyr.elf:     file format elf32-littleriscv


Disassembly of section vector:

00000000 <__start>:

	/*
	 * Set mtvec (Machine Trap-Vector Base-Address Register)
	 * to __irq_wrapper.
	 */
	la t0, __irq_wrapper
   0:	00000297          	auipc	t0,0x0
   4:	03028293          	addi	t0,t0,48 # 30 <__irq_wrapper>
	csrw mtvec, t0
   8:	30529073          	csrw	mtvec,t0
	/*
	* To avoid having to hardcode the main clock frequency,
	* we read the actual value from register 0x8000103c
	* and store to z_clock_hw_cycles_per_sec
	*/
	li	t0, 0x80001000
   c:	800012b7          	lui	t0,0x80001
	lw	t1, 0x3c(t0)
  10:	03c2a303          	lw	t1,60(t0) # 8000103c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000103d>
	la	t0, z_clock_hw_cycles_per_sec
  14:	0000f297          	auipc	t0,0xf
  18:	12028293          	addi	t0,t0,288 # f134 <z_clock_hw_cycles_per_sec>
	sw	t1, 0(t0)
  1c:	0062a023          	sw	t1,0(t0)

	/* Jump to __initialize */
	tail __initialize
  20:	3840506f          	j	53a4 <__initialize>

Disassembly of section exceptions:

00000030 <__irq_wrapper>:
	 * Save caller-saved registers on current thread stack.
	 * NOTE: need to be updated to account for floating-point registers
	 * floating-point registers should be accounted for when corresponding
	 * config variable is set
	 */
	STORE_CALLER_SAVED()
  30:	fb010113          	addi	sp,sp,-80
  34:	00112023          	sw	ra,0(sp)
  38:	00412223          	sw	tp,4(sp)
  3c:	00512423          	sw	t0,8(sp)
  40:	00612623          	sw	t1,12(sp)
  44:	00712823          	sw	t2,16(sp)
  48:	01c12a23          	sw	t3,20(sp)
  4c:	01d12c23          	sw	t4,24(sp)
  50:	01e12e23          	sw	t5,28(sp)
  54:	03f12023          	sw	t6,32(sp)
  58:	02a12223          	sw	a0,36(sp)
  5c:	02b12423          	sw	a1,40(sp)
  60:	02c12623          	sw	a2,44(sp)
  64:	02d12823          	sw	a3,48(sp)
  68:	02e12a23          	sw	a4,52(sp)
  6c:	02f12c23          	sw	a5,56(sp)
  70:	03012e23          	sw	a6,60(sp)
  74:	05112023          	sw	a7,64(sp)

skip_store_fp_caller_saved:
#endif /* CONFIG_FPU && CONFIG_FPU_SHARING */

	/* Save MEPC register */
	csrr t0, mepc
  78:	341022f3          	csrr	t0,mepc
	RV_OP_STOREREG t0, __z_arch_esf_t_mepc_OFFSET(sp)
  7c:	04512223          	sw	t0,68(sp)

	/* Save SOC-specific MSTATUS register */
	csrr t0, mstatus
  80:	300022f3          	csrr	t0,mstatus
	RV_OP_STOREREG t0, __z_arch_esf_t_mstatus_OFFSET(sp)
  84:	04512423          	sw	t0,72(sp)
	 * SOCs (like pulpino or riscv-qemu), the MSB is never set to indicate
	 * interrupt. Hence, check for interrupt/exception via the __soc_is_irq
	 * function (that needs to be implemented by each SOC). The result is
	 * returned via register a0 (1: interrupt, 0 exception)
	 */
	jal ra, __soc_is_irq
  88:	228000ef          	jal	ra,2b0 <__soc_is_irq>

	/* If a0 != 0, jump to is_interrupt */
	addi t1, x0, 0
  8c:	00000313          	li	t1,0
	bnez a0, is_interrupt
  90:	02051e63          	bnez	a0,cc <is_interrupt>
	/*
	 * If the exception is the result of an ECALL, check whether to
	 * perform a context-switch or an IRQ offload. Otherwise call _Fault
	 * to report the exception.
	 */
	csrr t0, mcause
  94:	342022f3          	csrr	t0,mcause
	li t2, SOC_MCAUSE_EXP_MASK
  98:	800003b7          	lui	t2,0x80000
  9c:	fff38393          	addi	t2,t2,-1 # 7fffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000000>
	and t0, t0, t2
  a0:	0072f2b3          	and	t0,t0,t2
	li t1, SOC_MCAUSE_ECALL_EXP
  a4:	00b00313          	li	t1,11

	/*
	 * If mcause == SOC_MCAUSE_ECALL_EXP, handle system call from
	 * kernel thread.
	 */
	beq t0, t1, is_kernel_syscall
  a8:	00628a63          	beq	t0,t1,bc <is_kernel_syscall>
	 * Stack pointer is pointing to a z_arch_esf_t structure, pass it
	 * to _Fault (via register a0).
	 * If _Fault shall return, set return address to
	 * no_reschedule to restore stack.
	 */
	addi a0, sp, 0
  ac:	00010513          	mv	a0,sp
	RV_OP_LOADREG t1, _kernel_offset_to_current(t0)
	RV_OP_LOADREG t0, _thread_offset_to_priv_stack_start(t1)
	RV_OP_STOREREG sp, _thread_offset_to_user_sp(t1) /* Update user SP */
	addi sp, t0, CONFIG_PRIVILEGED_STACK_SIZE
#else
	la ra, no_reschedule
  b0:	00000097          	auipc	ra,0x0
  b4:	19408093          	addi	ra,ra,404 # 244 <no_reschedule>
#endif /* CONFIG_USERSPACE */

	tail _Fault
  b8:	2a40506f          	j	535c <_Fault>

000000bc <is_kernel_syscall>:
	 * again upon exiting the ISR.
	 *
	 * It's safe to always increment by 4, even with compressed
	 * instructions, because the ecall instruction is always 4 bytes.
	 */
	RV_OP_LOADREG t0, __z_arch_esf_t_mepc_OFFSET(sp)
  bc:	04412283          	lw	t0,68(sp)
	addi t0, t0, 4
  c0:	00428293          	addi	t0,t0,4
	RV_OP_STOREREG t0, __z_arch_esf_t_mepc_OFFSET(sp)
  c4:	04512223          	sw	t0,68(sp)
	j z_riscv_user_mode_enter_syscall
#endif /* CONFIG_USERSPACE */
	/*
	 * Go to reschedule to handle context-switch
	 */
	j reschedule
  c8:	0800006f          	j	148 <reschedule>

000000cc <is_interrupt>:
	 * Save current thread stack pointer and switch
	 * stack pointer to interrupt stack.
	 */

	/* Save thread stack pointer to temp register t0 */
	addi t0, sp, 0
  cc:	00010293          	mv	t0,sp

	/* Switch to interrupt stack */
	la t2, _kernel
  d0:	0000d397          	auipc	t2,0xd
  d4:	21438393          	addi	t2,t2,532 # d2e4 <_kernel>
	RV_OP_LOADREG sp, _kernel_offset_to_irq_stack(t2)
  d8:	0043a103          	lw	sp,4(t2)

	/*
	 * Save thread stack pointer on interrupt stack
	 * In RISC-V, stack pointer needs to be 16-byte aligned
	 */
	addi sp, sp, -16
  dc:	ff010113          	addi	sp,sp,-16
	RV_OP_STOREREG t0, 0x00(sp)
  e0:	00512023          	sw	t0,0(sp)

000000e4 <on_irq_stack>:
	la t2, _kernel
#endif /* !CONFIG_USERSPACE && !CONFIG_PMP_STACK_GUARD */

on_irq_stack:
	/* Increment _kernel.cpus[0].nested variable */
	lw t3, _kernel_offset_to_nested(t2)
  e4:	0003ae03          	lw	t3,0(t2)
	addi t3, t3, 1
  e8:	001e0e13          	addi	t3,t3,1
	sw t3, _kernel_offset_to_nested(t2)
  ec:	01c3a023          	sw	t3,0(t2)
#ifdef CONFIG_TRACING_ISR
	call sys_trace_isr_enter
#endif

	/* Get IRQ causing interrupt */
	csrr a0, mcause
  f0:	34202573          	csrr	a0,mcause
	li t0, SOC_MCAUSE_EXP_MASK
  f4:	800002b7          	lui	t0,0x80000
  f8:	fff28293          	addi	t0,t0,-1 # 7fffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000000>
	and a0, a0, t0
  fc:	00557533          	and	a0,a0,t0

	/*
	 * Clear pending IRQ generating the interrupt at SOC level
	 * Pass IRQ number to __soc_handle_irq via register a0
	 */
	jal ra, __soc_handle_irq
 100:	1a0000ef          	jal	ra,2a0 <__soc_handle_irq>

	/*
	 * Call corresponding registered function in _sw_isr_table.
	 * (table is 2-word wide, we should shift index accordingly)
	 */
	la t0, _sw_isr_table
 104:	0000c297          	auipc	t0,0xc
 108:	28028293          	addi	t0,t0,640 # c384 <_sw_isr_table>
	slli a0, a0, (RV_REGSHIFT + 1)
 10c:	00351513          	slli	a0,a0,0x3
	add t0, t0, a0
 110:	00a282b3          	add	t0,t0,a0

	/* Load argument in a0 register */
	RV_OP_LOADREG a0, 0x00(t0)
 114:	0002a503          	lw	a0,0(t0)

	/* Load ISR function address in register t1 */
	RV_OP_LOADREG t1, RV_REGSIZE(t0)
 118:	0042a303          	lw	t1,4(t0)

	/* Call ISR function */
	jalr ra, t1
 11c:	000300e7          	jalr	t1

00000120 <on_thread_stack>:

on_thread_stack:
	/* Get reference to _kernel */
	la t1, _kernel
 120:	0000d317          	auipc	t1,0xd
 124:	1c430313          	addi	t1,t1,452 # d2e4 <_kernel>

	/* Decrement _kernel.cpus[0].nested variable */
	lw t2, _kernel_offset_to_nested(t1)
 128:	00032383          	lw	t2,0(t1)
	addi t2, t2, -1
 12c:	fff38393          	addi	t2,t2,-1
	sw t2, _kernel_offset_to_nested(t1)
 130:	00732023          	sw	t2,0(t1)

#if !defined(CONFIG_USERSPACE) && !defined(CONFIG_PMP_STACK_GUARD)
	/* Restore thread stack pointer */
	RV_OP_LOADREG t0, 0x00(sp)
 134:	00012283          	lw	t0,0(sp)
	addi sp, t0, 0
 138:	00028113          	mv	sp,t0
	/*
	 * Check if we need to perform a reschedule
	 */

	/* Get pointer to _kernel.current */
	RV_OP_LOADREG t2, _kernel_offset_to_current(t1)
 13c:	00832383          	lw	t2,8(t1)

	/*
	 * Check if next thread to schedule is current thread.
	 * If yes do not perform a reschedule
	 */
	RV_OP_LOADREG t3, _kernel_offset_to_ready_q_cache(t1)
 140:	01832e03          	lw	t3,24(t1)
	beq t3, t2, no_reschedule
 144:	107e0063          	beq	t3,t2,244 <no_reschedule>

00000148 <reschedule>:
	 * Note:
	 *   Sometimes this code is execute back-to-back before the target thread
	 *   has a chance to run. If this happens, the current thread and the
	 *   target thread will be the same.
	 */
	la t0, _kernel
 148:	0000d297          	auipc	t0,0xd
 14c:	19c28293          	addi	t0,t0,412 # d2e4 <_kernel>
	RV_OP_LOADREG t2, _kernel_offset_to_current(t0)
 150:	0082a383          	lw	t2,8(t0)
	RV_OP_LOADREG t3, _kernel_offset_to_ready_q_cache(t0)
 154:	0182ae03          	lw	t3,24(t0)
	beq t2, t3, no_reschedule
 158:	0fc38663          	beq	t2,t3,244 <no_reschedule>

#if CONFIG_INSTRUMENT_THREAD_SWITCHING
	call z_thread_mark_switched_out
#endif
	/* Get reference to _kernel */
	la t0, _kernel
 15c:	0000d297          	auipc	t0,0xd
 160:	18828293          	addi	t0,t0,392 # d2e4 <_kernel>

	/* Get pointer to _kernel.current */
	RV_OP_LOADREG t1, _kernel_offset_to_current(t0)
 164:	0082a303          	lw	t1,8(t0)

	/*
	 * Save callee-saved registers of current kernel thread
	 * prior to handle context-switching
	 */
	STORE_CALLEE_SAVED(t1)
 168:	02832a23          	sw	s0,52(t1)
 16c:	02932c23          	sw	s1,56(t1)
 170:	03232e23          	sw	s2,60(t1)
 174:	05332023          	sw	s3,64(t1)
 178:	05432223          	sw	s4,68(t1)
 17c:	05532423          	sw	s5,72(t1)
 180:	05632623          	sw	s6,76(t1)
 184:	05732823          	sw	s7,80(t1)
 188:	05832a23          	sw	s8,84(t1)
 18c:	05932c23          	sw	s9,88(t1)
 190:	05a32e23          	sw	s10,92(t1)
 194:	07b32023          	sw	s11,96(t1)

00000198 <skip_callee_saved_reg>:

	/*
	 * Save stack pointer of current thread and set the default return value
	 * of z_swap to _k_neg_eagain for the thread.
	 */
	RV_OP_STOREREG sp, _thread_offset_to_sp(t1)
 198:	02232823          	sw	sp,48(t1)
	la t2, _k_neg_eagain
 19c:	0000c397          	auipc	t2,0xc
 1a0:	46838393          	addi	t2,t2,1128 # c604 <_k_neg_eagain>
	lw t3, 0x00(t2)
 1a4:	0003ae03          	lw	t3,0(t2)
	sw t3, _thread_offset_to_swap_return_value(t1)
 1a8:	07c32c23          	sw	t3,120(t1)

	/* Get next thread to schedule. */
	RV_OP_LOADREG t1, _kernel_offset_to_ready_q_cache(t0)
 1ac:	0182a303          	lw	t1,24(t0)

	/*
	 * Set _kernel.current to new thread loaded in t1
	 */
	RV_OP_STOREREG t1, _kernel_offset_to_current(t0)
 1b0:	0062a423          	sw	t1,8(t0)

	/* Switch to new thread stack */
	RV_OP_LOADREG sp, _thread_offset_to_sp(t1)
 1b4:	03032103          	lw	sp,48(t1)

	/* Restore callee-saved registers of new thread */
	LOAD_CALLEE_SAVED(t1)
 1b8:	03432403          	lw	s0,52(t1)
 1bc:	03832483          	lw	s1,56(t1)
 1c0:	03c32903          	lw	s2,60(t1)
 1c4:	04032983          	lw	s3,64(t1)
 1c8:	04432a03          	lw	s4,68(t1)
 1cc:	04832a83          	lw	s5,72(t1)
 1d0:	04c32b03          	lw	s6,76(t1)
 1d4:	05032b83          	lw	s7,80(t1)
 1d8:	05432c03          	lw	s8,84(t1)
 1dc:	05832c83          	lw	s9,88(t1)
 1e0:	05c32d03          	lw	s10,92(t1)
 1e4:	06032d83          	lw	s11,96(t1)
	addi a0, sp, __z_arch_esf_t_soc_context_OFFSET
	jal ra, __soc_restore_context
#endif /* CONFIG_RISCV_SOC_CONTEXT_SAVE */

	/* Restore MEPC register */
	RV_OP_LOADREG t0, __z_arch_esf_t_mepc_OFFSET(sp)
 1e8:	04412283          	lw	t0,68(sp)
	csrw mepc, t0
 1ec:	34129073          	csrw	mepc,t0

	/* Restore SOC-specific MSTATUS register */
	RV_OP_LOADREG t0, __z_arch_esf_t_mstatus_OFFSET(sp)
 1f0:	04812283          	lw	t0,72(sp)
	csrw mstatus, t0
 1f4:	30029073          	csrw	mstatus,t0

skip_load_fp_caller_saved_resched:
#endif /* CONFIG_FPU && CONFIG_FPU_SHARING */

	/* Restore caller-saved registers from thread stack */
	LOAD_CALLER_SAVED()
 1f8:	00012083          	lw	ra,0(sp)
 1fc:	00412203          	lw	tp,4(sp)
 200:	00812283          	lw	t0,8(sp)
 204:	00c12303          	lw	t1,12(sp)
 208:	01012383          	lw	t2,16(sp)
 20c:	01412e03          	lw	t3,20(sp)
 210:	01812e83          	lw	t4,24(sp)
 214:	01c12f03          	lw	t5,28(sp)
 218:	02012f83          	lw	t6,32(sp)
 21c:	02412503          	lw	a0,36(sp)
 220:	02812583          	lw	a1,40(sp)
 224:	02c12603          	lw	a2,44(sp)
 228:	03012683          	lw	a3,48(sp)
 22c:	03412703          	lw	a4,52(sp)
 230:	03812783          	lw	a5,56(sp)
 234:	03c12803          	lw	a6,60(sp)
 238:	04012883          	lw	a7,64(sp)
 23c:	05010113          	addi	sp,sp,80

	/* Call SOC_ERET to exit ISR */
	SOC_ERET
 240:	30200073          	mret

00000244 <no_reschedule>:
	addi a0, sp, __z_arch_esf_t_soc_context_OFFSET
	jal ra, __soc_restore_context
#endif /* CONFIG_RISCV_SOC_CONTEXT_SAVE */

	/* Restore MEPC register */
	RV_OP_LOADREG t0, __z_arch_esf_t_mepc_OFFSET(sp)
 244:	04412283          	lw	t0,68(sp)
	csrw mepc, t0
 248:	34129073          	csrw	mepc,t0

	/* Restore SOC-specific MSTATUS register */
	RV_OP_LOADREG t0, __z_arch_esf_t_mstatus_OFFSET(sp)
 24c:	04812283          	lw	t0,72(sp)
	csrw mstatus, t0
 250:	30029073          	csrw	mstatus,t0

skip_load_fp_caller_saved:
#endif /* CONFIG_FPU && CONFIG_FPU_SHARING */

	/* Restore caller-saved registers from thread stack */
	LOAD_CALLER_SAVED()
 254:	00012083          	lw	ra,0(sp)
 258:	00412203          	lw	tp,4(sp)
 25c:	00812283          	lw	t0,8(sp)
 260:	00c12303          	lw	t1,12(sp)
 264:	01012383          	lw	t2,16(sp)
 268:	01412e03          	lw	t3,20(sp)
 26c:	01812e83          	lw	t4,24(sp)
 270:	01c12f03          	lw	t5,28(sp)
 274:	02012f83          	lw	t6,32(sp)
 278:	02412503          	lw	a0,36(sp)
 27c:	02812583          	lw	a1,40(sp)
 280:	02c12603          	lw	a2,44(sp)
 284:	03012683          	lw	a3,48(sp)
 288:	03412703          	lw	a4,52(sp)
 28c:	03812783          	lw	a5,56(sp)
 290:	03c12803          	lw	a6,60(sp)
 294:	04012883          	lw	a7,64(sp)
 298:	05010113          	addi	sp,sp,80

#ifdef CONFIG_PMP_STACK_GUARD
	csrrw sp, mscratch, sp
#endif /* CONFIG_PMP_STACK_GUARD */
	/* Call SOC_ERET to exit ISR */
	SOC_ERET
 29c:	30200073          	mret

000002a0 <__soc_handle_irq>:
 * SOC-specific function to handle pending IRQ number generating the interrupt.
 * Exception number is given as parameter via register a0.
 */
SECTION_FUNC(exception.other, __soc_handle_irq)
	/* Clear exception number from CSR mip register */
	li t1, 1
 2a0:	00100313          	li	t1,1
	sll t0, t1, a0
 2a4:	00a312b3          	sll	t0,t1,a0
	csrrc t1, mip, t0
 2a8:	3442b373          	csrrc	t1,mip,t0

	/* Return */
	jalr x0, ra
 2ac:	00008067          	ret

000002b0 <__soc_is_irq>:
 * return 1 (interrupt) or 0 (exception)
 *
 */
SECTION_FUNC(exception.other, __soc_is_irq)
	/* Read mcause and check if interrupt bit is set */
	csrr t0, mcause
 2b0:	342022f3          	csrr	t0,mcause
	li t1, SOC_MCAUSE_IRQ_MASK
 2b4:	80000337          	lui	t1,0x80000
	and t0, t0, t1
 2b8:	0062f2b3          	and	t0,t0,t1

	/* If interrupt bit is not set, return with 0 */
	addi a0, x0, 0
 2bc:	00000513          	li	a0,0
	beqz t0, not_interrupt
 2c0:	00028463          	beqz	t0,2c8 <not_interrupt>
	addi a0, a0, 1
 2c4:	00150513          	addi	a0,a0,1

000002c8 <not_interrupt>:

not_interrupt:
	/* return */
	jalr x0, ra
 2c8:	00008067          	ret

000002cc <arch_swap>:
 * key is stored in a0 register
 */
SECTION_FUNC(exception.other, arch_swap)

	/* Make a system call to perform context switch */
	ecall
 2cc:	00000073          	ecall
	 * Prior to unlocking irq, load return value of
	 * arch_swap to temp register t2 (from
	 * _thread_offset_to_swap_return_value). Normally, it should be -EAGAIN,
	 * unless someone has previously called arch_thread_return_value_set(..).
	 */
	la t0, _kernel
 2d0:	0000d297          	auipc	t0,0xd
 2d4:	01428293          	addi	t0,t0,20 # d2e4 <_kernel>

	/* Get pointer to _kernel.current */
	RV_OP_LOADREG t1, _kernel_offset_to_current(t0)
 2d8:	0082a303          	lw	t1,8(t0)

	/* Load return value of arch_swap function in temp register t2 */
	lw t2, _thread_offset_to_swap_return_value(t1)
 2dc:	07832383          	lw	t2,120(t1) # 80000078 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000079>

	/*
	 * Unlock irq, following IRQ lock state in a0 register.
	 * Use atomic instruction csrrs to do so.
	 */
	andi a0, a0, MSTATUS_IEN
 2e0:	00857513          	andi	a0,a0,8
	csrrs t0, mstatus, a0
 2e4:	300522f3          	csrrs	t0,mstatus,a0

	/* Set value of return register a0 to value of register t2 */
	addi a0, t2, 0
 2e8:	00038513          	mv	a0,t2

	/* Return */
	jalr x0, ra
 2ec:	00008067          	ret

Disassembly of section text:

000002f0 <__clzsi2>:
     2f0:	000107b7          	lui	a5,0x10
     2f4:	02f57a63          	bgeu	a0,a5,328 <__clzsi2+0x38>
     2f8:	0ff00793          	li	a5,255
     2fc:	00a7b7b3          	sltu	a5,a5,a0
     300:	00379793          	slli	a5,a5,0x3
     304:	0000c737          	lui	a4,0xc
     308:	02000693          	li	a3,32
     30c:	40f686b3          	sub	a3,a3,a5
     310:	00f55533          	srl	a0,a0,a5
     314:	60c70793          	addi	a5,a4,1548 # c60c <__clz_tab>
     318:	00a78533          	add	a0,a5,a0
     31c:	00054503          	lbu	a0,0(a0)
     320:	40a68533          	sub	a0,a3,a0
     324:	00008067          	ret
     328:	01000737          	lui	a4,0x1000
     32c:	01000793          	li	a5,16
     330:	fce56ae3          	bltu	a0,a4,304 <__clzsi2+0x14>
     334:	01800793          	li	a5,24
     338:	fcdff06f          	j	304 <__clzsi2+0x14>

0000033c <__udivdi3>:
     33c:	00050893          	mv	a7,a0
     340:	00058793          	mv	a5,a1
     344:	00060813          	mv	a6,a2
     348:	00068513          	mv	a0,a3
     34c:	00088313          	mv	t1,a7
     350:	28069463          	bnez	a3,5d8 <CONFIG_HEAP_MEM_POOL_SIZE+0x1d8>
     354:	0000c6b7          	lui	a3,0xc
     358:	60c68693          	addi	a3,a3,1548 # c60c <__clz_tab>
     35c:	0ec5f663          	bgeu	a1,a2,448 <CONFIG_HEAP_MEM_POOL_SIZE+0x48>
     360:	00010737          	lui	a4,0x10
     364:	0ce67863          	bgeu	a2,a4,434 <CONFIG_HEAP_MEM_POOL_SIZE+0x34>
     368:	0ff00713          	li	a4,255
     36c:	00c73733          	sltu	a4,a4,a2
     370:	00371713          	slli	a4,a4,0x3
     374:	00e65533          	srl	a0,a2,a4
     378:	00a686b3          	add	a3,a3,a0
     37c:	0006c683          	lbu	a3,0(a3)
     380:	02000513          	li	a0,32
     384:	00e68733          	add	a4,a3,a4
     388:	40e506b3          	sub	a3,a0,a4
     38c:	00e50c63          	beq	a0,a4,3a4 <__udivdi3+0x68>
     390:	00d795b3          	sll	a1,a5,a3
     394:	00e8d733          	srl	a4,a7,a4
     398:	00d61833          	sll	a6,a2,a3
     39c:	00b765b3          	or	a1,a4,a1
     3a0:	00d89333          	sll	t1,a7,a3
     3a4:	01085893          	srli	a7,a6,0x10
     3a8:	0315d6b3          	divu	a3,a1,a7
     3ac:	01081613          	slli	a2,a6,0x10
     3b0:	01065613          	srli	a2,a2,0x10
     3b4:	01035793          	srli	a5,t1,0x10
     3b8:	0315f733          	remu	a4,a1,a7
     3bc:	00068513          	mv	a0,a3
     3c0:	02d605b3          	mul	a1,a2,a3
     3c4:	01071713          	slli	a4,a4,0x10
     3c8:	00f767b3          	or	a5,a4,a5
     3cc:	00b7fe63          	bgeu	a5,a1,3e8 <__udivdi3+0xac>
     3d0:	010787b3          	add	a5,a5,a6
     3d4:	fff68513          	addi	a0,a3,-1
     3d8:	0107e863          	bltu	a5,a6,3e8 <__udivdi3+0xac>
     3dc:	00b7f663          	bgeu	a5,a1,3e8 <__udivdi3+0xac>
     3e0:	ffe68513          	addi	a0,a3,-2
     3e4:	010787b3          	add	a5,a5,a6
     3e8:	40b787b3          	sub	a5,a5,a1
     3ec:	0317f733          	remu	a4,a5,a7
     3f0:	01031313          	slli	t1,t1,0x10
     3f4:	01035313          	srli	t1,t1,0x10
     3f8:	0317d7b3          	divu	a5,a5,a7
     3fc:	01071713          	slli	a4,a4,0x10
     400:	00676333          	or	t1,a4,t1
     404:	02f606b3          	mul	a3,a2,a5
     408:	00078613          	mv	a2,a5
     40c:	00d37c63          	bgeu	t1,a3,424 <CONFIG_HEAP_MEM_POOL_SIZE+0x24>
     410:	00680333          	add	t1,a6,t1
     414:	fff78613          	addi	a2,a5,-1 # ffff <__data_region_end+0xe03>
     418:	01036663          	bltu	t1,a6,424 <CONFIG_HEAP_MEM_POOL_SIZE+0x24>
     41c:	00d37463          	bgeu	t1,a3,424 <CONFIG_HEAP_MEM_POOL_SIZE+0x24>
     420:	ffe78613          	addi	a2,a5,-2
     424:	01051513          	slli	a0,a0,0x10
     428:	00c56533          	or	a0,a0,a2
     42c:	00000593          	li	a1,0
     430:	0e40006f          	j	514 <CONFIG_HEAP_MEM_POOL_SIZE+0x114>
     434:	01000537          	lui	a0,0x1000
     438:	01000713          	li	a4,16
     43c:	f2a66ce3          	bltu	a2,a0,374 <__udivdi3+0x38>
     440:	01800713          	li	a4,24
     444:	f31ff06f          	j	374 <__udivdi3+0x38>
     448:	00061663          	bnez	a2,454 <CONFIG_HEAP_MEM_POOL_SIZE+0x54>
     44c:	00100713          	li	a4,1
     450:	02c75833          	divu	a6,a4,a2
     454:	00010737          	lui	a4,0x10
     458:	0ce87063          	bgeu	a6,a4,518 <CONFIG_HEAP_MEM_POOL_SIZE+0x118>
     45c:	0ff00713          	li	a4,255
     460:	01077463          	bgeu	a4,a6,468 <CONFIG_HEAP_MEM_POOL_SIZE+0x68>
     464:	00800513          	li	a0,8
     468:	00a85733          	srl	a4,a6,a0
     46c:	00e686b3          	add	a3,a3,a4
     470:	0006c703          	lbu	a4,0(a3)
     474:	02000613          	li	a2,32
     478:	00a70733          	add	a4,a4,a0
     47c:	40e606b3          	sub	a3,a2,a4
     480:	0ae61663          	bne	a2,a4,52c <CONFIG_HEAP_MEM_POOL_SIZE+0x12c>
     484:	410787b3          	sub	a5,a5,a6
     488:	00100593          	li	a1,1
     48c:	01085893          	srli	a7,a6,0x10
     490:	01081613          	slli	a2,a6,0x10
     494:	01065613          	srli	a2,a2,0x10
     498:	01035713          	srli	a4,t1,0x10
     49c:	0317f6b3          	remu	a3,a5,a7
     4a0:	0317d7b3          	divu	a5,a5,a7
     4a4:	01069693          	slli	a3,a3,0x10
     4a8:	00e6e733          	or	a4,a3,a4
     4ac:	02f60e33          	mul	t3,a2,a5
     4b0:	00078513          	mv	a0,a5
     4b4:	01c77e63          	bgeu	a4,t3,4d0 <CONFIG_HEAP_MEM_POOL_SIZE+0xd0>
     4b8:	01070733          	add	a4,a4,a6
     4bc:	fff78513          	addi	a0,a5,-1
     4c0:	01076863          	bltu	a4,a6,4d0 <CONFIG_HEAP_MEM_POOL_SIZE+0xd0>
     4c4:	01c77663          	bgeu	a4,t3,4d0 <CONFIG_HEAP_MEM_POOL_SIZE+0xd0>
     4c8:	ffe78513          	addi	a0,a5,-2
     4cc:	01070733          	add	a4,a4,a6
     4d0:	41c70733          	sub	a4,a4,t3
     4d4:	031777b3          	remu	a5,a4,a7
     4d8:	01031313          	slli	t1,t1,0x10
     4dc:	01035313          	srli	t1,t1,0x10
     4e0:	03175733          	divu	a4,a4,a7
     4e4:	01079793          	slli	a5,a5,0x10
     4e8:	0067e333          	or	t1,a5,t1
     4ec:	02e606b3          	mul	a3,a2,a4
     4f0:	00070613          	mv	a2,a4
     4f4:	00d37c63          	bgeu	t1,a3,50c <CONFIG_HEAP_MEM_POOL_SIZE+0x10c>
     4f8:	00680333          	add	t1,a6,t1
     4fc:	fff70613          	addi	a2,a4,-1 # ffff <__data_region_end+0xe03>
     500:	01036663          	bltu	t1,a6,50c <CONFIG_HEAP_MEM_POOL_SIZE+0x10c>
     504:	00d37463          	bgeu	t1,a3,50c <CONFIG_HEAP_MEM_POOL_SIZE+0x10c>
     508:	ffe70613          	addi	a2,a4,-2
     50c:	01051513          	slli	a0,a0,0x10
     510:	00c56533          	or	a0,a0,a2
     514:	00008067          	ret
     518:	01000737          	lui	a4,0x1000
     51c:	01000513          	li	a0,16
     520:	f4e864e3          	bltu	a6,a4,468 <CONFIG_HEAP_MEM_POOL_SIZE+0x68>
     524:	01800513          	li	a0,24
     528:	f41ff06f          	j	468 <CONFIG_HEAP_MEM_POOL_SIZE+0x68>
     52c:	00d81833          	sll	a6,a6,a3
     530:	00e7d533          	srl	a0,a5,a4
     534:	00d89333          	sll	t1,a7,a3
     538:	00d797b3          	sll	a5,a5,a3
     53c:	00e8d733          	srl	a4,a7,a4
     540:	01085893          	srli	a7,a6,0x10
     544:	00f76633          	or	a2,a4,a5
     548:	03157733          	remu	a4,a0,a7
     54c:	01081793          	slli	a5,a6,0x10
     550:	0107d793          	srli	a5,a5,0x10
     554:	01065593          	srli	a1,a2,0x10
     558:	03155533          	divu	a0,a0,a7
     55c:	01071713          	slli	a4,a4,0x10
     560:	00b76733          	or	a4,a4,a1
     564:	02a786b3          	mul	a3,a5,a0
     568:	00050593          	mv	a1,a0
     56c:	00d77e63          	bgeu	a4,a3,588 <CONFIG_HEAP_MEM_POOL_SIZE+0x188>
     570:	01070733          	add	a4,a4,a6
     574:	fff50593          	addi	a1,a0,-1 # ffffff <__data_region_end+0xff0e03>
     578:	01076863          	bltu	a4,a6,588 <CONFIG_HEAP_MEM_POOL_SIZE+0x188>
     57c:	00d77663          	bgeu	a4,a3,588 <CONFIG_HEAP_MEM_POOL_SIZE+0x188>
     580:	ffe50593          	addi	a1,a0,-2
     584:	01070733          	add	a4,a4,a6
     588:	40d706b3          	sub	a3,a4,a3
     58c:	0316f733          	remu	a4,a3,a7
     590:	01061613          	slli	a2,a2,0x10
     594:	01065613          	srli	a2,a2,0x10
     598:	0316d6b3          	divu	a3,a3,a7
     59c:	01071713          	slli	a4,a4,0x10
     5a0:	02d78533          	mul	a0,a5,a3
     5a4:	00c767b3          	or	a5,a4,a2
     5a8:	00068713          	mv	a4,a3
     5ac:	00a7fe63          	bgeu	a5,a0,5c8 <CONFIG_HEAP_MEM_POOL_SIZE+0x1c8>
     5b0:	010787b3          	add	a5,a5,a6
     5b4:	fff68713          	addi	a4,a3,-1
     5b8:	0107e863          	bltu	a5,a6,5c8 <CONFIG_HEAP_MEM_POOL_SIZE+0x1c8>
     5bc:	00a7f663          	bgeu	a5,a0,5c8 <CONFIG_HEAP_MEM_POOL_SIZE+0x1c8>
     5c0:	ffe68713          	addi	a4,a3,-2
     5c4:	010787b3          	add	a5,a5,a6
     5c8:	01059593          	slli	a1,a1,0x10
     5cc:	40a787b3          	sub	a5,a5,a0
     5d0:	00e5e5b3          	or	a1,a1,a4
     5d4:	eb9ff06f          	j	48c <CONFIG_HEAP_MEM_POOL_SIZE+0x8c>
     5d8:	18d5e663          	bltu	a1,a3,764 <CONFIG_HEAP_MEM_POOL_SIZE+0x364>
     5dc:	00010737          	lui	a4,0x10
     5e0:	04e6f463          	bgeu	a3,a4,628 <CONFIG_HEAP_MEM_POOL_SIZE+0x228>
     5e4:	0ff00713          	li	a4,255
     5e8:	00d735b3          	sltu	a1,a4,a3
     5ec:	00359593          	slli	a1,a1,0x3
     5f0:	0000c737          	lui	a4,0xc
     5f4:	00b6d533          	srl	a0,a3,a1
     5f8:	60c70713          	addi	a4,a4,1548 # c60c <__clz_tab>
     5fc:	00a70733          	add	a4,a4,a0
     600:	00074703          	lbu	a4,0(a4)
     604:	02000513          	li	a0,32
     608:	00b70733          	add	a4,a4,a1
     60c:	40e505b3          	sub	a1,a0,a4
     610:	02e51663          	bne	a0,a4,63c <CONFIG_HEAP_MEM_POOL_SIZE+0x23c>
     614:	00100513          	li	a0,1
     618:	eef6eee3          	bltu	a3,a5,514 <CONFIG_HEAP_MEM_POOL_SIZE+0x114>
     61c:	00c8b533          	sltu	a0,a7,a2
     620:	00154513          	xori	a0,a0,1
     624:	ef1ff06f          	j	514 <CONFIG_HEAP_MEM_POOL_SIZE+0x114>
     628:	01000737          	lui	a4,0x1000
     62c:	01000593          	li	a1,16
     630:	fce6e0e3          	bltu	a3,a4,5f0 <CONFIG_HEAP_MEM_POOL_SIZE+0x1f0>
     634:	01800593          	li	a1,24
     638:	fb9ff06f          	j	5f0 <CONFIG_HEAP_MEM_POOL_SIZE+0x1f0>
     63c:	00e65833          	srl	a6,a2,a4
     640:	00b696b3          	sll	a3,a3,a1
     644:	00d86833          	or	a6,a6,a3
     648:	00e7de33          	srl	t3,a5,a4
     64c:	01085e93          	srli	t4,a6,0x10
     650:	03de76b3          	remu	a3,t3,t4
     654:	00b797b3          	sll	a5,a5,a1
     658:	00e8d733          	srl	a4,a7,a4
     65c:	00b61333          	sll	t1,a2,a1
     660:	00f76633          	or	a2,a4,a5
     664:	01081793          	slli	a5,a6,0x10
     668:	0107d793          	srli	a5,a5,0x10
     66c:	01065713          	srli	a4,a2,0x10
     670:	03de5e33          	divu	t3,t3,t4
     674:	01069693          	slli	a3,a3,0x10
     678:	00e6e733          	or	a4,a3,a4
     67c:	03c78f33          	mul	t5,a5,t3
     680:	000e0513          	mv	a0,t3
     684:	01e77e63          	bgeu	a4,t5,6a0 <CONFIG_HEAP_MEM_POOL_SIZE+0x2a0>
     688:	01070733          	add	a4,a4,a6
     68c:	fffe0513          	addi	a0,t3,-1
     690:	01076863          	bltu	a4,a6,6a0 <CONFIG_HEAP_MEM_POOL_SIZE+0x2a0>
     694:	01e77663          	bgeu	a4,t5,6a0 <CONFIG_HEAP_MEM_POOL_SIZE+0x2a0>
     698:	ffee0513          	addi	a0,t3,-2
     69c:	01070733          	add	a4,a4,a6
     6a0:	41e70733          	sub	a4,a4,t5
     6a4:	03d776b3          	remu	a3,a4,t4
     6a8:	03d75733          	divu	a4,a4,t4
     6ac:	01069693          	slli	a3,a3,0x10
     6b0:	02e78e33          	mul	t3,a5,a4
     6b4:	01061793          	slli	a5,a2,0x10
     6b8:	0107d793          	srli	a5,a5,0x10
     6bc:	00f6e7b3          	or	a5,a3,a5
     6c0:	00070613          	mv	a2,a4
     6c4:	01c7fe63          	bgeu	a5,t3,6e0 <CONFIG_HEAP_MEM_POOL_SIZE+0x2e0>
     6c8:	010787b3          	add	a5,a5,a6
     6cc:	fff70613          	addi	a2,a4,-1 # ffffff <__data_region_end+0xff0e03>
     6d0:	0107e863          	bltu	a5,a6,6e0 <CONFIG_HEAP_MEM_POOL_SIZE+0x2e0>
     6d4:	01c7f663          	bgeu	a5,t3,6e0 <CONFIG_HEAP_MEM_POOL_SIZE+0x2e0>
     6d8:	ffe70613          	addi	a2,a4,-2
     6dc:	010787b3          	add	a5,a5,a6
     6e0:	01051513          	slli	a0,a0,0x10
     6e4:	00010eb7          	lui	t4,0x10
     6e8:	00c56533          	or	a0,a0,a2
     6ec:	fffe8693          	addi	a3,t4,-1 # ffff <__data_region_end+0xe03>
     6f0:	00d57833          	and	a6,a0,a3
     6f4:	01055613          	srli	a2,a0,0x10
     6f8:	00d376b3          	and	a3,t1,a3
     6fc:	01035313          	srli	t1,t1,0x10
     700:	41c787b3          	sub	a5,a5,t3
     704:	02d80e33          	mul	t3,a6,a3
     708:	02d606b3          	mul	a3,a2,a3
     70c:	010e5713          	srli	a4,t3,0x10
     710:	02680833          	mul	a6,a6,t1
     714:	00d80833          	add	a6,a6,a3
     718:	01070733          	add	a4,a4,a6
     71c:	02660633          	mul	a2,a2,t1
     720:	00d77463          	bgeu	a4,a3,728 <CONFIG_HEAP_MEM_POOL_SIZE+0x328>
     724:	01d60633          	add	a2,a2,t4
     728:	01075693          	srli	a3,a4,0x10
     72c:	00c68633          	add	a2,a3,a2
     730:	02c7e663          	bltu	a5,a2,75c <CONFIG_HEAP_MEM_POOL_SIZE+0x35c>
     734:	cec79ce3          	bne	a5,a2,42c <CONFIG_HEAP_MEM_POOL_SIZE+0x2c>
     738:	000107b7          	lui	a5,0x10
     73c:	fff78793          	addi	a5,a5,-1 # ffff <__data_region_end+0xe03>
     740:	00f77733          	and	a4,a4,a5
     744:	01071713          	slli	a4,a4,0x10
     748:	00fe7e33          	and	t3,t3,a5
     74c:	00b898b3          	sll	a7,a7,a1
     750:	01c70733          	add	a4,a4,t3
     754:	00000593          	li	a1,0
     758:	dae8fee3          	bgeu	a7,a4,514 <CONFIG_HEAP_MEM_POOL_SIZE+0x114>
     75c:	fff50513          	addi	a0,a0,-1
     760:	ccdff06f          	j	42c <CONFIG_HEAP_MEM_POOL_SIZE+0x2c>
     764:	00000593          	li	a1,0
     768:	00000513          	li	a0,0
     76c:	da9ff06f          	j	514 <CONFIG_HEAP_MEM_POOL_SIZE+0x114>

00000770 <__umoddi3>:
     770:	00050e93          	mv	t4,a0
     774:	00058313          	mv	t1,a1
     778:	00060813          	mv	a6,a2
     77c:	00068793          	mv	a5,a3
     780:	22069a63          	bnez	a3,9b4 <CONFIG_ISR_STACK_SIZE+0x1b4>
     784:	0000c737          	lui	a4,0xc
     788:	60c70713          	addi	a4,a4,1548 # c60c <__clz_tab>
     78c:	0cc5fc63          	bgeu	a1,a2,864 <CONFIG_ISR_STACK_SIZE+0x64>
     790:	000106b7          	lui	a3,0x10
     794:	0ad67e63          	bgeu	a2,a3,850 <CONFIG_ISR_STACK_SIZE+0x50>
     798:	0ff00693          	li	a3,255
     79c:	00c6f463          	bgeu	a3,a2,7a4 <__umoddi3+0x34>
     7a0:	00800793          	li	a5,8
     7a4:	00f656b3          	srl	a3,a2,a5
     7a8:	00d70733          	add	a4,a4,a3
     7ac:	00074703          	lbu	a4,0(a4)
     7b0:	00f707b3          	add	a5,a4,a5
     7b4:	02000713          	li	a4,32
     7b8:	40f708b3          	sub	a7,a4,a5
     7bc:	00f70c63          	beq	a4,a5,7d4 <__umoddi3+0x64>
     7c0:	011315b3          	sll	a1,t1,a7
     7c4:	00fed7b3          	srl	a5,t4,a5
     7c8:	01161833          	sll	a6,a2,a7
     7cc:	00b7e5b3          	or	a1,a5,a1
     7d0:	011e9533          	sll	a0,t4,a7
     7d4:	01085693          	srli	a3,a6,0x10
     7d8:	02d5f7b3          	remu	a5,a1,a3
     7dc:	01081613          	slli	a2,a6,0x10
     7e0:	01065613          	srli	a2,a2,0x10
     7e4:	01055713          	srli	a4,a0,0x10
     7e8:	02d5d5b3          	divu	a1,a1,a3
     7ec:	01079793          	slli	a5,a5,0x10
     7f0:	00e7e733          	or	a4,a5,a4
     7f4:	02b605b3          	mul	a1,a2,a1
     7f8:	00b77a63          	bgeu	a4,a1,80c <CONFIG_ISR_STACK_SIZE+0xc>
     7fc:	01070733          	add	a4,a4,a6
     800:	01076663          	bltu	a4,a6,80c <CONFIG_ISR_STACK_SIZE+0xc>
     804:	00b77463          	bgeu	a4,a1,80c <CONFIG_ISR_STACK_SIZE+0xc>
     808:	01070733          	add	a4,a4,a6
     80c:	40b70733          	sub	a4,a4,a1
     810:	02d777b3          	remu	a5,a4,a3
     814:	01051513          	slli	a0,a0,0x10
     818:	01055513          	srli	a0,a0,0x10
     81c:	02d75733          	divu	a4,a4,a3
     820:	01079793          	slli	a5,a5,0x10
     824:	00a7e533          	or	a0,a5,a0
     828:	02e60733          	mul	a4,a2,a4
     82c:	00e57a63          	bgeu	a0,a4,840 <CONFIG_ISR_STACK_SIZE+0x40>
     830:	01050533          	add	a0,a0,a6
     834:	01056663          	bltu	a0,a6,840 <CONFIG_ISR_STACK_SIZE+0x40>
     838:	00e57463          	bgeu	a0,a4,840 <CONFIG_ISR_STACK_SIZE+0x40>
     83c:	01050533          	add	a0,a0,a6
     840:	40e50533          	sub	a0,a0,a4
     844:	01155533          	srl	a0,a0,a7
     848:	00000593          	li	a1,0
     84c:	00008067          	ret
     850:	010006b7          	lui	a3,0x1000
     854:	01000793          	li	a5,16
     858:	f4d666e3          	bltu	a2,a3,7a4 <__umoddi3+0x34>
     85c:	01800793          	li	a5,24
     860:	f45ff06f          	j	7a4 <__umoddi3+0x34>
     864:	00061663          	bnez	a2,870 <CONFIG_ISR_STACK_SIZE+0x70>
     868:	00100693          	li	a3,1
     86c:	02c6d833          	divu	a6,a3,a2
     870:	000106b7          	lui	a3,0x10
     874:	12d87663          	bgeu	a6,a3,9a0 <CONFIG_ISR_STACK_SIZE+0x1a0>
     878:	0ff00693          	li	a3,255
     87c:	0106f463          	bgeu	a3,a6,884 <CONFIG_ISR_STACK_SIZE+0x84>
     880:	00800793          	li	a5,8
     884:	00f856b3          	srl	a3,a6,a5
     888:	00d70733          	add	a4,a4,a3
     88c:	00074603          	lbu	a2,0(a4)
     890:	410305b3          	sub	a1,t1,a6
     894:	00f60633          	add	a2,a2,a5
     898:	02000793          	li	a5,32
     89c:	40c788b3          	sub	a7,a5,a2
     8a0:	08c78663          	beq	a5,a2,92c <CONFIG_ISR_STACK_SIZE+0x12c>
     8a4:	01181833          	sll	a6,a6,a7
     8a8:	00c357b3          	srl	a5,t1,a2
     8ac:	011315b3          	sll	a1,t1,a7
     8b0:	01085313          	srli	t1,a6,0x10
     8b4:	00ced633          	srl	a2,t4,a2
     8b8:	00b66633          	or	a2,a2,a1
     8bc:	01081593          	slli	a1,a6,0x10
     8c0:	0105d593          	srli	a1,a1,0x10
     8c4:	011e9533          	sll	a0,t4,a7
     8c8:	0267d6b3          	divu	a3,a5,t1
     8cc:	0267f733          	remu	a4,a5,t1
     8d0:	01065793          	srli	a5,a2,0x10
     8d4:	02d586b3          	mul	a3,a1,a3
     8d8:	01071713          	slli	a4,a4,0x10
     8dc:	00f76733          	or	a4,a4,a5
     8e0:	00d77a63          	bgeu	a4,a3,8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
     8e4:	01070733          	add	a4,a4,a6
     8e8:	01076663          	bltu	a4,a6,8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
     8ec:	00d77463          	bgeu	a4,a3,8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
     8f0:	01070733          	add	a4,a4,a6
     8f4:	40d706b3          	sub	a3,a4,a3
     8f8:	0266f733          	remu	a4,a3,t1
     8fc:	01061613          	slli	a2,a2,0x10
     900:	01065613          	srli	a2,a2,0x10
     904:	0266d6b3          	divu	a3,a3,t1
     908:	01071713          	slli	a4,a4,0x10
     90c:	02d586b3          	mul	a3,a1,a3
     910:	00c765b3          	or	a1,a4,a2
     914:	00d5fa63          	bgeu	a1,a3,928 <CONFIG_ISR_STACK_SIZE+0x128>
     918:	010585b3          	add	a1,a1,a6
     91c:	0105e663          	bltu	a1,a6,928 <CONFIG_ISR_STACK_SIZE+0x128>
     920:	00d5f463          	bgeu	a1,a3,928 <CONFIG_ISR_STACK_SIZE+0x128>
     924:	010585b3          	add	a1,a1,a6
     928:	40d585b3          	sub	a1,a1,a3
     92c:	01085693          	srli	a3,a6,0x10
     930:	02d5f733          	remu	a4,a1,a3
     934:	01081793          	slli	a5,a6,0x10
     938:	0107d793          	srli	a5,a5,0x10
     93c:	01055613          	srli	a2,a0,0x10
     940:	02d5d5b3          	divu	a1,a1,a3
     944:	01071713          	slli	a4,a4,0x10
     948:	00c76733          	or	a4,a4,a2
     94c:	02b785b3          	mul	a1,a5,a1
     950:	00b77a63          	bgeu	a4,a1,964 <CONFIG_ISR_STACK_SIZE+0x164>
     954:	01070733          	add	a4,a4,a6
     958:	01076663          	bltu	a4,a6,964 <CONFIG_ISR_STACK_SIZE+0x164>
     95c:	00b77463          	bgeu	a4,a1,964 <CONFIG_ISR_STACK_SIZE+0x164>
     960:	01070733          	add	a4,a4,a6
     964:	40b705b3          	sub	a1,a4,a1
     968:	02d5f733          	remu	a4,a1,a3
     96c:	01051513          	slli	a0,a0,0x10
     970:	01055513          	srli	a0,a0,0x10
     974:	02d5d5b3          	divu	a1,a1,a3
     978:	02b785b3          	mul	a1,a5,a1
     97c:	01071793          	slli	a5,a4,0x10
     980:	00a7e533          	or	a0,a5,a0
     984:	00b57a63          	bgeu	a0,a1,998 <CONFIG_ISR_STACK_SIZE+0x198>
     988:	01050533          	add	a0,a0,a6
     98c:	01056663          	bltu	a0,a6,998 <CONFIG_ISR_STACK_SIZE+0x198>
     990:	00b57463          	bgeu	a0,a1,998 <CONFIG_ISR_STACK_SIZE+0x198>
     994:	01050533          	add	a0,a0,a6
     998:	40b50533          	sub	a0,a0,a1
     99c:	ea9ff06f          	j	844 <CONFIG_ISR_STACK_SIZE+0x44>
     9a0:	010006b7          	lui	a3,0x1000
     9a4:	01000793          	li	a5,16
     9a8:	ecd86ee3          	bltu	a6,a3,884 <CONFIG_ISR_STACK_SIZE+0x84>
     9ac:	01800793          	li	a5,24
     9b0:	ed5ff06f          	j	884 <CONFIG_ISR_STACK_SIZE+0x84>
     9b4:	e8d5ece3          	bltu	a1,a3,84c <CONFIG_ISR_STACK_SIZE+0x4c>
     9b8:	000107b7          	lui	a5,0x10
     9bc:	04f6f863          	bgeu	a3,a5,a0c <CONFIG_ISR_STACK_SIZE+0x20c>
     9c0:	0ff00893          	li	a7,255
     9c4:	00d8b7b3          	sltu	a5,a7,a3
     9c8:	00379793          	slli	a5,a5,0x3
     9cc:	0000c737          	lui	a4,0xc
     9d0:	00f6d833          	srl	a6,a3,a5
     9d4:	60c70713          	addi	a4,a4,1548 # c60c <__clz_tab>
     9d8:	01070733          	add	a4,a4,a6
     9dc:	00074883          	lbu	a7,0(a4)
     9e0:	00f888b3          	add	a7,a7,a5
     9e4:	02000793          	li	a5,32
     9e8:	41178833          	sub	a6,a5,a7
     9ec:	03179a63          	bne	a5,a7,a20 <CONFIG_ISR_STACK_SIZE+0x220>
     9f0:	0066e463          	bltu	a3,t1,9f8 <CONFIG_ISR_STACK_SIZE+0x1f8>
     9f4:	e4ceece3          	bltu	t4,a2,84c <CONFIG_ISR_STACK_SIZE+0x4c>
     9f8:	40ce8533          	sub	a0,t4,a2
     9fc:	40d305b3          	sub	a1,t1,a3
     a00:	00aebeb3          	sltu	t4,t4,a0
     a04:	41d585b3          	sub	a1,a1,t4
     a08:	e45ff06f          	j	84c <CONFIG_ISR_STACK_SIZE+0x4c>
     a0c:	01000737          	lui	a4,0x1000
     a10:	01000793          	li	a5,16
     a14:	fae6ece3          	bltu	a3,a4,9cc <CONFIG_ISR_STACK_SIZE+0x1cc>
     a18:	01800793          	li	a5,24
     a1c:	fb1ff06f          	j	9cc <CONFIG_ISR_STACK_SIZE+0x1cc>
     a20:	011657b3          	srl	a5,a2,a7
     a24:	010696b3          	sll	a3,a3,a6
     a28:	00d7ee33          	or	t3,a5,a3
     a2c:	01135f33          	srl	t5,t1,a7
     a30:	011ed7b3          	srl	a5,t4,a7
     a34:	010e9533          	sll	a0,t4,a6
     a38:	010e5e93          	srli	t4,t3,0x10
     a3c:	010315b3          	sll	a1,t1,a6
     a40:	03df5333          	divu	t1,t5,t4
     a44:	00b7e7b3          	or	a5,a5,a1
     a48:	010e1593          	slli	a1,t3,0x10
     a4c:	0105d593          	srli	a1,a1,0x10
     a50:	0107d713          	srli	a4,a5,0x10
     a54:	01061633          	sll	a2,a2,a6
     a58:	03df76b3          	remu	a3,t5,t4
     a5c:	02658f33          	mul	t5,a1,t1
     a60:	01069693          	slli	a3,a3,0x10
     a64:	00e6e733          	or	a4,a3,a4
     a68:	00030693          	mv	a3,t1
     a6c:	01e77e63          	bgeu	a4,t5,a88 <CONFIG_ISR_STACK_SIZE+0x288>
     a70:	01c70733          	add	a4,a4,t3
     a74:	fff30693          	addi	a3,t1,-1
     a78:	01c76863          	bltu	a4,t3,a88 <CONFIG_ISR_STACK_SIZE+0x288>
     a7c:	01e77663          	bgeu	a4,t5,a88 <CONFIG_ISR_STACK_SIZE+0x288>
     a80:	ffe30693          	addi	a3,t1,-2
     a84:	01c70733          	add	a4,a4,t3
     a88:	41e70733          	sub	a4,a4,t5
     a8c:	03d77333          	remu	t1,a4,t4
     a90:	01079793          	slli	a5,a5,0x10
     a94:	0107d793          	srli	a5,a5,0x10
     a98:	03d75733          	divu	a4,a4,t4
     a9c:	01031313          	slli	t1,t1,0x10
     aa0:	00f36333          	or	t1,t1,a5
     aa4:	02e585b3          	mul	a1,a1,a4
     aa8:	00070793          	mv	a5,a4
     aac:	00b37e63          	bgeu	t1,a1,ac8 <CONFIG_ISR_STACK_SIZE+0x2c8>
     ab0:	01c30333          	add	t1,t1,t3
     ab4:	fff70793          	addi	a5,a4,-1 # ffffff <__data_region_end+0xff0e03>
     ab8:	01c36863          	bltu	t1,t3,ac8 <CONFIG_ISR_STACK_SIZE+0x2c8>
     abc:	00b37663          	bgeu	t1,a1,ac8 <CONFIG_ISR_STACK_SIZE+0x2c8>
     ac0:	ffe70793          	addi	a5,a4,-2
     ac4:	01c30333          	add	t1,t1,t3
     ac8:	01069693          	slli	a3,a3,0x10
     acc:	00010f37          	lui	t5,0x10
     ad0:	00f6e6b3          	or	a3,a3,a5
     ad4:	40b305b3          	sub	a1,t1,a1
     ad8:	ffff0313          	addi	t1,t5,-1 # ffff <__data_region_end+0xe03>
     adc:	0066feb3          	and	t4,a3,t1
     ae0:	01065713          	srli	a4,a2,0x10
     ae4:	0106d693          	srli	a3,a3,0x10
     ae8:	00667333          	and	t1,a2,t1
     aec:	026e87b3          	mul	a5,t4,t1
     af0:	02668333          	mul	t1,a3,t1
     af4:	02ee8eb3          	mul	t4,t4,a4
     af8:	02e686b3          	mul	a3,a3,a4
     afc:	006e8eb3          	add	t4,t4,t1
     b00:	0107d713          	srli	a4,a5,0x10
     b04:	01d70733          	add	a4,a4,t4
     b08:	00677463          	bgeu	a4,t1,b10 <CONFIG_ISR_STACK_SIZE+0x310>
     b0c:	01e686b3          	add	a3,a3,t5
     b10:	01075313          	srli	t1,a4,0x10
     b14:	00d306b3          	add	a3,t1,a3
     b18:	00010337          	lui	t1,0x10
     b1c:	fff30313          	addi	t1,t1,-1 # ffff <__data_region_end+0xe03>
     b20:	00677733          	and	a4,a4,t1
     b24:	01071713          	slli	a4,a4,0x10
     b28:	0067f7b3          	and	a5,a5,t1
     b2c:	00f707b3          	add	a5,a4,a5
     b30:	00d5e663          	bltu	a1,a3,b3c <CONFIG_ISR_STACK_SIZE+0x33c>
     b34:	00d59e63          	bne	a1,a3,b50 <CONFIG_ISR_STACK_SIZE+0x350>
     b38:	00f57c63          	bgeu	a0,a5,b50 <CONFIG_ISR_STACK_SIZE+0x350>
     b3c:	40c78633          	sub	a2,a5,a2
     b40:	00c7b7b3          	sltu	a5,a5,a2
     b44:	01c787b3          	add	a5,a5,t3
     b48:	40f686b3          	sub	a3,a3,a5
     b4c:	00060793          	mv	a5,a2
     b50:	40f507b3          	sub	a5,a0,a5
     b54:	00f53533          	sltu	a0,a0,a5
     b58:	40d585b3          	sub	a1,a1,a3
     b5c:	40a585b3          	sub	a1,a1,a0
     b60:	011598b3          	sll	a7,a1,a7
     b64:	0107d533          	srl	a0,a5,a6
     b68:	00a8e533          	or	a0,a7,a0
     b6c:	0105d5b3          	srl	a1,a1,a6
     b70:	cddff06f          	j	84c <CONFIG_ISR_STACK_SIZE+0x4c>

00000b74 <__divdf3>:
     b74:	fd010113          	addi	sp,sp,-48
     b78:	03212023          	sw	s2,32(sp)
     b7c:	0145d913          	srli	s2,a1,0x14
     b80:	02912223          	sw	s1,36(sp)
     b84:	01312e23          	sw	s3,28(sp)
     b88:	01412c23          	sw	s4,24(sp)
     b8c:	01612823          	sw	s6,16(sp)
     b90:	01812423          	sw	s8,8(sp)
     b94:	00c59493          	slli	s1,a1,0xc
     b98:	02112623          	sw	ra,44(sp)
     b9c:	02812423          	sw	s0,40(sp)
     ba0:	01512a23          	sw	s5,20(sp)
     ba4:	01712623          	sw	s7,12(sp)
     ba8:	7ff97913          	andi	s2,s2,2047
     bac:	00050a13          	mv	s4,a0
     bb0:	00060b13          	mv	s6,a2
     bb4:	00068c13          	mv	s8,a3
     bb8:	00c4d493          	srli	s1,s1,0xc
     bbc:	01f5d993          	srli	s3,a1,0x1f
     bc0:	0a090063          	beqz	s2,c60 <__divdf3+0xec>
     bc4:	7ff00793          	li	a5,2047
     bc8:	0ef90e63          	beq	s2,a5,cc4 <__divdf3+0x150>
     bcc:	01d55a93          	srli	s5,a0,0x1d
     bd0:	00349493          	slli	s1,s1,0x3
     bd4:	009ae4b3          	or	s1,s5,s1
     bd8:	00800ab7          	lui	s5,0x800
     bdc:	0154eab3          	or	s5,s1,s5
     be0:	00351413          	slli	s0,a0,0x3
     be4:	c0190913          	addi	s2,s2,-1023
     be8:	00000b93          	li	s7,0
     bec:	00cc1513          	slli	a0,s8,0xc
     bf0:	00c55493          	srli	s1,a0,0xc
     bf4:	014c5513          	srli	a0,s8,0x14
     bf8:	7ff57593          	andi	a1,a0,2047
     bfc:	01fc5c13          	srli	s8,s8,0x1f
     c00:	10058063          	beqz	a1,d00 <__divdf3+0x18c>
     c04:	7ff00793          	li	a5,2047
     c08:	16f58263          	beq	a1,a5,d6c <__divdf3+0x1f8>
     c0c:	00349513          	slli	a0,s1,0x3
     c10:	01db5793          	srli	a5,s6,0x1d
     c14:	00a7e533          	or	a0,a5,a0
     c18:	008004b7          	lui	s1,0x800
     c1c:	009564b3          	or	s1,a0,s1
     c20:	003b1f93          	slli	t6,s6,0x3
     c24:	c0158513          	addi	a0,a1,-1023
     c28:	00000793          	li	a5,0
     c2c:	002b9713          	slli	a4,s7,0x2
     c30:	00f76733          	or	a4,a4,a5
     c34:	fff70713          	addi	a4,a4,-1
     c38:	00e00613          	li	a2,14
     c3c:	0189c6b3          	xor	a3,s3,s8
     c40:	40a905b3          	sub	a1,s2,a0
     c44:	16e66063          	bltu	a2,a4,da4 <__divdf3+0x230>
     c48:	0000c637          	lui	a2,0xc
     c4c:	00271713          	slli	a4,a4,0x2
     c50:	70c60613          	addi	a2,a2,1804 # c70c <__clz_tab+0x100>
     c54:	00c70733          	add	a4,a4,a2
     c58:	00072703          	lw	a4,0(a4)
     c5c:	00070067          	jr	a4
     c60:	00a4eab3          	or	s5,s1,a0
     c64:	060a8e63          	beqz	s5,ce0 <__divdf3+0x16c>
     c68:	04048063          	beqz	s1,ca8 <__divdf3+0x134>
     c6c:	00048513          	mv	a0,s1
     c70:	e80ff0ef          	jal	ra,2f0 <__clzsi2>
     c74:	ff550793          	addi	a5,a0,-11
     c78:	01c00713          	li	a4,28
     c7c:	02f74c63          	blt	a4,a5,cb4 <__divdf3+0x140>
     c80:	01d00a93          	li	s5,29
     c84:	ff850413          	addi	s0,a0,-8
     c88:	40fa8ab3          	sub	s5,s5,a5
     c8c:	008494b3          	sll	s1,s1,s0
     c90:	015a5ab3          	srl	s5,s4,s5
     c94:	009aeab3          	or	s5,s5,s1
     c98:	008a1433          	sll	s0,s4,s0
     c9c:	c0d00593          	li	a1,-1011
     ca0:	40a58933          	sub	s2,a1,a0
     ca4:	f45ff06f          	j	be8 <__divdf3+0x74>
     ca8:	e48ff0ef          	jal	ra,2f0 <__clzsi2>
     cac:	02050513          	addi	a0,a0,32
     cb0:	fc5ff06f          	j	c74 <__divdf3+0x100>
     cb4:	fd850493          	addi	s1,a0,-40
     cb8:	009a1ab3          	sll	s5,s4,s1
     cbc:	00000413          	li	s0,0
     cc0:	fddff06f          	j	c9c <__divdf3+0x128>
     cc4:	00a4eab3          	or	s5,s1,a0
     cc8:	020a8463          	beqz	s5,cf0 <__divdf3+0x17c>
     ccc:	00050413          	mv	s0,a0
     cd0:	00048a93          	mv	s5,s1
     cd4:	7ff00913          	li	s2,2047
     cd8:	00300b93          	li	s7,3
     cdc:	f11ff06f          	j	bec <__divdf3+0x78>
     ce0:	00000413          	li	s0,0
     ce4:	00000913          	li	s2,0
     ce8:	00100b93          	li	s7,1
     cec:	f01ff06f          	j	bec <__divdf3+0x78>
     cf0:	00000413          	li	s0,0
     cf4:	7ff00913          	li	s2,2047
     cf8:	00200b93          	li	s7,2
     cfc:	ef1ff06f          	j	bec <__divdf3+0x78>
     d00:	0164efb3          	or	t6,s1,s6
     d04:	080f8063          	beqz	t6,d84 <__divdf3+0x210>
     d08:	04048263          	beqz	s1,d4c <__divdf3+0x1d8>
     d0c:	00048513          	mv	a0,s1
     d10:	de0ff0ef          	jal	ra,2f0 <__clzsi2>
     d14:	00050593          	mv	a1,a0
     d18:	ff558793          	addi	a5,a1,-11
     d1c:	01c00713          	li	a4,28
     d20:	02f74e63          	blt	a4,a5,d5c <__divdf3+0x1e8>
     d24:	01d00693          	li	a3,29
     d28:	ff858f93          	addi	t6,a1,-8
     d2c:	40f686b3          	sub	a3,a3,a5
     d30:	01f49533          	sll	a0,s1,t6
     d34:	00db56b3          	srl	a3,s6,a3
     d38:	00a6e4b3          	or	s1,a3,a0
     d3c:	01fb1fb3          	sll	t6,s6,t6
     d40:	c0d00693          	li	a3,-1011
     d44:	40b68533          	sub	a0,a3,a1
     d48:	ee1ff06f          	j	c28 <__divdf3+0xb4>
     d4c:	000b0513          	mv	a0,s6
     d50:	da0ff0ef          	jal	ra,2f0 <__clzsi2>
     d54:	02050593          	addi	a1,a0,32
     d58:	fc1ff06f          	j	d18 <__divdf3+0x1a4>
     d5c:	fd858513          	addi	a0,a1,-40
     d60:	00ab14b3          	sll	s1,s6,a0
     d64:	00000f93          	li	t6,0
     d68:	fd9ff06f          	j	d40 <__divdf3+0x1cc>
     d6c:	0164efb3          	or	t6,s1,s6
     d70:	020f8263          	beqz	t6,d94 <__divdf3+0x220>
     d74:	000b0f93          	mv	t6,s6
     d78:	7ff00513          	li	a0,2047
     d7c:	00300793          	li	a5,3
     d80:	eadff06f          	j	c2c <__divdf3+0xb8>
     d84:	00000493          	li	s1,0
     d88:	00000513          	li	a0,0
     d8c:	00100793          	li	a5,1
     d90:	e9dff06f          	j	c2c <__divdf3+0xb8>
     d94:	00000493          	li	s1,0
     d98:	7ff00513          	li	a0,2047
     d9c:	00200793          	li	a5,2
     da0:	e8dff06f          	j	c2c <__divdf3+0xb8>
     da4:	0154e663          	bltu	s1,s5,db0 <__divdf3+0x23c>
     da8:	349a9e63          	bne	s5,s1,1104 <__divdf3+0x590>
     dac:	35f46c63          	bltu	s0,t6,1104 <__divdf3+0x590>
     db0:	01fa9613          	slli	a2,s5,0x1f
     db4:	00145713          	srli	a4,s0,0x1
     db8:	01f41793          	slli	a5,s0,0x1f
     dbc:	001ada93          	srli	s5,s5,0x1
     dc0:	00e66433          	or	s0,a2,a4
     dc4:	00849513          	slli	a0,s1,0x8
     dc8:	018fd893          	srli	a7,t6,0x18
     dcc:	00a8e8b3          	or	a7,a7,a0
     dd0:	01055513          	srli	a0,a0,0x10
     dd4:	02aade33          	divu	t3,s5,a0
     dd8:	01089e93          	slli	t4,a7,0x10
     ddc:	010ede93          	srli	t4,t4,0x10
     de0:	01045713          	srli	a4,s0,0x10
     de4:	008f9313          	slli	t1,t6,0x8
     de8:	02aafab3          	remu	s5,s5,a0
     dec:	000e0613          	mv	a2,t3
     df0:	03ce8833          	mul	a6,t4,t3
     df4:	010a9a93          	slli	s5,s5,0x10
     df8:	01576733          	or	a4,a4,s5
     dfc:	01077e63          	bgeu	a4,a6,e18 <__divdf3+0x2a4>
     e00:	01170733          	add	a4,a4,a7
     e04:	fffe0613          	addi	a2,t3,-1
     e08:	01176863          	bltu	a4,a7,e18 <__divdf3+0x2a4>
     e0c:	01077663          	bgeu	a4,a6,e18 <__divdf3+0x2a4>
     e10:	ffee0613          	addi	a2,t3,-2
     e14:	01170733          	add	a4,a4,a7
     e18:	41070733          	sub	a4,a4,a6
     e1c:	02a75e33          	divu	t3,a4,a0
     e20:	01041413          	slli	s0,s0,0x10
     e24:	01045413          	srli	s0,s0,0x10
     e28:	02a77733          	remu	a4,a4,a0
     e2c:	000e0293          	mv	t0,t3
     e30:	03ce8833          	mul	a6,t4,t3
     e34:	01071713          	slli	a4,a4,0x10
     e38:	00e46733          	or	a4,s0,a4
     e3c:	01077e63          	bgeu	a4,a6,e58 <__divdf3+0x2e4>
     e40:	01170733          	add	a4,a4,a7
     e44:	fffe0293          	addi	t0,t3,-1
     e48:	01176863          	bltu	a4,a7,e58 <__divdf3+0x2e4>
     e4c:	01077663          	bgeu	a4,a6,e58 <__divdf3+0x2e4>
     e50:	ffee0293          	addi	t0,t3,-2
     e54:	01170733          	add	a4,a4,a7
     e58:	41070433          	sub	s0,a4,a6
     e5c:	01061613          	slli	a2,a2,0x10
     e60:	00010837          	lui	a6,0x10
     e64:	005662b3          	or	t0,a2,t0
     e68:	fff80e13          	addi	t3,a6,-1 # ffff <__data_region_end+0xe03>
     e6c:	0102d613          	srli	a2,t0,0x10
     e70:	01c2f733          	and	a4,t0,t3
     e74:	01035f13          	srli	t5,t1,0x10
     e78:	01c37e33          	and	t3,t1,t3
     e7c:	02ee03b3          	mul	t2,t3,a4
     e80:	03c604b3          	mul	s1,a2,t3
     e84:	02ef0733          	mul	a4,t5,a4
     e88:	03e60fb3          	mul	t6,a2,t5
     e8c:	00970633          	add	a2,a4,s1
     e90:	0103d713          	srli	a4,t2,0x10
     e94:	00c70733          	add	a4,a4,a2
     e98:	00977463          	bgeu	a4,s1,ea0 <__divdf3+0x32c>
     e9c:	010f8fb3          	add	t6,t6,a6
     ea0:	01075613          	srli	a2,a4,0x10
     ea4:	01f60633          	add	a2,a2,t6
     ea8:	00010fb7          	lui	t6,0x10
     eac:	ffff8f93          	addi	t6,t6,-1 # ffff <__data_region_end+0xe03>
     eb0:	01f77833          	and	a6,a4,t6
     eb4:	01081813          	slli	a6,a6,0x10
     eb8:	01f3f3b3          	and	t2,t2,t6
     ebc:	00780833          	add	a6,a6,t2
     ec0:	00c46863          	bltu	s0,a2,ed0 <__divdf3+0x35c>
     ec4:	00028493          	mv	s1,t0
     ec8:	04c41463          	bne	s0,a2,f10 <__divdf3+0x39c>
     ecc:	0507f263          	bgeu	a5,a6,f10 <__divdf3+0x39c>
     ed0:	006787b3          	add	a5,a5,t1
     ed4:	0067b733          	sltu	a4,a5,t1
     ed8:	01170733          	add	a4,a4,a7
     edc:	00e40433          	add	s0,s0,a4
     ee0:	fff28493          	addi	s1,t0,-1
     ee4:	0088e663          	bltu	a7,s0,ef0 <__divdf3+0x37c>
     ee8:	02889463          	bne	a7,s0,f10 <__divdf3+0x39c>
     eec:	0267e263          	bltu	a5,t1,f10 <__divdf3+0x39c>
     ef0:	00c46663          	bltu	s0,a2,efc <__divdf3+0x388>
     ef4:	00861e63          	bne	a2,s0,f10 <__divdf3+0x39c>
     ef8:	0107fc63          	bgeu	a5,a6,f10 <__divdf3+0x39c>
     efc:	006787b3          	add	a5,a5,t1
     f00:	0067b733          	sltu	a4,a5,t1
     f04:	01170733          	add	a4,a4,a7
     f08:	ffe28493          	addi	s1,t0,-2
     f0c:	00e40433          	add	s0,s0,a4
     f10:	41078833          	sub	a6,a5,a6
     f14:	40c40433          	sub	s0,s0,a2
     f18:	0107b7b3          	sltu	a5,a5,a6
     f1c:	40f40433          	sub	s0,s0,a5
     f20:	fff00f93          	li	t6,-1
     f24:	12888463          	beq	a7,s0,104c <__divdf3+0x4d8>
     f28:	02a45fb3          	divu	t6,s0,a0
     f2c:	01085713          	srli	a4,a6,0x10
     f30:	02a47433          	remu	s0,s0,a0
     f34:	000f8613          	mv	a2,t6
     f38:	03fe87b3          	mul	a5,t4,t6
     f3c:	01041413          	slli	s0,s0,0x10
     f40:	00876433          	or	s0,a4,s0
     f44:	00f47e63          	bgeu	s0,a5,f60 <__divdf3+0x3ec>
     f48:	01140433          	add	s0,s0,a7
     f4c:	ffff8613          	addi	a2,t6,-1
     f50:	01146863          	bltu	s0,a7,f60 <__divdf3+0x3ec>
     f54:	00f47663          	bgeu	s0,a5,f60 <__divdf3+0x3ec>
     f58:	ffef8613          	addi	a2,t6,-2
     f5c:	01140433          	add	s0,s0,a7
     f60:	40f40433          	sub	s0,s0,a5
     f64:	02a45733          	divu	a4,s0,a0
     f68:	01081813          	slli	a6,a6,0x10
     f6c:	01085813          	srli	a6,a6,0x10
     f70:	02a47433          	remu	s0,s0,a0
     f74:	00070793          	mv	a5,a4
     f78:	02ee8eb3          	mul	t4,t4,a4
     f7c:	01041413          	slli	s0,s0,0x10
     f80:	00886433          	or	s0,a6,s0
     f84:	01d47e63          	bgeu	s0,t4,fa0 <__divdf3+0x42c>
     f88:	01140433          	add	s0,s0,a7
     f8c:	fff70793          	addi	a5,a4,-1
     f90:	01146863          	bltu	s0,a7,fa0 <__divdf3+0x42c>
     f94:	01d47663          	bgeu	s0,t4,fa0 <__divdf3+0x42c>
     f98:	ffe70793          	addi	a5,a4,-2
     f9c:	01140433          	add	s0,s0,a7
     fa0:	01061613          	slli	a2,a2,0x10
     fa4:	00f66633          	or	a2,a2,a5
     fa8:	01061793          	slli	a5,a2,0x10
     fac:	0107d793          	srli	a5,a5,0x10
     fb0:	01065713          	srli	a4,a2,0x10
     fb4:	02ef0833          	mul	a6,t5,a4
     fb8:	41d40433          	sub	s0,s0,t4
     fbc:	02ff0f33          	mul	t5,t5,a5
     fc0:	03c78eb3          	mul	t4,a5,t3
     fc4:	03c70e33          	mul	t3,a4,t3
     fc8:	010ed793          	srli	a5,t4,0x10
     fcc:	01cf0f33          	add	t5,t5,t3
     fd0:	01e787b3          	add	a5,a5,t5
     fd4:	01c7f663          	bgeu	a5,t3,fe0 <__divdf3+0x46c>
     fd8:	00010737          	lui	a4,0x10
     fdc:	00e80833          	add	a6,a6,a4
     fe0:	0107d713          	srli	a4,a5,0x10
     fe4:	01070733          	add	a4,a4,a6
     fe8:	00010837          	lui	a6,0x10
     fec:	fff80813          	addi	a6,a6,-1 # ffff <__data_region_end+0xe03>
     ff0:	0107f533          	and	a0,a5,a6
     ff4:	01051513          	slli	a0,a0,0x10
     ff8:	010efeb3          	and	t4,t4,a6
     ffc:	01d50533          	add	a0,a0,t4
    1000:	00e46863          	bltu	s0,a4,1010 <__divdf3+0x49c>
    1004:	24e41463          	bne	s0,a4,124c <__divdf3+0x6d8>
    1008:	00060f93          	mv	t6,a2
    100c:	04050063          	beqz	a0,104c <__divdf3+0x4d8>
    1010:	00888433          	add	s0,a7,s0
    1014:	fff60f93          	addi	t6,a2,-1
    1018:	03146463          	bltu	s0,a7,1040 <__divdf3+0x4cc>
    101c:	00e46663          	bltu	s0,a4,1028 <__divdf3+0x4b4>
    1020:	22e41463          	bne	s0,a4,1248 <__divdf3+0x6d4>
    1024:	02a37063          	bgeu	t1,a0,1044 <__divdf3+0x4d0>
    1028:	00131793          	slli	a5,t1,0x1
    102c:	0067b333          	sltu	t1,a5,t1
    1030:	011308b3          	add	a7,t1,a7
    1034:	ffe60f93          	addi	t6,a2,-2
    1038:	01140433          	add	s0,s0,a7
    103c:	00078313          	mv	t1,a5
    1040:	00e41463          	bne	s0,a4,1048 <__divdf3+0x4d4>
    1044:	00650463          	beq	a0,t1,104c <__divdf3+0x4d8>
    1048:	001fef93          	ori	t6,t6,1
    104c:	3ff58793          	addi	a5,a1,1023
    1050:	10f05a63          	blez	a5,1164 <__divdf3+0x5f0>
    1054:	007ff713          	andi	a4,t6,7
    1058:	02070063          	beqz	a4,1078 <__divdf3+0x504>
    105c:	00fff713          	andi	a4,t6,15
    1060:	00400613          	li	a2,4
    1064:	00c70a63          	beq	a4,a2,1078 <__divdf3+0x504>
    1068:	004f8613          	addi	a2,t6,4
    106c:	01f63fb3          	sltu	t6,a2,t6
    1070:	01f484b3          	add	s1,s1,t6
    1074:	00060f93          	mv	t6,a2
    1078:	01000737          	lui	a4,0x1000
    107c:	00e4f733          	and	a4,s1,a4
    1080:	00070a63          	beqz	a4,1094 <__divdf3+0x520>
    1084:	ff0007b7          	lui	a5,0xff000
    1088:	fff78793          	addi	a5,a5,-1 # feffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xff000000>
    108c:	00f4f4b3          	and	s1,s1,a5
    1090:	40058793          	addi	a5,a1,1024
    1094:	7fe00713          	li	a4,2046
    1098:	0af74063          	blt	a4,a5,1138 <__divdf3+0x5c4>
    109c:	003fdf93          	srli	t6,t6,0x3
    10a0:	01d49713          	slli	a4,s1,0x1d
    10a4:	01f76733          	or	a4,a4,t6
    10a8:	0034d513          	srli	a0,s1,0x3
    10ac:	01479793          	slli	a5,a5,0x14
    10b0:	7ff00637          	lui	a2,0x7ff00
    10b4:	00c51513          	slli	a0,a0,0xc
    10b8:	02c12083          	lw	ra,44(sp)
    10bc:	02812403          	lw	s0,40(sp)
    10c0:	00c7f7b3          	and	a5,a5,a2
    10c4:	00c55513          	srli	a0,a0,0xc
    10c8:	00a7e533          	or	a0,a5,a0
    10cc:	01f69693          	slli	a3,a3,0x1f
    10d0:	00d567b3          	or	a5,a0,a3
    10d4:	02412483          	lw	s1,36(sp)
    10d8:	02012903          	lw	s2,32(sp)
    10dc:	01c12983          	lw	s3,28(sp)
    10e0:	01812a03          	lw	s4,24(sp)
    10e4:	01412a83          	lw	s5,20(sp)
    10e8:	01012b03          	lw	s6,16(sp)
    10ec:	00c12b83          	lw	s7,12(sp)
    10f0:	00812c03          	lw	s8,8(sp)
    10f4:	00070513          	mv	a0,a4
    10f8:	00078593          	mv	a1,a5
    10fc:	03010113          	addi	sp,sp,48
    1100:	00008067          	ret
    1104:	fff58593          	addi	a1,a1,-1
    1108:	00000793          	li	a5,0
    110c:	cb9ff06f          	j	dc4 <__divdf3+0x250>
    1110:	00098693          	mv	a3,s3
    1114:	000a8493          	mv	s1,s5
    1118:	00040f93          	mv	t6,s0
    111c:	000b8793          	mv	a5,s7
    1120:	00300713          	li	a4,3
    1124:	0ee78a63          	beq	a5,a4,1218 <__divdf3+0x6a4>
    1128:	00100713          	li	a4,1
    112c:	10e78063          	beq	a5,a4,122c <__divdf3+0x6b8>
    1130:	00200713          	li	a4,2
    1134:	f0e79ce3          	bne	a5,a4,104c <__divdf3+0x4d8>
    1138:	00000513          	li	a0,0
    113c:	00000713          	li	a4,0
    1140:	7ff00793          	li	a5,2047
    1144:	f69ff06f          	j	10ac <__divdf3+0x538>
    1148:	000c0693          	mv	a3,s8
    114c:	fd5ff06f          	j	1120 <__divdf3+0x5ac>
    1150:	000804b7          	lui	s1,0x80
    1154:	00000f93          	li	t6,0
    1158:	00000693          	li	a3,0
    115c:	00300793          	li	a5,3
    1160:	fc1ff06f          	j	1120 <__divdf3+0x5ac>
    1164:	00100513          	li	a0,1
    1168:	40f50533          	sub	a0,a0,a5
    116c:	03800713          	li	a4,56
    1170:	0aa74e63          	blt	a4,a0,122c <__divdf3+0x6b8>
    1174:	01f00713          	li	a4,31
    1178:	06a74663          	blt	a4,a0,11e4 <__divdf3+0x670>
    117c:	41e58593          	addi	a1,a1,1054
    1180:	00b497b3          	sll	a5,s1,a1
    1184:	00afd733          	srl	a4,t6,a0
    1188:	00bf95b3          	sll	a1,t6,a1
    118c:	00e7e7b3          	or	a5,a5,a4
    1190:	00b035b3          	snez	a1,a1
    1194:	00b7e7b3          	or	a5,a5,a1
    1198:	00a4d533          	srl	a0,s1,a0
    119c:	0077f713          	andi	a4,a5,7
    11a0:	02070063          	beqz	a4,11c0 <__divdf3+0x64c>
    11a4:	00f7f713          	andi	a4,a5,15
    11a8:	00400613          	li	a2,4
    11ac:	00c70a63          	beq	a4,a2,11c0 <__divdf3+0x64c>
    11b0:	00478713          	addi	a4,a5,4
    11b4:	00f737b3          	sltu	a5,a4,a5
    11b8:	00f50533          	add	a0,a0,a5
    11bc:	00070793          	mv	a5,a4
    11c0:	00800737          	lui	a4,0x800
    11c4:	00e57733          	and	a4,a0,a4
    11c8:	06071863          	bnez	a4,1238 <__divdf3+0x6c4>
    11cc:	01d51713          	slli	a4,a0,0x1d
    11d0:	0037d793          	srli	a5,a5,0x3
    11d4:	00f76733          	or	a4,a4,a5
    11d8:	00355513          	srli	a0,a0,0x3
    11dc:	00000793          	li	a5,0
    11e0:	ecdff06f          	j	10ac <__divdf3+0x538>
    11e4:	fe100713          	li	a4,-31
    11e8:	40f707b3          	sub	a5,a4,a5
    11ec:	02000613          	li	a2,32
    11f0:	00f4d7b3          	srl	a5,s1,a5
    11f4:	00000713          	li	a4,0
    11f8:	00c50663          	beq	a0,a2,1204 <__divdf3+0x690>
    11fc:	43e58713          	addi	a4,a1,1086
    1200:	00e49733          	sll	a4,s1,a4
    1204:	01f76733          	or	a4,a4,t6
    1208:	00e03733          	snez	a4,a4
    120c:	00e7e7b3          	or	a5,a5,a4
    1210:	00000513          	li	a0,0
    1214:	f89ff06f          	j	119c <__divdf3+0x628>
    1218:	00080537          	lui	a0,0x80
    121c:	00000713          	li	a4,0
    1220:	7ff00793          	li	a5,2047
    1224:	00000693          	li	a3,0
    1228:	e85ff06f          	j	10ac <__divdf3+0x538>
    122c:	00000513          	li	a0,0
    1230:	00000713          	li	a4,0
    1234:	fa9ff06f          	j	11dc <__divdf3+0x668>
    1238:	00000513          	li	a0,0
    123c:	00000713          	li	a4,0
    1240:	00100793          	li	a5,1
    1244:	e69ff06f          	j	10ac <__divdf3+0x538>
    1248:	000f8613          	mv	a2,t6
    124c:	00060f93          	mv	t6,a2
    1250:	df9ff06f          	j	1048 <__divdf3+0x4d4>

00001254 <__gedf2>:
    1254:	00100737          	lui	a4,0x100
    1258:	fff70713          	addi	a4,a4,-1 # fffff <__data_region_end+0xf0e03>
    125c:	0145d813          	srli	a6,a1,0x14
    1260:	00b778b3          	and	a7,a4,a1
    1264:	00050793          	mv	a5,a0
    1268:	00050313          	mv	t1,a0
    126c:	7ff87813          	andi	a6,a6,2047
    1270:	01f5d513          	srli	a0,a1,0x1f
    1274:	7ff00e93          	li	t4,2047
    1278:	0146d593          	srli	a1,a3,0x14
    127c:	00d77733          	and	a4,a4,a3
    1280:	00060e13          	mv	t3,a2
    1284:	7ff5f593          	andi	a1,a1,2047
    1288:	01f6d693          	srli	a3,a3,0x1f
    128c:	01d81a63          	bne	a6,t4,12a0 <__gedf2+0x4c>
    1290:	00f8eeb3          	or	t4,a7,a5
    1294:	080e8a63          	beqz	t4,1328 <__gedf2+0xd4>
    1298:	ffe00513          	li	a0,-2
    129c:	00008067          	ret
    12a0:	01d59663          	bne	a1,t4,12ac <__gedf2+0x58>
    12a4:	00c76eb3          	or	t4,a4,a2
    12a8:	fe0e98e3          	bnez	t4,1298 <__gedf2+0x44>
    12ac:	08081063          	bnez	a6,132c <__gedf2+0xd8>
    12b0:	00f8e7b3          	or	a5,a7,a5
    12b4:	0017b793          	seqz	a5,a5
    12b8:	00059663          	bnez	a1,12c4 <__gedf2+0x70>
    12bc:	00c76633          	or	a2,a4,a2
    12c0:	04060c63          	beqz	a2,1318 <__gedf2+0xc4>
    12c4:	00079c63          	bnez	a5,12dc <__gedf2+0x88>
    12c8:	00d51463          	bne	a0,a3,12d0 <__gedf2+0x7c>
    12cc:	0305d063          	bge	a1,a6,12ec <__gedf2+0x98>
    12d0:	04050063          	beqz	a0,1310 <__gedf2+0xbc>
    12d4:	fff00513          	li	a0,-1
    12d8:	00008067          	ret
    12dc:	fff00513          	li	a0,-1
    12e0:	00068a63          	beqz	a3,12f4 <__gedf2+0xa0>
    12e4:	00068513          	mv	a0,a3
    12e8:	00008067          	ret
    12ec:	00b85663          	bge	a6,a1,12f8 <__gedf2+0xa4>
    12f0:	fe0502e3          	beqz	a0,12d4 <__gedf2+0x80>
    12f4:	00008067          	ret
    12f8:	fd176ce3          	bltu	a4,a7,12d0 <__gedf2+0x7c>
    12fc:	02e89263          	bne	a7,a4,1320 <__gedf2+0xcc>
    1300:	fc6e68e3          	bltu	t3,t1,12d0 <__gedf2+0x7c>
    1304:	ffc366e3          	bltu	t1,t3,12f0 <__gedf2+0x9c>
    1308:	00000513          	li	a0,0
    130c:	00008067          	ret
    1310:	00100513          	li	a0,1
    1314:	00008067          	ret
    1318:	fe0798e3          	bnez	a5,1308 <__gedf2+0xb4>
    131c:	fb5ff06f          	j	12d0 <__gedf2+0x7c>
    1320:	fce8e8e3          	bltu	a7,a4,12f0 <__gedf2+0x9c>
    1324:	fe5ff06f          	j	1308 <__gedf2+0xb4>
    1328:	f7058ee3          	beq	a1,a6,12a4 <__gedf2+0x50>
    132c:	f8059ee3          	bnez	a1,12c8 <__gedf2+0x74>
    1330:	00000793          	li	a5,0
    1334:	f89ff06f          	j	12bc <__gedf2+0x68>

00001338 <__muldf3>:
    1338:	fd010113          	addi	sp,sp,-48
    133c:	01312e23          	sw	s3,28(sp)
    1340:	0145d993          	srli	s3,a1,0x14
    1344:	02812423          	sw	s0,40(sp)
    1348:	02912223          	sw	s1,36(sp)
    134c:	01412c23          	sw	s4,24(sp)
    1350:	01512a23          	sw	s5,20(sp)
    1354:	01712623          	sw	s7,12(sp)
    1358:	00c59493          	slli	s1,a1,0xc
    135c:	02112623          	sw	ra,44(sp)
    1360:	03212023          	sw	s2,32(sp)
    1364:	01612823          	sw	s6,16(sp)
    1368:	7ff9f993          	andi	s3,s3,2047
    136c:	00050413          	mv	s0,a0
    1370:	00060b93          	mv	s7,a2
    1374:	00068a93          	mv	s5,a3
    1378:	00c4d493          	srli	s1,s1,0xc
    137c:	01f5da13          	srli	s4,a1,0x1f
    1380:	0a098263          	beqz	s3,1424 <__muldf3+0xec>
    1384:	7ff00793          	li	a5,2047
    1388:	10f98063          	beq	s3,a5,1488 <__muldf3+0x150>
    138c:	01d55793          	srli	a5,a0,0x1d
    1390:	00349493          	slli	s1,s1,0x3
    1394:	0097e4b3          	or	s1,a5,s1
    1398:	008007b7          	lui	a5,0x800
    139c:	00f4e4b3          	or	s1,s1,a5
    13a0:	00351913          	slli	s2,a0,0x3
    13a4:	c0198993          	addi	s3,s3,-1023
    13a8:	00000b13          	li	s6,0
    13ac:	014ad513          	srli	a0,s5,0x14
    13b0:	00ca9413          	slli	s0,s5,0xc
    13b4:	7ff57513          	andi	a0,a0,2047
    13b8:	00c45413          	srli	s0,s0,0xc
    13bc:	01fada93          	srli	s5,s5,0x1f
    13c0:	10050063          	beqz	a0,14c0 <__muldf3+0x188>
    13c4:	7ff00793          	li	a5,2047
    13c8:	16f50063          	beq	a0,a5,1528 <__muldf3+0x1f0>
    13cc:	01dbd793          	srli	a5,s7,0x1d
    13d0:	00341413          	slli	s0,s0,0x3
    13d4:	0087e433          	or	s0,a5,s0
    13d8:	008007b7          	lui	a5,0x800
    13dc:	00f46433          	or	s0,s0,a5
    13e0:	c0150513          	addi	a0,a0,-1023 # 7fc01 <__data_region_end+0x70a05>
    13e4:	003b9793          	slli	a5,s7,0x3
    13e8:	00000713          	li	a4,0
    13ec:	002b1693          	slli	a3,s6,0x2
    13f0:	00e6e6b3          	or	a3,a3,a4
    13f4:	00a98533          	add	a0,s3,a0
    13f8:	fff68693          	addi	a3,a3,-1 # ffffff <__data_region_end+0xff0e03>
    13fc:	00e00813          	li	a6,14
    1400:	015a4633          	xor	a2,s4,s5
    1404:	00150593          	addi	a1,a0,1
    1408:	14d86c63          	bltu	a6,a3,1560 <__muldf3+0x228>
    140c:	0000c537          	lui	a0,0xc
    1410:	00269693          	slli	a3,a3,0x2
    1414:	74850513          	addi	a0,a0,1864 # c748 <__clz_tab+0x13c>
    1418:	00a686b3          	add	a3,a3,a0
    141c:	0006a683          	lw	a3,0(a3)
    1420:	00068067          	jr	a3
    1424:	00a4e933          	or	s2,s1,a0
    1428:	06090c63          	beqz	s2,14a0 <__muldf3+0x168>
    142c:	04048063          	beqz	s1,146c <__muldf3+0x134>
    1430:	00048513          	mv	a0,s1
    1434:	ebdfe0ef          	jal	ra,2f0 <__clzsi2>
    1438:	ff550713          	addi	a4,a0,-11
    143c:	01c00793          	li	a5,28
    1440:	02e7cc63          	blt	a5,a4,1478 <__muldf3+0x140>
    1444:	01d00793          	li	a5,29
    1448:	ff850913          	addi	s2,a0,-8
    144c:	40e787b3          	sub	a5,a5,a4
    1450:	012494b3          	sll	s1,s1,s2
    1454:	00f457b3          	srl	a5,s0,a5
    1458:	0097e4b3          	or	s1,a5,s1
    145c:	01241933          	sll	s2,s0,s2
    1460:	c0d00993          	li	s3,-1011
    1464:	40a989b3          	sub	s3,s3,a0
    1468:	f41ff06f          	j	13a8 <__muldf3+0x70>
    146c:	e85fe0ef          	jal	ra,2f0 <__clzsi2>
    1470:	02050513          	addi	a0,a0,32
    1474:	fc5ff06f          	j	1438 <__muldf3+0x100>
    1478:	fd850493          	addi	s1,a0,-40
    147c:	009414b3          	sll	s1,s0,s1
    1480:	00000913          	li	s2,0
    1484:	fddff06f          	j	1460 <__muldf3+0x128>
    1488:	00a4e933          	or	s2,s1,a0
    148c:	02090263          	beqz	s2,14b0 <__muldf3+0x178>
    1490:	00050913          	mv	s2,a0
    1494:	7ff00993          	li	s3,2047
    1498:	00300b13          	li	s6,3
    149c:	f11ff06f          	j	13ac <__muldf3+0x74>
    14a0:	00000493          	li	s1,0
    14a4:	00000993          	li	s3,0
    14a8:	00100b13          	li	s6,1
    14ac:	f01ff06f          	j	13ac <__muldf3+0x74>
    14b0:	00000493          	li	s1,0
    14b4:	7ff00993          	li	s3,2047
    14b8:	00200b13          	li	s6,2
    14bc:	ef1ff06f          	j	13ac <__muldf3+0x74>
    14c0:	017467b3          	or	a5,s0,s7
    14c4:	06078e63          	beqz	a5,1540 <__muldf3+0x208>
    14c8:	04040063          	beqz	s0,1508 <__muldf3+0x1d0>
    14cc:	00040513          	mv	a0,s0
    14d0:	e21fe0ef          	jal	ra,2f0 <__clzsi2>
    14d4:	ff550693          	addi	a3,a0,-11
    14d8:	01c00793          	li	a5,28
    14dc:	02d7ce63          	blt	a5,a3,1518 <__muldf3+0x1e0>
    14e0:	01d00713          	li	a4,29
    14e4:	ff850793          	addi	a5,a0,-8
    14e8:	40d70733          	sub	a4,a4,a3
    14ec:	00f41433          	sll	s0,s0,a5
    14f0:	00ebd733          	srl	a4,s7,a4
    14f4:	00876433          	or	s0,a4,s0
    14f8:	00fb97b3          	sll	a5,s7,a5
    14fc:	c0d00713          	li	a4,-1011
    1500:	40a70533          	sub	a0,a4,a0
    1504:	ee5ff06f          	j	13e8 <__muldf3+0xb0>
    1508:	000b8513          	mv	a0,s7
    150c:	de5fe0ef          	jal	ra,2f0 <__clzsi2>
    1510:	02050513          	addi	a0,a0,32
    1514:	fc1ff06f          	j	14d4 <__muldf3+0x19c>
    1518:	fd850413          	addi	s0,a0,-40
    151c:	008b9433          	sll	s0,s7,s0
    1520:	00000793          	li	a5,0
    1524:	fd9ff06f          	j	14fc <__muldf3+0x1c4>
    1528:	017467b3          	or	a5,s0,s7
    152c:	02078263          	beqz	a5,1550 <__muldf3+0x218>
    1530:	000b8793          	mv	a5,s7
    1534:	7ff00513          	li	a0,2047
    1538:	00300713          	li	a4,3
    153c:	eb1ff06f          	j	13ec <__muldf3+0xb4>
    1540:	00000413          	li	s0,0
    1544:	00000513          	li	a0,0
    1548:	00100713          	li	a4,1
    154c:	ea1ff06f          	j	13ec <__muldf3+0xb4>
    1550:	00000413          	li	s0,0
    1554:	7ff00513          	li	a0,2047
    1558:	00200713          	li	a4,2
    155c:	e91ff06f          	j	13ec <__muldf3+0xb4>
    1560:	00010f37          	lui	t5,0x10
    1564:	ffff0e93          	addi	t4,t5,-1 # ffff <__data_region_end+0xe03>
    1568:	01095713          	srli	a4,s2,0x10
    156c:	0107d893          	srli	a7,a5,0x10
    1570:	01d97933          	and	s2,s2,t4
    1574:	01d7f7b3          	and	a5,a5,t4
    1578:	03288833          	mul	a6,a7,s2
    157c:	02f906b3          	mul	a3,s2,a5
    1580:	02f70fb3          	mul	t6,a4,a5
    1584:	01f80333          	add	t1,a6,t6
    1588:	0106d813          	srli	a6,a3,0x10
    158c:	00680833          	add	a6,a6,t1
    1590:	03170e33          	mul	t3,a4,a7
    1594:	01f87463          	bgeu	a6,t6,159c <__muldf3+0x264>
    1598:	01ee0e33          	add	t3,t3,t5
    159c:	01085393          	srli	t2,a6,0x10
    15a0:	01d87833          	and	a6,a6,t4
    15a4:	01d6f6b3          	and	a3,a3,t4
    15a8:	01045f13          	srli	t5,s0,0x10
    15ac:	01d472b3          	and	t0,s0,t4
    15b0:	01081813          	slli	a6,a6,0x10
    15b4:	00d80833          	add	a6,a6,a3
    15b8:	02570eb3          	mul	t4,a4,t0
    15bc:	025906b3          	mul	a3,s2,t0
    15c0:	032f0933          	mul	s2,t5,s2
    15c4:	01d90333          	add	t1,s2,t4
    15c8:	0106d913          	srli	s2,a3,0x10
    15cc:	00690933          	add	s2,s2,t1
    15d0:	03e70733          	mul	a4,a4,t5
    15d4:	01d97663          	bgeu	s2,t4,15e0 <__muldf3+0x2a8>
    15d8:	00010337          	lui	t1,0x10
    15dc:	00670733          	add	a4,a4,t1
    15e0:	01095e93          	srli	t4,s2,0x10
    15e4:	000109b7          	lui	s3,0x10
    15e8:	00ee8eb3          	add	t4,t4,a4
    15ec:	fff98713          	addi	a4,s3,-1 # ffff <__data_region_end+0xe03>
    15f0:	00e97933          	and	s2,s2,a4
    15f4:	00e6f6b3          	and	a3,a3,a4
    15f8:	0104d413          	srli	s0,s1,0x10
    15fc:	01091913          	slli	s2,s2,0x10
    1600:	00e4f4b3          	and	s1,s1,a4
    1604:	02978733          	mul	a4,a5,s1
    1608:	00d90933          	add	s2,s2,a3
    160c:	012383b3          	add	t2,t2,s2
    1610:	02f40333          	mul	t1,s0,a5
    1614:	029886b3          	mul	a3,a7,s1
    1618:	028887b3          	mul	a5,a7,s0
    161c:	006688b3          	add	a7,a3,t1
    1620:	01075693          	srli	a3,a4,0x10
    1624:	011686b3          	add	a3,a3,a7
    1628:	0066f463          	bgeu	a3,t1,1630 <__muldf3+0x2f8>
    162c:	013787b3          	add	a5,a5,s3
    1630:	0106d893          	srli	a7,a3,0x10
    1634:	000109b7          	lui	s3,0x10
    1638:	00f88fb3          	add	t6,a7,a5
    163c:	fff98793          	addi	a5,s3,-1 # ffff <__data_region_end+0xe03>
    1640:	029288b3          	mul	a7,t0,s1
    1644:	00f6f6b3          	and	a3,a3,a5
    1648:	00f77733          	and	a4,a4,a5
    164c:	01069693          	slli	a3,a3,0x10
    1650:	00e686b3          	add	a3,a3,a4
    1654:	025407b3          	mul	a5,s0,t0
    1658:	029f04b3          	mul	s1,t5,s1
    165c:	028f0333          	mul	t1,t5,s0
    1660:	00f484b3          	add	s1,s1,a5
    1664:	0108d413          	srli	s0,a7,0x10
    1668:	009404b3          	add	s1,s0,s1
    166c:	00f4f463          	bgeu	s1,a5,1674 <__muldf3+0x33c>
    1670:	01330333          	add	t1,t1,s3
    1674:	000107b7          	lui	a5,0x10
    1678:	fff78793          	addi	a5,a5,-1 # ffff <__data_region_end+0xe03>
    167c:	00f4f733          	and	a4,s1,a5
    1680:	00f8f8b3          	and	a7,a7,a5
    1684:	01071713          	slli	a4,a4,0x10
    1688:	007e0e33          	add	t3,t3,t2
    168c:	01170733          	add	a4,a4,a7
    1690:	012e3933          	sltu	s2,t3,s2
    1694:	01d70733          	add	a4,a4,t4
    1698:	01270433          	add	s0,a4,s2
    169c:	00de0e33          	add	t3,t3,a3
    16a0:	00de36b3          	sltu	a3,t3,a3
    16a4:	01f408b3          	add	a7,s0,t6
    16a8:	00d88f33          	add	t5,a7,a3
    16ac:	01d73733          	sltu	a4,a4,t4
    16b0:	01243433          	sltu	s0,s0,s2
    16b4:	00876433          	or	s0,a4,s0
    16b8:	0104d493          	srli	s1,s1,0x10
    16bc:	01f8b8b3          	sltu	a7,a7,t6
    16c0:	00df36b3          	sltu	a3,t5,a3
    16c4:	00940433          	add	s0,s0,s1
    16c8:	00d8e6b3          	or	a3,a7,a3
    16cc:	00d40433          	add	s0,s0,a3
    16d0:	00640433          	add	s0,s0,t1
    16d4:	017f5793          	srli	a5,t5,0x17
    16d8:	00941413          	slli	s0,s0,0x9
    16dc:	00f46433          	or	s0,s0,a5
    16e0:	009e1793          	slli	a5,t3,0x9
    16e4:	0107e7b3          	or	a5,a5,a6
    16e8:	00f037b3          	snez	a5,a5
    16ec:	017e5e13          	srli	t3,t3,0x17
    16f0:	009f1713          	slli	a4,t5,0x9
    16f4:	01c7e7b3          	or	a5,a5,t3
    16f8:	00e7e7b3          	or	a5,a5,a4
    16fc:	01000737          	lui	a4,0x1000
    1700:	00e47733          	and	a4,s0,a4
    1704:	10070663          	beqz	a4,1810 <__muldf3+0x4d8>
    1708:	0017d713          	srli	a4,a5,0x1
    170c:	0017f793          	andi	a5,a5,1
    1710:	00f767b3          	or	a5,a4,a5
    1714:	01f41713          	slli	a4,s0,0x1f
    1718:	00e7e7b3          	or	a5,a5,a4
    171c:	00145413          	srli	s0,s0,0x1
    1720:	3ff58693          	addi	a3,a1,1023
    1724:	0ed05a63          	blez	a3,1818 <__muldf3+0x4e0>
    1728:	0077f713          	andi	a4,a5,7
    172c:	02070063          	beqz	a4,174c <__muldf3+0x414>
    1730:	00f7f713          	andi	a4,a5,15
    1734:	00400513          	li	a0,4
    1738:	00a70a63          	beq	a4,a0,174c <__muldf3+0x414>
    173c:	00478713          	addi	a4,a5,4
    1740:	00f737b3          	sltu	a5,a4,a5
    1744:	00f40433          	add	s0,s0,a5
    1748:	00070793          	mv	a5,a4
    174c:	01000737          	lui	a4,0x1000
    1750:	00e47733          	and	a4,s0,a4
    1754:	00070a63          	beqz	a4,1768 <__muldf3+0x430>
    1758:	ff000737          	lui	a4,0xff000
    175c:	fff70713          	addi	a4,a4,-1 # feffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xff000000>
    1760:	00e47433          	and	s0,s0,a4
    1764:	40058693          	addi	a3,a1,1024
    1768:	7fe00713          	li	a4,2046
    176c:	16d74a63          	blt	a4,a3,18e0 <__muldf3+0x5a8>
    1770:	0037d713          	srli	a4,a5,0x3
    1774:	01d41793          	slli	a5,s0,0x1d
    1778:	00e7e7b3          	or	a5,a5,a4
    177c:	00345413          	srli	s0,s0,0x3
    1780:	01469713          	slli	a4,a3,0x14
    1784:	00c41413          	slli	s0,s0,0xc
    1788:	7ff006b7          	lui	a3,0x7ff00
    178c:	00d77733          	and	a4,a4,a3
    1790:	00c45413          	srli	s0,s0,0xc
    1794:	00876433          	or	s0,a4,s0
    1798:	01f61613          	slli	a2,a2,0x1f
    179c:	02c12083          	lw	ra,44(sp)
    17a0:	00c46733          	or	a4,s0,a2
    17a4:	02812403          	lw	s0,40(sp)
    17a8:	02412483          	lw	s1,36(sp)
    17ac:	02012903          	lw	s2,32(sp)
    17b0:	01c12983          	lw	s3,28(sp)
    17b4:	01812a03          	lw	s4,24(sp)
    17b8:	01412a83          	lw	s5,20(sp)
    17bc:	01012b03          	lw	s6,16(sp)
    17c0:	00c12b83          	lw	s7,12(sp)
    17c4:	00078513          	mv	a0,a5
    17c8:	00070593          	mv	a1,a4
    17cc:	03010113          	addi	sp,sp,48
    17d0:	00008067          	ret
    17d4:	000a0613          	mv	a2,s4
    17d8:	00048413          	mv	s0,s1
    17dc:	00090793          	mv	a5,s2
    17e0:	000b0713          	mv	a4,s6
    17e4:	00200693          	li	a3,2
    17e8:	0ed70c63          	beq	a4,a3,18e0 <__muldf3+0x5a8>
    17ec:	00300693          	li	a3,3
    17f0:	0cd70e63          	beq	a4,a3,18cc <__muldf3+0x594>
    17f4:	00100693          	li	a3,1
    17f8:	f2d714e3          	bne	a4,a3,1720 <__muldf3+0x3e8>
    17fc:	00000413          	li	s0,0
    1800:	00000793          	li	a5,0
    1804:	08c0006f          	j	1890 <__muldf3+0x558>
    1808:	000a8613          	mv	a2,s5
    180c:	fd9ff06f          	j	17e4 <__muldf3+0x4ac>
    1810:	00050593          	mv	a1,a0
    1814:	f0dff06f          	j	1720 <__muldf3+0x3e8>
    1818:	00100513          	li	a0,1
    181c:	40d50533          	sub	a0,a0,a3
    1820:	03800713          	li	a4,56
    1824:	fca74ce3          	blt	a4,a0,17fc <__muldf3+0x4c4>
    1828:	01f00713          	li	a4,31
    182c:	06a74663          	blt	a4,a0,1898 <__muldf3+0x560>
    1830:	41e58593          	addi	a1,a1,1054
    1834:	00b41733          	sll	a4,s0,a1
    1838:	00a7d6b3          	srl	a3,a5,a0
    183c:	00b797b3          	sll	a5,a5,a1
    1840:	00d76733          	or	a4,a4,a3
    1844:	00f037b3          	snez	a5,a5
    1848:	00f767b3          	or	a5,a4,a5
    184c:	00a45433          	srl	s0,s0,a0
    1850:	0077f713          	andi	a4,a5,7
    1854:	02070063          	beqz	a4,1874 <__muldf3+0x53c>
    1858:	00f7f713          	andi	a4,a5,15
    185c:	00400693          	li	a3,4
    1860:	00d70a63          	beq	a4,a3,1874 <__muldf3+0x53c>
    1864:	00478713          	addi	a4,a5,4
    1868:	00f737b3          	sltu	a5,a4,a5
    186c:	00f40433          	add	s0,s0,a5
    1870:	00070793          	mv	a5,a4
    1874:	00800737          	lui	a4,0x800
    1878:	00e47733          	and	a4,s0,a4
    187c:	06071a63          	bnez	a4,18f0 <__muldf3+0x5b8>
    1880:	01d41713          	slli	a4,s0,0x1d
    1884:	0037d793          	srli	a5,a5,0x3
    1888:	00f767b3          	or	a5,a4,a5
    188c:	00345413          	srli	s0,s0,0x3
    1890:	00000693          	li	a3,0
    1894:	eedff06f          	j	1780 <__muldf3+0x448>
    1898:	fe100713          	li	a4,-31
    189c:	40d70733          	sub	a4,a4,a3
    18a0:	02000813          	li	a6,32
    18a4:	00e45733          	srl	a4,s0,a4
    18a8:	00000693          	li	a3,0
    18ac:	01050663          	beq	a0,a6,18b8 <__muldf3+0x580>
    18b0:	43e58593          	addi	a1,a1,1086
    18b4:	00b416b3          	sll	a3,s0,a1
    18b8:	00f6e7b3          	or	a5,a3,a5
    18bc:	00f037b3          	snez	a5,a5
    18c0:	00f767b3          	or	a5,a4,a5
    18c4:	00000413          	li	s0,0
    18c8:	f89ff06f          	j	1850 <__muldf3+0x518>
    18cc:	00080437          	lui	s0,0x80
    18d0:	00000793          	li	a5,0
    18d4:	7ff00693          	li	a3,2047
    18d8:	00000613          	li	a2,0
    18dc:	ea5ff06f          	j	1780 <__muldf3+0x448>
    18e0:	00000413          	li	s0,0
    18e4:	00000793          	li	a5,0
    18e8:	7ff00693          	li	a3,2047
    18ec:	e95ff06f          	j	1780 <__muldf3+0x448>
    18f0:	00000413          	li	s0,0
    18f4:	00000793          	li	a5,0
    18f8:	00100693          	li	a3,1
    18fc:	e85ff06f          	j	1780 <__muldf3+0x448>

00001900 <__subdf3>:
    1900:	00100837          	lui	a6,0x100
    1904:	fff80813          	addi	a6,a6,-1 # fffff <__data_region_end+0xf0e03>
    1908:	fe010113          	addi	sp,sp,-32
    190c:	00b877b3          	and	a5,a6,a1
    1910:	0145d713          	srli	a4,a1,0x14
    1914:	00d87833          	and	a6,a6,a3
    1918:	0146d313          	srli	t1,a3,0x14
    191c:	00812c23          	sw	s0,24(sp)
    1920:	00379793          	slli	a5,a5,0x3
    1924:	7ff77413          	andi	s0,a4,2047
    1928:	01d55713          	srli	a4,a0,0x1d
    192c:	00912a23          	sw	s1,20(sp)
    1930:	00f767b3          	or	a5,a4,a5
    1934:	01f5d493          	srli	s1,a1,0x1f
    1938:	01d65713          	srli	a4,a2,0x1d
    193c:	00351593          	slli	a1,a0,0x3
    1940:	00381813          	slli	a6,a6,0x3
    1944:	00112e23          	sw	ra,28(sp)
    1948:	01212823          	sw	s2,16(sp)
    194c:	01312623          	sw	s3,12(sp)
    1950:	7ff37313          	andi	t1,t1,2047
    1954:	7ff00513          	li	a0,2047
    1958:	01f6d693          	srli	a3,a3,0x1f
    195c:	01076733          	or	a4,a4,a6
    1960:	00361613          	slli	a2,a2,0x3
    1964:	00a31663          	bne	t1,a0,1970 <__subdf3+0x70>
    1968:	00c76533          	or	a0,a4,a2
    196c:	00051463          	bnez	a0,1974 <__subdf3+0x74>
    1970:	0016c693          	xori	a3,a3,1
    1974:	40640833          	sub	a6,s0,t1
    1978:	2c969863          	bne	a3,s1,1c48 <__subdf3+0x348>
    197c:	13005063          	blez	a6,1a9c <__subdf3+0x19c>
    1980:	04031063          	bnez	t1,19c0 <__subdf3+0xc0>
    1984:	00c766b3          	or	a3,a4,a2
    1988:	70068c63          	beqz	a3,20a0 <CONFIG_SRAM_SIZE+0xa0>
    198c:	fff80513          	addi	a0,a6,-1
    1990:	02051063          	bnez	a0,19b0 <__subdf3+0xb0>
    1994:	00c58633          	add	a2,a1,a2
    1998:	00b63533          	sltu	a0,a2,a1
    199c:	00e787b3          	add	a5,a5,a4
    19a0:	00a787b3          	add	a5,a5,a0
    19a4:	00060593          	mv	a1,a2
    19a8:	00100413          	li	s0,1
    19ac:	0700006f          	j	1a1c <__subdf3+0x11c>
    19b0:	7ff00693          	li	a3,2047
    19b4:	02d81063          	bne	a6,a3,19d4 <__subdf3+0xd4>
    19b8:	7ff00413          	li	s0,2047
    19bc:	2140006f          	j	1bd0 <__subdf3+0x2d0>
    19c0:	7ff00693          	li	a3,2047
    19c4:	20d40663          	beq	s0,a3,1bd0 <__subdf3+0x2d0>
    19c8:	008006b7          	lui	a3,0x800
    19cc:	00d76733          	or	a4,a4,a3
    19d0:	00080513          	mv	a0,a6
    19d4:	03800693          	li	a3,56
    19d8:	0aa6cc63          	blt	a3,a0,1a90 <__subdf3+0x190>
    19dc:	01f00693          	li	a3,31
    19e0:	06a6ce63          	blt	a3,a0,1a5c <__subdf3+0x15c>
    19e4:	02000813          	li	a6,32
    19e8:	40a80833          	sub	a6,a6,a0
    19ec:	010716b3          	sll	a3,a4,a6
    19f0:	00a658b3          	srl	a7,a2,a0
    19f4:	01061633          	sll	a2,a2,a6
    19f8:	0116e6b3          	or	a3,a3,a7
    19fc:	00c03633          	snez	a2,a2
    1a00:	00c6e633          	or	a2,a3,a2
    1a04:	00a75733          	srl	a4,a4,a0
    1a08:	00b60633          	add	a2,a2,a1
    1a0c:	00b63533          	sltu	a0,a2,a1
    1a10:	00f70733          	add	a4,a4,a5
    1a14:	00a707b3          	add	a5,a4,a0
    1a18:	00060593          	mv	a1,a2
    1a1c:	00800737          	lui	a4,0x800
    1a20:	00e7f733          	and	a4,a5,a4
    1a24:	1a070663          	beqz	a4,1bd0 <__subdf3+0x2d0>
    1a28:	00140413          	addi	s0,s0,1 # 80001 <__data_region_end+0x70e05>
    1a2c:	7ff00713          	li	a4,2047
    1a30:	5ce40a63          	beq	s0,a4,2004 <CONFIG_SRAM_SIZE+0x4>
    1a34:	ff800737          	lui	a4,0xff800
    1a38:	fff70713          	addi	a4,a4,-1 # ff7fffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xff800000>
    1a3c:	00e7f7b3          	and	a5,a5,a4
    1a40:	0015f513          	andi	a0,a1,1
    1a44:	0015d713          	srli	a4,a1,0x1
    1a48:	00a76533          	or	a0,a4,a0
    1a4c:	01f79593          	slli	a1,a5,0x1f
    1a50:	00a5e5b3          	or	a1,a1,a0
    1a54:	0017d793          	srli	a5,a5,0x1
    1a58:	1780006f          	j	1bd0 <__subdf3+0x2d0>
    1a5c:	fe050693          	addi	a3,a0,-32
    1a60:	02000893          	li	a7,32
    1a64:	00d756b3          	srl	a3,a4,a3
    1a68:	00000813          	li	a6,0
    1a6c:	01150863          	beq	a0,a7,1a7c <__subdf3+0x17c>
    1a70:	04000813          	li	a6,64
    1a74:	40a80533          	sub	a0,a6,a0
    1a78:	00a71833          	sll	a6,a4,a0
    1a7c:	00c86633          	or	a2,a6,a2
    1a80:	00c03633          	snez	a2,a2
    1a84:	00c6e633          	or	a2,a3,a2
    1a88:	00000713          	li	a4,0
    1a8c:	f7dff06f          	j	1a08 <__subdf3+0x108>
    1a90:	00c76633          	or	a2,a4,a2
    1a94:	00c03633          	snez	a2,a2
    1a98:	ff1ff06f          	j	1a88 <__subdf3+0x188>
    1a9c:	0e080263          	beqz	a6,1b80 <__subdf3+0x280>
    1aa0:	40830533          	sub	a0,t1,s0
    1aa4:	02041e63          	bnez	s0,1ae0 <__subdf3+0x1e0>
    1aa8:	00b7e6b3          	or	a3,a5,a1
    1aac:	52068c63          	beqz	a3,1fe4 <__subdf3+0x6e4>
    1ab0:	fff50693          	addi	a3,a0,-1
    1ab4:	00069c63          	bnez	a3,1acc <__subdf3+0x1cc>
    1ab8:	00c585b3          	add	a1,a1,a2
    1abc:	00e787b3          	add	a5,a5,a4
    1ac0:	00c5b633          	sltu	a2,a1,a2
    1ac4:	00c787b3          	add	a5,a5,a2
    1ac8:	ee1ff06f          	j	19a8 <__subdf3+0xa8>
    1acc:	7ff00813          	li	a6,2047
    1ad0:	03051263          	bne	a0,a6,1af4 <__subdf3+0x1f4>
    1ad4:	00070793          	mv	a5,a4
    1ad8:	00060593          	mv	a1,a2
    1adc:	eddff06f          	j	19b8 <__subdf3+0xb8>
    1ae0:	7ff00693          	li	a3,2047
    1ae4:	fed308e3          	beq	t1,a3,1ad4 <__subdf3+0x1d4>
    1ae8:	008006b7          	lui	a3,0x800
    1aec:	00d7e7b3          	or	a5,a5,a3
    1af0:	00050693          	mv	a3,a0
    1af4:	03800513          	li	a0,56
    1af8:	06d54e63          	blt	a0,a3,1b74 <__subdf3+0x274>
    1afc:	01f00513          	li	a0,31
    1b00:	04d54063          	blt	a0,a3,1b40 <__subdf3+0x240>
    1b04:	02000813          	li	a6,32
    1b08:	40d80833          	sub	a6,a6,a3
    1b0c:	01079533          	sll	a0,a5,a6
    1b10:	00d5d8b3          	srl	a7,a1,a3
    1b14:	010595b3          	sll	a1,a1,a6
    1b18:	01156533          	or	a0,a0,a7
    1b1c:	00b035b3          	snez	a1,a1
    1b20:	00b56533          	or	a0,a0,a1
    1b24:	00d7d7b3          	srl	a5,a5,a3
    1b28:	00c505b3          	add	a1,a0,a2
    1b2c:	00e787b3          	add	a5,a5,a4
    1b30:	00c5b633          	sltu	a2,a1,a2
    1b34:	00c787b3          	add	a5,a5,a2
    1b38:	00030413          	mv	s0,t1
    1b3c:	ee1ff06f          	j	1a1c <__subdf3+0x11c>
    1b40:	fe068513          	addi	a0,a3,-32 # 7fffe0 <__data_region_end+0x7f0de4>
    1b44:	02000893          	li	a7,32
    1b48:	00a7d833          	srl	a6,a5,a0
    1b4c:	00000513          	li	a0,0
    1b50:	01168863          	beq	a3,a7,1b60 <__subdf3+0x260>
    1b54:	04000513          	li	a0,64
    1b58:	40d50533          	sub	a0,a0,a3
    1b5c:	00a79533          	sll	a0,a5,a0
    1b60:	00b56533          	or	a0,a0,a1
    1b64:	00a03533          	snez	a0,a0
    1b68:	00a86533          	or	a0,a6,a0
    1b6c:	00000793          	li	a5,0
    1b70:	fb9ff06f          	j	1b28 <__subdf3+0x228>
    1b74:	00b7e533          	or	a0,a5,a1
    1b78:	00a03533          	snez	a0,a0
    1b7c:	ff1ff06f          	j	1b6c <__subdf3+0x26c>
    1b80:	00140693          	addi	a3,s0,1
    1b84:	7fe6f513          	andi	a0,a3,2046
    1b88:	08051863          	bnez	a0,1c18 <__subdf3+0x318>
    1b8c:	00b7e6b3          	or	a3,a5,a1
    1b90:	06041463          	bnez	s0,1bf8 <__subdf3+0x2f8>
    1b94:	46068063          	beqz	a3,1ff4 <__subdf3+0x6f4>
    1b98:	00c766b3          	or	a3,a4,a2
    1b9c:	02068a63          	beqz	a3,1bd0 <__subdf3+0x2d0>
    1ba0:	00c58633          	add	a2,a1,a2
    1ba4:	00e787b3          	add	a5,a5,a4
    1ba8:	00b63533          	sltu	a0,a2,a1
    1bac:	00a787b3          	add	a5,a5,a0
    1bb0:	00800737          	lui	a4,0x800
    1bb4:	00e7f733          	and	a4,a5,a4
    1bb8:	00060593          	mv	a1,a2
    1bbc:	00070a63          	beqz	a4,1bd0 <__subdf3+0x2d0>
    1bc0:	ff800737          	lui	a4,0xff800
    1bc4:	fff70713          	addi	a4,a4,-1 # ff7fffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xff800000>
    1bc8:	00e7f7b3          	and	a5,a5,a4
    1bcc:	00100413          	li	s0,1
    1bd0:	0075f713          	andi	a4,a1,7
    1bd4:	42070c63          	beqz	a4,200c <CONFIG_SRAM_SIZE+0xc>
    1bd8:	00f5f713          	andi	a4,a1,15
    1bdc:	00400693          	li	a3,4
    1be0:	42d70663          	beq	a4,a3,200c <CONFIG_SRAM_SIZE+0xc>
    1be4:	00458713          	addi	a4,a1,4
    1be8:	00b73533          	sltu	a0,a4,a1
    1bec:	00a787b3          	add	a5,a5,a0
    1bf0:	00070593          	mv	a1,a4
    1bf4:	4180006f          	j	200c <CONFIG_SRAM_SIZE+0xc>
    1bf8:	ec068ee3          	beqz	a3,1ad4 <__subdf3+0x1d4>
    1bfc:	00c76633          	or	a2,a4,a2
    1c00:	da060ce3          	beqz	a2,19b8 <__subdf3+0xb8>
    1c04:	00000493          	li	s1,0
    1c08:	004007b7          	lui	a5,0x400
    1c0c:	00000593          	li	a1,0
    1c10:	7ff00413          	li	s0,2047
    1c14:	3f80006f          	j	200c <CONFIG_SRAM_SIZE+0xc>
    1c18:	7ff00513          	li	a0,2047
    1c1c:	3ea68263          	beq	a3,a0,2000 <CONFIG_SRAM_SIZE>
    1c20:	00c58633          	add	a2,a1,a2
    1c24:	00b63533          	sltu	a0,a2,a1
    1c28:	00e787b3          	add	a5,a5,a4
    1c2c:	00a787b3          	add	a5,a5,a0
    1c30:	01f79513          	slli	a0,a5,0x1f
    1c34:	00165613          	srli	a2,a2,0x1
    1c38:	00c565b3          	or	a1,a0,a2
    1c3c:	0017d793          	srli	a5,a5,0x1
    1c40:	00068413          	mv	s0,a3
    1c44:	f8dff06f          	j	1bd0 <__subdf3+0x2d0>
    1c48:	0f005c63          	blez	a6,1d40 <__subdf3+0x440>
    1c4c:	08031e63          	bnez	t1,1ce8 <__subdf3+0x3e8>
    1c50:	00c766b3          	or	a3,a4,a2
    1c54:	44068663          	beqz	a3,20a0 <CONFIG_SRAM_SIZE+0xa0>
    1c58:	fff80513          	addi	a0,a6,-1
    1c5c:	02051063          	bnez	a0,1c7c <__subdf3+0x37c>
    1c60:	40c58633          	sub	a2,a1,a2
    1c64:	00c5b533          	sltu	a0,a1,a2
    1c68:	40e787b3          	sub	a5,a5,a4
    1c6c:	40a787b3          	sub	a5,a5,a0
    1c70:	00060593          	mv	a1,a2
    1c74:	00100413          	li	s0,1
    1c78:	0540006f          	j	1ccc <__subdf3+0x3cc>
    1c7c:	7ff00693          	li	a3,2047
    1c80:	d2d80ce3          	beq	a6,a3,19b8 <__subdf3+0xb8>
    1c84:	03800693          	li	a3,56
    1c88:	0aa6c663          	blt	a3,a0,1d34 <__subdf3+0x434>
    1c8c:	01f00693          	li	a3,31
    1c90:	06a6c863          	blt	a3,a0,1d00 <__subdf3+0x400>
    1c94:	02000813          	li	a6,32
    1c98:	40a80833          	sub	a6,a6,a0
    1c9c:	010716b3          	sll	a3,a4,a6
    1ca0:	00a658b3          	srl	a7,a2,a0
    1ca4:	01061633          	sll	a2,a2,a6
    1ca8:	0116e6b3          	or	a3,a3,a7
    1cac:	00c03633          	snez	a2,a2
    1cb0:	00c6e633          	or	a2,a3,a2
    1cb4:	00a75733          	srl	a4,a4,a0
    1cb8:	40c58633          	sub	a2,a1,a2
    1cbc:	00c5b533          	sltu	a0,a1,a2
    1cc0:	40e78733          	sub	a4,a5,a4
    1cc4:	40a707b3          	sub	a5,a4,a0
    1cc8:	00060593          	mv	a1,a2
    1ccc:	00800937          	lui	s2,0x800
    1cd0:	0127f733          	and	a4,a5,s2
    1cd4:	ee070ee3          	beqz	a4,1bd0 <__subdf3+0x2d0>
    1cd8:	fff90913          	addi	s2,s2,-1 # 7fffff <__data_region_end+0x7f0e03>
    1cdc:	0127f933          	and	s2,a5,s2
    1ce0:	00058993          	mv	s3,a1
    1ce4:	2140006f          	j	1ef8 <__subdf3+0x5f8>
    1ce8:	7ff00693          	li	a3,2047
    1cec:	eed402e3          	beq	s0,a3,1bd0 <__subdf3+0x2d0>
    1cf0:	008006b7          	lui	a3,0x800
    1cf4:	00d76733          	or	a4,a4,a3
    1cf8:	00080513          	mv	a0,a6
    1cfc:	f89ff06f          	j	1c84 <__subdf3+0x384>
    1d00:	fe050693          	addi	a3,a0,-32
    1d04:	02000893          	li	a7,32
    1d08:	00d756b3          	srl	a3,a4,a3
    1d0c:	00000813          	li	a6,0
    1d10:	01150863          	beq	a0,a7,1d20 <__subdf3+0x420>
    1d14:	04000813          	li	a6,64
    1d18:	40a80533          	sub	a0,a6,a0
    1d1c:	00a71833          	sll	a6,a4,a0
    1d20:	00c86633          	or	a2,a6,a2
    1d24:	00c03633          	snez	a2,a2
    1d28:	00c6e633          	or	a2,a3,a2
    1d2c:	00000713          	li	a4,0
    1d30:	f89ff06f          	j	1cb8 <__subdf3+0x3b8>
    1d34:	00c76633          	or	a2,a4,a2
    1d38:	00c03633          	snez	a2,a2
    1d3c:	ff1ff06f          	j	1d2c <__subdf3+0x42c>
    1d40:	0e080863          	beqz	a6,1e30 <__subdf3+0x530>
    1d44:	40830533          	sub	a0,t1,s0
    1d48:	04041263          	bnez	s0,1d8c <__subdf3+0x48c>
    1d4c:	00b7e833          	or	a6,a5,a1
    1d50:	34080c63          	beqz	a6,20a8 <CONFIG_SRAM_SIZE+0xa8>
    1d54:	fff50813          	addi	a6,a0,-1
    1d58:	00081e63          	bnez	a6,1d74 <__subdf3+0x474>
    1d5c:	40b605b3          	sub	a1,a2,a1
    1d60:	40f707b3          	sub	a5,a4,a5
    1d64:	00b63633          	sltu	a2,a2,a1
    1d68:	40c787b3          	sub	a5,a5,a2
    1d6c:	00068493          	mv	s1,a3
    1d70:	f05ff06f          	j	1c74 <__subdf3+0x374>
    1d74:	7ff00893          	li	a7,2047
    1d78:	03151463          	bne	a0,a7,1da0 <__subdf3+0x4a0>
    1d7c:	00070793          	mv	a5,a4
    1d80:	00060593          	mv	a1,a2
    1d84:	7ff00413          	li	s0,2047
    1d88:	0d00006f          	j	1e58 <__subdf3+0x558>
    1d8c:	7ff00813          	li	a6,2047
    1d90:	ff0306e3          	beq	t1,a6,1d7c <__subdf3+0x47c>
    1d94:	00800837          	lui	a6,0x800
    1d98:	0107e7b3          	or	a5,a5,a6
    1d9c:	00050813          	mv	a6,a0
    1da0:	03800513          	li	a0,56
    1da4:	09054063          	blt	a0,a6,1e24 <__subdf3+0x524>
    1da8:	01f00513          	li	a0,31
    1dac:	05054263          	blt	a0,a6,1df0 <__subdf3+0x4f0>
    1db0:	02000893          	li	a7,32
    1db4:	410888b3          	sub	a7,a7,a6
    1db8:	01179533          	sll	a0,a5,a7
    1dbc:	0105de33          	srl	t3,a1,a6
    1dc0:	011595b3          	sll	a1,a1,a7
    1dc4:	01c56533          	or	a0,a0,t3
    1dc8:	00b035b3          	snez	a1,a1
    1dcc:	00b56533          	or	a0,a0,a1
    1dd0:	0107d7b3          	srl	a5,a5,a6
    1dd4:	40a605b3          	sub	a1,a2,a0
    1dd8:	40f707b3          	sub	a5,a4,a5
    1ddc:	00b63633          	sltu	a2,a2,a1
    1de0:	40c787b3          	sub	a5,a5,a2
    1de4:	00030413          	mv	s0,t1
    1de8:	00068493          	mv	s1,a3
    1dec:	ee1ff06f          	j	1ccc <__subdf3+0x3cc>
    1df0:	fe080513          	addi	a0,a6,-32 # 7fffe0 <__data_region_end+0x7f0de4>
    1df4:	02000e13          	li	t3,32
    1df8:	00a7d8b3          	srl	a7,a5,a0
    1dfc:	00000513          	li	a0,0
    1e00:	01c80863          	beq	a6,t3,1e10 <__subdf3+0x510>
    1e04:	04000513          	li	a0,64
    1e08:	41050533          	sub	a0,a0,a6
    1e0c:	00a79533          	sll	a0,a5,a0
    1e10:	00b56533          	or	a0,a0,a1
    1e14:	00a03533          	snez	a0,a0
    1e18:	00a8e533          	or	a0,a7,a0
    1e1c:	00000793          	li	a5,0
    1e20:	fb5ff06f          	j	1dd4 <__subdf3+0x4d4>
    1e24:	00b7e533          	or	a0,a5,a1
    1e28:	00a03533          	snez	a0,a0
    1e2c:	ff1ff06f          	j	1e1c <__subdf3+0x51c>
    1e30:	00140513          	addi	a0,s0,1
    1e34:	7fe57513          	andi	a0,a0,2046
    1e38:	08051863          	bnez	a0,1ec8 <__subdf3+0x5c8>
    1e3c:	00c76533          	or	a0,a4,a2
    1e40:	00b7e833          	or	a6,a5,a1
    1e44:	06041263          	bnez	s0,1ea8 <__subdf3+0x5a8>
    1e48:	00081c63          	bnez	a6,1e60 <__subdf3+0x560>
    1e4c:	26050663          	beqz	a0,20b8 <CONFIG_SRAM_SIZE+0xb8>
    1e50:	00070793          	mv	a5,a4
    1e54:	00060593          	mv	a1,a2
    1e58:	00068493          	mv	s1,a3
    1e5c:	d75ff06f          	j	1bd0 <__subdf3+0x2d0>
    1e60:	d60508e3          	beqz	a0,1bd0 <__subdf3+0x2d0>
    1e64:	40c58833          	sub	a6,a1,a2
    1e68:	0105b8b3          	sltu	a7,a1,a6
    1e6c:	40e78533          	sub	a0,a5,a4
    1e70:	41150533          	sub	a0,a0,a7
    1e74:	008008b7          	lui	a7,0x800
    1e78:	011578b3          	and	a7,a0,a7
    1e7c:	00088c63          	beqz	a7,1e94 <__subdf3+0x594>
    1e80:	40b605b3          	sub	a1,a2,a1
    1e84:	40f707b3          	sub	a5,a4,a5
    1e88:	00b63633          	sltu	a2,a2,a1
    1e8c:	40c787b3          	sub	a5,a5,a2
    1e90:	fc9ff06f          	j	1e58 <__subdf3+0x558>
    1e94:	00a865b3          	or	a1,a6,a0
    1e98:	22058863          	beqz	a1,20c8 <CONFIG_SRAM_SIZE+0xc8>
    1e9c:	00050793          	mv	a5,a0
    1ea0:	00080593          	mv	a1,a6
    1ea4:	d2dff06f          	j	1bd0 <__subdf3+0x2d0>
    1ea8:	00081c63          	bnez	a6,1ec0 <__subdf3+0x5c0>
    1eac:	22050263          	beqz	a0,20d0 <CONFIG_SRAM_SIZE+0xd0>
    1eb0:	00070793          	mv	a5,a4
    1eb4:	00060593          	mv	a1,a2
    1eb8:	00068493          	mv	s1,a3
    1ebc:	afdff06f          	j	19b8 <__subdf3+0xb8>
    1ec0:	ae050ce3          	beqz	a0,19b8 <__subdf3+0xb8>
    1ec4:	d41ff06f          	j	1c04 <__subdf3+0x304>
    1ec8:	40c589b3          	sub	s3,a1,a2
    1ecc:	0135b533          	sltu	a0,a1,s3
    1ed0:	40e78933          	sub	s2,a5,a4
    1ed4:	40a90933          	sub	s2,s2,a0
    1ed8:	00800537          	lui	a0,0x800
    1edc:	00a97533          	and	a0,s2,a0
    1ee0:	08050463          	beqz	a0,1f68 <__subdf3+0x668>
    1ee4:	40b609b3          	sub	s3,a2,a1
    1ee8:	40f707b3          	sub	a5,a4,a5
    1eec:	01363633          	sltu	a2,a2,s3
    1ef0:	40c78933          	sub	s2,a5,a2
    1ef4:	00068493          	mv	s1,a3
    1ef8:	08090263          	beqz	s2,1f7c <__subdf3+0x67c>
    1efc:	00090513          	mv	a0,s2
    1f00:	bf0fe0ef          	jal	ra,2f0 <__clzsi2>
    1f04:	ff850713          	addi	a4,a0,-8 # 7ffff8 <__data_region_end+0x7f0dfc>
    1f08:	01f00793          	li	a5,31
    1f0c:	08e7c063          	blt	a5,a4,1f8c <__subdf3+0x68c>
    1f10:	02000793          	li	a5,32
    1f14:	40e787b3          	sub	a5,a5,a4
    1f18:	00e91933          	sll	s2,s2,a4
    1f1c:	00f9d7b3          	srl	a5,s3,a5
    1f20:	0127e7b3          	or	a5,a5,s2
    1f24:	00e995b3          	sll	a1,s3,a4
    1f28:	0a874463          	blt	a4,s0,1fd0 <__subdf3+0x6d0>
    1f2c:	40870733          	sub	a4,a4,s0
    1f30:	00170693          	addi	a3,a4,1
    1f34:	01f00613          	li	a2,31
    1f38:	06d64263          	blt	a2,a3,1f9c <__subdf3+0x69c>
    1f3c:	02000713          	li	a4,32
    1f40:	40d70733          	sub	a4,a4,a3
    1f44:	00e79633          	sll	a2,a5,a4
    1f48:	00d5d533          	srl	a0,a1,a3
    1f4c:	00e595b3          	sll	a1,a1,a4
    1f50:	00a66633          	or	a2,a2,a0
    1f54:	00b035b3          	snez	a1,a1
    1f58:	00b665b3          	or	a1,a2,a1
    1f5c:	00d7d7b3          	srl	a5,a5,a3
    1f60:	00000413          	li	s0,0
    1f64:	c6dff06f          	j	1bd0 <__subdf3+0x2d0>
    1f68:	0129e5b3          	or	a1,s3,s2
    1f6c:	f80596e3          	bnez	a1,1ef8 <__subdf3+0x5f8>
    1f70:	00000793          	li	a5,0
    1f74:	00000413          	li	s0,0
    1f78:	1480006f          	j	20c0 <CONFIG_SRAM_SIZE+0xc0>
    1f7c:	00098513          	mv	a0,s3
    1f80:	b70fe0ef          	jal	ra,2f0 <__clzsi2>
    1f84:	02050513          	addi	a0,a0,32
    1f88:	f7dff06f          	j	1f04 <__subdf3+0x604>
    1f8c:	fd850793          	addi	a5,a0,-40
    1f90:	00f997b3          	sll	a5,s3,a5
    1f94:	00000593          	li	a1,0
    1f98:	f91ff06f          	j	1f28 <__subdf3+0x628>
    1f9c:	fe170713          	addi	a4,a4,-31
    1fa0:	02000613          	li	a2,32
    1fa4:	00e7d733          	srl	a4,a5,a4
    1fa8:	00000513          	li	a0,0
    1fac:	00c68863          	beq	a3,a2,1fbc <__subdf3+0x6bc>
    1fb0:	04000513          	li	a0,64
    1fb4:	40d50533          	sub	a0,a0,a3
    1fb8:	00a79533          	sll	a0,a5,a0
    1fbc:	00a5e533          	or	a0,a1,a0
    1fc0:	00a03533          	snez	a0,a0
    1fc4:	00a765b3          	or	a1,a4,a0
    1fc8:	00000793          	li	a5,0
    1fcc:	f95ff06f          	j	1f60 <__subdf3+0x660>
    1fd0:	40e40433          	sub	s0,s0,a4
    1fd4:	ff800737          	lui	a4,0xff800
    1fd8:	fff70713          	addi	a4,a4,-1 # ff7fffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xff800000>
    1fdc:	00e7f7b3          	and	a5,a5,a4
    1fe0:	bf1ff06f          	j	1bd0 <__subdf3+0x2d0>
    1fe4:	00070793          	mv	a5,a4
    1fe8:	00060593          	mv	a1,a2
    1fec:	00050413          	mv	s0,a0
    1ff0:	be1ff06f          	j	1bd0 <__subdf3+0x2d0>
    1ff4:	00070793          	mv	a5,a4
    1ff8:	00060593          	mv	a1,a2
    1ffc:	bd5ff06f          	j	1bd0 <__subdf3+0x2d0>
    2000:	7ff00413          	li	s0,2047
    2004:	00000793          	li	a5,0
    2008:	00000593          	li	a1,0
    200c:	00800737          	lui	a4,0x800
    2010:	00e7f733          	and	a4,a5,a4
    2014:	00070e63          	beqz	a4,2030 <CONFIG_SRAM_SIZE+0x30>
    2018:	00140413          	addi	s0,s0,1
    201c:	7ff00713          	li	a4,2047
    2020:	0ce40063          	beq	s0,a4,20e0 <CONFIG_SRAM_SIZE+0xe0>
    2024:	ff800737          	lui	a4,0xff800
    2028:	fff70713          	addi	a4,a4,-1 # ff7fffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xff800000>
    202c:	00e7f7b3          	and	a5,a5,a4
    2030:	01d79713          	slli	a4,a5,0x1d
    2034:	0035d513          	srli	a0,a1,0x3
    2038:	00a76533          	or	a0,a4,a0
    203c:	7ff00713          	li	a4,2047
    2040:	0037d793          	srli	a5,a5,0x3
    2044:	00e41e63          	bne	s0,a4,2060 <CONFIG_SRAM_SIZE+0x60>
    2048:	00f56533          	or	a0,a0,a5
    204c:	00000793          	li	a5,0
    2050:	00050863          	beqz	a0,2060 <CONFIG_SRAM_SIZE+0x60>
    2054:	000807b7          	lui	a5,0x80
    2058:	00000513          	li	a0,0
    205c:	00000493          	li	s1,0
    2060:	01441713          	slli	a4,s0,0x14
    2064:	7ff006b7          	lui	a3,0x7ff00
    2068:	00c79793          	slli	a5,a5,0xc
    206c:	01c12083          	lw	ra,28(sp)
    2070:	01812403          	lw	s0,24(sp)
    2074:	00d77733          	and	a4,a4,a3
    2078:	00c7d793          	srli	a5,a5,0xc
    207c:	01f49493          	slli	s1,s1,0x1f
    2080:	00f767b3          	or	a5,a4,a5
    2084:	0097e733          	or	a4,a5,s1
    2088:	01012903          	lw	s2,16(sp)
    208c:	01412483          	lw	s1,20(sp)
    2090:	00c12983          	lw	s3,12(sp)
    2094:	00070593          	mv	a1,a4
    2098:	02010113          	addi	sp,sp,32
    209c:	00008067          	ret
    20a0:	00080413          	mv	s0,a6
    20a4:	b2dff06f          	j	1bd0 <__subdf3+0x2d0>
    20a8:	00070793          	mv	a5,a4
    20ac:	00060593          	mv	a1,a2
    20b0:	00050413          	mv	s0,a0
    20b4:	da5ff06f          	j	1e58 <__subdf3+0x558>
    20b8:	00000793          	li	a5,0
    20bc:	00000593          	li	a1,0
    20c0:	00000493          	li	s1,0
    20c4:	f49ff06f          	j	200c <CONFIG_SRAM_SIZE+0xc>
    20c8:	00000793          	li	a5,0
    20cc:	ff5ff06f          	j	20c0 <CONFIG_SRAM_SIZE+0xc0>
    20d0:	00000593          	li	a1,0
    20d4:	00000493          	li	s1,0
    20d8:	004007b7          	lui	a5,0x400
    20dc:	b35ff06f          	j	1c10 <__subdf3+0x310>
    20e0:	00000793          	li	a5,0
    20e4:	00000593          	li	a1,0
    20e8:	f49ff06f          	j	2030 <CONFIG_SRAM_SIZE+0x30>

000020ec <__floatunsidf>:
    20ec:	ff010113          	addi	sp,sp,-16
    20f0:	00812423          	sw	s0,8(sp)
    20f4:	00112623          	sw	ra,12(sp)
    20f8:	00050413          	mv	s0,a0
    20fc:	06050263          	beqz	a0,2160 <__floatunsidf+0x74>
    2100:	9f0fe0ef          	jal	ra,2f0 <__clzsi2>
    2104:	41e00713          	li	a4,1054
    2108:	00a00793          	li	a5,10
    210c:	40a70733          	sub	a4,a4,a0
    2110:	04a7c063          	blt	a5,a0,2150 <__floatunsidf+0x64>
    2114:	00b00793          	li	a5,11
    2118:	40a787b3          	sub	a5,a5,a0
    211c:	01550513          	addi	a0,a0,21
    2120:	00f457b3          	srl	a5,s0,a5
    2124:	00a41433          	sll	s0,s0,a0
    2128:	00c12083          	lw	ra,12(sp)
    212c:	00040513          	mv	a0,s0
    2130:	00c79793          	slli	a5,a5,0xc
    2134:	00812403          	lw	s0,8(sp)
    2138:	01471713          	slli	a4,a4,0x14
    213c:	00c7d793          	srli	a5,a5,0xc
    2140:	00f766b3          	or	a3,a4,a5
    2144:	00068593          	mv	a1,a3
    2148:	01010113          	addi	sp,sp,16
    214c:	00008067          	ret
    2150:	ff550793          	addi	a5,a0,-11
    2154:	00f417b3          	sll	a5,s0,a5
    2158:	00000413          	li	s0,0
    215c:	fcdff06f          	j	2128 <__floatunsidf+0x3c>
    2160:	00000793          	li	a5,0
    2164:	00000713          	li	a4,0
    2168:	fc1ff06f          	j	2128 <__floatunsidf+0x3c>

0000216c <__divsf3>:
    216c:	fe010113          	addi	sp,sp,-32
    2170:	00912a23          	sw	s1,20(sp)
    2174:	01755493          	srli	s1,a0,0x17
    2178:	01212823          	sw	s2,16(sp)
    217c:	01312623          	sw	s3,12(sp)
    2180:	01412423          	sw	s4,8(sp)
    2184:	00951993          	slli	s3,a0,0x9
    2188:	00112e23          	sw	ra,28(sp)
    218c:	00812c23          	sw	s0,24(sp)
    2190:	01512223          	sw	s5,4(sp)
    2194:	0ff4f493          	andi	s1,s1,255
    2198:	00058a13          	mv	s4,a1
    219c:	0099d993          	srli	s3,s3,0x9
    21a0:	01f55913          	srli	s2,a0,0x1f
    21a4:	08048463          	beqz	s1,222c <__kernel_ram_size+0x38>
    21a8:	0ff00793          	li	a5,255
    21ac:	0af48063          	beq	s1,a5,224c <__kernel_ram_size+0x58>
    21b0:	00399993          	slli	s3,s3,0x3
    21b4:	040007b7          	lui	a5,0x4000
    21b8:	00f9e9b3          	or	s3,s3,a5
    21bc:	f8148493          	addi	s1,s1,-127 # 7ff81 <__data_region_end+0x70d85>
    21c0:	00000a93          	li	s5,0
    21c4:	017a5513          	srli	a0,s4,0x17
    21c8:	009a1413          	slli	s0,s4,0x9
    21cc:	0ff57513          	andi	a0,a0,255
    21d0:	00945413          	srli	s0,s0,0x9
    21d4:	01fa5a13          	srli	s4,s4,0x1f
    21d8:	08050a63          	beqz	a0,226c <__kernel_ram_size+0x78>
    21dc:	0ff00793          	li	a5,255
    21e0:	0af50663          	beq	a0,a5,228c <__kernel_ram_size+0x98>
    21e4:	00341413          	slli	s0,s0,0x3
    21e8:	040007b7          	lui	a5,0x4000
    21ec:	00f46433          	or	s0,s0,a5
    21f0:	f8150513          	addi	a0,a0,-127
    21f4:	00000793          	li	a5,0
    21f8:	002a9693          	slli	a3,s5,0x2
    21fc:	00f6e6b3          	or	a3,a3,a5
    2200:	fff68693          	addi	a3,a3,-1 # 7fefffff <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7cf50f7f>
    2204:	00e00713          	li	a4,14
    2208:	01494633          	xor	a2,s2,s4
    220c:	40a48533          	sub	a0,s1,a0
    2210:	08d76e63          	bltu	a4,a3,22ac <__kernel_ram_size+0xb8>
    2214:	0000c737          	lui	a4,0xc
    2218:	78470713          	addi	a4,a4,1924 # c784 <__clz_tab+0x178>
    221c:	00269693          	slli	a3,a3,0x2
    2220:	00e686b3          	add	a3,a3,a4
    2224:	0006a703          	lw	a4,0(a3)
    2228:	00070067          	jr	a4
    222c:	02098a63          	beqz	s3,2260 <__kernel_ram_size+0x6c>
    2230:	00098513          	mv	a0,s3
    2234:	8bcfe0ef          	jal	ra,2f0 <__clzsi2>
    2238:	ffb50793          	addi	a5,a0,-5
    223c:	f8a00493          	li	s1,-118
    2240:	00f999b3          	sll	s3,s3,a5
    2244:	40a484b3          	sub	s1,s1,a0
    2248:	f79ff06f          	j	21c0 <__divsf3+0x54>
    224c:	0ff00493          	li	s1,255
    2250:	00200a93          	li	s5,2
    2254:	f60988e3          	beqz	s3,21c4 <__divsf3+0x58>
    2258:	00300a93          	li	s5,3
    225c:	f69ff06f          	j	21c4 <__divsf3+0x58>
    2260:	00000493          	li	s1,0
    2264:	00100a93          	li	s5,1
    2268:	f5dff06f          	j	21c4 <__divsf3+0x58>
    226c:	02040a63          	beqz	s0,22a0 <__kernel_ram_size+0xac>
    2270:	00040513          	mv	a0,s0
    2274:	87cfe0ef          	jal	ra,2f0 <__clzsi2>
    2278:	ffb50793          	addi	a5,a0,-5
    227c:	00f41433          	sll	s0,s0,a5
    2280:	f8a00793          	li	a5,-118
    2284:	40a78533          	sub	a0,a5,a0
    2288:	f6dff06f          	j	21f4 <__kernel_ram_size>
    228c:	0ff00513          	li	a0,255
    2290:	00200793          	li	a5,2
    2294:	f60402e3          	beqz	s0,21f8 <__kernel_ram_size+0x4>
    2298:	00300793          	li	a5,3
    229c:	f5dff06f          	j	21f8 <__kernel_ram_size+0x4>
    22a0:	00000513          	li	a0,0
    22a4:	00100793          	li	a5,1
    22a8:	f51ff06f          	j	21f8 <__kernel_ram_size+0x4>
    22ac:	00541813          	slli	a6,s0,0x5
    22b0:	1289f463          	bgeu	s3,s0,23d8 <__kernel_ram_size+0x1e4>
    22b4:	fff50513          	addi	a0,a0,-1
    22b8:	00000693          	li	a3,0
    22bc:	01085413          	srli	s0,a6,0x10
    22c0:	0289d333          	divu	t1,s3,s0
    22c4:	000107b7          	lui	a5,0x10
    22c8:	fff78793          	addi	a5,a5,-1 # ffff <__data_region_end+0xe03>
    22cc:	00f877b3          	and	a5,a6,a5
    22d0:	0106d693          	srli	a3,a3,0x10
    22d4:	0289f733          	remu	a4,s3,s0
    22d8:	00030593          	mv	a1,t1
    22dc:	026788b3          	mul	a7,a5,t1
    22e0:	01071713          	slli	a4,a4,0x10
    22e4:	00e6e733          	or	a4,a3,a4
    22e8:	01177e63          	bgeu	a4,a7,2304 <__kernel_ram_size+0x110>
    22ec:	01070733          	add	a4,a4,a6
    22f0:	fff30593          	addi	a1,t1,-1 # ffff <__data_region_end+0xe03>
    22f4:	01076863          	bltu	a4,a6,2304 <__kernel_ram_size+0x110>
    22f8:	01177663          	bgeu	a4,a7,2304 <__kernel_ram_size+0x110>
    22fc:	ffe30593          	addi	a1,t1,-2
    2300:	01070733          	add	a4,a4,a6
    2304:	41170733          	sub	a4,a4,a7
    2308:	028758b3          	divu	a7,a4,s0
    230c:	02877733          	remu	a4,a4,s0
    2310:	031786b3          	mul	a3,a5,a7
    2314:	01071793          	slli	a5,a4,0x10
    2318:	00088713          	mv	a4,a7
    231c:	00d7fe63          	bgeu	a5,a3,2338 <__kernel_ram_size+0x144>
    2320:	010787b3          	add	a5,a5,a6
    2324:	fff88713          	addi	a4,a7,-1 # 7fffff <__data_region_end+0x7f0e03>
    2328:	0107e863          	bltu	a5,a6,2338 <__kernel_ram_size+0x144>
    232c:	00d7f663          	bgeu	a5,a3,2338 <__kernel_ram_size+0x144>
    2330:	ffe88713          	addi	a4,a7,-2
    2334:	010787b3          	add	a5,a5,a6
    2338:	01059413          	slli	s0,a1,0x10
    233c:	40d787b3          	sub	a5,a5,a3
    2340:	00e46433          	or	s0,s0,a4
    2344:	00f037b3          	snez	a5,a5
    2348:	00f46433          	or	s0,s0,a5
    234c:	07f50713          	addi	a4,a0,127
    2350:	0ce05e63          	blez	a4,242c <__kernel_ram_size+0x238>
    2354:	00747793          	andi	a5,s0,7
    2358:	00078a63          	beqz	a5,236c <__kernel_ram_size+0x178>
    235c:	00f47793          	andi	a5,s0,15
    2360:	00400693          	li	a3,4
    2364:	00d78463          	beq	a5,a3,236c <__kernel_ram_size+0x178>
    2368:	00440413          	addi	s0,s0,4
    236c:	080007b7          	lui	a5,0x8000
    2370:	00f477b3          	and	a5,s0,a5
    2374:	00078a63          	beqz	a5,2388 <__kernel_ram_size+0x194>
    2378:	f80007b7          	lui	a5,0xf8000
    237c:	fff78793          	addi	a5,a5,-1 # f7ffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xf8000000>
    2380:	00f47433          	and	s0,s0,a5
    2384:	08050713          	addi	a4,a0,128
    2388:	0fe00793          	li	a5,254
    238c:	00345413          	srli	s0,s0,0x3
    2390:	06e7cc63          	blt	a5,a4,2408 <__kernel_ram_size+0x214>
    2394:	01771793          	slli	a5,a4,0x17
    2398:	00941413          	slli	s0,s0,0x9
    239c:	7f800737          	lui	a4,0x7f800
    23a0:	00e7f7b3          	and	a5,a5,a4
    23a4:	00945413          	srli	s0,s0,0x9
    23a8:	0087e433          	or	s0,a5,s0
    23ac:	01f61513          	slli	a0,a2,0x1f
    23b0:	01c12083          	lw	ra,28(sp)
    23b4:	00a46533          	or	a0,s0,a0
    23b8:	01812403          	lw	s0,24(sp)
    23bc:	01412483          	lw	s1,20(sp)
    23c0:	01012903          	lw	s2,16(sp)
    23c4:	00c12983          	lw	s3,12(sp)
    23c8:	00812a03          	lw	s4,8(sp)
    23cc:	00412a83          	lw	s5,4(sp)
    23d0:	02010113          	addi	sp,sp,32
    23d4:	00008067          	ret
    23d8:	01f99693          	slli	a3,s3,0x1f
    23dc:	0019d993          	srli	s3,s3,0x1
    23e0:	eddff06f          	j	22bc <__kernel_ram_size+0xc8>
    23e4:	00090613          	mv	a2,s2
    23e8:	00098413          	mv	s0,s3
    23ec:	000a8793          	mv	a5,s5
    23f0:	00300713          	li	a4,3
    23f4:	08e78863          	beq	a5,a4,2484 <__kernel_ram_size+0x290>
    23f8:	00100713          	li	a4,1
    23fc:	08e78c63          	beq	a5,a4,2494 <__kernel_ram_size+0x2a0>
    2400:	00200713          	li	a4,2
    2404:	f4e794e3          	bne	a5,a4,234c <__kernel_ram_size+0x158>
    2408:	00000413          	li	s0,0
    240c:	0ff00713          	li	a4,255
    2410:	f85ff06f          	j	2394 <__kernel_ram_size+0x1a0>
    2414:	000a0613          	mv	a2,s4
    2418:	fd9ff06f          	j	23f0 <__kernel_ram_size+0x1fc>
    241c:	00400437          	lui	s0,0x400
    2420:	00000613          	li	a2,0
    2424:	00300793          	li	a5,3
    2428:	fc9ff06f          	j	23f0 <__kernel_ram_size+0x1fc>
    242c:	00100793          	li	a5,1
    2430:	40e787b3          	sub	a5,a5,a4
    2434:	01b00713          	li	a4,27
    2438:	04f74e63          	blt	a4,a5,2494 <__kernel_ram_size+0x2a0>
    243c:	09e50513          	addi	a0,a0,158
    2440:	00f457b3          	srl	a5,s0,a5
    2444:	00a41433          	sll	s0,s0,a0
    2448:	00803433          	snez	s0,s0
    244c:	0087e433          	or	s0,a5,s0
    2450:	00747793          	andi	a5,s0,7
    2454:	00078a63          	beqz	a5,2468 <__kernel_ram_size+0x274>
    2458:	00f47793          	andi	a5,s0,15
    245c:	00400713          	li	a4,4
    2460:	00e78463          	beq	a5,a4,2468 <__kernel_ram_size+0x274>
    2464:	00440413          	addi	s0,s0,4 # 400004 <__data_region_end+0x3f0e08>
    2468:	040007b7          	lui	a5,0x4000
    246c:	00f477b3          	and	a5,s0,a5
    2470:	00345413          	srli	s0,s0,0x3
    2474:	02078263          	beqz	a5,2498 <__kernel_ram_size+0x2a4>
    2478:	00000413          	li	s0,0
    247c:	00100713          	li	a4,1
    2480:	f15ff06f          	j	2394 <__kernel_ram_size+0x1a0>
    2484:	00400437          	lui	s0,0x400
    2488:	0ff00713          	li	a4,255
    248c:	00000613          	li	a2,0
    2490:	f05ff06f          	j	2394 <__kernel_ram_size+0x1a0>
    2494:	00000413          	li	s0,0
    2498:	00000713          	li	a4,0
    249c:	ef9ff06f          	j	2394 <__kernel_ram_size+0x1a0>

000024a0 <__subsf3>:
    24a0:	00800737          	lui	a4,0x800
    24a4:	ff010113          	addi	sp,sp,-16
    24a8:	fff70713          	addi	a4,a4,-1 # 7fffff <__data_region_end+0x7f0e03>
    24ac:	0175d613          	srli	a2,a1,0x17
    24b0:	00a777b3          	and	a5,a4,a0
    24b4:	00812423          	sw	s0,8(sp)
    24b8:	00b77733          	and	a4,a4,a1
    24bc:	00912223          	sw	s1,4(sp)
    24c0:	01755413          	srli	s0,a0,0x17
    24c4:	00112623          	sw	ra,12(sp)
    24c8:	01212023          	sw	s2,0(sp)
    24cc:	0ff67613          	andi	a2,a2,255
    24d0:	0ff00693          	li	a3,255
    24d4:	0ff47413          	andi	s0,s0,255
    24d8:	01f55493          	srli	s1,a0,0x1f
    24dc:	00379793          	slli	a5,a5,0x3
    24e0:	01f5d593          	srli	a1,a1,0x1f
    24e4:	00371713          	slli	a4,a4,0x3
    24e8:	00d61463          	bne	a2,a3,24f0 <__subsf3+0x50>
    24ec:	00071463          	bnez	a4,24f4 <__subsf3+0x54>
    24f0:	0015c593          	xori	a1,a1,1
    24f4:	40c406b3          	sub	a3,s0,a2
    24f8:	18959a63          	bne	a1,s1,268c <__subsf3+0x1ec>
    24fc:	0ad05063          	blez	a3,259c <__subsf3+0xfc>
    2500:	02061663          	bnez	a2,252c <__subsf3+0x8c>
    2504:	18070063          	beqz	a4,2684 <__subsf3+0x1e4>
    2508:	fff68613          	addi	a2,a3,-1
    250c:	00061863          	bnez	a2,251c <__subsf3+0x7c>
    2510:	00e787b3          	add	a5,a5,a4
    2514:	00100413          	li	s0,1
    2518:	0500006f          	j	2568 <__subsf3+0xc8>
    251c:	0ff00593          	li	a1,255
    2520:	02b69063          	bne	a3,a1,2540 <__subsf3+0xa0>
    2524:	0ff00413          	li	s0,255
    2528:	1180006f          	j	2640 <__subsf3+0x1a0>
    252c:	0ff00613          	li	a2,255
    2530:	10c40863          	beq	s0,a2,2640 <__subsf3+0x1a0>
    2534:	04000637          	lui	a2,0x4000
    2538:	00c76733          	or	a4,a4,a2
    253c:	00068613          	mv	a2,a3
    2540:	01b00593          	li	a1,27
    2544:	00100693          	li	a3,1
    2548:	00c5ce63          	blt	a1,a2,2564 <__subsf3+0xc4>
    254c:	02000693          	li	a3,32
    2550:	40c686b3          	sub	a3,a3,a2
    2554:	00c755b3          	srl	a1,a4,a2
    2558:	00d71733          	sll	a4,a4,a3
    255c:	00e03733          	snez	a4,a4
    2560:	00e5e6b3          	or	a3,a1,a4
    2564:	00d787b3          	add	a5,a5,a3
    2568:	04000737          	lui	a4,0x4000
    256c:	00e7f733          	and	a4,a5,a4
    2570:	0c070863          	beqz	a4,2640 <__subsf3+0x1a0>
    2574:	00140413          	addi	s0,s0,1 # 400001 <__data_region_end+0x3f0e05>
    2578:	0ff00713          	li	a4,255
    257c:	30e40263          	beq	s0,a4,2880 <__subsf3+0x3e0>
    2580:	7e000737          	lui	a4,0x7e000
    2584:	0017f693          	andi	a3,a5,1
    2588:	fff70713          	addi	a4,a4,-1 # 7dffffff <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7b050f7f>
    258c:	0017d793          	srli	a5,a5,0x1
    2590:	00e7f7b3          	and	a5,a5,a4
    2594:	00d7e7b3          	or	a5,a5,a3
    2598:	0a80006f          	j	2640 <__subsf3+0x1a0>
    259c:	06068663          	beqz	a3,2608 <__subsf3+0x168>
    25a0:	408606b3          	sub	a3,a2,s0
    25a4:	02041063          	bnez	s0,25c4 <__subsf3+0x124>
    25a8:	2c078263          	beqz	a5,286c <__subsf3+0x3cc>
    25ac:	fff68593          	addi	a1,a3,-1
    25b0:	f60580e3          	beqz	a1,2510 <__subsf3+0x70>
    25b4:	0ff00513          	li	a0,255
    25b8:	02a69063          	bne	a3,a0,25d8 <__subsf3+0x138>
    25bc:	00070793          	mv	a5,a4
    25c0:	f65ff06f          	j	2524 <__subsf3+0x84>
    25c4:	0ff00593          	li	a1,255
    25c8:	feb60ae3          	beq	a2,a1,25bc <__subsf3+0x11c>
    25cc:	040005b7          	lui	a1,0x4000
    25d0:	00b7e7b3          	or	a5,a5,a1
    25d4:	00068593          	mv	a1,a3
    25d8:	01b00513          	li	a0,27
    25dc:	00100693          	li	a3,1
    25e0:	00b54e63          	blt	a0,a1,25fc <__subsf3+0x15c>
    25e4:	02000693          	li	a3,32
    25e8:	40b686b3          	sub	a3,a3,a1
    25ec:	00b7d533          	srl	a0,a5,a1
    25f0:	00d797b3          	sll	a5,a5,a3
    25f4:	00f037b3          	snez	a5,a5
    25f8:	00f566b3          	or	a3,a0,a5
    25fc:	00e687b3          	add	a5,a3,a4
    2600:	00060413          	mv	s0,a2
    2604:	f65ff06f          	j	2568 <__subsf3+0xc8>
    2608:	00140693          	addi	a3,s0,1
    260c:	0fe6f613          	andi	a2,a3,254
    2610:	06061263          	bnez	a2,2674 <__subsf3+0x1d4>
    2614:	04041463          	bnez	s0,265c <__subsf3+0x1bc>
    2618:	24078e63          	beqz	a5,2874 <__subsf3+0x3d4>
    261c:	02070263          	beqz	a4,2640 <__subsf3+0x1a0>
    2620:	00e787b3          	add	a5,a5,a4
    2624:	04000737          	lui	a4,0x4000
    2628:	00e7f733          	and	a4,a5,a4
    262c:	00070a63          	beqz	a4,2640 <__subsf3+0x1a0>
    2630:	fc000737          	lui	a4,0xfc000
    2634:	fff70713          	addi	a4,a4,-1 # fbffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfc000000>
    2638:	00e7f7b3          	and	a5,a5,a4
    263c:	00100413          	li	s0,1
    2640:	0077f713          	andi	a4,a5,7
    2644:	24070063          	beqz	a4,2884 <__subsf3+0x3e4>
    2648:	00f7f713          	andi	a4,a5,15
    264c:	00400693          	li	a3,4
    2650:	22d70a63          	beq	a4,a3,2884 <__subsf3+0x3e4>
    2654:	00478793          	addi	a5,a5,4 # 4000004 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1050f84>
    2658:	22c0006f          	j	2884 <__subsf3+0x3e4>
    265c:	f60780e3          	beqz	a5,25bc <__subsf3+0x11c>
    2660:	ec0702e3          	beqz	a4,2524 <__subsf3+0x84>
    2664:	00000493          	li	s1,0
    2668:	020007b7          	lui	a5,0x2000
    266c:	0ff00413          	li	s0,255
    2670:	2140006f          	j	2884 <__subsf3+0x3e4>
    2674:	0ff00613          	li	a2,255
    2678:	20c68263          	beq	a3,a2,287c <__subsf3+0x3dc>
    267c:	00e787b3          	add	a5,a5,a4
    2680:	0017d793          	srli	a5,a5,0x1
    2684:	00068413          	mv	s0,a3
    2688:	fb9ff06f          	j	2640 <__subsf3+0x1a0>
    268c:	08d05063          	blez	a3,270c <__subsf3+0x26c>
    2690:	06061263          	bnez	a2,26f4 <__subsf3+0x254>
    2694:	fe0708e3          	beqz	a4,2684 <__subsf3+0x1e4>
    2698:	fff68613          	addi	a2,a3,-1
    269c:	00061863          	bnez	a2,26ac <__subsf3+0x20c>
    26a0:	40e787b3          	sub	a5,a5,a4
    26a4:	00100413          	li	s0,1
    26a8:	0340006f          	j	26dc <__subsf3+0x23c>
    26ac:	0ff00593          	li	a1,255
    26b0:	e6b68ae3          	beq	a3,a1,2524 <__subsf3+0x84>
    26b4:	01b00593          	li	a1,27
    26b8:	00100693          	li	a3,1
    26bc:	00c5ce63          	blt	a1,a2,26d8 <__subsf3+0x238>
    26c0:	02000693          	li	a3,32
    26c4:	40c686b3          	sub	a3,a3,a2
    26c8:	00c755b3          	srl	a1,a4,a2
    26cc:	00d71733          	sll	a4,a4,a3
    26d0:	00e03733          	snez	a4,a4
    26d4:	00e5e6b3          	or	a3,a1,a4
    26d8:	40d787b3          	sub	a5,a5,a3
    26dc:	04000937          	lui	s2,0x4000
    26e0:	0127f733          	and	a4,a5,s2
    26e4:	f4070ee3          	beqz	a4,2640 <__subsf3+0x1a0>
    26e8:	fff90913          	addi	s2,s2,-1 # 3ffffff <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1050f7f>
    26ec:	0127f933          	and	s2,a5,s2
    26f0:	1180006f          	j	2808 <__subsf3+0x368>
    26f4:	0ff00613          	li	a2,255
    26f8:	f4c404e3          	beq	s0,a2,2640 <__subsf3+0x1a0>
    26fc:	04000637          	lui	a2,0x4000
    2700:	00c76733          	or	a4,a4,a2
    2704:	00068613          	mv	a2,a3
    2708:	fadff06f          	j	26b4 <__subsf3+0x214>
    270c:	08068063          	beqz	a3,278c <__subsf3+0x2ec>
    2710:	408606b3          	sub	a3,a2,s0
    2714:	02041863          	bnez	s0,2744 <__subsf3+0x2a4>
    2718:	1e078063          	beqz	a5,28f8 <__subsf3+0x458>
    271c:	fff68513          	addi	a0,a3,-1
    2720:	00051863          	bnez	a0,2730 <__subsf3+0x290>
    2724:	40f707b3          	sub	a5,a4,a5
    2728:	00058493          	mv	s1,a1
    272c:	f79ff06f          	j	26a4 <__subsf3+0x204>
    2730:	0ff00813          	li	a6,255
    2734:	03069263          	bne	a3,a6,2758 <__subsf3+0x2b8>
    2738:	00070793          	mv	a5,a4
    273c:	0ff00413          	li	s0,255
    2740:	06c0006f          	j	27ac <__subsf3+0x30c>
    2744:	0ff00513          	li	a0,255
    2748:	fea608e3          	beq	a2,a0,2738 <__subsf3+0x298>
    274c:	04000537          	lui	a0,0x4000
    2750:	00a7e7b3          	or	a5,a5,a0
    2754:	00068513          	mv	a0,a3
    2758:	01b00813          	li	a6,27
    275c:	00100693          	li	a3,1
    2760:	00a84e63          	blt	a6,a0,277c <__subsf3+0x2dc>
    2764:	02000693          	li	a3,32
    2768:	40a686b3          	sub	a3,a3,a0
    276c:	00a7d833          	srl	a6,a5,a0
    2770:	00d797b3          	sll	a5,a5,a3
    2774:	00f037b3          	snez	a5,a5
    2778:	00f866b3          	or	a3,a6,a5
    277c:	40d707b3          	sub	a5,a4,a3
    2780:	00060413          	mv	s0,a2
    2784:	00058493          	mv	s1,a1
    2788:	f55ff06f          	j	26dc <__subsf3+0x23c>
    278c:	00140693          	addi	a3,s0,1
    2790:	0fe6f693          	andi	a3,a3,254
    2794:	04069e63          	bnez	a3,27f0 <__subsf3+0x350>
    2798:	04041263          	bnez	s0,27dc <__subsf3+0x33c>
    279c:	00079c63          	bnez	a5,27b4 <__subsf3+0x314>
    27a0:	00000493          	li	s1,0
    27a4:	0e070063          	beqz	a4,2884 <__subsf3+0x3e4>
    27a8:	00070793          	mv	a5,a4
    27ac:	00058493          	mv	s1,a1
    27b0:	e91ff06f          	j	2640 <__subsf3+0x1a0>
    27b4:	e80706e3          	beqz	a4,2640 <__subsf3+0x1a0>
    27b8:	40e786b3          	sub	a3,a5,a4
    27bc:	04000637          	lui	a2,0x4000
    27c0:	00c6f633          	and	a2,a3,a2
    27c4:	40f707b3          	sub	a5,a4,a5
    27c8:	fe0612e3          	bnez	a2,27ac <__subsf3+0x30c>
    27cc:	00000793          	li	a5,0
    27d0:	08068063          	beqz	a3,2850 <__subsf3+0x3b0>
    27d4:	00068793          	mv	a5,a3
    27d8:	e69ff06f          	j	2640 <__subsf3+0x1a0>
    27dc:	e80792e3          	bnez	a5,2660 <__subsf3+0x1c0>
    27e0:	e80702e3          	beqz	a4,2664 <__subsf3+0x1c4>
    27e4:	00070793          	mv	a5,a4
    27e8:	00058493          	mv	s1,a1
    27ec:	d39ff06f          	j	2524 <__subsf3+0x84>
    27f0:	40e78933          	sub	s2,a5,a4
    27f4:	040006b7          	lui	a3,0x4000
    27f8:	00d976b3          	and	a3,s2,a3
    27fc:	04068463          	beqz	a3,2844 <__subsf3+0x3a4>
    2800:	40f70933          	sub	s2,a4,a5
    2804:	00058493          	mv	s1,a1
    2808:	00090513          	mv	a0,s2
    280c:	ae5fd0ef          	jal	ra,2f0 <__clzsi2>
    2810:	ffb50513          	addi	a0,a0,-5 # 3fffffb <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1050f7b>
    2814:	00a91933          	sll	s2,s2,a0
    2818:	04854063          	blt	a0,s0,2858 <__subsf3+0x3b8>
    281c:	40850533          	sub	a0,a0,s0
    2820:	00150513          	addi	a0,a0,1
    2824:	02000413          	li	s0,32
    2828:	00a957b3          	srl	a5,s2,a0
    282c:	40a40533          	sub	a0,s0,a0
    2830:	00a91933          	sll	s2,s2,a0
    2834:	01203933          	snez	s2,s2
    2838:	0127e7b3          	or	a5,a5,s2
    283c:	00000413          	li	s0,0
    2840:	e01ff06f          	j	2640 <__subsf3+0x1a0>
    2844:	fc0912e3          	bnez	s2,2808 <__subsf3+0x368>
    2848:	00000793          	li	a5,0
    284c:	00000413          	li	s0,0
    2850:	00000493          	li	s1,0
    2854:	0300006f          	j	2884 <__subsf3+0x3e4>
    2858:	fc0007b7          	lui	a5,0xfc000
    285c:	fff78793          	addi	a5,a5,-1 # fbffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfc000000>
    2860:	40a40433          	sub	s0,s0,a0
    2864:	00f977b3          	and	a5,s2,a5
    2868:	dd9ff06f          	j	2640 <__subsf3+0x1a0>
    286c:	00070793          	mv	a5,a4
    2870:	e15ff06f          	j	2684 <__subsf3+0x1e4>
    2874:	00070793          	mv	a5,a4
    2878:	dc9ff06f          	j	2640 <__subsf3+0x1a0>
    287c:	0ff00413          	li	s0,255
    2880:	00000793          	li	a5,0
    2884:	04000737          	lui	a4,0x4000
    2888:	00e7f733          	and	a4,a5,a4
    288c:	00070e63          	beqz	a4,28a8 <__subsf3+0x408>
    2890:	00140413          	addi	s0,s0,1
    2894:	0ff00713          	li	a4,255
    2898:	06e40663          	beq	s0,a4,2904 <__subsf3+0x464>
    289c:	fc000737          	lui	a4,0xfc000
    28a0:	fff70713          	addi	a4,a4,-1 # fbffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfc000000>
    28a4:	00e7f7b3          	and	a5,a5,a4
    28a8:	0ff00713          	li	a4,255
    28ac:	0037d793          	srli	a5,a5,0x3
    28b0:	00e41863          	bne	s0,a4,28c0 <__subsf3+0x420>
    28b4:	00078663          	beqz	a5,28c0 <__subsf3+0x420>
    28b8:	004007b7          	lui	a5,0x400
    28bc:	00000493          	li	s1,0
    28c0:	7f800537          	lui	a0,0x7f800
    28c4:	01741413          	slli	s0,s0,0x17
    28c8:	00979793          	slli	a5,a5,0x9
    28cc:	00a47433          	and	s0,s0,a0
    28d0:	0097d793          	srli	a5,a5,0x9
    28d4:	00c12083          	lw	ra,12(sp)
    28d8:	00f467b3          	or	a5,s0,a5
    28dc:	00812403          	lw	s0,8(sp)
    28e0:	01f49513          	slli	a0,s1,0x1f
    28e4:	00012903          	lw	s2,0(sp)
    28e8:	00412483          	lw	s1,4(sp)
    28ec:	00a7e533          	or	a0,a5,a0
    28f0:	01010113          	addi	sp,sp,16
    28f4:	00008067          	ret
    28f8:	00070793          	mv	a5,a4
    28fc:	00068413          	mv	s0,a3
    2900:	eadff06f          	j	27ac <__subsf3+0x30c>
    2904:	00000793          	li	a5,0
    2908:	fa1ff06f          	j	28a8 <__subsf3+0x408>

0000290c <__floatsisf>:
    290c:	ff010113          	addi	sp,sp,-16
    2910:	00112623          	sw	ra,12(sp)
    2914:	00812423          	sw	s0,8(sp)
    2918:	00912223          	sw	s1,4(sp)
    291c:	0e050663          	beqz	a0,2a08 <__floatsisf+0xfc>
    2920:	41f55793          	srai	a5,a0,0x1f
    2924:	00a7c433          	xor	s0,a5,a0
    2928:	40f40433          	sub	s0,s0,a5
    292c:	01f55493          	srli	s1,a0,0x1f
    2930:	00040513          	mv	a0,s0
    2934:	9bdfd0ef          	jal	ra,2f0 <__clzsi2>
    2938:	09e00793          	li	a5,158
    293c:	00050713          	mv	a4,a0
    2940:	40a78533          	sub	a0,a5,a0
    2944:	09600793          	li	a5,150
    2948:	04a7c063          	blt	a5,a0,2988 <__floatsisf+0x7c>
    294c:	00800793          	li	a5,8
    2950:	00e7d663          	bge	a5,a4,295c <__floatsisf+0x50>
    2954:	ff870713          	addi	a4,a4,-8
    2958:	00e41433          	sll	s0,s0,a4
    295c:	00941413          	slli	s0,s0,0x9
    2960:	01751513          	slli	a0,a0,0x17
    2964:	00945413          	srli	s0,s0,0x9
    2968:	00856433          	or	s0,a0,s0
    296c:	01f49513          	slli	a0,s1,0x1f
    2970:	00c12083          	lw	ra,12(sp)
    2974:	00a46533          	or	a0,s0,a0
    2978:	00812403          	lw	s0,8(sp)
    297c:	00412483          	lw	s1,4(sp)
    2980:	01010113          	addi	sp,sp,16
    2984:	00008067          	ret
    2988:	09900793          	li	a5,153
    298c:	02a7d063          	bge	a5,a0,29ac <__floatsisf+0xa0>
    2990:	00500793          	li	a5,5
    2994:	40e787b3          	sub	a5,a5,a4
    2998:	01b70693          	addi	a3,a4,27
    299c:	00f457b3          	srl	a5,s0,a5
    29a0:	00d41433          	sll	s0,s0,a3
    29a4:	00803433          	snez	s0,s0
    29a8:	0087e433          	or	s0,a5,s0
    29ac:	00500793          	li	a5,5
    29b0:	00e7d663          	bge	a5,a4,29bc <__floatsisf+0xb0>
    29b4:	ffb70793          	addi	a5,a4,-5
    29b8:	00f41433          	sll	s0,s0,a5
    29bc:	fc0006b7          	lui	a3,0xfc000
    29c0:	fff68693          	addi	a3,a3,-1 # fbffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfc000000>
    29c4:	00747793          	andi	a5,s0,7
    29c8:	00d476b3          	and	a3,s0,a3
    29cc:	00078a63          	beqz	a5,29e0 <__floatsisf+0xd4>
    29d0:	00f47413          	andi	s0,s0,15
    29d4:	00400793          	li	a5,4
    29d8:	00f40463          	beq	s0,a5,29e0 <__floatsisf+0xd4>
    29dc:	00468693          	addi	a3,a3,4
    29e0:	040007b7          	lui	a5,0x4000
    29e4:	00f6f7b3          	and	a5,a3,a5
    29e8:	00078c63          	beqz	a5,2a00 <__floatsisf+0xf4>
    29ec:	fc0007b7          	lui	a5,0xfc000
    29f0:	fff78793          	addi	a5,a5,-1 # fbffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfc000000>
    29f4:	00f6f6b3          	and	a3,a3,a5
    29f8:	09f00793          	li	a5,159
    29fc:	40e78533          	sub	a0,a5,a4
    2a00:	0036d413          	srli	s0,a3,0x3
    2a04:	f59ff06f          	j	295c <__floatsisf+0x50>
    2a08:	00000493          	li	s1,0
    2a0c:	00000413          	li	s0,0
    2a10:	f4dff06f          	j	295c <__floatsisf+0x50>

00002a14 <__extendsfdf2>:
    2a14:	01755713          	srli	a4,a0,0x17
    2a18:	0ff77713          	andi	a4,a4,255
    2a1c:	ff010113          	addi	sp,sp,-16
    2a20:	00170793          	addi	a5,a4,1
    2a24:	00812423          	sw	s0,8(sp)
    2a28:	00912223          	sw	s1,4(sp)
    2a2c:	00951413          	slli	s0,a0,0x9
    2a30:	00112623          	sw	ra,12(sp)
    2a34:	0fe7f793          	andi	a5,a5,254
    2a38:	00945413          	srli	s0,s0,0x9
    2a3c:	01f55493          	srli	s1,a0,0x1f
    2a40:	04078263          	beqz	a5,2a84 <__extendsfdf2+0x70>
    2a44:	00345793          	srli	a5,s0,0x3
    2a48:	38070713          	addi	a4,a4,896
    2a4c:	01d41413          	slli	s0,s0,0x1d
    2a50:	00c79793          	slli	a5,a5,0xc
    2a54:	01471713          	slli	a4,a4,0x14
    2a58:	00c7d793          	srli	a5,a5,0xc
    2a5c:	01f49513          	slli	a0,s1,0x1f
    2a60:	00f767b3          	or	a5,a4,a5
    2a64:	00c12083          	lw	ra,12(sp)
    2a68:	00a7e733          	or	a4,a5,a0
    2a6c:	00040513          	mv	a0,s0
    2a70:	00812403          	lw	s0,8(sp)
    2a74:	00412483          	lw	s1,4(sp)
    2a78:	00070593          	mv	a1,a4
    2a7c:	01010113          	addi	sp,sp,16
    2a80:	00008067          	ret
    2a84:	04071663          	bnez	a4,2ad0 <__extendsfdf2+0xbc>
    2a88:	00000793          	li	a5,0
    2a8c:	fc0402e3          	beqz	s0,2a50 <__extendsfdf2+0x3c>
    2a90:	00040513          	mv	a0,s0
    2a94:	85dfd0ef          	jal	ra,2f0 <__clzsi2>
    2a98:	00a00793          	li	a5,10
    2a9c:	02a7c263          	blt	a5,a0,2ac0 <__extendsfdf2+0xac>
    2aa0:	00b00793          	li	a5,11
    2aa4:	40a787b3          	sub	a5,a5,a0
    2aa8:	01550713          	addi	a4,a0,21 # 7f800015 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7c850f95>
    2aac:	00f457b3          	srl	a5,s0,a5
    2ab0:	00e41433          	sll	s0,s0,a4
    2ab4:	38900713          	li	a4,905
    2ab8:	40a70733          	sub	a4,a4,a0
    2abc:	f95ff06f          	j	2a50 <__extendsfdf2+0x3c>
    2ac0:	ff550793          	addi	a5,a0,-11
    2ac4:	00f417b3          	sll	a5,s0,a5
    2ac8:	00000413          	li	s0,0
    2acc:	fe9ff06f          	j	2ab4 <__extendsfdf2+0xa0>
    2ad0:	00000793          	li	a5,0
    2ad4:	00040a63          	beqz	s0,2ae8 <__extendsfdf2+0xd4>
    2ad8:	00345793          	srli	a5,s0,0x3
    2adc:	00080737          	lui	a4,0x80
    2ae0:	01d41413          	slli	s0,s0,0x1d
    2ae4:	00e7e7b3          	or	a5,a5,a4
    2ae8:	7ff00713          	li	a4,2047
    2aec:	f65ff06f          	j	2a50 <__extendsfdf2+0x3c>

00002af0 <memcpy>:
    2af0:	00050313          	mv	t1,a0
    2af4:	00060e63          	beqz	a2,2b10 <memcpy+0x20>
    2af8:	00058383          	lb	t2,0(a1) # 4000000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1050f80>
    2afc:	00730023          	sb	t2,0(t1)
    2b00:	fff60613          	addi	a2,a2,-1 # 3ffffff <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1050f7f>
    2b04:	00130313          	addi	t1,t1,1
    2b08:	00158593          	addi	a1,a1,1
    2b0c:	fe0616e3          	bnez	a2,2af8 <memcpy+0x8>
    2b10:	00008067          	ret

00002b14 <memset>:
    2b14:	00050313          	mv	t1,a0
    2b18:	00060a63          	beqz	a2,2b2c <memset+0x18>
    2b1c:	00b30023          	sb	a1,0(t1)
    2b20:	fff60613          	addi	a2,a2,-1
    2b24:	00130313          	addi	t1,t1,1
    2b28:	fe061ae3          	bnez	a2,2b1c <memset+0x8>
    2b2c:	00008067          	ret

00002b30 <__adddf3>:
    2b30:	00100837          	lui	a6,0x100
    2b34:	fff80813          	addi	a6,a6,-1 # fffff <__data_region_end+0xf0e03>
    2b38:	fe010113          	addi	sp,sp,-32
    2b3c:	00b877b3          	and	a5,a6,a1
    2b40:	0145d713          	srli	a4,a1,0x14
    2b44:	00d87833          	and	a6,a6,a3
    2b48:	0146d313          	srli	t1,a3,0x14
    2b4c:	00812c23          	sw	s0,24(sp)
    2b50:	00379793          	slli	a5,a5,0x3
    2b54:	7ff77413          	andi	s0,a4,2047
    2b58:	01d55713          	srli	a4,a0,0x1d
    2b5c:	00381813          	slli	a6,a6,0x3
    2b60:	00912a23          	sw	s1,20(sp)
    2b64:	00f767b3          	or	a5,a4,a5
    2b68:	01f5d493          	srli	s1,a1,0x1f
    2b6c:	01d65713          	srli	a4,a2,0x1d
    2b70:	7ff37313          	andi	t1,t1,2047
    2b74:	00112e23          	sw	ra,28(sp)
    2b78:	01212823          	sw	s2,16(sp)
    2b7c:	01312623          	sw	s3,12(sp)
    2b80:	01f6d693          	srli	a3,a3,0x1f
    2b84:	01076733          	or	a4,a4,a6
    2b88:	00351593          	slli	a1,a0,0x3
    2b8c:	00361613          	slli	a2,a2,0x3
    2b90:	40640833          	sub	a6,s0,t1
    2b94:	2cd49863          	bne	s1,a3,2e64 <__adddf3+0x334>
    2b98:	13005063          	blez	a6,2cb8 <__adddf3+0x188>
    2b9c:	04031063          	bnez	t1,2bdc <__adddf3+0xac>
    2ba0:	00c766b3          	or	a3,a4,a2
    2ba4:	70068c63          	beqz	a3,32bc <__adddf3+0x78c>
    2ba8:	fff80513          	addi	a0,a6,-1
    2bac:	02051063          	bnez	a0,2bcc <__adddf3+0x9c>
    2bb0:	00c58633          	add	a2,a1,a2
    2bb4:	00b63533          	sltu	a0,a2,a1
    2bb8:	00e787b3          	add	a5,a5,a4
    2bbc:	00a787b3          	add	a5,a5,a0
    2bc0:	00060593          	mv	a1,a2
    2bc4:	00100413          	li	s0,1
    2bc8:	0700006f          	j	2c38 <__adddf3+0x108>
    2bcc:	7ff00693          	li	a3,2047
    2bd0:	02d81063          	bne	a6,a3,2bf0 <__adddf3+0xc0>
    2bd4:	7ff00413          	li	s0,2047
    2bd8:	2140006f          	j	2dec <__adddf3+0x2bc>
    2bdc:	7ff00693          	li	a3,2047
    2be0:	20d40663          	beq	s0,a3,2dec <__adddf3+0x2bc>
    2be4:	008006b7          	lui	a3,0x800
    2be8:	00d76733          	or	a4,a4,a3
    2bec:	00080513          	mv	a0,a6
    2bf0:	03800693          	li	a3,56
    2bf4:	0aa6cc63          	blt	a3,a0,2cac <__adddf3+0x17c>
    2bf8:	01f00693          	li	a3,31
    2bfc:	06a6ce63          	blt	a3,a0,2c78 <__adddf3+0x148>
    2c00:	02000813          	li	a6,32
    2c04:	40a80833          	sub	a6,a6,a0
    2c08:	010716b3          	sll	a3,a4,a6
    2c0c:	00a658b3          	srl	a7,a2,a0
    2c10:	01061633          	sll	a2,a2,a6
    2c14:	0116e6b3          	or	a3,a3,a7
    2c18:	00c03633          	snez	a2,a2
    2c1c:	00c6e633          	or	a2,a3,a2
    2c20:	00a75733          	srl	a4,a4,a0
    2c24:	00b60633          	add	a2,a2,a1
    2c28:	00b63533          	sltu	a0,a2,a1
    2c2c:	00f70733          	add	a4,a4,a5
    2c30:	00a707b3          	add	a5,a4,a0
    2c34:	00060593          	mv	a1,a2
    2c38:	00800737          	lui	a4,0x800
    2c3c:	00e7f733          	and	a4,a5,a4
    2c40:	1a070663          	beqz	a4,2dec <__adddf3+0x2bc>
    2c44:	00140413          	addi	s0,s0,1
    2c48:	7ff00713          	li	a4,2047
    2c4c:	5ce40a63          	beq	s0,a4,3220 <__adddf3+0x6f0>
    2c50:	ff800737          	lui	a4,0xff800
    2c54:	fff70713          	addi	a4,a4,-1 # ff7fffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xff800000>
    2c58:	00e7f7b3          	and	a5,a5,a4
    2c5c:	0015f513          	andi	a0,a1,1
    2c60:	0015d713          	srli	a4,a1,0x1
    2c64:	00a76533          	or	a0,a4,a0
    2c68:	01f79593          	slli	a1,a5,0x1f
    2c6c:	00a5e5b3          	or	a1,a1,a0
    2c70:	0017d793          	srli	a5,a5,0x1
    2c74:	1780006f          	j	2dec <__adddf3+0x2bc>
    2c78:	fe050693          	addi	a3,a0,-32
    2c7c:	02000893          	li	a7,32
    2c80:	00d756b3          	srl	a3,a4,a3
    2c84:	00000813          	li	a6,0
    2c88:	01150863          	beq	a0,a7,2c98 <__adddf3+0x168>
    2c8c:	04000813          	li	a6,64
    2c90:	40a80533          	sub	a0,a6,a0
    2c94:	00a71833          	sll	a6,a4,a0
    2c98:	00c86633          	or	a2,a6,a2
    2c9c:	00c03633          	snez	a2,a2
    2ca0:	00c6e633          	or	a2,a3,a2
    2ca4:	00000713          	li	a4,0
    2ca8:	f7dff06f          	j	2c24 <__adddf3+0xf4>
    2cac:	00c76633          	or	a2,a4,a2
    2cb0:	00c03633          	snez	a2,a2
    2cb4:	ff1ff06f          	j	2ca4 <__adddf3+0x174>
    2cb8:	0e080263          	beqz	a6,2d9c <__adddf3+0x26c>
    2cbc:	40830533          	sub	a0,t1,s0
    2cc0:	02041e63          	bnez	s0,2cfc <__adddf3+0x1cc>
    2cc4:	00b7e6b3          	or	a3,a5,a1
    2cc8:	52068c63          	beqz	a3,3200 <__adddf3+0x6d0>
    2ccc:	fff50693          	addi	a3,a0,-1
    2cd0:	00069c63          	bnez	a3,2ce8 <__adddf3+0x1b8>
    2cd4:	00c585b3          	add	a1,a1,a2
    2cd8:	00e787b3          	add	a5,a5,a4
    2cdc:	00c5b633          	sltu	a2,a1,a2
    2ce0:	00c787b3          	add	a5,a5,a2
    2ce4:	ee1ff06f          	j	2bc4 <__adddf3+0x94>
    2ce8:	7ff00813          	li	a6,2047
    2cec:	03051263          	bne	a0,a6,2d10 <__adddf3+0x1e0>
    2cf0:	00070793          	mv	a5,a4
    2cf4:	00060593          	mv	a1,a2
    2cf8:	eddff06f          	j	2bd4 <__adddf3+0xa4>
    2cfc:	7ff00693          	li	a3,2047
    2d00:	fed308e3          	beq	t1,a3,2cf0 <__adddf3+0x1c0>
    2d04:	008006b7          	lui	a3,0x800
    2d08:	00d7e7b3          	or	a5,a5,a3
    2d0c:	00050693          	mv	a3,a0
    2d10:	03800513          	li	a0,56
    2d14:	06d54e63          	blt	a0,a3,2d90 <__adddf3+0x260>
    2d18:	01f00513          	li	a0,31
    2d1c:	04d54063          	blt	a0,a3,2d5c <__adddf3+0x22c>
    2d20:	02000813          	li	a6,32
    2d24:	40d80833          	sub	a6,a6,a3
    2d28:	01079533          	sll	a0,a5,a6
    2d2c:	00d5d8b3          	srl	a7,a1,a3
    2d30:	010595b3          	sll	a1,a1,a6
    2d34:	01156533          	or	a0,a0,a7
    2d38:	00b035b3          	snez	a1,a1
    2d3c:	00b56533          	or	a0,a0,a1
    2d40:	00d7d7b3          	srl	a5,a5,a3
    2d44:	00c505b3          	add	a1,a0,a2
    2d48:	00e787b3          	add	a5,a5,a4
    2d4c:	00c5b633          	sltu	a2,a1,a2
    2d50:	00c787b3          	add	a5,a5,a2
    2d54:	00030413          	mv	s0,t1
    2d58:	ee1ff06f          	j	2c38 <__adddf3+0x108>
    2d5c:	fe068513          	addi	a0,a3,-32 # 7fffe0 <__data_region_end+0x7f0de4>
    2d60:	02000893          	li	a7,32
    2d64:	00a7d833          	srl	a6,a5,a0
    2d68:	00000513          	li	a0,0
    2d6c:	01168863          	beq	a3,a7,2d7c <__adddf3+0x24c>
    2d70:	04000513          	li	a0,64
    2d74:	40d50533          	sub	a0,a0,a3
    2d78:	00a79533          	sll	a0,a5,a0
    2d7c:	00b56533          	or	a0,a0,a1
    2d80:	00a03533          	snez	a0,a0
    2d84:	00a86533          	or	a0,a6,a0
    2d88:	00000793          	li	a5,0
    2d8c:	fb9ff06f          	j	2d44 <__adddf3+0x214>
    2d90:	00b7e533          	or	a0,a5,a1
    2d94:	00a03533          	snez	a0,a0
    2d98:	ff1ff06f          	j	2d88 <__adddf3+0x258>
    2d9c:	00140693          	addi	a3,s0,1
    2da0:	7fe6f513          	andi	a0,a3,2046
    2da4:	08051863          	bnez	a0,2e34 <__adddf3+0x304>
    2da8:	00b7e6b3          	or	a3,a5,a1
    2dac:	06041463          	bnez	s0,2e14 <__adddf3+0x2e4>
    2db0:	46068063          	beqz	a3,3210 <__adddf3+0x6e0>
    2db4:	00c766b3          	or	a3,a4,a2
    2db8:	02068a63          	beqz	a3,2dec <__adddf3+0x2bc>
    2dbc:	00c58633          	add	a2,a1,a2
    2dc0:	00e787b3          	add	a5,a5,a4
    2dc4:	00b63533          	sltu	a0,a2,a1
    2dc8:	00a787b3          	add	a5,a5,a0
    2dcc:	00800737          	lui	a4,0x800
    2dd0:	00e7f733          	and	a4,a5,a4
    2dd4:	00060593          	mv	a1,a2
    2dd8:	00070a63          	beqz	a4,2dec <__adddf3+0x2bc>
    2ddc:	ff800737          	lui	a4,0xff800
    2de0:	fff70713          	addi	a4,a4,-1 # ff7fffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xff800000>
    2de4:	00e7f7b3          	and	a5,a5,a4
    2de8:	00100413          	li	s0,1
    2dec:	0075f713          	andi	a4,a1,7
    2df0:	42070c63          	beqz	a4,3228 <__adddf3+0x6f8>
    2df4:	00f5f713          	andi	a4,a1,15
    2df8:	00400693          	li	a3,4
    2dfc:	42d70663          	beq	a4,a3,3228 <__adddf3+0x6f8>
    2e00:	00458713          	addi	a4,a1,4
    2e04:	00b73533          	sltu	a0,a4,a1
    2e08:	00a787b3          	add	a5,a5,a0
    2e0c:	00070593          	mv	a1,a4
    2e10:	4180006f          	j	3228 <__adddf3+0x6f8>
    2e14:	ec068ee3          	beqz	a3,2cf0 <__adddf3+0x1c0>
    2e18:	00c76633          	or	a2,a4,a2
    2e1c:	da060ce3          	beqz	a2,2bd4 <__adddf3+0xa4>
    2e20:	00000493          	li	s1,0
    2e24:	004007b7          	lui	a5,0x400
    2e28:	00000593          	li	a1,0
    2e2c:	7ff00413          	li	s0,2047
    2e30:	3f80006f          	j	3228 <__adddf3+0x6f8>
    2e34:	7ff00513          	li	a0,2047
    2e38:	3ea68263          	beq	a3,a0,321c <__adddf3+0x6ec>
    2e3c:	00c58633          	add	a2,a1,a2
    2e40:	00b63533          	sltu	a0,a2,a1
    2e44:	00e787b3          	add	a5,a5,a4
    2e48:	00a787b3          	add	a5,a5,a0
    2e4c:	01f79513          	slli	a0,a5,0x1f
    2e50:	00165613          	srli	a2,a2,0x1
    2e54:	00c565b3          	or	a1,a0,a2
    2e58:	0017d793          	srli	a5,a5,0x1
    2e5c:	00068413          	mv	s0,a3
    2e60:	f8dff06f          	j	2dec <__adddf3+0x2bc>
    2e64:	0f005c63          	blez	a6,2f5c <__adddf3+0x42c>
    2e68:	08031e63          	bnez	t1,2f04 <__adddf3+0x3d4>
    2e6c:	00c766b3          	or	a3,a4,a2
    2e70:	44068663          	beqz	a3,32bc <__adddf3+0x78c>
    2e74:	fff80513          	addi	a0,a6,-1
    2e78:	02051063          	bnez	a0,2e98 <__adddf3+0x368>
    2e7c:	40c58633          	sub	a2,a1,a2
    2e80:	00c5b533          	sltu	a0,a1,a2
    2e84:	40e787b3          	sub	a5,a5,a4
    2e88:	40a787b3          	sub	a5,a5,a0
    2e8c:	00060593          	mv	a1,a2
    2e90:	00100413          	li	s0,1
    2e94:	0540006f          	j	2ee8 <__adddf3+0x3b8>
    2e98:	7ff00693          	li	a3,2047
    2e9c:	d2d80ce3          	beq	a6,a3,2bd4 <__adddf3+0xa4>
    2ea0:	03800693          	li	a3,56
    2ea4:	0aa6c663          	blt	a3,a0,2f50 <__adddf3+0x420>
    2ea8:	01f00693          	li	a3,31
    2eac:	06a6c863          	blt	a3,a0,2f1c <__adddf3+0x3ec>
    2eb0:	02000813          	li	a6,32
    2eb4:	40a80833          	sub	a6,a6,a0
    2eb8:	010716b3          	sll	a3,a4,a6
    2ebc:	00a658b3          	srl	a7,a2,a0
    2ec0:	01061633          	sll	a2,a2,a6
    2ec4:	0116e6b3          	or	a3,a3,a7
    2ec8:	00c03633          	snez	a2,a2
    2ecc:	00c6e633          	or	a2,a3,a2
    2ed0:	00a75733          	srl	a4,a4,a0
    2ed4:	40c58633          	sub	a2,a1,a2
    2ed8:	00c5b533          	sltu	a0,a1,a2
    2edc:	40e78733          	sub	a4,a5,a4
    2ee0:	40a707b3          	sub	a5,a4,a0
    2ee4:	00060593          	mv	a1,a2
    2ee8:	00800937          	lui	s2,0x800
    2eec:	0127f733          	and	a4,a5,s2
    2ef0:	ee070ee3          	beqz	a4,2dec <__adddf3+0x2bc>
    2ef4:	fff90913          	addi	s2,s2,-1 # 7fffff <__data_region_end+0x7f0e03>
    2ef8:	0127f933          	and	s2,a5,s2
    2efc:	00058993          	mv	s3,a1
    2f00:	2140006f          	j	3114 <__adddf3+0x5e4>
    2f04:	7ff00693          	li	a3,2047
    2f08:	eed402e3          	beq	s0,a3,2dec <__adddf3+0x2bc>
    2f0c:	008006b7          	lui	a3,0x800
    2f10:	00d76733          	or	a4,a4,a3
    2f14:	00080513          	mv	a0,a6
    2f18:	f89ff06f          	j	2ea0 <__adddf3+0x370>
    2f1c:	fe050693          	addi	a3,a0,-32
    2f20:	02000893          	li	a7,32
    2f24:	00d756b3          	srl	a3,a4,a3
    2f28:	00000813          	li	a6,0
    2f2c:	01150863          	beq	a0,a7,2f3c <__adddf3+0x40c>
    2f30:	04000813          	li	a6,64
    2f34:	40a80533          	sub	a0,a6,a0
    2f38:	00a71833          	sll	a6,a4,a0
    2f3c:	00c86633          	or	a2,a6,a2
    2f40:	00c03633          	snez	a2,a2
    2f44:	00c6e633          	or	a2,a3,a2
    2f48:	00000713          	li	a4,0
    2f4c:	f89ff06f          	j	2ed4 <__adddf3+0x3a4>
    2f50:	00c76633          	or	a2,a4,a2
    2f54:	00c03633          	snez	a2,a2
    2f58:	ff1ff06f          	j	2f48 <__adddf3+0x418>
    2f5c:	0e080863          	beqz	a6,304c <__adddf3+0x51c>
    2f60:	40830533          	sub	a0,t1,s0
    2f64:	04041263          	bnez	s0,2fa8 <__adddf3+0x478>
    2f68:	00b7e833          	or	a6,a5,a1
    2f6c:	34080c63          	beqz	a6,32c4 <__adddf3+0x794>
    2f70:	fff50813          	addi	a6,a0,-1
    2f74:	00081e63          	bnez	a6,2f90 <__adddf3+0x460>
    2f78:	40b605b3          	sub	a1,a2,a1
    2f7c:	40f707b3          	sub	a5,a4,a5
    2f80:	00b63633          	sltu	a2,a2,a1
    2f84:	40c787b3          	sub	a5,a5,a2
    2f88:	00068493          	mv	s1,a3
    2f8c:	f05ff06f          	j	2e90 <__adddf3+0x360>
    2f90:	7ff00893          	li	a7,2047
    2f94:	03151463          	bne	a0,a7,2fbc <__adddf3+0x48c>
    2f98:	00070793          	mv	a5,a4
    2f9c:	00060593          	mv	a1,a2
    2fa0:	7ff00413          	li	s0,2047
    2fa4:	0d00006f          	j	3074 <__adddf3+0x544>
    2fa8:	7ff00813          	li	a6,2047
    2fac:	ff0306e3          	beq	t1,a6,2f98 <__adddf3+0x468>
    2fb0:	00800837          	lui	a6,0x800
    2fb4:	0107e7b3          	or	a5,a5,a6
    2fb8:	00050813          	mv	a6,a0
    2fbc:	03800513          	li	a0,56
    2fc0:	09054063          	blt	a0,a6,3040 <__adddf3+0x510>
    2fc4:	01f00513          	li	a0,31
    2fc8:	05054263          	blt	a0,a6,300c <__adddf3+0x4dc>
    2fcc:	02000893          	li	a7,32
    2fd0:	410888b3          	sub	a7,a7,a6
    2fd4:	01179533          	sll	a0,a5,a7
    2fd8:	0105de33          	srl	t3,a1,a6
    2fdc:	011595b3          	sll	a1,a1,a7
    2fe0:	01c56533          	or	a0,a0,t3
    2fe4:	00b035b3          	snez	a1,a1
    2fe8:	00b56533          	or	a0,a0,a1
    2fec:	0107d7b3          	srl	a5,a5,a6
    2ff0:	40a605b3          	sub	a1,a2,a0
    2ff4:	40f707b3          	sub	a5,a4,a5
    2ff8:	00b63633          	sltu	a2,a2,a1
    2ffc:	40c787b3          	sub	a5,a5,a2
    3000:	00030413          	mv	s0,t1
    3004:	00068493          	mv	s1,a3
    3008:	ee1ff06f          	j	2ee8 <__adddf3+0x3b8>
    300c:	fe080513          	addi	a0,a6,-32 # 7fffe0 <__data_region_end+0x7f0de4>
    3010:	02000e13          	li	t3,32
    3014:	00a7d8b3          	srl	a7,a5,a0
    3018:	00000513          	li	a0,0
    301c:	01c80863          	beq	a6,t3,302c <__adddf3+0x4fc>
    3020:	04000513          	li	a0,64
    3024:	41050533          	sub	a0,a0,a6
    3028:	00a79533          	sll	a0,a5,a0
    302c:	00b56533          	or	a0,a0,a1
    3030:	00a03533          	snez	a0,a0
    3034:	00a8e533          	or	a0,a7,a0
    3038:	00000793          	li	a5,0
    303c:	fb5ff06f          	j	2ff0 <__adddf3+0x4c0>
    3040:	00b7e533          	or	a0,a5,a1
    3044:	00a03533          	snez	a0,a0
    3048:	ff1ff06f          	j	3038 <__adddf3+0x508>
    304c:	00140513          	addi	a0,s0,1
    3050:	7fe57513          	andi	a0,a0,2046
    3054:	08051863          	bnez	a0,30e4 <__adddf3+0x5b4>
    3058:	00b7e833          	or	a6,a5,a1
    305c:	00c76533          	or	a0,a4,a2
    3060:	06041263          	bnez	s0,30c4 <__adddf3+0x594>
    3064:	00081c63          	bnez	a6,307c <__adddf3+0x54c>
    3068:	26050663          	beqz	a0,32d4 <__adddf3+0x7a4>
    306c:	00070793          	mv	a5,a4
    3070:	00060593          	mv	a1,a2
    3074:	00068493          	mv	s1,a3
    3078:	d75ff06f          	j	2dec <__adddf3+0x2bc>
    307c:	d60508e3          	beqz	a0,2dec <__adddf3+0x2bc>
    3080:	40c58833          	sub	a6,a1,a2
    3084:	0105b8b3          	sltu	a7,a1,a6
    3088:	40e78533          	sub	a0,a5,a4
    308c:	41150533          	sub	a0,a0,a7
    3090:	008008b7          	lui	a7,0x800
    3094:	011578b3          	and	a7,a0,a7
    3098:	00088c63          	beqz	a7,30b0 <__adddf3+0x580>
    309c:	40b605b3          	sub	a1,a2,a1
    30a0:	40f707b3          	sub	a5,a4,a5
    30a4:	00b63633          	sltu	a2,a2,a1
    30a8:	40c787b3          	sub	a5,a5,a2
    30ac:	fc9ff06f          	j	3074 <__adddf3+0x544>
    30b0:	00a865b3          	or	a1,a6,a0
    30b4:	22058863          	beqz	a1,32e4 <__adddf3+0x7b4>
    30b8:	00050793          	mv	a5,a0
    30bc:	00080593          	mv	a1,a6
    30c0:	d2dff06f          	j	2dec <__adddf3+0x2bc>
    30c4:	00081c63          	bnez	a6,30dc <__adddf3+0x5ac>
    30c8:	22050263          	beqz	a0,32ec <__adddf3+0x7bc>
    30cc:	00070793          	mv	a5,a4
    30d0:	00060593          	mv	a1,a2
    30d4:	00068493          	mv	s1,a3
    30d8:	afdff06f          	j	2bd4 <__adddf3+0xa4>
    30dc:	ae050ce3          	beqz	a0,2bd4 <__adddf3+0xa4>
    30e0:	d41ff06f          	j	2e20 <__adddf3+0x2f0>
    30e4:	40c589b3          	sub	s3,a1,a2
    30e8:	0135b533          	sltu	a0,a1,s3
    30ec:	40e78933          	sub	s2,a5,a4
    30f0:	40a90933          	sub	s2,s2,a0
    30f4:	00800537          	lui	a0,0x800
    30f8:	00a97533          	and	a0,s2,a0
    30fc:	08050463          	beqz	a0,3184 <__adddf3+0x654>
    3100:	40b609b3          	sub	s3,a2,a1
    3104:	40f707b3          	sub	a5,a4,a5
    3108:	01363633          	sltu	a2,a2,s3
    310c:	40c78933          	sub	s2,a5,a2
    3110:	00068493          	mv	s1,a3
    3114:	08090263          	beqz	s2,3198 <__adddf3+0x668>
    3118:	00090513          	mv	a0,s2
    311c:	9d4fd0ef          	jal	ra,2f0 <__clzsi2>
    3120:	ff850713          	addi	a4,a0,-8 # 7ffff8 <__data_region_end+0x7f0dfc>
    3124:	01f00793          	li	a5,31
    3128:	08e7c063          	blt	a5,a4,31a8 <__adddf3+0x678>
    312c:	02000793          	li	a5,32
    3130:	40e787b3          	sub	a5,a5,a4
    3134:	00e91933          	sll	s2,s2,a4
    3138:	00f9d7b3          	srl	a5,s3,a5
    313c:	0127e7b3          	or	a5,a5,s2
    3140:	00e995b3          	sll	a1,s3,a4
    3144:	0a874463          	blt	a4,s0,31ec <__adddf3+0x6bc>
    3148:	40870733          	sub	a4,a4,s0
    314c:	00170693          	addi	a3,a4,1
    3150:	01f00613          	li	a2,31
    3154:	06d64263          	blt	a2,a3,31b8 <__adddf3+0x688>
    3158:	02000713          	li	a4,32
    315c:	40d70733          	sub	a4,a4,a3
    3160:	00e79633          	sll	a2,a5,a4
    3164:	00d5d533          	srl	a0,a1,a3
    3168:	00e595b3          	sll	a1,a1,a4
    316c:	00a66633          	or	a2,a2,a0
    3170:	00b035b3          	snez	a1,a1
    3174:	00b665b3          	or	a1,a2,a1
    3178:	00d7d7b3          	srl	a5,a5,a3
    317c:	00000413          	li	s0,0
    3180:	c6dff06f          	j	2dec <__adddf3+0x2bc>
    3184:	0129e5b3          	or	a1,s3,s2
    3188:	f80596e3          	bnez	a1,3114 <__adddf3+0x5e4>
    318c:	00000793          	li	a5,0
    3190:	00000413          	li	s0,0
    3194:	1480006f          	j	32dc <__adddf3+0x7ac>
    3198:	00098513          	mv	a0,s3
    319c:	954fd0ef          	jal	ra,2f0 <__clzsi2>
    31a0:	02050513          	addi	a0,a0,32
    31a4:	f7dff06f          	j	3120 <__adddf3+0x5f0>
    31a8:	fd850793          	addi	a5,a0,-40
    31ac:	00f997b3          	sll	a5,s3,a5
    31b0:	00000593          	li	a1,0
    31b4:	f91ff06f          	j	3144 <__adddf3+0x614>
    31b8:	fe170713          	addi	a4,a4,-31
    31bc:	02000613          	li	a2,32
    31c0:	00e7d733          	srl	a4,a5,a4
    31c4:	00000513          	li	a0,0
    31c8:	00c68863          	beq	a3,a2,31d8 <__adddf3+0x6a8>
    31cc:	04000513          	li	a0,64
    31d0:	40d50533          	sub	a0,a0,a3
    31d4:	00a79533          	sll	a0,a5,a0
    31d8:	00a5e533          	or	a0,a1,a0
    31dc:	00a03533          	snez	a0,a0
    31e0:	00a765b3          	or	a1,a4,a0
    31e4:	00000793          	li	a5,0
    31e8:	f95ff06f          	j	317c <__adddf3+0x64c>
    31ec:	40e40433          	sub	s0,s0,a4
    31f0:	ff800737          	lui	a4,0xff800
    31f4:	fff70713          	addi	a4,a4,-1 # ff7fffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xff800000>
    31f8:	00e7f7b3          	and	a5,a5,a4
    31fc:	bf1ff06f          	j	2dec <__adddf3+0x2bc>
    3200:	00070793          	mv	a5,a4
    3204:	00060593          	mv	a1,a2
    3208:	00050413          	mv	s0,a0
    320c:	be1ff06f          	j	2dec <__adddf3+0x2bc>
    3210:	00070793          	mv	a5,a4
    3214:	00060593          	mv	a1,a2
    3218:	bd5ff06f          	j	2dec <__adddf3+0x2bc>
    321c:	7ff00413          	li	s0,2047
    3220:	00000793          	li	a5,0
    3224:	00000593          	li	a1,0
    3228:	00800737          	lui	a4,0x800
    322c:	00e7f733          	and	a4,a5,a4
    3230:	00070e63          	beqz	a4,324c <__adddf3+0x71c>
    3234:	00140413          	addi	s0,s0,1
    3238:	7ff00713          	li	a4,2047
    323c:	0ce40063          	beq	s0,a4,32fc <__adddf3+0x7cc>
    3240:	ff800737          	lui	a4,0xff800
    3244:	fff70713          	addi	a4,a4,-1 # ff7fffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xff800000>
    3248:	00e7f7b3          	and	a5,a5,a4
    324c:	01d79713          	slli	a4,a5,0x1d
    3250:	0035d513          	srli	a0,a1,0x3
    3254:	00a76533          	or	a0,a4,a0
    3258:	7ff00713          	li	a4,2047
    325c:	0037d793          	srli	a5,a5,0x3
    3260:	00e41e63          	bne	s0,a4,327c <__adddf3+0x74c>
    3264:	00f56533          	or	a0,a0,a5
    3268:	00000793          	li	a5,0
    326c:	00050863          	beqz	a0,327c <__adddf3+0x74c>
    3270:	000807b7          	lui	a5,0x80
    3274:	00000513          	li	a0,0
    3278:	00000493          	li	s1,0
    327c:	01441713          	slli	a4,s0,0x14
    3280:	7ff006b7          	lui	a3,0x7ff00
    3284:	00c79793          	slli	a5,a5,0xc
    3288:	01c12083          	lw	ra,28(sp)
    328c:	01812403          	lw	s0,24(sp)
    3290:	00d77733          	and	a4,a4,a3
    3294:	00c7d793          	srli	a5,a5,0xc
    3298:	01f49493          	slli	s1,s1,0x1f
    329c:	00f767b3          	or	a5,a4,a5
    32a0:	0097e733          	or	a4,a5,s1
    32a4:	01012903          	lw	s2,16(sp)
    32a8:	01412483          	lw	s1,20(sp)
    32ac:	00c12983          	lw	s3,12(sp)
    32b0:	00070593          	mv	a1,a4
    32b4:	02010113          	addi	sp,sp,32
    32b8:	00008067          	ret
    32bc:	00080413          	mv	s0,a6
    32c0:	b2dff06f          	j	2dec <__adddf3+0x2bc>
    32c4:	00070793          	mv	a5,a4
    32c8:	00060593          	mv	a1,a2
    32cc:	00050413          	mv	s0,a0
    32d0:	da5ff06f          	j	3074 <__adddf3+0x544>
    32d4:	00000793          	li	a5,0
    32d8:	00000593          	li	a1,0
    32dc:	00000493          	li	s1,0
    32e0:	f49ff06f          	j	3228 <__adddf3+0x6f8>
    32e4:	00000793          	li	a5,0
    32e8:	ff5ff06f          	j	32dc <__adddf3+0x7ac>
    32ec:	00000593          	li	a1,0
    32f0:	00000493          	li	s1,0
    32f4:	004007b7          	lui	a5,0x400
    32f8:	b35ff06f          	j	2e2c <__adddf3+0x2fc>
    32fc:	00000793          	li	a5,0
    3300:	00000593          	li	a1,0
    3304:	f49ff06f          	j	324c <__adddf3+0x71c>

00003308 <__eqdf2>:
    3308:	0145d713          	srli	a4,a1,0x14
    330c:	001007b7          	lui	a5,0x100
    3310:	fff78793          	addi	a5,a5,-1 # fffff <__data_region_end+0xf0e03>
    3314:	0146d813          	srli	a6,a3,0x14
    3318:	00050313          	mv	t1,a0
    331c:	00050e93          	mv	t4,a0
    3320:	7ff77713          	andi	a4,a4,2047
    3324:	7ff00513          	li	a0,2047
    3328:	00b7f8b3          	and	a7,a5,a1
    332c:	00060f13          	mv	t5,a2
    3330:	00d7f7b3          	and	a5,a5,a3
    3334:	01f5d593          	srli	a1,a1,0x1f
    3338:	7ff87813          	andi	a6,a6,2047
    333c:	01f6d693          	srli	a3,a3,0x1f
    3340:	00a71c63          	bne	a4,a0,3358 <__eqdf2+0x50>
    3344:	0068ee33          	or	t3,a7,t1
    3348:	00100513          	li	a0,1
    334c:	000e1463          	bnez	t3,3354 <__eqdf2+0x4c>
    3350:	00e80663          	beq	a6,a4,335c <__eqdf2+0x54>
    3354:	00008067          	ret
    3358:	00a81863          	bne	a6,a0,3368 <__eqdf2+0x60>
    335c:	00c7e633          	or	a2,a5,a2
    3360:	00100513          	li	a0,1
    3364:	fe0618e3          	bnez	a2,3354 <__eqdf2+0x4c>
    3368:	00100513          	li	a0,1
    336c:	ff0714e3          	bne	a4,a6,3354 <__eqdf2+0x4c>
    3370:	fef892e3          	bne	a7,a5,3354 <__eqdf2+0x4c>
    3374:	ffee90e3          	bne	t4,t5,3354 <__eqdf2+0x4c>
    3378:	00d58a63          	beq	a1,a3,338c <__eqdf2+0x84>
    337c:	fc071ce3          	bnez	a4,3354 <__eqdf2+0x4c>
    3380:	0068e533          	or	a0,a7,t1
    3384:	00a03533          	snez	a0,a0
    3388:	00008067          	ret
    338c:	00000513          	li	a0,0
    3390:	00008067          	ret

00003394 <__ledf2>:
    3394:	00100737          	lui	a4,0x100
    3398:	fff70713          	addi	a4,a4,-1 # fffff <__data_region_end+0xf0e03>
    339c:	0145d813          	srli	a6,a1,0x14
    33a0:	00b778b3          	and	a7,a4,a1
    33a4:	00050793          	mv	a5,a0
    33a8:	00050313          	mv	t1,a0
    33ac:	7ff87813          	andi	a6,a6,2047
    33b0:	01f5d513          	srli	a0,a1,0x1f
    33b4:	7ff00e93          	li	t4,2047
    33b8:	0146d593          	srli	a1,a3,0x14
    33bc:	00d77733          	and	a4,a4,a3
    33c0:	00060e13          	mv	t3,a2
    33c4:	7ff5f593          	andi	a1,a1,2047
    33c8:	01f6d693          	srli	a3,a3,0x1f
    33cc:	01d81a63          	bne	a6,t4,33e0 <__ledf2+0x4c>
    33d0:	00f8eeb3          	or	t4,a7,a5
    33d4:	080e8a63          	beqz	t4,3468 <__ledf2+0xd4>
    33d8:	00200513          	li	a0,2
    33dc:	00008067          	ret
    33e0:	01d59663          	bne	a1,t4,33ec <__ledf2+0x58>
    33e4:	00c76eb3          	or	t4,a4,a2
    33e8:	fe0e98e3          	bnez	t4,33d8 <__ledf2+0x44>
    33ec:	08081063          	bnez	a6,346c <__ledf2+0xd8>
    33f0:	00f8e7b3          	or	a5,a7,a5
    33f4:	0017b793          	seqz	a5,a5
    33f8:	00059663          	bnez	a1,3404 <__ledf2+0x70>
    33fc:	00c76633          	or	a2,a4,a2
    3400:	04060c63          	beqz	a2,3458 <__ledf2+0xc4>
    3404:	00079c63          	bnez	a5,341c <__ledf2+0x88>
    3408:	00d51463          	bne	a0,a3,3410 <__ledf2+0x7c>
    340c:	0305d063          	bge	a1,a6,342c <__ledf2+0x98>
    3410:	04050063          	beqz	a0,3450 <__ledf2+0xbc>
    3414:	fff00513          	li	a0,-1
    3418:	00008067          	ret
    341c:	fff00513          	li	a0,-1
    3420:	00068a63          	beqz	a3,3434 <__ledf2+0xa0>
    3424:	00068513          	mv	a0,a3
    3428:	00008067          	ret
    342c:	00b85663          	bge	a6,a1,3438 <__ledf2+0xa4>
    3430:	fe0502e3          	beqz	a0,3414 <__ledf2+0x80>
    3434:	00008067          	ret
    3438:	fd176ce3          	bltu	a4,a7,3410 <__ledf2+0x7c>
    343c:	02e89263          	bne	a7,a4,3460 <__ledf2+0xcc>
    3440:	fc6e68e3          	bltu	t3,t1,3410 <__ledf2+0x7c>
    3444:	ffc366e3          	bltu	t1,t3,3430 <__ledf2+0x9c>
    3448:	00000513          	li	a0,0
    344c:	00008067          	ret
    3450:	00100513          	li	a0,1
    3454:	00008067          	ret
    3458:	fe0798e3          	bnez	a5,3448 <__ledf2+0xb4>
    345c:	fb5ff06f          	j	3410 <__ledf2+0x7c>
    3460:	fce8e8e3          	bltu	a7,a4,3430 <__ledf2+0x9c>
    3464:	fe5ff06f          	j	3448 <__ledf2+0xb4>
    3468:	f7058ee3          	beq	a1,a6,33e4 <__ledf2+0x50>
    346c:	f8059ee3          	bnez	a1,3408 <__ledf2+0x74>
    3470:	00000793          	li	a5,0
    3474:	f89ff06f          	j	33fc <__ledf2+0x68>

00003478 <__unorddf2>:
    3478:	00100737          	lui	a4,0x100
    347c:	fff70793          	addi	a5,a4,-1 # fffff <__data_region_end+0xf0e03>
    3480:	00b7f733          	and	a4,a5,a1
    3484:	0145d593          	srli	a1,a1,0x14
    3488:	00d7f7b3          	and	a5,a5,a3
    348c:	7ff5f593          	andi	a1,a1,2047
    3490:	0146d693          	srli	a3,a3,0x14
    3494:	7ff00813          	li	a6,2047
    3498:	7ff6f693          	andi	a3,a3,2047
    349c:	01059863          	bne	a1,a6,34ac <__unorddf2+0x34>
    34a0:	00a76733          	or	a4,a4,a0
    34a4:	00100513          	li	a0,1
    34a8:	00071c63          	bnez	a4,34c0 <__unorddf2+0x48>
    34ac:	7ff00713          	li	a4,2047
    34b0:	00000513          	li	a0,0
    34b4:	00e69663          	bne	a3,a4,34c0 <__unorddf2+0x48>
    34b8:	00c7e7b3          	or	a5,a5,a2
    34bc:	00f03533          	snez	a0,a5
    34c0:	00008067          	ret

000034c4 <__fixdfsi>:
    34c4:	0145d713          	srli	a4,a1,0x14
    34c8:	001006b7          	lui	a3,0x100
    34cc:	fff68793          	addi	a5,a3,-1 # fffff <__data_region_end+0xf0e03>
    34d0:	7ff77713          	andi	a4,a4,2047
    34d4:	3fe00613          	li	a2,1022
    34d8:	00b7f7b3          	and	a5,a5,a1
    34dc:	01f5d593          	srli	a1,a1,0x1f
    34e0:	04e65e63          	bge	a2,a4,353c <__fixdfsi+0x78>
    34e4:	41d00613          	li	a2,1053
    34e8:	00e65a63          	bge	a2,a4,34fc <__fixdfsi+0x38>
    34ec:	80000537          	lui	a0,0x80000
    34f0:	fff54513          	not	a0,a0
    34f4:	00a58533          	add	a0,a1,a0
    34f8:	00008067          	ret
    34fc:	00d7e7b3          	or	a5,a5,a3
    3500:	43300693          	li	a3,1075
    3504:	40e686b3          	sub	a3,a3,a4
    3508:	01f00613          	li	a2,31
    350c:	02d64063          	blt	a2,a3,352c <__fixdfsi+0x68>
    3510:	bed70713          	addi	a4,a4,-1043
    3514:	00e797b3          	sll	a5,a5,a4
    3518:	00d55533          	srl	a0,a0,a3
    351c:	00a7e533          	or	a0,a5,a0
    3520:	02058063          	beqz	a1,3540 <__fixdfsi+0x7c>
    3524:	40a00533          	neg	a0,a0
    3528:	00008067          	ret
    352c:	41300513          	li	a0,1043
    3530:	40e50533          	sub	a0,a0,a4
    3534:	00a7d533          	srl	a0,a5,a0
    3538:	fe9ff06f          	j	3520 <__fixdfsi+0x5c>
    353c:	00000513          	li	a0,0
    3540:	00008067          	ret

00003544 <__floatsidf>:
    3544:	ff010113          	addi	sp,sp,-16
    3548:	00112623          	sw	ra,12(sp)
    354c:	00812423          	sw	s0,8(sp)
    3550:	00912223          	sw	s1,4(sp)
    3554:	08050663          	beqz	a0,35e0 <__floatsidf+0x9c>
    3558:	41f55793          	srai	a5,a0,0x1f
    355c:	00a7c433          	xor	s0,a5,a0
    3560:	40f40433          	sub	s0,s0,a5
    3564:	01f55493          	srli	s1,a0,0x1f
    3568:	00040513          	mv	a0,s0
    356c:	d85fc0ef          	jal	ra,2f0 <__clzsi2>
    3570:	41e00713          	li	a4,1054
    3574:	00a00793          	li	a5,10
    3578:	40a70733          	sub	a4,a4,a0
    357c:	04a7c863          	blt	a5,a0,35cc <__floatsidf+0x88>
    3580:	00b00793          	li	a5,11
    3584:	40a787b3          	sub	a5,a5,a0
    3588:	01550513          	addi	a0,a0,21 # 80000015 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000016>
    358c:	00f457b3          	srl	a5,s0,a5
    3590:	00a41433          	sll	s0,s0,a0
    3594:	00048513          	mv	a0,s1
    3598:	00c79793          	slli	a5,a5,0xc
    359c:	01471713          	slli	a4,a4,0x14
    35a0:	00c7d793          	srli	a5,a5,0xc
    35a4:	01f51513          	slli	a0,a0,0x1f
    35a8:	00f767b3          	or	a5,a4,a5
    35ac:	00c12083          	lw	ra,12(sp)
    35b0:	00a7e733          	or	a4,a5,a0
    35b4:	00040513          	mv	a0,s0
    35b8:	00812403          	lw	s0,8(sp)
    35bc:	00412483          	lw	s1,4(sp)
    35c0:	00070593          	mv	a1,a4
    35c4:	01010113          	addi	sp,sp,16
    35c8:	00008067          	ret
    35cc:	ff550513          	addi	a0,a0,-11
    35d0:	00a417b3          	sll	a5,s0,a0
    35d4:	00048513          	mv	a0,s1
    35d8:	00000413          	li	s0,0
    35dc:	fbdff06f          	j	3598 <__floatsidf+0x54>
    35e0:	00000713          	li	a4,0
    35e4:	00000793          	li	a5,0
    35e8:	ff1ff06f          	j	35d8 <__floatsidf+0x94>

000035ec <__trunctfdf2>:
    35ec:	fd010113          	addi	sp,sp,-48
    35f0:	00852783          	lw	a5,8(a0)
    35f4:	02812423          	sw	s0,40(sp)
    35f8:	00c52403          	lw	s0,12(a0)
    35fc:	00452703          	lw	a4,4(a0)
    3600:	00052683          	lw	a3,0(a0)
    3604:	00f12423          	sw	a5,8(sp)
    3608:	00f12c23          	sw	a5,24(sp)
    360c:	01041793          	slli	a5,s0,0x10
    3610:	00e12223          	sw	a4,4(sp)
    3614:	00e12a23          	sw	a4,20(sp)
    3618:	0107d793          	srli	a5,a5,0x10
    361c:	00141713          	slli	a4,s0,0x1
    3620:	00812623          	sw	s0,12(sp)
    3624:	02112623          	sw	ra,44(sp)
    3628:	02912223          	sw	s1,36(sp)
    362c:	00d12023          	sw	a3,0(sp)
    3630:	00d12823          	sw	a3,16(sp)
    3634:	00f12e23          	sw	a5,28(sp)
    3638:	01175713          	srli	a4,a4,0x11
    363c:	01f45413          	srli	s0,s0,0x1f
    3640:	01010513          	addi	a0,sp,16
    3644:	01c10613          	addi	a2,sp,28
    3648:	00062783          	lw	a5,0(a2)
    364c:	ffc62683          	lw	a3,-4(a2)
    3650:	ffc60613          	addi	a2,a2,-4
    3654:	00379793          	slli	a5,a5,0x3
    3658:	01d6d693          	srli	a3,a3,0x1d
    365c:	00d7e7b3          	or	a5,a5,a3
    3660:	00f62223          	sw	a5,4(a2)
    3664:	fec512e3          	bne	a0,a2,3648 <__trunctfdf2+0x5c>
    3668:	01012683          	lw	a3,16(sp)
    366c:	00170793          	addi	a5,a4,1
    3670:	00369593          	slli	a1,a3,0x3
    3674:	000086b7          	lui	a3,0x8
    3678:	ffe68693          	addi	a3,a3,-2 # 7ffe <_printf_float+0xc2>
    367c:	00b12823          	sw	a1,16(sp)
    3680:	00d7f7b3          	and	a5,a5,a3
    3684:	1c078063          	beqz	a5,3844 <__trunctfdf2+0x258>
    3688:	ffffc7b7          	lui	a5,0xffffc
    368c:	40078793          	addi	a5,a5,1024 # ffffc400 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffffc401>
    3690:	00f70733          	add	a4,a4,a5
    3694:	7fe00793          	li	a5,2046
    3698:	20e7c263          	blt	a5,a4,389c <__trunctfdf2+0x2b0>
    369c:	06e05863          	blez	a4,370c <__trunctfdf2+0x120>
    36a0:	01812503          	lw	a0,24(sp)
    36a4:	01c12603          	lw	a2,28(sp)
    36a8:	01412783          	lw	a5,20(sp)
    36ac:	01c55693          	srli	a3,a0,0x1c
    36b0:	00461613          	slli	a2,a2,0x4
    36b4:	00d66633          	or	a2,a2,a3
    36b8:	00479693          	slli	a3,a5,0x4
    36bc:	00b6e6b3          	or	a3,a3,a1
    36c0:	01c7d793          	srli	a5,a5,0x1c
    36c4:	00451513          	slli	a0,a0,0x4
    36c8:	00d036b3          	snez	a3,a3
    36cc:	00a7e7b3          	or	a5,a5,a0
    36d0:	00f6e6b3          	or	a3,a3,a5
    36d4:	00c12a23          	sw	a2,20(sp)
    36d8:	00d12823          	sw	a3,16(sp)
    36dc:	01012683          	lw	a3,16(sp)
    36e0:	01412783          	lw	a5,20(sp)
    36e4:	0076f613          	andi	a2,a3,7
    36e8:	1c060063          	beqz	a2,38a8 <__trunctfdf2+0x2bc>
    36ec:	00f6f613          	andi	a2,a3,15
    36f0:	00400593          	li	a1,4
    36f4:	1ab60a63          	beq	a2,a1,38a8 <__trunctfdf2+0x2bc>
    36f8:	00468613          	addi	a2,a3,4
    36fc:	00d636b3          	sltu	a3,a2,a3
    3700:	00d787b3          	add	a5,a5,a3
    3704:	00060693          	mv	a3,a2
    3708:	1a00006f          	j	38a8 <__trunctfdf2+0x2bc>
    370c:	fcc00793          	li	a5,-52
    3710:	00f75c63          	bge	a4,a5,3728 <__trunctfdf2+0x13c>
    3714:	00012a23          	sw	zero,20(sp)
    3718:	00100793          	li	a5,1
    371c:	00f12823          	sw	a5,16(sp)
    3720:	00000713          	li	a4,0
    3724:	fb9ff06f          	j	36dc <__trunctfdf2+0xf0>
    3728:	01c12783          	lw	a5,28(sp)
    372c:	000808b7          	lui	a7,0x80
    3730:	00050593          	mv	a1,a0
    3734:	00f8e8b3          	or	a7,a7,a5
    3738:	03d00793          	li	a5,61
    373c:	40e78733          	sub	a4,a5,a4
    3740:	01112e23          	sw	a7,28(sp)
    3744:	40575793          	srai	a5,a4,0x5
    3748:	00000693          	li	a3,0
    374c:	00000493          	li	s1,0
    3750:	0005a803          	lw	a6,0(a1)
    3754:	00168693          	addi	a3,a3,1
    3758:	00458593          	addi	a1,a1,4
    375c:	0104e4b3          	or	s1,s1,a6
    3760:	fed798e3          	bne	a5,a3,3750 <__trunctfdf2+0x164>
    3764:	01f77713          	andi	a4,a4,31
    3768:	00279693          	slli	a3,a5,0x2
    376c:	02071863          	bnez	a4,379c <__trunctfdf2+0x1b0>
    3770:	00300593          	li	a1,3
    3774:	40f585b3          	sub	a1,a1,a5
    3778:	00d60833          	add	a6,a2,a3
    377c:	00082803          	lw	a6,0(a6)
    3780:	00170713          	addi	a4,a4,1
    3784:	00460613          	addi	a2,a2,4
    3788:	ff062e23          	sw	a6,-4(a2)
    378c:	fee5d6e3          	bge	a1,a4,3778 <__trunctfdf2+0x18c>
    3790:	00400713          	li	a4,4
    3794:	40f707b3          	sub	a5,a4,a5
    3798:	0580006f          	j	37f0 <__trunctfdf2+0x204>
    379c:	ffc00e13          	li	t3,-4
    37a0:	03c78e33          	mul	t3,a5,t3
    37a4:	02010613          	addi	a2,sp,32
    37a8:	00d60633          	add	a2,a2,a3
    37ac:	ff062603          	lw	a2,-16(a2)
    37b0:	02000813          	li	a6,32
    37b4:	40e80833          	sub	a6,a6,a4
    37b8:	01061633          	sll	a2,a2,a6
    37bc:	00c4e4b3          	or	s1,s1,a2
    37c0:	00300613          	li	a2,3
    37c4:	00d506b3          	add	a3,a0,a3
    37c8:	00000313          	li	t1,0
    37cc:	40f60633          	sub	a2,a2,a5
    37d0:	04c34663          	blt	t1,a2,381c <__trunctfdf2+0x230>
    37d4:	00400693          	li	a3,4
    37d8:	40f687b3          	sub	a5,a3,a5
    37dc:	00261613          	slli	a2,a2,0x2
    37e0:	02010693          	addi	a3,sp,32
    37e4:	00c68633          	add	a2,a3,a2
    37e8:	00e8d733          	srl	a4,a7,a4
    37ec:	fee62823          	sw	a4,-16(a2)
    37f0:	00400613          	li	a2,4
    37f4:	40f60633          	sub	a2,a2,a5
    37f8:	00279793          	slli	a5,a5,0x2
    37fc:	00f50533          	add	a0,a0,a5
    3800:	00261613          	slli	a2,a2,0x2
    3804:	00000593          	li	a1,0
    3808:	b0cff0ef          	jal	ra,2b14 <memset>
    380c:	01012703          	lw	a4,16(sp)
    3810:	009037b3          	snez	a5,s1
    3814:	00f767b3          	or	a5,a4,a5
    3818:	f05ff06f          	j	371c <__trunctfdf2+0x130>
    381c:	0006a583          	lw	a1,0(a3)
    3820:	0046ae83          	lw	t4,4(a3)
    3824:	01c68f33          	add	t5,a3,t3
    3828:	00e5d5b3          	srl	a1,a1,a4
    382c:	010e9eb3          	sll	t4,t4,a6
    3830:	01d5e5b3          	or	a1,a1,t4
    3834:	00bf2023          	sw	a1,0(t5)
    3838:	00130313          	addi	t1,t1,1
    383c:	00468693          	addi	a3,a3,4
    3840:	f91ff06f          	j	37d0 <__trunctfdf2+0x1e4>
    3844:	01412603          	lw	a2,20(sp)
    3848:	01812783          	lw	a5,24(sp)
    384c:	01c12503          	lw	a0,28(sp)
    3850:	00c7e6b3          	or	a3,a5,a2
    3854:	00a6e6b3          	or	a3,a3,a0
    3858:	00b6e6b3          	or	a3,a3,a1
    385c:	00071863          	bnez	a4,386c <__trunctfdf2+0x280>
    3860:	00d036b3          	snez	a3,a3
    3864:	00000793          	li	a5,0
    3868:	e7dff06f          	j	36e4 <__trunctfdf2+0xf8>
    386c:	0c068663          	beqz	a3,3938 <__trunctfdf2+0x34c>
    3870:	01c65693          	srli	a3,a2,0x1c
    3874:	00451513          	slli	a0,a0,0x4
    3878:	00479613          	slli	a2,a5,0x4
    387c:	01c7d793          	srli	a5,a5,0x1c
    3880:	00400737          	lui	a4,0x400
    3884:	00c6e6b3          	or	a3,a3,a2
    3888:	00a7e7b3          	or	a5,a5,a0
    388c:	00e7e7b3          	or	a5,a5,a4
    3890:	ff86f693          	andi	a3,a3,-8
    3894:	7ff00713          	li	a4,2047
    3898:	e4dff06f          	j	36e4 <__trunctfdf2+0xf8>
    389c:	00000793          	li	a5,0
    38a0:	00000693          	li	a3,0
    38a4:	7ff00713          	li	a4,2047
    38a8:	00800637          	lui	a2,0x800
    38ac:	00c7f633          	and	a2,a5,a2
    38b0:	00060e63          	beqz	a2,38cc <__trunctfdf2+0x2e0>
    38b4:	00170713          	addi	a4,a4,1 # 400001 <__data_region_end+0x3f0e05>
    38b8:	7ff00613          	li	a2,2047
    38bc:	08c70263          	beq	a4,a2,3940 <__trunctfdf2+0x354>
    38c0:	ff800637          	lui	a2,0xff800
    38c4:	fff60613          	addi	a2,a2,-1 # ff7fffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xff800000>
    38c8:	00c7f7b3          	and	a5,a5,a2
    38cc:	01d79613          	slli	a2,a5,0x1d
    38d0:	0036d693          	srli	a3,a3,0x3
    38d4:	00d666b3          	or	a3,a2,a3
    38d8:	7ff00613          	li	a2,2047
    38dc:	0037d793          	srli	a5,a5,0x3
    38e0:	00c71e63          	bne	a4,a2,38fc <__trunctfdf2+0x310>
    38e4:	00f6e6b3          	or	a3,a3,a5
    38e8:	00000793          	li	a5,0
    38ec:	00068863          	beqz	a3,38fc <__trunctfdf2+0x310>
    38f0:	000807b7          	lui	a5,0x80
    38f4:	00000693          	li	a3,0
    38f8:	00000413          	li	s0,0
    38fc:	01471713          	slli	a4,a4,0x14
    3900:	7ff00637          	lui	a2,0x7ff00
    3904:	00c79793          	slli	a5,a5,0xc
    3908:	00c77733          	and	a4,a4,a2
    390c:	00c7d793          	srli	a5,a5,0xc
    3910:	01f41413          	slli	s0,s0,0x1f
    3914:	00f767b3          	or	a5,a4,a5
    3918:	02c12083          	lw	ra,44(sp)
    391c:	0087e733          	or	a4,a5,s0
    3920:	02812403          	lw	s0,40(sp)
    3924:	02412483          	lw	s1,36(sp)
    3928:	00068513          	mv	a0,a3
    392c:	00070593          	mv	a1,a4
    3930:	03010113          	addi	sp,sp,48
    3934:	00008067          	ret
    3938:	00000793          	li	a5,0
    393c:	f69ff06f          	j	38a4 <__trunctfdf2+0x2b8>
    3940:	00000793          	li	a5,0
    3944:	00000693          	li	a3,0
    3948:	f85ff06f          	j	38cc <__trunctfdf2+0x2e0>

0000394c <_OffsetAbsSyms>:
 * point regs
 */
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF,
		 STACK_ROUND_UP(sizeof(struct k_thread)));

GEN_ABS_SYM_END
    394c:	00008067          	ret

00003950 <my_isr>:
 * @brief gives the semaphore for accelerator thread to procede
 * 
 * @param arg 
 */
void my_isr(const void *arg) {
    *acceleratorIP_ISR = 0x1;
    3950:	0000f7b7          	lui	a5,0xf
    3954:	1147a783          	lw	a5,276(a5) # f114 <acceleratorIP_ISR>
    3958:	00100713          	li	a4,1
    395c:	00e7a023          	sw	a4,0(a5)
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    3960:	0000f537          	lui	a0,0xf
    3964:	1ec50513          	addi	a0,a0,492 # f1ec <accel_sem>
    3968:	7c10206f          	j	6928 <z_impl_k_sem_give>

0000396c <thread_accelerator>:
    
    k_sem_give(&accel_sem);
}

void thread_accelerator(void *id, void *unused1, void *unused2)
{
    396c:	fd010113          	addi	sp,sp,-48
    3970:	02812423          	sw	s0,40(sp)
    3974:	02912223          	sw	s1,36(sp)
    3978:	03212023          	sw	s2,32(sp)
    397c:	02112623          	sw	ra,44(sp)
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&msgq, *(uintptr_t *)&data, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
    3980:	0000f437          	lui	s0,0xf
	return z_impl_k_sem_take(sem, timeout);
    3984:	0000f4b7          	lui	s1,0xf
	return z_impl_k_msgq_put(msgq, data, timeout);
    3988:	0000f937          	lui	s2,0xf
	return z_impl_k_msgq_get(msgq, data, timeout);
    398c:	fff00613          	li	a2,-1
    3990:	00410593          	addi	a1,sp,4
    3994:	fff00693          	li	a3,-1
    3998:	19c40513          	addi	a0,s0,412 # f19c <accel_msgq>
    399c:	39d020ef          	jal	ra,6538 <z_impl_k_msgq_get>

    while(1) {
        k_msgq_get(&accel_msgq, &msg, K_FOREVER);
        // printf("Received message from %d\n", msg.sender_id);

        multiply_mat_hw(msg.mat1_address, msg.mat2_address, msg.result_address, msg.rows1, msg.cols1, msg.cols2);
    39a0:	01812783          	lw	a5,24(sp)
    39a4:	01012703          	lw	a4,16(sp)
    39a8:	00c12683          	lw	a3,12(sp)
    39ac:	01c12603          	lw	a2,28(sp)
    39b0:	01412583          	lw	a1,20(sp)
    39b4:	00812503          	lw	a0,8(sp)
    39b8:	768000ef          	jal	ra,4120 <multiply_mat_hw>
	return z_impl_k_sem_take(sem, timeout);
    39bc:	fff00593          	li	a1,-1
    39c0:	fff00613          	li	a2,-1
    39c4:	1ec48513          	addi	a0,s1,492 # f1ec <accel_sem>
    39c8:	7cd020ef          	jal	ra,6994 <z_impl_k_sem_take>
	return z_impl_k_msgq_put(msgq, data, timeout);
    39cc:	00000613          	li	a2,0
    39d0:	00000693          	li	a3,0
    39d4:	00410593          	addi	a1,sp,4
    39d8:	1c490513          	addi	a0,s2,452 # f1c4 <reply_msgq>
    39dc:	245020ef          	jal	ra,6420 <z_impl_k_msgq_put>
        k_sem_take(&accel_sem, K_FOREVER);

        while (k_msgq_put(&reply_msgq, &msg, K_NO_WAIT) != 0)
    39e0:	fa0506e3          	beqz	a0,398c <thread_accelerator+0x20>
	z_impl_k_yield();
    39e4:	179030ef          	jal	ra,735c <z_impl_k_yield>
}
    39e8:	fe5ff06f          	j	39cc <thread_accelerator+0x60>

000039ec <my_isr_installer>:
    *acceleratorGIER = 0x1;
    39ec:	0000f7b7          	lui	a5,0xf
    39f0:	10c7a703          	lw	a4,268(a5) # f10c <acceleratorGIER>
    39f4:	00100793          	li	a5,1
    arch_irq_enable(ACCEL_IRQ);
    39f8:	00f00513          	li	a0,15
    *acceleratorGIER = 0x1;
    39fc:	00f72023          	sw	a5,0(a4)
    *acceleratorIP_IER = 0x1;
    3a00:	0000f737          	lui	a4,0xf
    3a04:	11072703          	lw	a4,272(a4) # f110 <acceleratorIP_IER>
    3a08:	00f72023          	sw	a5,0(a4)
    arch_irq_enable(ACCEL_IRQ);
    3a0c:	5a50106f          	j	57b0 <arch_irq_enable>

00003a10 <main>:
    printf("*** Starting matmul UC 3 ***\n\n");
    3a10:	0000d537          	lui	a0,0xd
{
    3a14:	f3010113          	addi	sp,sp,-208
    printf("*** Starting matmul UC 3 ***\n\n");
    3a18:	8b050513          	addi	a0,a0,-1872 # c8b0 <__mprec_tens+0xc8>
{
    3a1c:	0c112623          	sw	ra,204(sp)
    3a20:	0c812423          	sw	s0,200(sp)
    3a24:	0c912223          	sw	s1,196(sp)
    3a28:	0d212023          	sw	s2,192(sp)
    3a2c:	0b312e23          	sw	s3,188(sp)
    3a30:	0b412c23          	sw	s4,184(sp)
    3a34:	0b512a23          	sw	s5,180(sp)
    3a38:	0b612823          	sw	s6,176(sp)
    3a3c:	0b712623          	sw	s7,172(sp)
    3a40:	0b812423          	sw	s8,168(sp)
    3a44:	0b912223          	sw	s9,164(sp)
    3a48:	0ba12023          	sw	s10,160(sp)
    3a4c:	09b12e23          	sw	s11,156(sp)
    printf("*** Starting matmul UC 3 ***\n\n");
    3a50:	1d0050ef          	jal	ra,8c20 <iprintf>
    printf("Installing ISR...\n");
    3a54:	0000d537          	lui	a0,0xd
    3a58:	8d050513          	addi	a0,a0,-1840 # c8d0 <__mprec_tens+0xe8>
    3a5c:	1c4050ef          	jal	ra,8c20 <iprintf>
    my_isr_installer();
    3a60:	f8dff0ef          	jal	ra,39ec <my_isr_installer>
    printf("\nSaving %d matrix pairs to memory...\n", NUM_MULTIPLICATIONS);
    3a64:	0000d537          	lui	a0,0xd
    3a68:	20000593          	li	a1,512
    3a6c:	8e450513          	addi	a0,a0,-1820 # c8e4 <__mprec_tens+0xfc>
    3a70:	1b0050ef          	jal	ra,8c20 <iprintf>
    3a74:	04000437          	lui	s0,0x4000
        create_mat(mat2Addr, MAT1ROWS, MAT1COLS);
    3a78:	000019b7          	lui	s3,0x1
    for(int i=0; i<NUM_MULTIPLICATIONS; i++) {
    3a7c:	00004937          	lui	s2,0x4
    3a80:	048004b7          	lui	s1,0x4800
        create_mat(mat1Addr, MAT1ROWS, MAT1COLS);
    3a84:	00040513          	mv	a0,s0
    3a88:	02000613          	li	a2,32
    3a8c:	02000593          	li	a1,32
    3a90:	4ac000ef          	jal	ra,3f3c <create_mat>
        create_mat(mat2Addr, MAT1ROWS, MAT1COLS);
    3a94:	01340533          	add	a0,s0,s3
    3a98:	02000613          	li	a2,32
    3a9c:	02000593          	li	a1,32
    for(int i=0; i<NUM_MULTIPLICATIONS; i++) {
    3aa0:	01240433          	add	s0,s0,s2
        create_mat(mat2Addr, MAT1ROWS, MAT1COLS);
    3aa4:	498000ef          	jal	ra,3f3c <create_mat>
    for(int i=0; i<NUM_MULTIPLICATIONS; i++) {
    3aa8:	fc941ee3          	bne	s0,s1,3a84 <main+0x74>
    printf("%d saved to memory!\n", NUM_MULTIPLICATIONS);
    3aac:	0000d537          	lui	a0,0xd
    3ab0:	20000593          	li	a1,512
    3ab4:	90c50513          	addi	a0,a0,-1780 # c90c <__mprec_tens+0x124>
    3ab8:	168050ef          	jal	ra,8c20 <iprintf>
    printf("\nPerforming matrix multiplication with pooling...\n");
    3abc:	0000d537          	lui	a0,0xd
    3ac0:	92450513          	addi	a0,a0,-1756 # c924 <__mprec_tens+0x13c>
    3ac4:	15c050ef          	jal	ra,8c20 <iprintf>
    *acceleratorGIER = 0x0;
    3ac8:	0000f937          	lui	s2,0xf
    3acc:	10c92783          	lw	a5,268(s2) # f10c <acceleratorGIER>
    3ad0:	0007a023          	sw	zero,0(a5)
	return z_impl_k_uptime_ticks();
    3ad4:	73d030ef          	jal	ra,7a10 <z_impl_k_uptime_ticks>
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
    3ad8:	00a00593          	li	a1,10
    3adc:	02a584b3          	mul	s1,a1,a0
    int start_p_ms = k_uptime_get();
    3ae0:	04000437          	lui	s0,0x4000
    3ae4:	10c90913          	addi	s2,s2,268
        multiply_mat_hw_pool(mat1Addr, mat2Addr, resultAddr, MAT1ROWS, MAT1COLS, MAT2COLS);
    3ae8:	00002b37          	lui	s6,0x2
    3aec:	00001ab7          	lui	s5,0x1
    for(int i=0; i<NUM_MULTIPLICATIONS; i++) {
    3af0:	00004a37          	lui	s4,0x4
    3af4:	048009b7          	lui	s3,0x4800
        multiply_mat_hw_pool(mat1Addr, mat2Addr, resultAddr, MAT1ROWS, MAT1COLS, MAT2COLS);
    3af8:	01640633          	add	a2,s0,s6
    3afc:	015405b3          	add	a1,s0,s5
    3b00:	00040513          	mv	a0,s0
    3b04:	02000793          	li	a5,32
    3b08:	02000713          	li	a4,32
    3b0c:	02000693          	li	a3,32
    for(int i=0; i<NUM_MULTIPLICATIONS; i++) {
    3b10:	01440433          	add	s0,s0,s4
        multiply_mat_hw_pool(mat1Addr, mat2Addr, resultAddr, MAT1ROWS, MAT1COLS, MAT2COLS);
    3b14:	5d4000ef          	jal	ra,40e8 <multiply_mat_hw_pool>
    for(int i=0; i<NUM_MULTIPLICATIONS; i++) {
    3b18:	ff3410e3          	bne	s0,s3,3af8 <main+0xe8>
    3b1c:	6f5030ef          	jal	ra,7a10 <z_impl_k_uptime_ticks>
    3b20:	00a00593          	li	a1,10
    3b24:	02a585b3          	mul	a1,a1,a0
    *acceleratorIP_ISR = 0x1;
    3b28:	0000f7b7          	lui	a5,0xf
    3b2c:	1147a703          	lw	a4,276(a5) # f114 <acceleratorIP_ISR>
    3b30:	00100793          	li	a5,1
    printf("Completed matrix multiplication with pooling!\n");
    3b34:	0000d537          	lui	a0,0xd
    *acceleratorIP_ISR = 0x1;
    3b38:	00f72023          	sw	a5,0(a4)
    *acceleratorGIER = 0x1;
    3b3c:	00092703          	lw	a4,0(s2)
    printf("Completed matrix multiplication with pooling!\n");
    3b40:	95850513          	addi	a0,a0,-1704 # c958 <__mprec_tens+0x170>
    printf("Execution time: %d ms\n", time_p);
    3b44:	0000da37          	lui	s4,0xd
    *acceleratorGIER = 0x1;
    3b48:	00f72023          	sw	a5,0(a4)
    int time_p = finish_p_ms - start_p_ms;
    3b4c:	409585b3          	sub	a1,a1,s1
    3b50:	00b12e23          	sw	a1,28(sp)
    printf("Completed matrix multiplication with pooling!\n");
    3b54:	0cc050ef          	jal	ra,8c20 <iprintf>
    printf("Execution time: %d ms\n", time_p);
    3b58:	01c12583          	lw	a1,28(sp)
    3b5c:	0000d437          	lui	s0,0xd
    3b60:	988a0513          	addi	a0,s4,-1656 # c988 <__mprec_tens+0x1a0>
    3b64:	05840413          	addi	s0,s0,88 # d058 <threads>
    3b68:	0000d9b7          	lui	s3,0xd
    3b6c:	0000d937          	lui	s2,0xd
    3b70:	0b0050ef          	jal	ra,8c20 <iprintf>
    for(int i=0; i<NUM_THREADS+1; i++) {
    3b74:	31098993          	addi	s3,s3,784 # d310 <stacks>
    3b78:	2d890913          	addi	s2,s2,728 # d2d8 <thread_ids>
    3b7c:	00000493          	li	s1,0
    3b80:	fff00b13          	li	s6,-1
    3b84:	fff00b93          	li	s7,-1
            snprintk(tname, CONFIG_THREAD_MAX_NAME_LEN, "thread %d", i);
    3b88:	0000dab7          	lui	s5,0xd
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    3b8c:	10040c13          	addi	s8,s0,256
    3b90:	00004cb7          	lui	s9,0x4
    3b94:	0000ed37          	lui	s10,0xe
            snprintk(tname, CONFIG_THREAD_MAX_NAME_LEN, "accelerator");
    3b98:	0000ddb7          	lui	s11,0xd
        if(i == NUM_THREADS) {
    3b9c:	00200793          	li	a5,2
    3ba0:	14f49e63          	bne	s1,a5,3cfc <main+0x2ec>
    3ba4:	00400793          	li	a5,4
    3ba8:	00f12023          	sw	a5,0(sp)
    3bac:	40000613          	li	a2,1024
    3bb0:	b10d0593          	addi	a1,s10,-1264 # db10 <stacks+0x800>
    3bb4:	01612423          	sw	s6,8(sp)
    3bb8:	01712623          	sw	s7,12(sp)
    3bbc:	00500893          	li	a7,5
    3bc0:	00000813          	li	a6,0
    3bc4:	00000793          	li	a5,0
    3bc8:	00200713          	li	a4,2
    3bcc:	96cc8693          	addi	a3,s9,-1684 # 396c <thread_accelerator>
    3bd0:	000c0513          	mv	a0,s8
    3bd4:	694020ef          	jal	ra,6268 <z_impl_k_thread_create>
            snprintk(tname, CONFIG_THREAD_MAX_NAME_LEN, "accelerator");
    3bd8:	9a0d8613          	addi	a2,s11,-1632 # c9a0 <__mprec_tens+0x1b8>
    3bdc:	06400593          	li	a1,100
    3be0:	02c10513          	addi	a0,sp,44
    3be4:	668000ef          	jal	ra,424c <snprintk>
	return z_impl_k_thread_name_set(thread, str);
    3be8:	02c10593          	addi	a1,sp,44
    3bec:	00040513          	mv	a0,s0
    3bf0:	5e8020ef          	jal	ra,61d8 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    3bf4:	00040513          	mv	a0,s0
    3bf8:	5e8020ef          	jal	ra,61e0 <z_impl_k_thread_start>
    for(int i=0; i<NUM_THREADS+1; i++) {
    3bfc:	00148493          	addi	s1,s1,1 # 4800001 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1850f81>
    3c00:	00300793          	li	a5,3
    3c04:	08040413          	addi	s0,s0,128
    3c08:	40098993          	addi	s3,s3,1024
    3c0c:	00490913          	addi	s2,s2,4
    3c10:	f8f496e3          	bne	s1,a5,3b9c <main+0x18c>
    printf("\nPerforming matrix multiplication using the hardware accelerator...\n");
    3c14:	0000d537          	lui	a0,0xd
    3c18:	9b850513          	addi	a0,a0,-1608 # c9b8 <__mprec_tens+0x1d0>
    3c1c:	004050ef          	jal	ra,8c20 <iprintf>
	return z_impl_k_uptime_ticks();
    3c20:	5f1030ef          	jal	ra,7a10 <z_impl_k_uptime_ticks>
    3c24:	00050413          	mv	s0,a0
	return z_impl_z_current_get();
    3c28:	00d030ef          	jal	ra,7434 <z_impl_z_current_get>
	z_impl_k_thread_suspend(thread);
    3c2c:	5c8030ef          	jal	ra,71f4 <z_impl_k_thread_suspend>
	return z_impl_k_uptime_ticks();
    3c30:	5e1030ef          	jal	ra,7a10 <z_impl_k_uptime_ticks>
    3c34:	408505b3          	sub	a1,a0,s0
    int time_hw = finish_hw_ms - start_hw_ms;
    3c38:	00a00513          	li	a0,10
    3c3c:	02a585b3          	mul	a1,a1,a0
    printf("Completed matrix multiplication using the hardware accelerator!\n");
    3c40:	0000d537          	lui	a0,0xd
    3c44:	a0050513          	addi	a0,a0,-1536 # ca00 <__mprec_tens+0x218>
    printf("\nChecking if results match...\n");
    3c48:	04002437          	lui	s0,0x4002
    int numErrors = 0;
    3c4c:	00000493          	li	s1,0
    for(int i=0; i<NUM_MULTIPLICATIONS; i++) {
    3c50:	000049b7          	lui	s3,0x4
    3c54:	04802937          	lui	s2,0x4802
    int time_hw = finish_hw_ms - start_hw_ms;
    3c58:	00b12e23          	sw	a1,28(sp)
    printf("Completed matrix multiplication using the hardware accelerator!\n");
    3c5c:	7c5040ef          	jal	ra,8c20 <iprintf>
    printf("Execution time: %d ms\n", time_hw);
    3c60:	01c12583          	lw	a1,28(sp)
    3c64:	988a0513          	addi	a0,s4,-1656
        numErrors += verify(resultPoolAddr, resultHWAddr, MAT1ROWS, MAT2COLS);
    3c68:	00001a37          	lui	s4,0x1
    printf("Execution time: %d ms\n", time_hw);
    3c6c:	7b5040ef          	jal	ra,8c20 <iprintf>
    printf("\nChecking if results match...\n");
    3c70:	0000d537          	lui	a0,0xd
    3c74:	a4450513          	addi	a0,a0,-1468 # ca44 <__mprec_tens+0x25c>
    3c78:	7a9040ef          	jal	ra,8c20 <iprintf>
        numErrors += verify(resultPoolAddr, resultHWAddr, MAT1ROWS, MAT2COLS);
    3c7c:	014405b3          	add	a1,s0,s4
    3c80:	00040513          	mv	a0,s0
    3c84:	02000693          	li	a3,32
    3c88:	02000613          	li	a2,32
    3c8c:	370000ef          	jal	ra,3ffc <verify>
    for(int i=0; i<NUM_MULTIPLICATIONS; i++) {
    3c90:	01340433          	add	s0,s0,s3
        numErrors += verify(resultPoolAddr, resultHWAddr, MAT1ROWS, MAT2COLS);
    3c94:	00a484b3          	add	s1,s1,a0
    for(int i=0; i<NUM_MULTIPLICATIONS; i++) {
    3c98:	ff2412e3          	bne	s0,s2,3c7c <main+0x26c>
    printf("\n%d operations done with %d errors!\n", NUM_MULTIPLICATIONS, numErrors);
    3c9c:	0000d537          	lui	a0,0xd
    3ca0:	00048613          	mv	a2,s1
    3ca4:	20000593          	li	a1,512
    3ca8:	a6450513          	addi	a0,a0,-1436 # ca64 <__mprec_tens+0x27c>
    3cac:	775040ef          	jal	ra,8c20 <iprintf>
    printf("\n*** Exiting matmul UC 3 ***\n");
    3cb0:	0000d537          	lui	a0,0xd
    3cb4:	a8c50513          	addi	a0,a0,-1396 # ca8c <__mprec_tens+0x2a4>
    3cb8:	769040ef          	jal	ra,8c20 <iprintf>
}
    3cbc:	0cc12083          	lw	ra,204(sp)
    3cc0:	0c812403          	lw	s0,200(sp)
    3cc4:	0c412483          	lw	s1,196(sp)
    3cc8:	0c012903          	lw	s2,192(sp)
    3ccc:	0bc12983          	lw	s3,188(sp)
    3cd0:	0b812a03          	lw	s4,184(sp)
    3cd4:	0b412a83          	lw	s5,180(sp)
    3cd8:	0b012b03          	lw	s6,176(sp)
    3cdc:	0ac12b83          	lw	s7,172(sp)
    3ce0:	0a812c03          	lw	s8,168(sp)
    3ce4:	0a412c83          	lw	s9,164(sp)
    3ce8:	0a012d03          	lw	s10,160(sp)
    3cec:	09c12d83          	lw	s11,156(sp)
    3cf0:	00000513          	li	a0,0
    3cf4:	0d010113          	addi	sp,sp,208
    3cf8:	00008067          	ret
	return z_impl_z_current_get();
    3cfc:	738030ef          	jal	ra,7434 <z_impl_z_current_get>
    3d00:	00050713          	mv	a4,a0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    3d04:	00400793          	li	a5,4
    3d08:	000046b7          	lui	a3,0x4
    3d0c:	00f12023          	sw	a5,0(sp)
    3d10:	00098593          	mv	a1,s3
    3d14:	01612423          	sw	s6,8(sp)
    3d18:	01712623          	sw	s7,12(sp)
    3d1c:	00500893          	li	a7,5
    3d20:	00000813          	li	a6,0
    3d24:	00048793          	mv	a5,s1
    3d28:	df468693          	addi	a3,a3,-524 # 3df4 <thread_software>
    3d2c:	40000613          	li	a2,1024
    3d30:	00040513          	mv	a0,s0
    3d34:	534020ef          	jal	ra,6268 <z_impl_k_thread_create>
            thread_ids[i] = k_thread_create(&threads[i], &stacks[i][0], STACKSIZE,
    3d38:	00a92023          	sw	a0,0(s2) # 4802000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1852f80>
            snprintk(tname, CONFIG_THREAD_MAX_NAME_LEN, "thread %d", i);
    3d3c:	00048693          	mv	a3,s1
    3d40:	9aca8613          	addi	a2,s5,-1620 # c9ac <__mprec_tens+0x1c4>
    3d44:	06400593          	li	a1,100
    3d48:	02c10513          	addi	a0,sp,44
    3d4c:	500000ef          	jal	ra,424c <snprintk>
    3d50:	e99ff06f          	j	3be8 <main+0x1d8>

00003d54 <send_msg>:
    if(totalCompleted == NUM_THREADS)
        k_thread_resume(mainId);
}

void send_msg(int id, int mat1Address, int mat2Address, int resultAddress, int rows1, int cols1, int cols2)
{
    3d54:	fd010113          	addi	sp,sp,-48
    3d58:	02812423          	sw	s0,40(sp)
    3d5c:	02912223          	sw	s1,36(sp)
    3d60:	02112623          	sw	ra,44(sp)
    3d64:	00050413          	mv	s0,a0
    struct message msg;

    msg.sender_id = id;
    3d68:	00a12223          	sw	a0,4(sp)
    msg.result_address = resultAddress;
    3d6c:	00d12e23          	sw	a3,28(sp)
    msg.mat1_address = mat1Address;
    3d70:	00b12423          	sw	a1,8(sp)
    msg.mat2_address = mat2Address;
    3d74:	00c12a23          	sw	a2,20(sp)
    msg.rows1 = rows1;
    3d78:	00e12623          	sw	a4,12(sp)
    msg.cols1 = cols1;
    3d7c:	00f12823          	sw	a5,16(sp)
    msg.cols2 = cols2;
    3d80:	01012c23          	sw	a6,24(sp)
	return z_impl_k_msgq_put(msgq, data, timeout);
    3d84:	0000f4b7          	lui	s1,0xf
    3d88:	00000613          	li	a2,0
    3d8c:	00000693          	li	a3,0
    3d90:	00410593          	addi	a1,sp,4
    3d94:	19c48513          	addi	a0,s1,412 # f19c <accel_msgq>
    3d98:	688020ef          	jal	ra,6420 <z_impl_k_msgq_put>

    while (k_msgq_put(&accel_msgq, &msg, K_NO_WAIT) != 0) {
    3d9c:	04051463          	bnez	a0,3de4 <send_msg+0x90>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&msgq, *(uintptr_t *)&data, K_SYSCALL_K_MSGQ_PEEK);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_peek(msgq, data);
    3da0:	0000f4b7          	lui	s1,0xf
    3da4:	00410593          	addi	a1,sp,4
    3da8:	1c448513          	addi	a0,s1,452 # f1c4 <reply_msgq>
    3dac:	0d9020ef          	jal	ra,6684 <z_impl_k_msgq_peek>
        k_yield();
    }
    // printf("Thread %d sent message to central thread!\n", id);
    while (k_msgq_peek(&reply_msgq, &msg) != 0 || msg.sender_id != id) {
    3db0:	02051e63          	bnez	a0,3dec <send_msg+0x98>
    3db4:	00412783          	lw	a5,4(sp)
    3db8:	02879a63          	bne	a5,s0,3dec <send_msg+0x98>
	return z_impl_k_msgq_get(msgq, data, timeout);
    3dbc:	fff00613          	li	a2,-1
    3dc0:	00410593          	addi	a1,sp,4
    3dc4:	1c448513          	addi	a0,s1,452
    3dc8:	fff00693          	li	a3,-1
    3dcc:	76c020ef          	jal	ra,6538 <z_impl_k_msgq_get>
        k_yield();
    }
    k_msgq_get(&reply_msgq, &msg, K_FOREVER);
    // printf("Thread %d received a reply: %d!\n", id, msg.sender_id);
    3dd0:	02c12083          	lw	ra,44(sp)
    3dd4:	02812403          	lw	s0,40(sp)
    3dd8:	02412483          	lw	s1,36(sp)
    3ddc:	03010113          	addi	sp,sp,48
    3de0:	00008067          	ret
	z_impl_k_yield();
    3de4:	578030ef          	jal	ra,735c <z_impl_k_yield>
}
    3de8:	fa1ff06f          	j	3d88 <send_msg+0x34>
	z_impl_k_yield();
    3dec:	570030ef          	jal	ra,735c <z_impl_k_yield>
}
    3df0:	fb5ff06f          	j	3da4 <send_msg+0x50>

00003df4 <thread_software>:
{
    3df4:	fd010113          	addi	sp,sp,-48
    3df8:	02912223          	sw	s1,36(sp)
    completed[myId] = 0;
    3dfc:	0000d4b7          	lui	s1,0xd
{
    3e00:	02812423          	sw	s0,40(sp)
    3e04:	01312e23          	sw	s3,28(sp)
    completed[myId] = 0;
    3e08:	01848793          	addi	a5,s1,24 # d018 <completed>
    3e0c:	00259993          	slli	s3,a1,0x2
    3e10:	00001437          	lui	s0,0x1
{
    3e14:	03212023          	sw	s2,32(sp)
    3e18:	01412c23          	sw	s4,24(sp)
    3e1c:	01512a23          	sw	s5,20(sp)
    3e20:	01612823          	sw	s6,16(sp)
    3e24:	01712623          	sw	s7,12(sp)
    3e28:	01812423          	sw	s8,8(sp)
    3e2c:	01912223          	sw	s9,4(sp)
    3e30:	02112623          	sw	ra,44(sp)
    completed[myId] = 0;
    3e34:	013787b3          	add	a5,a5,s3
    3e38:	00858433          	add	s0,a1,s0
{
    3e3c:	00050a13          	mv	s4,a0
    3e40:	00058913          	mv	s2,a1
    completed[myId] = 0;
    3e44:	0007a023          	sw	zero,0(a5)
    for(int i=myId; i<NUM_MULTIPLICATIONS; i+=NUM_THREADS) {
    3e48:	00e41413          	slli	s0,s0,0xe
    3e4c:	00058a93          	mv	s5,a1
    3e50:	01848493          	addi	s1,s1,24
    3e54:	1ff00b13          	li	s6,511
        send_msg(myId, mat1Addr, mat2Addr, resultAddr, MAT1ROWS, MAT1COLS, MAT2COLS);
    3e58:	00003bb7          	lui	s7,0x3
    3e5c:	00001c37          	lui	s8,0x1
    3e60:	00008cb7          	lui	s9,0x8
    for(int i=myId; i<NUM_MULTIPLICATIONS; i+=NUM_THREADS) {
    3e64:	075b5c63          	bge	s6,s5,3edc <thread_software+0xe8>
    completed[myId] = 1;
    3e68:	013489b3          	add	s3,s1,s3
    3e6c:	00100793          	li	a5,1
    3e70:	00f9a023          	sw	a5,0(s3) # 4000 <verify+0x4>
	return z_impl_k_mutex_lock(mutex, timeout);
    3e74:	0000f937          	lui	s2,0xf
    3e78:	fff00593          	li	a1,-1
    3e7c:	fff00613          	li	a2,-1
    3e80:	18890513          	addi	a0,s2,392 # f188 <completed_mutex>
    3e84:	07d020ef          	jal	ra,6700 <z_impl_k_mutex_lock>
        totalCompleted += completed[i];
    3e88:	0044a783          	lw	a5,4(s1)
    3e8c:	0004a403          	lw	s0,0(s1)
    3e90:	00f40433          	add	s0,s0,a5
	return z_impl_k_mutex_unlock(mutex);
    3e94:	18890513          	addi	a0,s2,392
    3e98:	1c9020ef          	jal	ra,6860 <z_impl_k_mutex_unlock>
    if(totalCompleted == NUM_THREADS)
    3e9c:	00200793          	li	a5,2
    3ea0:	06f41463          	bne	s0,a5,3f08 <thread_software+0x114>
}
    3ea4:	02812403          	lw	s0,40(sp)
    3ea8:	02c12083          	lw	ra,44(sp)
    3eac:	02412483          	lw	s1,36(sp)
    3eb0:	02012903          	lw	s2,32(sp)
    3eb4:	01c12983          	lw	s3,28(sp)
    3eb8:	01412a83          	lw	s5,20(sp)
    3ebc:	01012b03          	lw	s6,16(sp)
    3ec0:	00c12b83          	lw	s7,12(sp)
    3ec4:	00812c03          	lw	s8,8(sp)
    3ec8:	00412c83          	lw	s9,4(sp)
	z_impl_k_thread_resume(thread);
    3ecc:	000a0513          	mv	a0,s4
    3ed0:	01812a03          	lw	s4,24(sp)
    3ed4:	03010113          	addi	sp,sp,48
    3ed8:	7d90206f          	j	6eb0 <z_impl_k_thread_resume>
        send_msg(myId, mat1Addr, mat2Addr, resultAddr, MAT1ROWS, MAT1COLS, MAT2COLS);
    3edc:	017406b3          	add	a3,s0,s7
    3ee0:	01840633          	add	a2,s0,s8
    3ee4:	00040593          	mv	a1,s0
    3ee8:	02000813          	li	a6,32
    3eec:	02000793          	li	a5,32
    3ef0:	02000713          	li	a4,32
    3ef4:	00090513          	mv	a0,s2
    3ef8:	e5dff0ef          	jal	ra,3d54 <send_msg>
    for(int i=myId; i<NUM_MULTIPLICATIONS; i+=NUM_THREADS) {
    3efc:	002a8a93          	addi	s5,s5,2
    3f00:	01940433          	add	s0,s0,s9
    3f04:	f61ff06f          	j	3e64 <thread_software+0x70>
}
    3f08:	02c12083          	lw	ra,44(sp)
    3f0c:	02812403          	lw	s0,40(sp)
    3f10:	02412483          	lw	s1,36(sp)
    3f14:	02012903          	lw	s2,32(sp)
    3f18:	01c12983          	lw	s3,28(sp)
    3f1c:	01812a03          	lw	s4,24(sp)
    3f20:	01412a83          	lw	s5,20(sp)
    3f24:	01012b03          	lw	s6,16(sp)
    3f28:	00c12b83          	lw	s7,12(sp)
    3f2c:	00812c03          	lw	s8,8(sp)
    3f30:	00412c83          	lw	s9,4(sp)
    3f34:	03010113          	addi	sp,sp,48
    3f38:	00008067          	ret

00003f3c <create_mat>:
 * @param matrixAddr
 * @param rows 
 * @param cols 
 */
void create_mat(int matrixAddr, int rows, int cols)
{
    3f3c:	fd010113          	addi	sp,sp,-48
    float *matrix = (float *)matrixAddr;

    for (int i=0; i<rows; i++) {
        for (int j=0; j<cols; j++) {
            int random_integer = sys_rand32_get()%100;
            matrix[i*cols+j] = (float)random_integer / 10;
    3f40:	0000c7b7          	lui	a5,0xc
{
    3f44:	01812423          	sw	s8,8(sp)
            matrix[i*cols+j] = (float)random_integer / 10;
    3f48:	5f87ac03          	lw	s8,1528(a5) # c5f8 <__device_handles_end+0x5c>
{
    3f4c:	02912223          	sw	s1,36(sp)
    3f50:	01312e23          	sw	s3,28(sp)
    3f54:	01412c23          	sw	s4,24(sp)
    3f58:	01512a23          	sw	s5,20(sp)
    3f5c:	01612823          	sw	s6,16(sp)
    3f60:	01712623          	sw	s7,12(sp)
    3f64:	02112623          	sw	ra,44(sp)
    3f68:	02812423          	sw	s0,40(sp)
    3f6c:	03212023          	sw	s2,32(sp)
    3f70:	00050993          	mv	s3,a0
    3f74:	00058b13          	mv	s6,a1
    3f78:	00060493          	mv	s1,a2
    for (int i=0; i<rows; i++) {
    3f7c:	00000a13          	li	s4,0
    3f80:	00000a93          	li	s5,0
            int random_integer = sys_rand32_get()%100;
    3f84:	06400b93          	li	s7,100
    for (int i=0; i<rows; i++) {
    3f88:	056ad263          	bge	s5,s6,3fcc <create_mat+0x90>
    3f8c:	002a1413          	slli	s0,s4,0x2
    3f90:	01340433          	add	s0,s0,s3
        for (int j=0; j<cols; j++) {
    3f94:	00000913          	li	s2,0
    3f98:	0240006f          	j	3fbc <create_mat+0x80>
		/* coverity[OVERRUN] */
		return (uint32_t) arch_syscall_invoke0(K_SYSCALL_SYS_RAND32_GET);
	}
#endif
	compiler_barrier();
	return z_impl_sys_rand32_get();
    3f9c:	68c010ef          	jal	ra,5628 <z_impl_sys_rand32_get>
            matrix[i*cols+j] = (float)random_integer / 10;
    3fa0:	03757533          	remu	a0,a0,s7
        for (int j=0; j<cols; j++) {
    3fa4:	00190913          	addi	s2,s2,1
    3fa8:	00440413          	addi	s0,s0,4 # 1004 <__divdf3+0x490>
            matrix[i*cols+j] = (float)random_integer / 10;
    3fac:	961fe0ef          	jal	ra,290c <__floatsisf>
    3fb0:	000c0593          	mv	a1,s8
    3fb4:	9b8fe0ef          	jal	ra,216c <__divsf3>
    3fb8:	fea42e23          	sw	a0,-4(s0)
        for (int j=0; j<cols; j++) {
    3fbc:	fe9940e3          	blt	s2,s1,3f9c <create_mat+0x60>
    for (int i=0; i<rows; i++) {
    3fc0:	001a8a93          	addi	s5,s5,1
    3fc4:	009a0a33          	add	s4,s4,s1
    3fc8:	fc1ff06f          	j	3f88 <create_mat+0x4c>
            // matrix[i*cols+j] = 1;
        }
    }
}
    3fcc:	02c12083          	lw	ra,44(sp)
    3fd0:	02812403          	lw	s0,40(sp)
    3fd4:	02412483          	lw	s1,36(sp)
    3fd8:	02012903          	lw	s2,32(sp)
    3fdc:	01c12983          	lw	s3,28(sp)
    3fe0:	01812a03          	lw	s4,24(sp)
    3fe4:	01412a83          	lw	s5,20(sp)
    3fe8:	01012b03          	lw	s6,16(sp)
    3fec:	00c12b83          	lw	s7,12(sp)
    3ff0:	00812c03          	lw	s8,8(sp)
    3ff4:	03010113          	addi	sp,sp,48
    3ff8:	00008067          	ret

00003ffc <verify>:
 * @param rows 
 * @param cols 
 * @return number of differences between mat1 and mat2
 */
int verify(int mat1Addr, int mat2Addr, int rows, int cols)
{
    3ffc:	fd010113          	addi	sp,sp,-48
    float *mat1 = (float *)mat1Addr;
    float *mat2 = (float *)mat2Addr;

    for (int i=0; i<rows; i++) {
        for (int j=0; j<cols; j++) {
            if(mat1[i*cols+j]-mat2[i*cols+j] >= 0.01) num_errors++;
    4000:	0000c7b7          	lui	a5,0xc
{
    4004:	01412c23          	sw	s4,24(sp)
    4008:	01512a23          	sw	s5,20(sp)
            if(mat1[i*cols+j]-mat2[i*cols+j] >= 0.01) num_errors++;
    400c:	5a07aa03          	lw	s4,1440(a5) # c5a0 <__device_handles_end+0x4>
    4010:	5a47aa83          	lw	s5,1444(a5)
{
    4014:	02912223          	sw	s1,36(sp)
    4018:	03212023          	sw	s2,32(sp)
    401c:	01312e23          	sw	s3,28(sp)
    4020:	01712623          	sw	s7,12(sp)
    4024:	01812423          	sw	s8,8(sp)
    4028:	01912223          	sw	s9,4(sp)
    402c:	01a12023          	sw	s10,0(sp)
    4030:	02112623          	sw	ra,44(sp)
    4034:	02812423          	sw	s0,40(sp)
    4038:	01612823          	sw	s6,16(sp)
    403c:	00050493          	mv	s1,a0
    4040:	00060c93          	mv	s9,a2
    4044:	00068913          	mv	s2,a3
    for (int i=0; i<rows; i++) {
    4048:	00000b93          	li	s7,0
    404c:	00000c13          	li	s8,0
    int num_errors = 0;
    4050:	00000993          	li	s3,0
            if(mat1[i*cols+j]-mat2[i*cols+j] >= 0.01) num_errors++;
    4054:	40a58d33          	sub	s10,a1,a0
    for (int i=0; i<rows; i++) {
    4058:	059c5a63          	bge	s8,s9,40ac <verify+0xb0>
    405c:	002b9413          	slli	s0,s7,0x2
    4060:	00940433          	add	s0,s0,s1
        for (int j=0; j<cols; j++) {
    4064:	00000b13          	li	s6,0
    4068:	0340006f          	j	409c <verify+0xa0>
            if(mat1[i*cols+j]-mat2[i*cols+j] >= 0.01) num_errors++;
    406c:	008d07b3          	add	a5,s10,s0
    4070:	0007a583          	lw	a1,0(a5)
    4074:	00042503          	lw	a0,0(s0)
    4078:	c28fe0ef          	jal	ra,24a0 <__subsf3>
    407c:	999fe0ef          	jal	ra,2a14 <__extendsfdf2>
    4080:	000a0613          	mv	a2,s4
    4084:	000a8693          	mv	a3,s5
    4088:	9ccfd0ef          	jal	ra,1254 <__gedf2>
    408c:	00054463          	bltz	a0,4094 <verify+0x98>
    4090:	00198993          	addi	s3,s3,1
        for (int j=0; j<cols; j++) {
    4094:	001b0b13          	addi	s6,s6,1 # 2001 <CONFIG_SRAM_SIZE+0x1>
    4098:	00440413          	addi	s0,s0,4
    409c:	fd2b48e3          	blt	s6,s2,406c <verify+0x70>
    for (int i=0; i<rows; i++) {
    40a0:	001c0c13          	addi	s8,s8,1 # 1001 <__divdf3+0x48d>
    40a4:	012b8bb3          	add	s7,s7,s2
    40a8:	fb1ff06f          	j	4058 <verify+0x5c>
        }
    }

    return num_errors;
    40ac:	02c12083          	lw	ra,44(sp)
    40b0:	02812403          	lw	s0,40(sp)
    40b4:	02412483          	lw	s1,36(sp)
    40b8:	02012903          	lw	s2,32(sp)
    40bc:	01812a03          	lw	s4,24(sp)
    40c0:	01412a83          	lw	s5,20(sp)
    40c4:	01012b03          	lw	s6,16(sp)
    40c8:	00c12b83          	lw	s7,12(sp)
    40cc:	00812c03          	lw	s8,8(sp)
    40d0:	00412c83          	lw	s9,4(sp)
    40d4:	00012d03          	lw	s10,0(sp)
    40d8:	00098513          	mv	a0,s3
    40dc:	01c12983          	lw	s3,28(sp)
    40e0:	03010113          	addi	sp,sp,48
    40e4:	00008067          	ret

000040e8 <multiply_mat_hw_pool>:
	volatile int *c = (int *)(ACCELERATOR_BASE_ADDRESS + 0x20);
	volatile int *rowsA = (int *)(ACCELERATOR_BASE_ADDRESS + 0x28);
	volatile int *colsA = (int *)(ACCELERATOR_BASE_ADDRESS + 0x30);
	volatile int *colsB = (int *)(ACCELERATOR_BASE_ADDRESS + 0x38);

    *a = mat1Address;
    40e8:	90000837          	lui	a6,0x90000
    40ec:	00a82823          	sw	a0,16(a6) # 90000010 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x90000011>
    *b = mat2Address;
    40f0:	00b82c23          	sw	a1,24(a6)
    *c = resultAddress;
    40f4:	02c82023          	sw	a2,32(a6)
    *rowsA = rows1;
    40f8:	02d82423          	sw	a3,40(a6)
    *colsA = cols1;
    40fc:	02e82823          	sw	a4,48(a6)
    *colsB = cols2;
    4100:	02f82c23          	sw	a5,56(a6)

    *do_matp_mem = 1;
    4104:	00100793          	li	a5,1
    4108:	00f82023          	sw	a5,0(a6)

    while ((*do_matp_mem & 4) == 0);
    410c:	90000737          	lui	a4,0x90000
    4110:	00072783          	lw	a5,0(a4) # 90000000 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x90000001>
    4114:	0047f793          	andi	a5,a5,4
    4118:	fe078ce3          	beqz	a5,4110 <multiply_mat_hw_pool+0x28>
}
    411c:	00008067          	ret

00004120 <multiply_mat_hw>:
    4120:	fc9ff06f          	j	40e8 <multiply_mat_hw_pool>

00004124 <arch_printk_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    4124:	00000513          	li	a0,0
    4128:	00008067          	ret

0000412c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    412c:	0005a783          	lw	a5,0(a1)
    4130:	00178793          	addi	a5,a5,1
    4134:	00f5a023          	sw	a5,0(a1)
	return _char_out(c);
    4138:	0000f7b7          	lui	a5,0xf
    413c:	1187a783          	lw	a5,280(a5) # f118 <_char_out>
    4140:	00078067          	jr	a5

00004144 <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    4144:	0085a703          	lw	a4,8(a1)
    4148:	0005a783          	lw	a5,0(a1)
		ctx->count++;
		return c;
	}

	if (ctx->count == ctx->max - 1) {
		ctx->str[ctx->count++] = '\0';
    414c:	00170613          	addi	a2,a4,1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    4150:	00078663          	beqz	a5,415c <str_out+0x18>
    4154:	0045a683          	lw	a3,4(a1)
    4158:	00d74663          	blt	a4,a3,4164 <str_out+0x20>
		ctx->count++;
    415c:	00c5a423          	sw	a2,8(a1)
		return c;
    4160:	00008067          	ret
	if (ctx->count == ctx->max - 1) {
    4164:	fff68693          	addi	a3,a3,-1
		ctx->str[ctx->count++] = '\0';
    4168:	00c5a423          	sw	a2,8(a1)
    416c:	00e787b3          	add	a5,a5,a4
	if (ctx->count == ctx->max - 1) {
    4170:	00e69663          	bne	a3,a4,417c <str_out+0x38>
		ctx->str[ctx->count++] = '\0';
    4174:	00078023          	sb	zero,0(a5)
    4178:	00008067          	ret
	} else {
		ctx->str[ctx->count++] = c;
    417c:	00a78023          	sb	a0,0(a5)
	}

	return c;
}
    4180:	00008067          	ret

00004184 <__printk_hook_install>:
	_char_out = fn;
    4184:	0000f7b7          	lui	a5,0xf
    4188:	10a7ac23          	sw	a0,280(a5) # f118 <_char_out>
}
    418c:	00008067          	ret

00004190 <vprintk>:
{
    4190:	fe010113          	addi	sp,sp,-32
    4194:	00050613          	mv	a2,a0
		cbvprintf(char_out, &ctx, fmt, ap);
    4198:	00004537          	lui	a0,0x4
{
    419c:	00058693          	mv	a3,a1
		cbvprintf(char_out, &ctx, fmt, ap);
    41a0:	12c50513          	addi	a0,a0,300 # 412c <char_out>
    41a4:	00c10593          	addi	a1,sp,12
{
    41a8:	00112e23          	sw	ra,28(sp)
		struct out_context ctx = { 0 };
    41ac:	00012623          	sw	zero,12(sp)
		cbvprintf(char_out, &ctx, fmt, ap);
    41b0:	6a8000ef          	jal	ra,4858 <cbvprintf>
}
    41b4:	01c12083          	lw	ra,28(sp)
    41b8:	02010113          	addi	sp,sp,32
    41bc:	00008067          	ret

000041c0 <printk>:
{
    41c0:	fc010113          	addi	sp,sp,-64
    41c4:	02b12223          	sw	a1,36(sp)
	va_start(ap, fmt);
    41c8:	02410593          	addi	a1,sp,36
{
    41cc:	00112e23          	sw	ra,28(sp)
    41d0:	02c12423          	sw	a2,40(sp)
    41d4:	02d12623          	sw	a3,44(sp)
    41d8:	02e12823          	sw	a4,48(sp)
    41dc:	02f12a23          	sw	a5,52(sp)
    41e0:	03012c23          	sw	a6,56(sp)
    41e4:	03112e23          	sw	a7,60(sp)
	va_start(ap, fmt);
    41e8:	00b12623          	sw	a1,12(sp)
	vprintk(fmt, ap);
    41ec:	fa5ff0ef          	jal	ra,4190 <vprintk>
}
    41f0:	01c12083          	lw	ra,28(sp)
    41f4:	04010113          	addi	sp,sp,64
    41f8:	00008067          	ret

000041fc <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    41fc:	fe010113          	addi	sp,sp,-32
    4200:	00812c23          	sw	s0,24(sp)
	struct str_context ctx = { str, size, 0 };
    4204:	00a12223          	sw	a0,4(sp)
{
    4208:	00050413          	mv	s0,a0

	cbvprintf(str_out, &ctx, fmt, ap);
    420c:	00004537          	lui	a0,0x4
	struct str_context ctx = { str, size, 0 };
    4210:	00b12423          	sw	a1,8(sp)
	cbvprintf(str_out, &ctx, fmt, ap);
    4214:	14450513          	addi	a0,a0,324 # 4144 <str_out>
    4218:	00410593          	addi	a1,sp,4
{
    421c:	00112e23          	sw	ra,28(sp)
	struct str_context ctx = { str, size, 0 };
    4220:	00012623          	sw	zero,12(sp)
	cbvprintf(str_out, &ctx, fmt, ap);
    4224:	634000ef          	jal	ra,4858 <cbvprintf>

	if (ctx.count < ctx.max) {
    4228:	00c12503          	lw	a0,12(sp)
    422c:	00812783          	lw	a5,8(sp)
    4230:	00f55663          	bge	a0,a5,423c <vsnprintk+0x40>
		str[ctx.count] = '\0';
    4234:	00a40433          	add	s0,s0,a0
    4238:	00040023          	sb	zero,0(s0)
	}

	return ctx.count;
}
    423c:	01c12083          	lw	ra,28(sp)
    4240:	01812403          	lw	s0,24(sp)
    4244:	02010113          	addi	sp,sp,32
    4248:	00008067          	ret

0000424c <snprintk>:
{
    424c:	fc010113          	addi	sp,sp,-64
    4250:	02d12623          	sw	a3,44(sp)
	va_start(ap, fmt);
    4254:	02c10693          	addi	a3,sp,44
{
    4258:	00112e23          	sw	ra,28(sp)
    425c:	02e12823          	sw	a4,48(sp)
    4260:	02f12a23          	sw	a5,52(sp)
    4264:	03012c23          	sw	a6,56(sp)
    4268:	03112e23          	sw	a7,60(sp)
	va_start(ap, fmt);
    426c:	00d12623          	sw	a3,12(sp)
	ret = vsnprintk(str, size, fmt, ap);
    4270:	f8dff0ef          	jal	ra,41fc <vsnprintk>
}
    4274:	01c12083          	lw	ra,28(sp)
    4278:	04010113          	addi	sp,sp,64
    427c:	00008067          	ret

00004280 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    4280:	ff010113          	addi	sp,sp,-16
    4284:	00050793          	mv	a5,a0
    4288:	00058513          	mv	a0,a1
    428c:	00060593          	mv	a1,a2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    4290:	00068613          	mv	a2,a3
{
    4294:	00112623          	sw	ra,12(sp)
	entry(p1, p2, p3);
    4298:	000780e7          	jalr	a5
	return z_impl_z_current_get();
    429c:	198030ef          	jal	ra,7434 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    42a0:	294030ef          	jal	ra,7534 <z_impl_k_thread_abort>

000042a4 <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    42a4:	00852703          	lw	a4,8(a0)
	void *cmem = &buf[c];
    42a8:	00359593          	slli	a1,a1,0x3
	if (big_heap(h)) {
    42ac:	000087b7          	lui	a5,0x8
	void *cmem = &buf[c];
    42b0:	00b505b3          	add	a1,a0,a1
	if (big_heap(h)) {
    42b4:	00f76a63          	bltu	a4,a5,42c8 <chunk_field+0x24>
		return ((uint32_t *)cmem)[f];
    42b8:	00261613          	slli	a2,a2,0x2
    42bc:	00c585b3          	add	a1,a1,a2
    42c0:	0005a503          	lw	a0,0(a1)
    42c4:	00008067          	ret
	} else {
		return ((uint16_t *)cmem)[f];
    42c8:	00161613          	slli	a2,a2,0x1
    42cc:	00c585b3          	add	a1,a1,a2
    42d0:	0005d503          	lhu	a0,0(a1)
	}
}
    42d4:	00008067          	ret

000042d8 <chunk_set>:
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    42d8:	00852703          	lw	a4,8(a0)
	void *cmem = &buf[c];
    42dc:	00359593          	slli	a1,a1,0x3
	if (big_heap(h)) {
    42e0:	000087b7          	lui	a5,0x8
	void *cmem = &buf[c];
    42e4:	00b505b3          	add	a1,a0,a1
	if (big_heap(h)) {
    42e8:	00f76a63          	bltu	a4,a5,42fc <chunk_set+0x24>
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
    42ec:	00261613          	slli	a2,a2,0x2
    42f0:	00c585b3          	add	a1,a1,a2
    42f4:	00d5a023          	sw	a3,0(a1)
    42f8:	00008067          	ret
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
    42fc:	00161613          	slli	a2,a2,0x1
    4300:	00c585b3          	add	a1,a1,a2
    4304:	00d59023          	sh	a3,0(a1)
	}
}
    4308:	00008067          	ret

0000430c <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
    430c:	ff010113          	addi	sp,sp,-16
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    4310:	00100613          	li	a2,1
{
    4314:	00112623          	sw	ra,12(sp)
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    4318:	f8dff0ef          	jal	ra,42a4 <chunk_field>
}
    431c:	00c12083          	lw	ra,12(sp)
    4320:	00155513          	srli	a0,a0,0x1
    4324:	01010113          	addi	sp,sp,16
    4328:	00008067          	ret

0000432c <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    432c:	00852703          	lw	a4,8(a0)
	void *cmem = &buf[c];
    4330:	00359593          	slli	a1,a1,0x3
	if (big_heap(h)) {
    4334:	000087b7          	lui	a5,0x8
	void *cmem = &buf[c];
    4338:	00b505b3          	add	a1,a0,a1
	if (big_heap(h)) {
    433c:	02f76063          	bltu	a4,a5,435c <set_chunk_used+0x30>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    4340:	0045a783          	lw	a5,4(a1)
		if (used) {
    4344:	00060863          	beqz	a2,4354 <set_chunk_used+0x28>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    4348:	0017e793          	ori	a5,a5,1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
    434c:	00f5a223          	sw	a5,4(a1)
    4350:	00008067          	ret
    4354:	ffe7f793          	andi	a5,a5,-2
    4358:	ff5ff06f          	j	434c <set_chunk_used+0x20>
		}
	} else {
		if (used) {
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    435c:	0025d783          	lhu	a5,2(a1)
		if (used) {
    4360:	00060863          	beqz	a2,4370 <set_chunk_used+0x44>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    4364:	0017e793          	ori	a5,a5,1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    4368:	00f59123          	sh	a5,2(a1)
		}
	}
}
    436c:	00008067          	ret
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    4370:	ffe7f793          	andi	a5,a5,-2
    4374:	ff5ff06f          	j	4368 <set_chunk_used+0x3c>

00004378 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    4378:	00161693          	slli	a3,a2,0x1
    437c:	00100613          	li	a2,1
    4380:	f59ff06f          	j	42d8 <chunk_set>

00004384 <bucket_idx.isra.0>:
static inline size_t chunksz_to_bytes(struct z_heap *h, chunksz_t chunksz_in)
{
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
    4384:	ff010113          	addi	sp,sp,-16
    4388:	00112623          	sw	ra,12(sp)
	return big_heap(h) ? 8 : 4;
    438c:	000087b7          	lui	a5,0x8
    4390:	02f57863          	bgeu	a0,a5,43c0 <bucket_idx.isra.0+0x3c>
    4394:	00400793          	li	a5,4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    4398:	00878793          	addi	a5,a5,8 # 8008 <_printf_float+0xcc>
    439c:	0037d793          	srli	a5,a5,0x3
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    43a0:	00158593          	addi	a1,a1,1
	return 31 - __builtin_clz(usable_sz);
    43a4:	40f58533          	sub	a0,a1,a5
    43a8:	f49fb0ef          	jal	ra,2f0 <__clzsi2>
}
    43ac:	00c12083          	lw	ra,12(sp)
    43b0:	01f00793          	li	a5,31
    43b4:	40a78533          	sub	a0,a5,a0
    43b8:	01010113          	addi	sp,sp,16
    43bc:	00008067          	ret
	return big_heap(h) ? 8 : 4;
    43c0:	00800793          	li	a5,8
    43c4:	fd5ff06f          	j	4398 <bucket_idx.isra.0+0x14>

000043c8 <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    43c8:	fe010113          	addi	sp,sp,-32
    43cc:	01212823          	sw	s2,16(sp)
	return big_heap_chunks(h->end_chunk);
    43d0:	00852903          	lw	s2,8(a0)
    43d4:	00812c23          	sw	s0,24(sp)
    43d8:	00912a23          	sw	s1,20(sp)
    43dc:	00112e23          	sw	ra,28(sp)
    43e0:	00058493          	mv	s1,a1
    43e4:	01312623          	sw	s3,12(sp)
    43e8:	00050413          	mv	s0,a0
	return big_heap(h) && chunk_size(h, c) == 1U;
    43ec:	f21ff0ef          	jal	ra,430c <chunk_size>
    43f0:	000087b7          	lui	a5,0x8
    43f4:	00050593          	mv	a1,a0
    43f8:	00f96663          	bltu	s2,a5,4404 <free_list_add+0x3c>
	if (!solo_free_header(h, c)) {
    43fc:	00100793          	li	a5,1
    4400:	0cf50a63          	beq	a0,a5,44d4 <free_list_add+0x10c>
		int bidx = bucket_idx(h, chunk_size(h, c));
    4404:	00090513          	mv	a0,s2
    4408:	f7dff0ef          	jal	ra,4384 <bucket_idx.isra.0>
	if (b->next == 0U) {
    440c:	00251793          	slli	a5,a0,0x2
    4410:	00f407b3          	add	a5,s0,a5
    4414:	0107a903          	lw	s2,16(a5) # 8010 <_printf_float+0xd4>
    4418:	04091e63          	bnez	s2,4474 <free_list_add+0xac>
		h->avail_buckets |= (1 << bidx);
    441c:	00100713          	li	a4,1
    4420:	00a71733          	sll	a4,a4,a0
    4424:	00c42503          	lw	a0,12(s0)
	chunk_set(h, c, FREE_PREV, prev);
    4428:	00048693          	mv	a3,s1
    442c:	00200613          	li	a2,2
    4430:	00e56533          	or	a0,a0,a4
    4434:	00a42623          	sw	a0,12(s0)
    4438:	00048593          	mv	a1,s1
		b->next = c;
    443c:	0097a823          	sw	s1,16(a5)
    4440:	00040513          	mv	a0,s0
    4444:	e95ff0ef          	jal	ra,42d8 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    4448:	00048693          	mv	a3,s1
    444c:	00300613          	li	a2,3
    4450:	00048593          	mv	a1,s1
	chunk_set(h, c, FREE_PREV, prev);
    4454:	00040513          	mv	a0,s0
		free_list_add_bidx(h, c, bidx);
	}
}
    4458:	01812403          	lw	s0,24(sp)
    445c:	01c12083          	lw	ra,28(sp)
    4460:	01412483          	lw	s1,20(sp)
    4464:	01012903          	lw	s2,16(sp)
    4468:	00c12983          	lw	s3,12(sp)
    446c:	02010113          	addi	sp,sp,32
    4470:	e69ff06f          	j	42d8 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
    4474:	00200613          	li	a2,2
    4478:	00090593          	mv	a1,s2
    447c:	00040513          	mv	a0,s0
    4480:	e25ff0ef          	jal	ra,42a4 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
    4484:	00050693          	mv	a3,a0
	return chunk_field(h, c, FREE_PREV);
    4488:	00050993          	mv	s3,a0
	chunk_set(h, c, FREE_PREV, prev);
    448c:	00200613          	li	a2,2
    4490:	00048593          	mv	a1,s1
    4494:	00040513          	mv	a0,s0
    4498:	e41ff0ef          	jal	ra,42d8 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    449c:	00090693          	mv	a3,s2
    44a0:	00300613          	li	a2,3
    44a4:	00048593          	mv	a1,s1
    44a8:	00040513          	mv	a0,s0
    44ac:	e2dff0ef          	jal	ra,42d8 <chunk_set>
    44b0:	00048693          	mv	a3,s1
    44b4:	00300613          	li	a2,3
    44b8:	00098593          	mv	a1,s3
    44bc:	00040513          	mv	a0,s0
    44c0:	e19ff0ef          	jal	ra,42d8 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    44c4:	00048693          	mv	a3,s1
    44c8:	00200613          	li	a2,2
    44cc:	00090593          	mv	a1,s2
    44d0:	f85ff06f          	j	4454 <free_list_add+0x8c>
    44d4:	01c12083          	lw	ra,28(sp)
    44d8:	01812403          	lw	s0,24(sp)
    44dc:	01412483          	lw	s1,20(sp)
    44e0:	01012903          	lw	s2,16(sp)
    44e4:	00c12983          	lw	s3,12(sp)
    44e8:	02010113          	addi	sp,sp,32
    44ec:	00008067          	ret

000044f0 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    44f0:	fe010113          	addi	sp,sp,-32
    44f4:	00812c23          	sw	s0,24(sp)
    44f8:	00112e23          	sw	ra,28(sp)
    44fc:	00912a23          	sw	s1,20(sp)
    4500:	01212823          	sw	s2,16(sp)
    4504:	01312623          	sw	s3,12(sp)
	return big_heap_bytes(size) ? 8 : 4;
    4508:	000407b7          	lui	a5,0x40
    450c:	00400413          	li	s0,4
    4510:	00f66463          	bltu	a2,a5,4518 <sys_heap_init+0x28>
    4514:	00800413          	li	s0,8
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    4518:	40860433          	sub	s0,a2,s0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    451c:	00758493          	addi	s1,a1,7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    4520:	00858433          	add	s0,a1,s0
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    4524:	ff84f493          	andi	s1,s1,-8
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    4528:	ff847413          	andi	s0,s0,-8
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    452c:	40940433          	sub	s0,s0,s1

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    4530:	00952023          	sw	s1,0(a0)
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    4534:	00345413          	srli	s0,s0,0x3
	h->end_chunk = heap_sz;
    4538:	0084a423          	sw	s0,8(s1)
	h->avail_buckets = 0;
    453c:	0004a623          	sw	zero,12(s1)

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    4540:	00040593          	mv	a1,s0
    4544:	00040513          	mv	a0,s0
    4548:	e3dff0ef          	jal	ra,4384 <bucket_idx.isra.0>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    454c:	00251913          	slli	s2,a0,0x2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    4550:	01b90913          	addi	s2,s2,27
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    4554:	00150693          	addi	a3,a0,1
    4558:	00395913          	srli	s2,s2,0x3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    455c:	01048713          	addi	a4,s1,16
    4560:	00000793          	li	a5,0
    4564:	0ad7cc63          	blt	a5,a3,461c <sys_heap_init+0x12c>
		h->buckets[i].next = 0;
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    4568:	00090613          	mv	a2,s2
    456c:	00048513          	mv	a0,s1
    4570:	00000593          	li	a1,0
    4574:	e05ff0ef          	jal	ra,4378 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    4578:	00000693          	li	a3,0
    457c:	00048513          	mv	a0,s1
    4580:	00000613          	li	a2,0
    4584:	00000593          	li	a1,0
    4588:	d51ff0ef          	jal	ra,42d8 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);
    458c:	00048513          	mv	a0,s1
    4590:	00100613          	li	a2,1
    4594:	00000593          	li	a1,0
    4598:	d95ff0ef          	jal	ra,432c <set_chunk_used>

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    459c:	412409b3          	sub	s3,s0,s2
    45a0:	00098613          	mv	a2,s3
    45a4:	00090593          	mv	a1,s2
    45a8:	00048513          	mv	a0,s1
    45ac:	dcdff0ef          	jal	ra,4378 <set_chunk_size>
    45b0:	00090693          	mv	a3,s2
    45b4:	00090593          	mv	a1,s2
    45b8:	00048513          	mv	a0,s1
    45bc:	00000613          	li	a2,0
    45c0:	d19ff0ef          	jal	ra,42d8 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
    45c4:	00040593          	mv	a1,s0
    45c8:	00048513          	mv	a0,s1
    45cc:	00000613          	li	a2,0
    45d0:	da9ff0ef          	jal	ra,4378 <set_chunk_size>
    45d4:	00098693          	mv	a3,s3
    45d8:	00040593          	mv	a1,s0
    45dc:	00048513          	mv	a0,s1
    45e0:	00000613          	li	a2,0
    45e4:	cf5ff0ef          	jal	ra,42d8 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
    45e8:	00040593          	mv	a1,s0
    45ec:	00048513          	mv	a0,s1
    45f0:	00100613          	li	a2,1
    45f4:	d39ff0ef          	jal	ra,432c <set_chunk_used>

	free_list_add(h, chunk0_size);
}
    45f8:	01812403          	lw	s0,24(sp)
    45fc:	01c12083          	lw	ra,28(sp)
    4600:	00c12983          	lw	s3,12(sp)
	free_list_add(h, chunk0_size);
    4604:	00090593          	mv	a1,s2
    4608:	00048513          	mv	a0,s1
}
    460c:	01012903          	lw	s2,16(sp)
    4610:	01412483          	lw	s1,20(sp)
    4614:	02010113          	addi	sp,sp,32
	free_list_add(h, chunk0_size);
    4618:	db1ff06f          	j	43c8 <free_list_add>
		h->buckets[i].next = 0;
    461c:	00072023          	sw	zero,0(a4)
	for (int i = 0; i < nb_buckets; i++) {
    4620:	00178793          	addi	a5,a5,1 # 40001 <__data_region_end+0x30e05>
    4624:	00470713          	addi	a4,a4,4
    4628:	f3dff06f          	j	4564 <sys_heap_init+0x74>

0000462c <extract_decimal>:
static size_t extract_decimal(const char **str)
{
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
    462c:	0000d637          	lui	a2,0xd
	const char *sp = *str;
    4630:	00052683          	lw	a3,0(a0)
{
    4634:	00050713          	mv	a4,a0
	while (isdigit((int)(unsigned char)*sp)) {
    4638:	c9d60613          	addi	a2,a2,-867 # cc9d <_ctype_+0x1>
	size_t val = 0;
    463c:	00000513          	li	a0,0
		val = 10U * val + *sp++ - '0';
    4640:	00a00813          	li	a6,10
	while (isdigit((int)(unsigned char)*sp)) {
    4644:	0006c583          	lbu	a1,0(a3)
    4648:	00c587b3          	add	a5,a1,a2
    464c:	0007c783          	lbu	a5,0(a5)
    4650:	0047f793          	andi	a5,a5,4
    4654:	00079663          	bnez	a5,4660 <extract_decimal+0x34>
	}
	*str = sp;
    4658:	00d72023          	sw	a3,0(a4)
	return val;
}
    465c:	00008067          	ret
		val = 10U * val + *sp++ - '0';
    4660:	03050533          	mul	a0,a0,a6
    4664:	00168693          	addi	a3,a3,1
    4668:	fd050793          	addi	a5,a0,-48
    466c:	00b78533          	add	a0,a5,a1
    4670:	fd5ff06f          	j	4644 <extract_decimal+0x18>

00004674 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    4674:	fd010113          	addi	sp,sp,-48
    4678:	02812423          	sw	s0,40(sp)
    467c:	02912223          	sw	s1,36(sp)
    4680:	03212023          	sw	s2,32(sp)
    4684:	01712623          	sw	s7,12(sp)
    4688:	01812423          	sw	s8,8(sp)
    468c:	01912223          	sw	s9,4(sp)
    4690:	02112623          	sw	ra,44(sp)
    4694:	01312e23          	sw	s3,28(sp)
    4698:	01412c23          	sw	s4,24(sp)
    469c:	01512a23          	sw	s5,20(sp)
    46a0:	01612823          	sw	s6,16(sp)
	bool upcase = isupper((int)conv->specifier);
    46a4:	00364783          	lbu	a5,3(a2)
{
    46a8:	00068913          	mv	s2,a3
	bool upcase = isupper((int)conv->specifier);
    46ac:	0000d6b7          	lui	a3,0xd
    46b0:	c9d68693          	addi	a3,a3,-867 # cc9d <_ctype_+0x1>
    46b4:	00d786b3          	add	a3,a5,a3
    46b8:	0006c983          	lbu	s3,0(a3)
{
    46bc:	00070413          	mv	s0,a4
	switch (specifier) {
    46c0:	06f00713          	li	a4,111
{
    46c4:	00050c13          	mv	s8,a0
    46c8:	00058c93          	mv	s9,a1
    46cc:	00060b93          	mv	s7,a2
    46d0:	0039f993          	andi	s3,s3,3
	switch (specifier) {
    46d4:	00800493          	li	s1,8
    46d8:	00e78c63          	beq	a5,a4,46f0 <encode_uint+0x7c>
    46dc:	0cf76263          	bltu	a4,a5,47a0 <encode_uint+0x12c>
    46e0:	05800713          	li	a4,88
		return 10;
    46e4:	00a00493          	li	s1,10
	switch (specifier) {
    46e8:	00e79463          	bne	a5,a4,46f0 <encode_uint+0x7c>
		return 16;
    46ec:	01000493          	li	s1,16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    46f0:	00000a93          	li	s5,0

		*--bp = (lsv <= 9) ? ('0' + lsv)
    46f4:	00900a13          	li	s4,9
    46f8:	00100b13          	li	s6,1
		unsigned int lsv = (unsigned int)(value % radix);
    46fc:	00048613          	mv	a2,s1
    4700:	00000693          	li	a3,0
    4704:	000c0513          	mv	a0,s8
    4708:	000c8593          	mv	a1,s9
    470c:	864fc0ef          	jal	ra,770 <__umoddi3>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4710:	0ff57793          	andi	a5,a0,255
    4714:	0aaa6263          	bltu	s4,a0,47b8 <encode_uint+0x144>
    4718:	03078793          	addi	a5,a5,48
    471c:	0ff7f793          	andi	a5,a5,255
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
    4720:	00048613          	mv	a2,s1
    4724:	00000693          	li	a3,0
    4728:	000c0513          	mv	a0,s8
    472c:	000c8593          	mv	a1,s9
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4730:	fef40fa3          	sb	a5,-1(s0)
    4734:	fff40413          	addi	s0,s0,-1
		value /= radix;
    4738:	c05fb0ef          	jal	ra,33c <__udivdi3>
	} while ((value != 0) && (bps < bp));
    473c:	019a9463          	bne	s5,s9,4744 <encode_uint+0xd0>
    4740:	009c6463          	bltu	s8,s1,4748 <encode_uint+0xd4>
    4744:	06896463          	bltu	s2,s0,47ac <encode_uint+0x138>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    4748:	000bd783          	lhu	a5,0(s7) # 3000 <__adddf3+0x4d0>
    474c:	0207f793          	andi	a5,a5,32
    4750:	00078c63          	beqz	a5,4768 <encode_uint+0xf4>
		if (radix == 8) {
    4754:	00800793          	li	a5,8
    4758:	06f49a63          	bne	s1,a5,47cc <encode_uint+0x158>
			conv->altform_0 = true;
    475c:	002bc783          	lbu	a5,2(s7)
    4760:	0087e793          	ori	a5,a5,8
		} else if (radix == 16) {
			conv->altform_0c = true;
    4764:	00fb8123          	sb	a5,2(s7)
			;
		}
	}

	return bp;
}
    4768:	02c12083          	lw	ra,44(sp)
    476c:	00040513          	mv	a0,s0
    4770:	02812403          	lw	s0,40(sp)
    4774:	02412483          	lw	s1,36(sp)
    4778:	02012903          	lw	s2,32(sp)
    477c:	01c12983          	lw	s3,28(sp)
    4780:	01812a03          	lw	s4,24(sp)
    4784:	01412a83          	lw	s5,20(sp)
    4788:	01012b03          	lw	s6,16(sp)
    478c:	00c12b83          	lw	s7,12(sp)
    4790:	00812c03          	lw	s8,8(sp)
    4794:	00412c83          	lw	s9,4(sp)
    4798:	03010113          	addi	sp,sp,48
    479c:	00008067          	ret
	switch (specifier) {
    47a0:	0f77f793          	andi	a5,a5,247
    47a4:	07000713          	li	a4,112
    47a8:	f3dff06f          	j	46e4 <encode_uint+0x70>
		value /= radix;
    47ac:	00050c13          	mv	s8,a0
    47b0:	00058c93          	mv	s9,a1
    47b4:	f49ff06f          	j	46fc <encode_uint+0x88>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    47b8:	01699663          	bne	s3,s6,47c4 <encode_uint+0x150>
    47bc:	03778793          	addi	a5,a5,55
    47c0:	f5dff06f          	j	471c <encode_uint+0xa8>
    47c4:	05778793          	addi	a5,a5,87
    47c8:	f55ff06f          	j	471c <encode_uint+0xa8>
		} else if (radix == 16) {
    47cc:	01000793          	li	a5,16
    47d0:	f8f49ce3          	bne	s1,a5,4768 <encode_uint+0xf4>
			conv->altform_0c = true;
    47d4:	002bc783          	lbu	a5,2(s7)
    47d8:	0107e793          	ori	a5,a5,16
    47dc:	f89ff06f          	j	4764 <encode_uint+0xf0>

000047e0 <outs>:
/* Outline function to emit all characters in [sp, ep). */
static int outs(cbprintf_cb out,
		void *ctx,
		const char *sp,
		const char *ep)
{
    47e0:	fe010113          	addi	sp,sp,-32
    47e4:	00812c23          	sw	s0,24(sp)
    47e8:	00912a23          	sw	s1,20(sp)
    47ec:	01212823          	sw	s2,16(sp)
    47f0:	01312623          	sw	s3,12(sp)
    47f4:	01412423          	sw	s4,8(sp)
    47f8:	00112e23          	sw	ra,28(sp)
    47fc:	00050993          	mv	s3,a0
    4800:	00058a13          	mv	s4,a1
    4804:	00060493          	mv	s1,a2
    4808:	00068913          	mv	s2,a3
	size_t count = 0;

	while ((sp < ep) || ((ep == NULL) && *sp)) {
    480c:	00060413          	mv	s0,a2
    4810:	40940533          	sub	a0,s0,s1
    4814:	01246863          	bltu	s0,s2,4824 <outs+0x44>
    4818:	02091063          	bnez	s2,4838 <outs+0x58>
    481c:	00044783          	lbu	a5,0(s0)
    4820:	00078c63          	beqz	a5,4838 <outs+0x58>
		int rc = out((int)*sp++, ctx);
    4824:	00044503          	lbu	a0,0(s0)
    4828:	000a0593          	mv	a1,s4
    482c:	00140413          	addi	s0,s0,1
    4830:	000980e7          	jalr	s3

		if (rc < 0) {
    4834:	fc055ee3          	bgez	a0,4810 <outs+0x30>
		}
		++count;
	}

	return (int)count;
}
    4838:	01c12083          	lw	ra,28(sp)
    483c:	01812403          	lw	s0,24(sp)
    4840:	01412483          	lw	s1,20(sp)
    4844:	01012903          	lw	s2,16(sp)
    4848:	00c12983          	lw	s3,12(sp)
    484c:	00812a03          	lw	s4,8(sp)
    4850:	02010113          	addi	sp,sp,32
    4854:	00008067          	ret

00004858 <cbvprintf>:

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    4858:	f7010113          	addi	sp,sp,-144
    485c:	07512a23          	sw	s5,116(sp)
	switch (conv->specifier) {
    4860:	0000dab7          	lui	s5,0xd
    4864:	ab4a8793          	addi	a5,s5,-1356 # cab4 <__mprec_tens+0x2cc>
{
    4868:	07612823          	sw	s6,112(sp)
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    486c:	0000db37          	lui	s6,0xd
{
    4870:	07712623          	sw	s7,108(sp)
    4874:	07812423          	sw	s8,104(sp)
	switch (conv->specifier) {
    4878:	00f12223          	sw	a5,4(sp)
	switch ((enum length_mod_enum)conv->length_mod) {
    487c:	0000dbb7          	lui	s7,0xd
		switch (conv->specifier) {
    4880:	b38b0793          	addi	a5,s6,-1224 # cb38 <__mprec_tens+0x350>

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    4884:	0000dc37          	lui	s8,0xd
{
    4888:	08812423          	sw	s0,136(sp)
    488c:	09212023          	sw	s2,128(sp)
    4890:	07312e23          	sw	s3,124(sp)
    4894:	07912223          	sw	s9,100(sp)
    4898:	05b12e23          	sw	s11,92(sp)
    489c:	08112623          	sw	ra,140(sp)
    48a0:	08912223          	sw	s1,132(sp)
    48a4:	07412c23          	sw	s4,120(sp)
    48a8:	07a12023          	sw	s10,96(sp)
    48ac:	00050913          	mv	s2,a0
    48b0:	00058993          	mv	s3,a1
    48b4:	00060c93          	mv	s9,a2
    48b8:	00068413          	mv	s0,a3
	size_t count = 0;
    48bc:	00000d93          	li	s11,0
		switch (conv->specifier) {
    48c0:	00f12423          	sw	a5,8(sp)
	switch ((enum length_mod_enum)conv->length_mod) {
    48c4:	b90b8b93          	addi	s7,s7,-1136 # cb90 <__mprec_tens+0x3a8>
			bpe = bps + 5;
    48c8:	ab1c0c13          	addi	s8,s8,-1359 # cab1 <__mprec_tens+0x2c9>
	while (*fp != 0) {
    48cc:	000cc483          	lbu	s1,0(s9) # 8000 <_printf_float+0xc4>
    48d0:	00049663          	bnez	s1,48dc <cbvprintf+0x84>
			OUTC(' ');
			--width;
		}
	}

	return count;
    48d4:	000d8513          	mv	a0,s11
    48d8:	1990006f          	j	5270 <cbvprintf+0xa18>
		if (*fp != '%') {
    48dc:	02500793          	li	a5,37
			OUTC(*fp++);
    48e0:	001c8a13          	addi	s4,s9,1
		if (*fp != '%') {
    48e4:	00f48e63          	beq	s1,a5,4900 <cbvprintf+0xa8>
			OUTC(*fp++);
    48e8:	00098593          	mv	a1,s3
    48ec:	00048513          	mv	a0,s1
			OUTC('%');
    48f0:	000900e7          	jalr	s2
    48f4:	16054ee3          	bltz	a0,5270 <cbvprintf+0xa18>
    48f8:	001d8d93          	addi	s11,s11,1
			break;
    48fc:	5200006f          	j	4e1c <cbvprintf+0x5c4>
		} state = {
    4900:	02000613          	li	a2,32
    4904:	00000593          	li	a1,0
    4908:	03010513          	addi	a0,sp,48
    490c:	a08fe0ef          	jal	ra,2b14 <memset>
	if (*sp == '%') {
    4910:	001cc783          	lbu	a5,1(s9)
    4914:	10978263          	beq	a5,s1,4a18 <cbvprintf+0x1c0>
		switch (*sp) {
    4918:	02b00693          	li	a3,43
    491c:	02d00613          	li	a2,45
    4920:	03000593          	li	a1,48
    4924:	02000513          	li	a0,32
    4928:	02300813          	li	a6,35
    492c:	000a4703          	lbu	a4,0(s4) # 1000 <__divdf3+0x48c>
    4930:	04015783          	lhu	a5,64(sp)
    4934:	14d70c63          	beq	a4,a3,4a8c <cbvprintf+0x234>
    4938:	12e6ea63          	bltu	a3,a4,4a6c <cbvprintf+0x214>
    493c:	14a70c63          	beq	a4,a0,4a94 <cbvprintf+0x23c>
    4940:	15070e63          	beq	a4,a6,4a9c <cbvprintf+0x244>
	if (conv->flag_zero && conv->flag_dash) {
    4944:	04012703          	lw	a4,64(sp)
    4948:	04400693          	li	a3,68
    494c:	04477713          	andi	a4,a4,68
    4950:	00d71663          	bne	a4,a3,495c <cbvprintf+0x104>
		conv->flag_zero = false;
    4954:	fbf7f793          	andi	a5,a5,-65
    4958:	04f11023          	sh	a5,64(sp)
	conv->width_present = true;
    495c:	04015783          	lhu	a5,64(sp)
    4960:	01412a23          	sw	s4,20(sp)
    4964:	0807e713          	ori	a4,a5,128
    4968:	04e11023          	sh	a4,64(sp)
	if (*sp == '*') {
    496c:	000a4683          	lbu	a3,0(s4)
    4970:	02a00713          	li	a4,42
    4974:	12e69863          	bne	a3,a4,4aa4 <cbvprintf+0x24c>
		conv->width_star = true;
    4978:	1807e793          	ori	a5,a5,384
    497c:	04f11023          	sh	a5,64(sp)
		return ++sp;
    4980:	001a0793          	addi	a5,s4,1
	sp = extract_prec(conv, sp);
    4984:	00f12a23          	sw	a5,20(sp)
	conv->prec_present = (*sp == '.');
    4988:	0007c603          	lbu	a2,0(a5)
    498c:	fd260713          	addi	a4,a2,-46
    4990:	00173713          	seqz	a4,a4
    4994:	00971693          	slli	a3,a4,0x9
    4998:	04015703          	lhu	a4,64(sp)
    499c:	dff77713          	andi	a4,a4,-513
    49a0:	00d76733          	or	a4,a4,a3
    49a4:	04e11023          	sh	a4,64(sp)
	if (!conv->prec_present) {
    49a8:	02e00693          	li	a3,46
    49ac:	02d61263          	bne	a2,a3,49d0 <cbvprintf+0x178>
	++sp;
    49b0:	00178693          	addi	a3,a5,1
    49b4:	00d12a23          	sw	a3,20(sp)
	if (*sp == '*') {
    49b8:	0017c603          	lbu	a2,1(a5)
    49bc:	02a00693          	li	a3,42
    49c0:	12d61463          	bne	a2,a3,4ae8 <cbvprintf+0x290>
		conv->prec_star = true;
    49c4:	40076713          	ori	a4,a4,1024
    49c8:	04e11023          	sh	a4,64(sp)
		return ++sp;
    49cc:	00278793          	addi	a5,a5,2
	switch (*sp) {
    49d0:	0007c603          	lbu	a2,0(a5)
    49d4:	06c00713          	li	a4,108
		if (*++sp == 'h') {
    49d8:	00178593          	addi	a1,a5,1
	switch (*sp) {
    49dc:	22e60263          	beq	a2,a4,4c00 <cbvprintf+0x3a8>
    49e0:	14c76263          	bltu	a4,a2,4b24 <cbvprintf+0x2cc>
    49e4:	06800713          	li	a4,104
    49e8:	16e60663          	beq	a2,a4,4b54 <cbvprintf+0x2fc>
    49ec:	06a00713          	li	a4,106
    49f0:	22e60e63          	beq	a2,a4,4c2c <cbvprintf+0x3d4>
    49f4:	04c00713          	li	a4,76
    49f8:	26e60263          	beq	a2,a4,4c5c <cbvprintf+0x404>
		conv->length_mod = LENGTH_NONE;
    49fc:	04015703          	lhu	a4,64(sp)
    4a00:	ffff86b7          	lui	a3,0xffff8
    4a04:	7ff68693          	addi	a3,a3,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
    4a08:	00d77733          	and	a4,a4,a3
    4a0c:	04e11023          	sh	a4,64(sp)
		break;
    4a10:	00078593          	mv	a1,a5
    4a14:	16c0006f          	j	4b80 <cbvprintf+0x328>
		conv->specifier = *sp++;
    4a18:	002c8a13          	addi	s4,s9,2
    4a1c:	04f101a3          	sb	a5,67(sp)
		if (conv->width_star) {
    4a20:	04015783          	lhu	a5,64(sp)
    4a24:	1007f713          	andi	a4,a5,256
    4a28:	32070c63          	beqz	a4,4d60 <cbvprintf+0x508>
			width = va_arg(ap, int);
    4a2c:	00042483          	lw	s1,0(s0)
    4a30:	00440693          	addi	a3,s0,4
			if (width < 0) {
    4a34:	0004d863          	bgez	s1,4a44 <cbvprintf+0x1ec>
				conv->flag_dash = true;
    4a38:	0047e793          	ori	a5,a5,4
    4a3c:	04f11023          	sh	a5,64(sp)
				width = -width;
    4a40:	409004b3          	neg	s1,s1
		if (conv->prec_star) {
    4a44:	04015703          	lhu	a4,64(sp)
    4a48:	40077793          	andi	a5,a4,1024
    4a4c:	32078a63          	beqz	a5,4d80 <cbvprintf+0x528>
			int arg = va_arg(ap, int);
    4a50:	0006aa83          	lw	s5,0(a3)
    4a54:	00468413          	addi	s0,a3,4
			if (arg < 0) {
    4a58:	320adc63          	bgez	s5,4d90 <cbvprintf+0x538>
				conv->prec_present = false;
    4a5c:	dff77713          	andi	a4,a4,-513
    4a60:	04e11023          	sh	a4,64(sp)
		int precision = -1;
    4a64:	fff00a93          	li	s5,-1
    4a68:	3280006f          	j	4d90 <cbvprintf+0x538>
		switch (*sp) {
    4a6c:	00c70863          	beq	a4,a2,4a7c <cbvprintf+0x224>
    4a70:	ecb71ae3          	bne	a4,a1,4944 <cbvprintf+0xec>
			conv->flag_zero = true;
    4a74:	0407e793          	ori	a5,a5,64
    4a78:	0080006f          	j	4a80 <cbvprintf+0x228>
			conv->flag_dash = true;
    4a7c:	0047e793          	ori	a5,a5,4
			conv->flag_zero = true;
    4a80:	04f11023          	sh	a5,64(sp)
			++sp;
    4a84:	001a0a13          	addi	s4,s4,1
	} while (loop);
    4a88:	ea5ff06f          	j	492c <cbvprintf+0xd4>
			conv->flag_plus = true;
    4a8c:	0087e793          	ori	a5,a5,8
    4a90:	ff1ff06f          	j	4a80 <cbvprintf+0x228>
			conv->flag_space = true;
    4a94:	0107e793          	ori	a5,a5,16
    4a98:	fe9ff06f          	j	4a80 <cbvprintf+0x228>
			conv->flag_hash = true;
    4a9c:	0207e793          	ori	a5,a5,32
    4aa0:	fe1ff06f          	j	4a80 <cbvprintf+0x228>
	size_t width = extract_decimal(&sp);
    4aa4:	01410513          	addi	a0,sp,20
    4aa8:	b85ff0ef          	jal	ra,462c <extract_decimal>
	if (sp != wp) {
    4aac:	01412783          	lw	a5,20(sp)
    4ab0:	ed478ae3          	beq	a5,s4,4984 <cbvprintf+0x12c>
		conv->unsupported |= ((conv->width_value < 0)
    4ab4:	04012703          	lw	a4,64(sp)
    4ab8:	04014683          	lbu	a3,64(sp)
		conv->width_value = width;
    4abc:	04a12223          	sw	a0,68(sp)
		conv->unsupported |= ((conv->width_value < 0)
    4ac0:	00175713          	srli	a4,a4,0x1
    4ac4:	00177713          	andi	a4,a4,1
				      || (width != (size_t)conv->width_value));
    4ac8:	01f55513          	srli	a0,a0,0x1f
		conv->unsupported |= ((conv->width_value < 0)
    4acc:	00a76733          	or	a4,a4,a0
    4ad0:	00171713          	slli	a4,a4,0x1
    4ad4:	f8076713          	ori	a4,a4,-128
    4ad8:	07d6f693          	andi	a3,a3,125
    4adc:	00d76733          	or	a4,a4,a3
    4ae0:	04e10023          	sb	a4,64(sp)
    4ae4:	ea1ff06f          	j	4984 <cbvprintf+0x12c>
	size_t prec = extract_decimal(&sp);
    4ae8:	01410513          	addi	a0,sp,20
    4aec:	b41ff0ef          	jal	ra,462c <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    4af0:	04012783          	lw	a5,64(sp)
    4af4:	04015703          	lhu	a4,64(sp)
	conv->prec_value = prec;
    4af8:	04a12423          	sw	a0,72(sp)
	conv->unsupported |= ((conv->prec_value < 0)
    4afc:	0017d793          	srli	a5,a5,0x1
    4b00:	0017f793          	andi	a5,a5,1
			      || (prec != (size_t)conv->prec_value));
    4b04:	01f55513          	srli	a0,a0,0x1f
	conv->unsupported |= ((conv->prec_value < 0)
    4b08:	00a7e7b3          	or	a5,a5,a0
    4b0c:	00179793          	slli	a5,a5,0x1
    4b10:	ffd77713          	andi	a4,a4,-3
    4b14:	00f767b3          	or	a5,a4,a5
    4b18:	04f11023          	sh	a5,64(sp)
	return sp;
    4b1c:	01412783          	lw	a5,20(sp)
    4b20:	eb1ff06f          	j	49d0 <cbvprintf+0x178>
	switch (*sp) {
    4b24:	07400693          	li	a3,116
    4b28:	04015703          	lhu	a4,64(sp)
    4b2c:	10d60e63          	beq	a2,a3,4c48 <cbvprintf+0x3f0>
    4b30:	07a00693          	li	a3,122
    4b34:	ecd614e3          	bne	a2,a3,49fc <cbvprintf+0x1a4>
		conv->length_mod = LENGTH_Z;
    4b38:	ffff87b7          	lui	a5,0xffff8
    4b3c:	7ff78793          	addi	a5,a5,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
    4b40:	00e7f7b3          	and	a5,a5,a4
    4b44:	00003737          	lui	a4,0x3
		conv->unsupported = true;
    4b48:	00e7e7b3          	or	a5,a5,a4
    4b4c:	04f11023          	sh	a5,64(sp)
		break;
    4b50:	0300006f          	j	4b80 <cbvprintf+0x328>
		if (*++sp == 'h') {
    4b54:	04015503          	lhu	a0,64(sp)
    4b58:	0017c803          	lbu	a6,1(a5)
    4b5c:	ffff86b7          	lui	a3,0xffff8
    4b60:	7ff68713          	addi	a4,a3,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
			conv->length_mod = LENGTH_HH;
    4b64:	00a77733          	and	a4,a4,a0
		if (*++sp == 'h') {
    4b68:	08c81463          	bne	a6,a2,4bf0 <cbvprintf+0x398>
			conv->length_mod = LENGTH_HH;
    4b6c:	000016b7          	lui	a3,0x1
    4b70:	80068693          	addi	a3,a3,-2048 # 800 <CONFIG_ISR_STACK_SIZE>
			conv->length_mod = LENGTH_LL;
    4b74:	00d76733          	or	a4,a4,a3
    4b78:	04e11023          	sh	a4,64(sp)
			++sp;
    4b7c:	00278593          	addi	a1,a5,2
	conv->specifier = *sp++;
    4b80:	0005c703          	lbu	a4,0(a1)
	switch (conv->specifier) {
    4b84:	07800793          	li	a5,120
	conv->specifier = *sp++;
    4b88:	00158a13          	addi	s4,a1,1
    4b8c:	04e101a3          	sb	a4,67(sp)
	switch (conv->specifier) {
    4b90:	1ae7ee63          	bltu	a5,a4,4d4c <cbvprintf+0x4f4>
    4b94:	05700793          	li	a5,87
    4b98:	0ee7e063          	bltu	a5,a4,4c78 <cbvprintf+0x420>
    4b9c:	04100793          	li	a5,65
    4ba0:	00f70a63          	beq	a4,a5,4bb4 <cbvprintf+0x35c>
    4ba4:	fbb70713          	addi	a4,a4,-69 # 2fbb <__adddf3+0x48b>
    4ba8:	0ff77713          	andi	a4,a4,255
    4bac:	00200793          	li	a5,2
    4bb0:	18e7ee63          	bltu	a5,a4,4d4c <cbvprintf+0x4f4>
		conv->specifier_cat = SPECIFIER_FP;
    4bb4:	04214783          	lbu	a5,66(sp)
    4bb8:	ff87f793          	andi	a5,a5,-8
    4bbc:	0047e793          	ori	a5,a5,4
    4bc0:	04f10123          	sb	a5,66(sp)
			unsupported = true;
    4bc4:	00100793          	li	a5,1
	conv->unsupported |= unsupported;
    4bc8:	04012703          	lw	a4,64(sp)
    4bcc:	00175713          	srli	a4,a4,0x1
    4bd0:	00177713          	andi	a4,a4,1
    4bd4:	00e7e7b3          	or	a5,a5,a4
    4bd8:	04015703          	lhu	a4,64(sp)
    4bdc:	00179793          	slli	a5,a5,0x1
    4be0:	ffd77713          	andi	a4,a4,-3
    4be4:	00f767b3          	or	a5,a4,a5
    4be8:	04f11023          	sh	a5,64(sp)
	return sp;
    4bec:	e35ff06f          	j	4a20 <cbvprintf+0x1c8>
			conv->length_mod = LENGTH_H;
    4bf0:	000017b7          	lui	a5,0x1
			conv->length_mod = LENGTH_L;
    4bf4:	00f76733          	or	a4,a4,a5
    4bf8:	04e11023          	sh	a4,64(sp)
    4bfc:	f85ff06f          	j	4b80 <cbvprintf+0x328>
		if (*++sp == 'l') {
    4c00:	04015503          	lhu	a0,64(sp)
    4c04:	0017c803          	lbu	a6,1(a5) # 1001 <__divdf3+0x48d>
    4c08:	ffff86b7          	lui	a3,0xffff8
    4c0c:	7ff68713          	addi	a4,a3,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
			conv->length_mod = LENGTH_LL;
    4c10:	00a77733          	and	a4,a4,a0
		if (*++sp == 'l') {
    4c14:	00c81663          	bne	a6,a2,4c20 <cbvprintf+0x3c8>
			conv->length_mod = LENGTH_LL;
    4c18:	000026b7          	lui	a3,0x2
    4c1c:	f59ff06f          	j	4b74 <cbvprintf+0x31c>
			conv->length_mod = LENGTH_L;
    4c20:	000027b7          	lui	a5,0x2
    4c24:	80078793          	addi	a5,a5,-2048 # 1800 <__muldf3+0x4c8>
    4c28:	fcdff06f          	j	4bf4 <cbvprintf+0x39c>
		conv->length_mod = LENGTH_J;
    4c2c:	04015783          	lhu	a5,64(sp)
    4c30:	ffff8737          	lui	a4,0xffff8
    4c34:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
    4c38:	00e7f7b3          	and	a5,a5,a4
    4c3c:	00003737          	lui	a4,0x3
		conv->length_mod = LENGTH_T;
    4c40:	80070713          	addi	a4,a4,-2048 # 2800 <__subsf3+0x360>
    4c44:	f05ff06f          	j	4b48 <cbvprintf+0x2f0>
    4c48:	ffff87b7          	lui	a5,0xffff8
    4c4c:	7ff78793          	addi	a5,a5,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
    4c50:	00e7f7b3          	and	a5,a5,a4
    4c54:	00004737          	lui	a4,0x4
    4c58:	fe9ff06f          	j	4c40 <cbvprintf+0x3e8>
		conv->unsupported = true;
    4c5c:	04015783          	lhu	a5,64(sp)
    4c60:	ffff8737          	lui	a4,0xffff8
    4c64:	7fd70713          	addi	a4,a4,2045 # ffff87fd <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff87fe>
    4c68:	00e7f7b3          	and	a5,a5,a4
    4c6c:	00004737          	lui	a4,0x4
    4c70:	00270713          	addi	a4,a4,2 # 4002 <verify+0x6>
    4c74:	ed5ff06f          	j	4b48 <cbvprintf+0x2f0>
	switch (conv->specifier) {
    4c78:	fa870793          	addi	a5,a4,-88
    4c7c:	0ff7f793          	andi	a5,a5,255
    4c80:	02000693          	li	a3,32
    4c84:	0cf6e463          	bltu	a3,a5,4d4c <cbvprintf+0x4f4>
    4c88:	00412683          	lw	a3,4(sp)
    4c8c:	00279793          	slli	a5,a5,0x2
    4c90:	00d787b3          	add	a5,a5,a3
    4c94:	0007a783          	lw	a5,0(a5)
    4c98:	00078067          	jr	a5
		conv->specifier_cat = SPECIFIER_SINT;
    4c9c:	04214783          	lbu	a5,66(sp)
    4ca0:	ff87f793          	andi	a5,a5,-8
    4ca4:	0017e793          	ori	a5,a5,1
		if (conv->length_mod == LENGTH_UPPER_L) {
    4ca8:	04015683          	lhu	a3,64(sp)
		conv->specifier_cat = SPECIFIER_UINT;
    4cac:	04f10123          	sb	a5,66(sp)
		if (conv->length_mod == LENGTH_UPPER_L) {
    4cb0:	000087b7          	lui	a5,0x8
    4cb4:	80078793          	addi	a5,a5,-2048 # 7800 <z_abort_timeout+0x18>
    4cb8:	00f6f7b3          	and	a5,a3,a5
    4cbc:	01079793          	slli	a5,a5,0x10
    4cc0:	0107d793          	srli	a5,a5,0x10
    4cc4:	00004637          	lui	a2,0x4
    4cc8:	00c79663          	bne	a5,a2,4cd4 <cbvprintf+0x47c>
			conv->invalid = true;
    4ccc:	0016e693          	ori	a3,a3,1
    4cd0:	04d11023          	sh	a3,64(sp)
		if (conv->specifier == 'c') {
    4cd4:	06300693          	li	a3,99
	bool unsupported = false;
    4cd8:	00000793          	li	a5,0
		if (conv->specifier == 'c') {
    4cdc:	eed716e3          	bne	a4,a3,4bc8 <cbvprintf+0x370>
		if (conv->length_mod != LENGTH_NONE) {
    4ce0:	04015703          	lhu	a4,64(sp)
    4ce4:	000087b7          	lui	a5,0x8
    4ce8:	80078793          	addi	a5,a5,-2048 # 7800 <z_abort_timeout+0x18>
    4cec:	00e7f7b3          	and	a5,a5,a4
    4cf0:	00f037b3          	snez	a5,a5
    4cf4:	ed5ff06f          	j	4bc8 <cbvprintf+0x370>
		conv->specifier_cat = SPECIFIER_UINT;
    4cf8:	04214783          	lbu	a5,66(sp)
    4cfc:	ff87f793          	andi	a5,a5,-8
    4d00:	0027e793          	ori	a5,a5,2
    4d04:	fa5ff06f          	j	4ca8 <cbvprintf+0x450>
		conv->specifier_cat = SPECIFIER_PTR;
    4d08:	04214783          	lbu	a5,66(sp)
		if (conv->length_mod == LENGTH_UPPER_L) {
    4d0c:	04015703          	lhu	a4,64(sp)
		conv->specifier_cat = SPECIFIER_PTR;
    4d10:	ff87f793          	andi	a5,a5,-8
    4d14:	0037e793          	ori	a5,a5,3
    4d18:	04f10123          	sb	a5,66(sp)
		if (conv->length_mod == LENGTH_UPPER_L) {
    4d1c:	000087b7          	lui	a5,0x8
    4d20:	80078793          	addi	a5,a5,-2048 # 7800 <z_abort_timeout+0x18>
    4d24:	00e7f7b3          	and	a5,a5,a4
    4d28:	ffffc737          	lui	a4,0xffffc
    4d2c:	00e787b3          	add	a5,a5,a4
    4d30:	0017b793          	seqz	a5,a5
    4d34:	e95ff06f          	j	4bc8 <cbvprintf+0x370>
		conv->specifier_cat = SPECIFIER_PTR;
    4d38:	04214783          	lbu	a5,66(sp)
    4d3c:	ff87f793          	andi	a5,a5,-8
    4d40:	0037e793          	ori	a5,a5,3
    4d44:	04f10123          	sb	a5,66(sp)
    4d48:	f99ff06f          	j	4ce0 <cbvprintf+0x488>
		conv->invalid = true;
    4d4c:	04015783          	lhu	a5,64(sp)
    4d50:	0017e793          	ori	a5,a5,1
    4d54:	04f11023          	sh	a5,64(sp)
	bool unsupported = false;
    4d58:	00000793          	li	a5,0
		break;
    4d5c:	e6dff06f          	j	4bc8 <cbvprintf+0x370>
		} else if (conv->width_present) {
    4d60:	0807f793          	andi	a5,a5,128
    4d64:	00078863          	beqz	a5,4d74 <cbvprintf+0x51c>
			width = conv->width_value;
    4d68:	04412483          	lw	s1,68(sp)
    4d6c:	00040693          	mv	a3,s0
    4d70:	cd5ff06f          	j	4a44 <cbvprintf+0x1ec>
    4d74:	00040693          	mv	a3,s0
		int width = -1;
    4d78:	fff00493          	li	s1,-1
    4d7c:	cc9ff06f          	j	4a44 <cbvprintf+0x1ec>
		} else if (conv->prec_present) {
    4d80:	20077713          	andi	a4,a4,512
    4d84:	0a070063          	beqz	a4,4e24 <cbvprintf+0x5cc>
			precision = conv->prec_value;
    4d88:	04812a83          	lw	s5,72(sp)
    4d8c:	00068413          	mv	s0,a3
			= (enum specifier_cat_enum)conv->specifier_cat;
    4d90:	04012583          	lw	a1,64(sp)
		conv->pad0_value = 0;
    4d94:	04012223          	sw	zero,68(sp)
		conv->pad0_pre_exp = 0;
    4d98:	04012423          	sw	zero,72(sp)
			= (enum specifier_cat_enum)conv->specifier_cat;
    4d9c:	0105d693          	srli	a3,a1,0x10
			= (enum length_mod_enum)conv->length_mod;
    4da0:	00b5d713          	srli	a4,a1,0xb
		enum specifier_cat_enum specifier_cat
    4da4:	0076f693          	andi	a3,a3,7
		if (specifier_cat == SPECIFIER_SINT) {
    4da8:	00100613          	li	a2,1
			= (enum length_mod_enum)conv->length_mod;
    4dac:	00f77713          	andi	a4,a4,15
		if (specifier_cat == SPECIFIER_SINT) {
    4db0:	0cc69863          	bne	a3,a2,4e80 <cbvprintf+0x628>
			switch (length_mod) {
    4db4:	00500613          	li	a2,5
    4db8:	08c70863          	beq	a4,a2,4e48 <cbvprintf+0x5f0>
    4dbc:	00e66a63          	bltu	a2,a4,4dd0 <cbvprintf+0x578>
    4dc0:	00300693          	li	a3,3
    4dc4:	06d70463          	beq	a4,a3,4e2c <cbvprintf+0x5d4>
    4dc8:	00400693          	li	a3,4
    4dcc:	06d70e63          	beq	a4,a3,4e48 <cbvprintf+0x5f0>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    4dd0:	00042683          	lw	a3,0(s0)
    4dd4:	00440413          	addi	s0,s0,4
    4dd8:	02d12823          	sw	a3,48(sp)
    4ddc:	41f6d693          	srai	a3,a3,0x1f
    4de0:	02d12a23          	sw	a3,52(sp)
			if (length_mod == LENGTH_HH) {
    4de4:	00100693          	li	a3,1
    4de8:	06d71e63          	bne	a4,a3,4e64 <cbvprintf+0x60c>
				value->uint = (unsigned char)value->uint;
    4dec:	03014683          	lbu	a3,48(sp)
				value->uint = (unsigned short)value->uint;
    4df0:	02d12823          	sw	a3,48(sp)
    4df4:	02012a23          	sw	zero,52(sp)
		if (conv->invalid || conv->unsupported) {
    4df8:	0035f593          	andi	a1,a1,3
    4dfc:	14058863          	beqz	a1,4f4c <cbvprintf+0x6f4>
			OUTS(sp, fp);
    4e00:	000a0693          	mv	a3,s4
    4e04:	000c8613          	mv	a2,s9
    4e08:	00098593          	mv	a1,s3
    4e0c:	00090513          	mv	a0,s2
    4e10:	9d1ff0ef          	jal	ra,47e0 <outs>
    4e14:	44054e63          	bltz	a0,5270 <cbvprintf+0xa18>
    4e18:	00ad8db3          	add	s11,s11,a0
			OUTS(bps, bpe);
    4e1c:	000a0c93          	mv	s9,s4
    4e20:	aadff06f          	j	48cc <cbvprintf+0x74>
    4e24:	00068413          	mv	s0,a3
    4e28:	c3dff06f          	j	4a64 <cbvprintf+0x20c>
					value->sint = va_arg(ap, long);
    4e2c:	00042683          	lw	a3,0(s0)
				value->sint = va_arg(ap, int);
    4e30:	00440513          	addi	a0,s0,4
					value->sint = va_arg(ap, long);
    4e34:	02d12823          	sw	a3,48(sp)
    4e38:	41f6d693          	srai	a3,a3,0x1f
				value->sint =
    4e3c:	02d12a23          	sw	a3,52(sp)
					(uint_value_type)va_arg(ap, size_t);
    4e40:	00050413          	mv	s0,a0
    4e44:	fb5ff06f          	j	4df8 <cbvprintf+0x5a0>
					(sint_value_type)va_arg(ap, long long);
    4e48:	00740413          	addi	s0,s0,7
    4e4c:	ff847413          	andi	s0,s0,-8
				value->sint =
    4e50:	00042603          	lw	a2,0(s0)
    4e54:	00442683          	lw	a3,4(s0)
					(sint_value_type)va_arg(ap, long long);
    4e58:	00840513          	addi	a0,s0,8
				value->sint =
    4e5c:	02c12823          	sw	a2,48(sp)
    4e60:	fddff06f          	j	4e3c <cbvprintf+0x5e4>
			} else if (length_mod == LENGTH_H) {
    4e64:	00200693          	li	a3,2
    4e68:	f8d718e3          	bne	a4,a3,4df8 <cbvprintf+0x5a0>
				value->sint = (short)value->sint;
    4e6c:	03011683          	lh	a3,48(sp)
    4e70:	02d12823          	sw	a3,48(sp)
    4e74:	41f6d693          	srai	a3,a3,0x1f
				value->dbl = va_arg(ap, double);
    4e78:	02d12a23          	sw	a3,52(sp)
    4e7c:	f7dff06f          	j	4df8 <cbvprintf+0x5a0>
		} else if (specifier_cat == SPECIFIER_UINT) {
    4e80:	00200513          	li	a0,2
    4e84:	04a69e63          	bne	a3,a0,4ee0 <cbvprintf+0x688>
			switch (length_mod) {
    4e88:	00500693          	li	a3,5
    4e8c:	fad70ee3          	beq	a4,a3,4e48 <cbvprintf+0x5f0>
    4e90:	00e6ea63          	bltu	a3,a4,4ea4 <cbvprintf+0x64c>
    4e94:	00300693          	li	a3,3
    4e98:	02d70a63          	beq	a4,a3,4ecc <cbvprintf+0x674>
    4e9c:	00400693          	li	a3,4
    4ea0:	fad704e3          	beq	a4,a3,4e48 <cbvprintf+0x5f0>
					(uint_value_type)va_arg(ap, size_t);
    4ea4:	00042683          	lw	a3,0(s0)
    4ea8:	02012a23          	sw	zero,52(sp)
    4eac:	00440413          	addi	s0,s0,4
    4eb0:	02d12823          	sw	a3,48(sp)
			if (length_mod == LENGTH_HH) {
    4eb4:	00100693          	li	a3,1
    4eb8:	f2d70ae3          	beq	a4,a3,4dec <cbvprintf+0x594>
			} else if (length_mod == LENGTH_H) {
    4ebc:	00200693          	li	a3,2
    4ec0:	f2d71ce3          	bne	a4,a3,4df8 <cbvprintf+0x5a0>
				value->uint = (unsigned short)value->uint;
    4ec4:	03015683          	lhu	a3,48(sp)
    4ec8:	f29ff06f          	j	4df0 <cbvprintf+0x598>
					value->uint = va_arg(ap, unsigned long);
    4ecc:	00042683          	lw	a3,0(s0)
    4ed0:	00440513          	addi	a0,s0,4
    4ed4:	02012a23          	sw	zero,52(sp)
    4ed8:	02d12823          	sw	a3,48(sp)
				break;
    4edc:	f65ff06f          	j	4e40 <cbvprintf+0x5e8>
		} else if (specifier_cat == SPECIFIER_FP) {
    4ee0:	00400613          	li	a2,4
    4ee4:	04c69a63          	bne	a3,a2,4f38 <cbvprintf+0x6e0>
			if (length_mod == LENGTH_UPPER_L) {
    4ee8:	00800693          	li	a3,8
    4eec:	02d71863          	bne	a4,a3,4f1c <cbvprintf+0x6c4>
				value->ldbl = va_arg(ap, long double);
    4ef0:	00042683          	lw	a3,0(s0)
    4ef4:	0006a803          	lw	a6,0(a3) # 2000 <CONFIG_SRAM_SIZE>
    4ef8:	0046a503          	lw	a0,4(a3)
    4efc:	0086a603          	lw	a2,8(a3)
    4f00:	00c6a683          	lw	a3,12(a3)
    4f04:	03012823          	sw	a6,48(sp)
    4f08:	02a12a23          	sw	a0,52(sp)
    4f0c:	02c12c23          	sw	a2,56(sp)
    4f10:	02d12e23          	sw	a3,60(sp)
			value->ptr = va_arg(ap, void *);
    4f14:	00440413          	addi	s0,s0,4
    4f18:	ee1ff06f          	j	4df8 <cbvprintf+0x5a0>
				value->dbl = va_arg(ap, double);
    4f1c:	00740693          	addi	a3,s0,7
    4f20:	ff86f693          	andi	a3,a3,-8
    4f24:	0006a603          	lw	a2,0(a3)
    4f28:	00868413          	addi	s0,a3,8
    4f2c:	0046a683          	lw	a3,4(a3)
    4f30:	02c12823          	sw	a2,48(sp)
    4f34:	f45ff06f          	j	4e78 <cbvprintf+0x620>
		} else if (specifier_cat == SPECIFIER_PTR) {
    4f38:	00300613          	li	a2,3
    4f3c:	eac69ee3          	bne	a3,a2,4df8 <cbvprintf+0x5a0>
			value->ptr = va_arg(ap, void *);
    4f40:	00042683          	lw	a3,0(s0)
    4f44:	02d12823          	sw	a3,48(sp)
    4f48:	fcdff06f          	j	4f14 <cbvprintf+0x6bc>
		switch (conv->specifier) {
    4f4c:	04314683          	lbu	a3,67(sp)
    4f50:	07800613          	li	a2,120
    4f54:	ecd664e3          	bltu	a2,a3,4e1c <cbvprintf+0x5c4>
    4f58:	06200613          	li	a2,98
    4f5c:	00d66e63          	bltu	a2,a3,4f78 <cbvprintf+0x720>
    4f60:	02500713          	li	a4,37
    4f64:	02e68c63          	beq	a3,a4,4f9c <cbvprintf+0x744>
    4f68:	05800713          	li	a4,88
    4f6c:	eae698e3          	bne	a3,a4,4e1c <cbvprintf+0x5c4>
    4f70:	00000b13          	li	s6,0
    4f74:	1fc0006f          	j	5170 <cbvprintf+0x918>
    4f78:	f9d68693          	addi	a3,a3,-99
    4f7c:	0ff6f693          	andi	a3,a3,255
    4f80:	01500613          	li	a2,21
    4f84:	e8d66ce3          	bltu	a2,a3,4e1c <cbvprintf+0x5c4>
    4f88:	00812783          	lw	a5,8(sp)
    4f8c:	00269693          	slli	a3,a3,0x2
    4f90:	00f686b3          	add	a3,a3,a5
    4f94:	0006a683          	lw	a3,0(a3)
    4f98:	00068067          	jr	a3
			OUTC('%');
    4f9c:	00098593          	mv	a1,s3
    4fa0:	02500513          	li	a0,37
    4fa4:	94dff06f          	j	48f0 <cbvprintf+0x98>
			bps = (const char *)value->ptr;
    4fa8:	03012c83          	lw	s9,48(sp)
			if (precision >= 0) {
    4fac:	160ac063          	bltz	s5,510c <cbvprintf+0x8b4>
				len = strnlen(bps, precision);
    4fb0:	000a8593          	mv	a1,s5
    4fb4:	000c8513          	mv	a0,s9
    4fb8:	541030ef          	jal	ra,8cf8 <strnlen>
			bpe = bps + len;
    4fbc:	00ac8d33          	add	s10,s9,a0
		char sign = 0;
    4fc0:	00000b13          	li	s6,0
		if (bps == NULL) {
    4fc4:	e40c8ce3          	beqz	s9,4e1c <cbvprintf+0x5c4>
		size_t nj_len = (bpe - bps);
    4fc8:	419d07b3          	sub	a5,s10,s9
		if (sign != 0) {
    4fcc:	000b0463          	beqz	s6,4fd4 <cbvprintf+0x77c>
			nj_len += 1U;
    4fd0:	00178793          	addi	a5,a5,1
		if (conv->altform_0c) {
    4fd4:	04214703          	lbu	a4,66(sp)
    4fd8:	01077693          	andi	a3,a4,16
    4fdc:	26068663          	beqz	a3,5248 <cbvprintf+0x9f0>
			nj_len += 2U;
    4fe0:	00278793          	addi	a5,a5,2
		nj_len += conv->pad0_value;
    4fe4:	04412683          	lw	a3,68(sp)
		if (conv->pad_fp) {
    4fe8:	04077713          	andi	a4,a4,64
		nj_len += conv->pad0_value;
    4fec:	00d787b3          	add	a5,a5,a3
		if (conv->pad_fp) {
    4ff0:	00070663          	beqz	a4,4ffc <cbvprintf+0x7a4>
			nj_len += conv->pad0_pre_exp;
    4ff4:	04812703          	lw	a4,72(sp)
    4ff8:	00e787b3          	add	a5,a5,a4
		if (width > 0) {
    4ffc:	04905c63          	blez	s1,5054 <cbvprintf+0x7fc>
			width -= (int)nj_len;
    5000:	40f484b3          	sub	s1,s1,a5
			if (!conv->flag_dash) {
    5004:	04012783          	lw	a5,64(sp)
    5008:	0027d793          	srli	a5,a5,0x2
    500c:	0017f793          	andi	a5,a5,1
    5010:	04079263          	bnez	a5,5054 <cbvprintf+0x7fc>
				if (conv->flag_zero) {
    5014:	04015783          	lhu	a5,64(sp)
    5018:	0407f793          	andi	a5,a5,64
    501c:	28078863          	beqz	a5,52ac <cbvprintf+0xa54>
					if (sign != 0) {
    5020:	280b0a63          	beqz	s6,52b4 <cbvprintf+0xa5c>
						OUTC(sign);
    5024:	00098593          	mv	a1,s3
    5028:	000b0513          	mv	a0,s6
    502c:	000900e7          	jalr	s2
    5030:	24054063          	bltz	a0,5270 <cbvprintf+0xa18>
    5034:	001d8d93          	addi	s11,s11,1
					pad = '0';
    5038:	03000793          	li	a5,48
						sign = 0;
    503c:	00000b13          	li	s6,0
    5040:	01b48ab3          	add	s5,s1,s11
    5044:	00048713          	mv	a4,s1
    5048:	409a8db3          	sub	s11,s5,s1
				while (width-- > 0) {
    504c:	fff48493          	addi	s1,s1,-1
    5050:	20e04463          	bgtz	a4,5258 <cbvprintf+0xa00>
		if (sign != 0) {
    5054:	000b0c63          	beqz	s6,506c <cbvprintf+0x814>
			OUTC(sign);
    5058:	00098593          	mv	a1,s3
    505c:	000b0513          	mv	a0,s6
    5060:	000900e7          	jalr	s2
    5064:	20054663          	bltz	a0,5270 <cbvprintf+0xa18>
    5068:	001d8d93          	addi	s11,s11,1
			if (conv->altform_0c | conv->altform_0) {
    506c:	04012783          	lw	a5,64(sp)
    5070:	0147d713          	srli	a4,a5,0x14
    5074:	00177713          	andi	a4,a4,1
    5078:	00071863          	bnez	a4,5088 <cbvprintf+0x830>
    507c:	0137d793          	srli	a5,a5,0x13
    5080:	0017f793          	andi	a5,a5,1
    5084:	00078c63          	beqz	a5,509c <cbvprintf+0x844>
				OUTC('0');
    5088:	00098593          	mv	a1,s3
    508c:	03000513          	li	a0,48
    5090:	000900e7          	jalr	s2
    5094:	1c054e63          	bltz	a0,5270 <cbvprintf+0xa18>
    5098:	001d8d93          	addi	s11,s11,1
			if (conv->altform_0c) {
    509c:	04214783          	lbu	a5,66(sp)
    50a0:	0107f793          	andi	a5,a5,16
    50a4:	00078c63          	beqz	a5,50bc <cbvprintf+0x864>
				OUTC(conv->specifier);
    50a8:	04314503          	lbu	a0,67(sp)
    50ac:	00098593          	mv	a1,s3
    50b0:	000900e7          	jalr	s2
    50b4:	1a054e63          	bltz	a0,5270 <cbvprintf+0xa18>
    50b8:	001d8d93          	addi	s11,s11,1
			while (pad_len-- > 0) {
    50bc:	04412783          	lw	a5,68(sp)
    50c0:	01b78ab3          	add	s5,a5,s11
    50c4:	41ba8733          	sub	a4,s5,s11
    50c8:	1ee04a63          	bgtz	a4,52bc <cbvprintf+0xa64>
			OUTS(bps, bpe);
    50cc:	000d0693          	mv	a3,s10
    50d0:	000c8613          	mv	a2,s9
    50d4:	00098593          	mv	a1,s3
    50d8:	00090513          	mv	a0,s2
    50dc:	f04ff0ef          	jal	ra,47e0 <outs>
    50e0:	18054863          	bltz	a0,5270 <cbvprintf+0xa18>
    50e4:	01b50db3          	add	s11,a0,s11
		while (width > 0) {
    50e8:	01b484b3          	add	s1,s1,s11
    50ec:	41b487b3          	sub	a5,s1,s11
    50f0:	d2f056e3          	blez	a5,4e1c <cbvprintf+0x5c4>
			OUTC(' ');
    50f4:	00098593          	mv	a1,s3
    50f8:	02000513          	li	a0,32
    50fc:	000900e7          	jalr	s2
    5100:	16054863          	bltz	a0,5270 <cbvprintf+0xa18>
    5104:	001d8d93          	addi	s11,s11,1
			--width;
    5108:	fe5ff06f          	j	50ec <cbvprintf+0x894>
				len = strlen(bps);
    510c:	000c8513          	mv	a0,s9
    5110:	3cd030ef          	jal	ra,8cdc <strlen>
    5114:	ea9ff06f          	j	4fbc <cbvprintf+0x764>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    5118:	03012783          	lw	a5,48(sp)
			bpe = buf + 1;
    511c:	01910d13          	addi	s10,sp,25
			bps = buf;
    5120:	01810c93          	addi	s9,sp,24
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    5124:	00f10c23          	sb	a5,24(sp)
			break;
    5128:	00000b13          	li	s6,0
    512c:	e9dff06f          	j	4fc8 <cbvprintf+0x770>
			if (conv->flag_plus) {
    5130:	04015703          	lhu	a4,64(sp)
				sign = '+';
    5134:	02b00b13          	li	s6,43
			if (conv->flag_plus) {
    5138:	00877693          	andi	a3,a4,8
    513c:	00069663          	bnez	a3,5148 <cbvprintf+0x8f0>
				sign = ' ';
    5140:	00171b13          	slli	s6,a4,0x1
    5144:	020b7b13          	andi	s6,s6,32
			sint = value->sint;
    5148:	03412703          	lw	a4,52(sp)
    514c:	03012683          	lw	a3,48(sp)
			if (sint < 0) {
    5150:	02075063          	bgez	a4,5170 <cbvprintf+0x918>
				value->uint = (uint_value_type)-sint;
    5154:	40d00633          	neg	a2,a3
    5158:	40e00733          	neg	a4,a4
    515c:	00d036b3          	snez	a3,a3
    5160:	40d70733          	sub	a4,a4,a3
    5164:	02c12823          	sw	a2,48(sp)
    5168:	02e12a23          	sw	a4,52(sp)
				sign = '-';
    516c:	02d00b13          	li	s6,45
			bps = encode_uint(value->uint, conv, buf, bpe);
    5170:	03012503          	lw	a0,48(sp)
    5174:	03412583          	lw	a1,52(sp)
    5178:	02e10713          	addi	a4,sp,46
    517c:	01810693          	addi	a3,sp,24
    5180:	04010613          	addi	a2,sp,64
    5184:	cf0ff0ef          	jal	ra,4674 <encode_uint>
    5188:	00050c93          	mv	s9,a0
			if (precision >= 0) {
    518c:	02e10d13          	addi	s10,sp,46
    5190:	e20acae3          	bltz	s5,4fc4 <cbvprintf+0x76c>
				conv->flag_zero = false;
    5194:	04015683          	lhu	a3,64(sp)
				size_t len = bpe - bps;
    5198:	419d0733          	sub	a4,s10,s9
				conv->flag_zero = false;
    519c:	fbf6f693          	andi	a3,a3,-65
    51a0:	04d11023          	sh	a3,64(sp)
				if (len < (size_t)precision) {
    51a4:	e35770e3          	bgeu	a4,s5,4fc4 <cbvprintf+0x76c>
					conv->pad0_value = precision - (int)len;
    51a8:	40ea87b3          	sub	a5,s5,a4
    51ac:	04f12223          	sw	a5,68(sp)
    51b0:	e15ff06f          	j	4fc4 <cbvprintf+0x76c>
			if (value->ptr != NULL) {
    51b4:	03012503          	lw	a0,48(sp)
    51b8:	08050063          	beqz	a0,5238 <cbvprintf+0x9e0>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    51bc:	02e10713          	addi	a4,sp,46
    51c0:	01810693          	addi	a3,sp,24
    51c4:	04010613          	addi	a2,sp,64
    51c8:	00000593          	li	a1,0
    51cc:	ca8ff0ef          	jal	ra,4674 <encode_uint>
				conv->altform_0c = true;
    51d0:	04215703          	lhu	a4,66(sp)
    51d4:	000086b7          	lui	a3,0x8
    51d8:	81068693          	addi	a3,a3,-2032 # 7810 <z_abort_timeout+0x28>
    51dc:	0ef77713          	andi	a4,a4,239
    51e0:	00d76733          	or	a4,a4,a3
				bps = encode_uint((uintptr_t)value->ptr, conv,
    51e4:	00050c93          	mv	s9,a0
				conv->altform_0c = true;
    51e8:	04e11123          	sh	a4,66(sp)
		char sign = 0;
    51ec:	00000b13          	li	s6,0
				goto prec_int_pad0;
    51f0:	f9dff06f          	j	518c <cbvprintf+0x934>
	switch ((enum length_mod_enum)conv->length_mod) {
    51f4:	00700693          	li	a3,7
				store_count(conv, value->ptr, count);
    51f8:	03012783          	lw	a5,48(sp)
	switch ((enum length_mod_enum)conv->length_mod) {
    51fc:	c2e6e0e3          	bltu	a3,a4,4e1c <cbvprintf+0x5c4>
    5200:	00271713          	slli	a4,a4,0x2
    5204:	01770733          	add	a4,a4,s7
    5208:	00072703          	lw	a4,0(a4) # ffffc000 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffffc001>
    520c:	00070067          	jr	a4
		*(signed char *)dp = (signed char)count;
    5210:	01b78023          	sb	s11,0(a5)
		break;
    5214:	c09ff06f          	j	4e1c <cbvprintf+0x5c4>
		*(short *)dp = (short)count;
    5218:	01b79023          	sh	s11,0(a5)
		break;
    521c:	c01ff06f          	j	4e1c <cbvprintf+0x5c4>
		*(intmax_t *)dp = (intmax_t)count;
    5220:	41fdd713          	srai	a4,s11,0x1f
    5224:	01b7a023          	sw	s11,0(a5)
    5228:	00e7a223          	sw	a4,4(a5)
		break;
    522c:	bf1ff06f          	j	4e1c <cbvprintf+0x5c4>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    5230:	01b7a023          	sw	s11,0(a5)
		break;
    5234:	be9ff06f          	j	4e1c <cbvprintf+0x5c4>
			bps = "(nil)";
    5238:	0000dcb7          	lui	s9,0xd
			bpe = bps + 5;
    523c:	000c0d13          	mv	s10,s8
			bps = "(nil)";
    5240:	aacc8c93          	addi	s9,s9,-1364 # caac <__mprec_tens+0x2c4>
    5244:	ee5ff06f          	j	5128 <cbvprintf+0x8d0>
		} else if (conv->altform_0) {
    5248:	00877693          	andi	a3,a4,8
    524c:	d8068ce3          	beqz	a3,4fe4 <cbvprintf+0x78c>
			nj_len += 1U;
    5250:	00178793          	addi	a5,a5,1
    5254:	d91ff06f          	j	4fe4 <cbvprintf+0x78c>
					OUTC(pad);
    5258:	00078513          	mv	a0,a5
    525c:	00098593          	mv	a1,s3
    5260:	00f12623          	sw	a5,12(sp)
    5264:	000900e7          	jalr	s2
    5268:	00c12783          	lw	a5,12(sp)
    526c:	dc055ce3          	bgez	a0,5044 <cbvprintf+0x7ec>
#undef OUTS
#undef OUTC
}
    5270:	08c12083          	lw	ra,140(sp)
    5274:	08812403          	lw	s0,136(sp)
    5278:	08412483          	lw	s1,132(sp)
    527c:	08012903          	lw	s2,128(sp)
    5280:	07c12983          	lw	s3,124(sp)
    5284:	07812a03          	lw	s4,120(sp)
    5288:	07412a83          	lw	s5,116(sp)
    528c:	07012b03          	lw	s6,112(sp)
    5290:	06c12b83          	lw	s7,108(sp)
    5294:	06812c03          	lw	s8,104(sp)
    5298:	06412c83          	lw	s9,100(sp)
    529c:	06012d03          	lw	s10,96(sp)
    52a0:	05c12d83          	lw	s11,92(sp)
    52a4:	09010113          	addi	sp,sp,144
    52a8:	00008067          	ret
				char pad = ' ';
    52ac:	02000793          	li	a5,32
    52b0:	d91ff06f          	j	5040 <cbvprintf+0x7e8>
					pad = '0';
    52b4:	03000793          	li	a5,48
    52b8:	d89ff06f          	j	5040 <cbvprintf+0x7e8>
				OUTC('0');
    52bc:	00098593          	mv	a1,s3
    52c0:	03000513          	li	a0,48
    52c4:	000900e7          	jalr	s2
    52c8:	fa0544e3          	bltz	a0,5270 <cbvprintf+0xa18>
    52cc:	001d8d93          	addi	s11,s11,1
    52d0:	df5ff06f          	j	50c4 <cbvprintf+0x86c>

000052d4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    52d4:	00008067          	ret

000052d8 <soc_interrupt_init>:
static ALWAYS_INLINE unsigned int arch_irq_lock(void)
{
	unsigned int key;
	ulong_t mstatus;

	__asm__ volatile ("csrrc %0, mstatus, %1"
    52d8:	00800793          	li	a5,8
    52dc:	3007b7f3          	csrrc	a5,mstatus,a5
void soc_interrupt_init(void)
{
	/* ensure that all interrupts are disabled */
	(void)irq_lock();

	__asm__ volatile ("csrwi mie, 0\n"
    52e0:	30405073          	csrwi	mie,0
    52e4:	34405073          	csrwi	mip,0
			  "csrwi mip, 0\n");
}
    52e8:	00008067          	ret

000052ec <fix_baud_rate>:
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
    52ec:	800017b7          	lui	a5,0x80001
    52f0:	03c7a783          	lw	a5,60(a5) # 8000103c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000103d>

	/*
	 * calculate baud rate divisor. a variant of
	 * (uint32_t)(dev_cfg->sys_clk_freq / (16.0 * baud_rate) + 0.5)
	 */
	divisor = ((sys_clk_freq + (baud_rate << 3))
    52f4:	000e1737          	lui	a4,0xe1
	return *(volatile uint8_t *)addr;
    52f8:	800026b7          	lui	a3,0x80002
    52fc:	00e787b3          	add	a5,a5,a4
		   / baud_rate) >> 4;
    5300:	0001c737          	lui	a4,0x1c
    5304:	20070713          	addi	a4,a4,512 # 1c200 <__data_region_end+0xd004>
    5308:	02e7d7b3          	divu	a5,a5,a4
    530c:	00c6c703          	lbu	a4,12(a3) # 8000200c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000200d>
	sys_write8((divisor >> 8) & 0xff, REG_BRDH);

	sys_write8(lcr_cache, REG_LCR);

	return 0;
}
    5310:	00000513          	li	a0,0
    5314:	0ff77613          	andi	a2,a4,255
	sys_write8(lcr_cache | LCR_DLAB, REG_LCR);
    5318:	f8076713          	ori	a4,a4,-128
    531c:	0ff77713          	andi	a4,a4,255
	*(volatile uint8_t *)addr = data;
    5320:	00e68623          	sb	a4,12(a3)
	divisor = ((sys_clk_freq + (baud_rate << 3))
    5324:	0047d713          	srli	a4,a5,0x4
	sys_write8( divisor       & 0xff, REG_BRDL);
    5328:	0ff77713          	andi	a4,a4,255
	sys_write8((divisor >> 8) & 0xff, REG_BRDH);
    532c:	00c7d793          	srli	a5,a5,0xc
    5330:	00e68023          	sb	a4,0(a3)
    5334:	0ff7f793          	andi	a5,a5,255
    5338:	00f68223          	sb	a5,4(a3)
    533c:	00c68623          	sb	a2,12(a3)
}
    5340:	00008067          	ret

00005344 <arch_cpu_idle>:
 */
static ALWAYS_INLINE void arch_irq_unlock(unsigned int key)
{
	ulong_t mstatus;

	__asm__ volatile ("csrrs %0, mstatus, %1"
    5344:	00800793          	li	a5,8
    5348:	3007a7f3          	csrrs	a5,mstatus,a5
 */

void __weak arch_cpu_idle(void)
{
	irq_unlock(MSTATUS_IEN);
}
    534c:	00008067          	ret

00005350 <z_riscv_fatal_error>:
 #define NO_REG "                "
#endif

FUNC_NORETURN void z_riscv_fatal_error(unsigned int reason,
				       const z_arch_esf_t *esf)
{
    5350:	ff010113          	addi	sp,sp,-16
    5354:	00112623          	sw	ra,12(sp)
		LOG_ERR("   mepc: " PR_REG, esf->mepc);
		LOG_ERR("mstatus: " PR_REG, esf->mstatus);
		LOG_ERR("");
	}

	z_fatal_error(reason, esf);
    5358:	455000ef          	jal	ra,5fac <z_fatal_error>

0000535c <_Fault>:
		return "unknown";
	}
}

void _Fault(z_arch_esf_t *esf)
{
    535c:	ff010113          	addi	sp,sp,-16
    5360:	00112623          	sw	ra,12(sp)
    5364:	00050593          	mv	a1,a0
		}
	}
#endif /* CONFIG_USERSPACE */
	ulong_t mcause;

	__asm__ volatile("csrr %0, mcause" : "=r" (mcause));
    5368:	342027f3          	csrr	a5,mcause

#ifndef CONFIG_SOC_OPENISA_RV32M1_RISCV32
	ulong_t mtval;
	__asm__ volatile("csrr %0, mtval" : "=r" (mtval));
    536c:	343027f3          	csrr	a5,mtval
	z_fatal_error(reason, esf);
    5370:	00000513          	li	a0,0
    5374:	439000ef          	jal	ra,5fac <z_fatal_error>

00005378 <z_irq_spurious>:
#include <kernel_internal.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_irq_spurious(const void *unused)
{
    5378:	ff010113          	addi	sp,sp,-16
    537c:	00112623          	sw	ra,12(sp)
	ulong_t mcause;

	ARG_UNUSED(unused);

	__asm__ volatile("csrr %0, mcause" : "=r" (mcause));
    5380:	342027f3          	csrr	a5,mcause
	if (mcause == RISCV_MACHINE_EXT_IRQ) {
		LOG_ERR("PLIC interrupt line causing the IRQ: %d",
			riscv_plic_get_irq());
	}
#endif
	z_riscv_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    5384:	00000593          	li	a1,0
    5388:	00100513          	li	a0,1
    538c:	fc5ff0ef          	jal	ra,5350 <z_riscv_fatal_error>

00005390 <_PrepC>:
 *
 * @return N/A
 */

void _PrepC(void)
{
    5390:	ff010113          	addi	sp,sp,-16
    5394:	00112623          	sw	ra,12(sp)
	z_bss_zero();
    5398:	549000ef          	jal	ra,60e0 <z_bss_zero>
#ifdef CONFIG_XIP
	z_data_copy();
#endif
#if defined(CONFIG_RISCV_SOC_INTERRUPT_INIT)
	soc_interrupt_init();
    539c:	f3dff0ef          	jal	ra,52d8 <soc_interrupt_init>
#endif
#ifdef CONFIG_PMP_STACK_GUARD
	z_riscv_configure_interrupt_stack_guard();
#endif
	z_cstart();
    53a0:	561000ef          	jal	ra,6100 <z_cstart>

000053a4 <__initialize>:
SECTION_FUNC(TEXT, __initialize)
	/*
	 * This will boot master core, just halt other cores.
	 * Note: need to be updated for complete SMP support
	 */
	csrr a0, mhartid
    53a4:	f1402573          	csrr	a0,mhartid
	beqz a0, boot_master_core
    53a8:	00050663          	beqz	a0,53b4 <boot_master_core>

000053ac <loop_slave_core>:

loop_slave_core:
	wfi
    53ac:	10500073          	wfi
	j loop_slave_core
    53b0:	ffdff06f          	j	53ac <loop_slave_core>

000053b4 <boot_master_core>:

	/*
	 * Initially, setup stack pointer to
	 * z_interrupt_stacks + CONFIG_ISR_STACK_SIZE
	 */
	la sp, z_interrupt_stacks
    53b4:	00009117          	auipc	sp,0x9
    53b8:	15c10113          	addi	sp,sp,348 # e510 <z_interrupt_stacks>
	li t0, CONFIG_ISR_STACK_SIZE
    53bc:	000012b7          	lui	t0,0x1
    53c0:	80028293          	addi	t0,t0,-2048 # 800 <CONFIG_ISR_STACK_SIZE>
	add sp, sp, t0
    53c4:	00510133          	add	sp,sp,t0

	csrw mscratch, sp
    53c8:	34011073          	csrw	mscratch,sp

	/*
	 * Jump into C domain. _PrepC zeroes BSS, copies rw data into RAM,
	 * and then enters kernel z_cstart
	 */
	call _PrepC
    53cc:	fc5ff0ef          	jal	ra,5390 <_PrepC>

000053d0 <z_thread_entry_wrapper>:
	 * in registers a0, a1, a2 and a3. These registers are used as arguments
	 * to function z_thread_entry. Hence, just call z_thread_entry with
	 * return address set to 0 to indicate a non-returning function call.
	 */

	jal x0, z_thread_entry
    53d0:	eb1fe06f          	j	4280 <z_thread_entry>

000053d4 <arch_new_thread>:
#ifdef CONFIG_RISCV_SOC_CONTEXT_SAVE
	const struct soc_esf soc_esf_init = {SOC_ESF_INIT};
#endif

	/* Initial stack frame for thread */
	stack_init = (struct __esf *)Z_STACK_PTR_ALIGN(
    53d4:	fb460613          	addi	a2,a2,-76 # 3fb4 <create_mat+0x78>
 * @param ptr Proposed stack pointer address
 * @return Properly aligned stack pointer address
 */
static inline char *z_stack_ptr_align(char *ptr)
{
	return (char *)ROUND_DOWN(ptr, ARCH_STACK_PTR_ALIGN);
    53d8:	ff067613          	andi	a2,a2,-16
				);

	/* Setup the initial stack frame */
	stack_init->a0 = (ulong_t)entry;
	stack_init->a1 = (ulong_t)p1;
	stack_init->a2 = (ulong_t)p2;
    53dc:	02f62623          	sw	a5,44(a2)
	 *    restored following the MSTATUS value set within the thread stack;
	 * 2) the core will jump to z_thread_entry_wrapper, as the program
	 *    counter will be restored following the MEPC value set within the
	 *    thread stack.
	 */
	stack_init->mstatus = MSTATUS_DEF_RESTORE;
    53e0:	000027b7          	lui	a5,0x2
    53e4:	88078793          	addi	a5,a5,-1920 # 1880 <__muldf3+0x548>
    53e8:	04f62423          	sw	a5,72(a2)
#elif defined(CONFIG_FPU)
	/* Unshared FP mode: enable FPU of each thread. */
	stack_init->mstatus |= MSTATUS_FS_INIT;
#endif

	stack_init->mepc = (ulong_t)z_thread_entry_wrapper;
    53ec:	000057b7          	lui	a5,0x5
    53f0:	3d078793          	addi	a5,a5,976 # 53d0 <z_thread_entry_wrapper>
	stack_init->a0 = (ulong_t)entry;
    53f4:	02d62223          	sw	a3,36(a2)
	stack_init->a1 = (ulong_t)p1;
    53f8:	02e62423          	sw	a4,40(a2)
	stack_init->a3 = (ulong_t)p3;
    53fc:	03062823          	sw	a6,48(a2)
	stack_init->mepc = (ulong_t)z_thread_entry_wrapper;
    5400:	04f62223          	sw	a5,68(a2)

#ifdef CONFIG_RISCV_SOC_CONTEXT_SAVE
	stack_init->soc_context = soc_esf_init;
#endif

	thread->callee_saved.sp = (ulong_t)stack_init;
    5404:	02c52823          	sw	a2,48(a0)
}
    5408:	00008067          	ret

0000540c <malloc_prepare>:
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
    540c:	00000513          	li	a0,0
    5410:	00008067          	ret

00005414 <_stdout_hook_default>:
static int _stdout_hook_default(int c)
{
	(void)(c);  /* Prevent warning about unused argument */

	return EOF;
}
    5414:	fff00513          	li	a0,-1
    5418:	00008067          	ret

0000541c <_stdin_hook_default>:
}

static unsigned char _stdin_hook_default(void)
{
	return 0;
}
    541c:	00000513          	li	a0,0
    5420:	00008067          	ret

00005424 <__stdout_hook_install>:
	_stdout_hook = hook;
    5424:	0000f7b7          	lui	a5,0xf
    5428:	12a7a023          	sw	a0,288(a5) # f120 <_stdout_hook>
}
    542c:	00008067          	ret

00005430 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    5430:	fe010113          	addi	sp,sp,-32
    5434:	00812c23          	sw	s0,24(sp)
    5438:	00912a23          	sw	s1,20(sp)
    543c:	01212823          	sw	s2,16(sp)
    5440:	01312623          	sw	s3,12(sp)
    5444:	01412423          	sw	s4,8(sp)
    5448:	01512223          	sw	s5,4(sp)
    544c:	00112e23          	sw	ra,28(sp)
    5450:	00050913          	mv	s2,a0
    5454:	00058493          	mv	s1,a1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
    5458:	00000413          	li	s0,0
		*(buf + i) = _stdin_hook();
    545c:	0000f9b7          	lui	s3,0xf
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    5460:	00a00a13          	li	s4,10
    5464:	00d00a93          	li	s5,13
	for (i = 0; i < nbytes; i++) {
    5468:	02945063          	bge	s0,s1,5488 <z_impl_zephyr_read_stdin+0x58>
		*(buf + i) = _stdin_hook();
    546c:	11c9a783          	lw	a5,284(s3) # f11c <_stdin_hook>
    5470:	000780e7          	jalr	a5
    5474:	008907b3          	add	a5,s2,s0
    5478:	00a78023          	sb	a0,0(a5)
	for (i = 0; i < nbytes; i++) {
    547c:	00140413          	addi	s0,s0,1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    5480:	01450463          	beq	a0,s4,5488 <z_impl_zephyr_read_stdin+0x58>
    5484:	ff5512e3          	bne	a0,s5,5468 <z_impl_zephyr_read_stdin+0x38>
			i++;
			break;
		}
	}
	return i;
}
    5488:	01c12083          	lw	ra,28(sp)
    548c:	00040513          	mv	a0,s0
    5490:	01812403          	lw	s0,24(sp)
    5494:	01412483          	lw	s1,20(sp)
    5498:	01012903          	lw	s2,16(sp)
    549c:	00c12983          	lw	s3,12(sp)
    54a0:	00812a03          	lw	s4,8(sp)
    54a4:	00412a83          	lw	s5,4(sp)
    54a8:	02010113          	addi	sp,sp,32
    54ac:	00008067          	ret

000054b0 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    54b0:	fe010113          	addi	sp,sp,-32
    54b4:	00812c23          	sw	s0,24(sp)
    54b8:	00912a23          	sw	s1,20(sp)
    54bc:	01212823          	sw	s2,16(sp)
    54c0:	01512223          	sw	s5,4(sp)
    54c4:	01612023          	sw	s6,0(sp)
    54c8:	00112e23          	sw	ra,28(sp)
    54cc:	01312623          	sw	s3,12(sp)
    54d0:	01412423          	sw	s4,8(sp)
    54d4:	00050913          	mv	s2,a0
    54d8:	00058413          	mv	s0,a1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    54dc:	00000493          	li	s1,0
		if (*(buf + i) == '\n') {
    54e0:	00a00a93          	li	s5,10
    54e4:	0000fb37          	lui	s6,0xf
	for (i = 0; i < nbytes; i++) {
    54e8:	0284c863          	blt	s1,s0,5518 <z_impl_zephyr_write_stdout+0x68>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    54ec:	01c12083          	lw	ra,28(sp)
    54f0:	00040513          	mv	a0,s0
    54f4:	01812403          	lw	s0,24(sp)
    54f8:	01412483          	lw	s1,20(sp)
    54fc:	01012903          	lw	s2,16(sp)
    5500:	00c12983          	lw	s3,12(sp)
    5504:	00812a03          	lw	s4,8(sp)
    5508:	00412a83          	lw	s5,4(sp)
    550c:	00012b03          	lw	s6,0(sp)
    5510:	02010113          	addi	sp,sp,32
    5514:	00008067          	ret
		if (*(buf + i) == '\n') {
    5518:	009909b3          	add	s3,s2,s1
    551c:	0009c783          	lbu	a5,0(s3)
    5520:	120b0a13          	addi	s4,s6,288 # f120 <_stdout_hook>
    5524:	01579863          	bne	a5,s5,5534 <z_impl_zephyr_write_stdout+0x84>
			_stdout_hook('\r');
    5528:	000a2783          	lw	a5,0(s4)
    552c:	00d00513          	li	a0,13
    5530:	000780e7          	jalr	a5
		_stdout_hook(*(buf + i));
    5534:	000a2783          	lw	a5,0(s4)
    5538:	0009c503          	lbu	a0,0(s3)
	for (i = 0; i < nbytes; i++) {
    553c:	00148493          	addi	s1,s1,1
		_stdout_hook(*(buf + i));
    5540:	000780e7          	jalr	a5
	for (i = 0; i < nbytes; i++) {
    5544:	fa5ff06f          	j	54e8 <z_impl_zephyr_write_stdout+0x38>

00005548 <_read>:
#include <syscalls/zephyr_write_stdout_mrsh.c>
#endif

#ifndef CONFIG_POSIX_API
int _read(int fd, char *buf, int nbytes)
{
    5548:	00058513          	mv	a0,a1
    554c:	00060593          	mv	a1,a2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
    5550:	ee1ff06f          	j	5430 <z_impl_zephyr_read_stdin>

00005554 <_write>:
	return zephyr_read_stdin(buf, nbytes);
}
__weak FUNC_ALIAS(_read, read, int);

int _write(int fd, const void *buf, int nbytes)
{
    5554:	00058513          	mv	a0,a1
    5558:	00060593          	mv	a1,a2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
    555c:	f55ff06f          	j	54b0 <z_impl_zephyr_write_stdout>

00005560 <_close>:
    5560:	fff00513          	li	a0,-1
    5564:	00008067          	ret

00005568 <_lseek>:
__weak FUNC_ALIAS(_close, close, int);

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    5568:	00000513          	li	a0,0
    556c:	00008067          	ret

00005570 <_isatty>:
#endif

int _isatty(int file)
{
	return file <= 2;
}
    5570:	00352513          	slti	a0,a0,3
    5574:	00008067          	ret

00005578 <_kill>:
__weak FUNC_ALIAS(_isatty, isatty, int);

int _kill(int i, int j)
{
	return 0;
}
    5578:	00000513          	li	a0,0
    557c:	00008067          	ret

00005580 <_getpid>:
__weak FUNC_ALIAS(_kill, kill, int);

int _getpid(void)
{
	return 0;
}
    5580:	00000513          	li	a0,0
    5584:	00008067          	ret

00005588 <_fstat>:
__weak FUNC_ALIAS(_getpid, getpid, int);

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    5588:	000027b7          	lui	a5,0x2
    558c:	00f5a223          	sw	a5,4(a1)
	return 0;
}
    5590:	00000513          	li	a0,0
    5594:	00008067          	ret

00005598 <_exit>:
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    5598:	ff010113          	addi	sp,sp,-16
    559c:	00112623          	sw	ra,12(sp)
    55a0:	0000d537          	lui	a0,0xd
    55a4:	00500593          	li	a1,5
    55a8:	bc450513          	addi	a0,a0,-1084 # cbc4 <dts_ord_9_cfg+0xc>
    55ac:	f05ff0ef          	jal	ra,54b0 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
    55b0:	0000006f          	j	55b0 <_exit+0x18>

000055b4 <_sbrk>:

void *_sbrk(intptr_t count)
{
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    55b4:	0000d737          	lui	a4,0xd
    55b8:	02870713          	addi	a4,a4,40 # d028 <heap_sz>
    55bc:	00072783          	lw	a5,0(a4)

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    55c0:	00800637          	lui	a2,0x800
    55c4:	00f506b3          	add	a3,a0,a5
    55c8:	0000f537          	lui	a0,0xf
    55cc:	1fc50513          	addi	a0,a0,508 # f1fc <__data_region_end>
    55d0:	40a60633          	sub	a2,a2,a0
    55d4:	00c6f863          	bgeu	a3,a2,55e4 <_sbrk+0x30>
	ptr = ((char *)HEAP_BASE) + heap_sz;
    55d8:	00a78533          	add	a0,a5,a0
		heap_sz += count;
    55dc:	00d72023          	sw	a3,0(a4)
		ret = ptr;
    55e0:	00008067          	ret
	} else {
		ret = (void *)-1;
    55e4:	fff00513          	li	a0,-1
	}

	return ret;
}
    55e8:	00008067          	ret

000055ec <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
    55ec:	ff010113          	addi	sp,sp,-16
    55f0:	00812423          	sw	s0,8(sp)
    55f4:	00050413          	mv	s0,a0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
    55f8:	01400513          	li	a0,20
{
    55fc:	00112623          	sw	ra,12(sp)
	*lock = malloc(sizeof(struct k_mutex));
    5600:	4b8020ef          	jal	ra,7ab8 <malloc>
    5604:	00a42023          	sw	a0,0(s0)
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
    5608:	00812403          	lw	s0,8(sp)
    560c:	00c12083          	lw	ra,12(sp)
    5610:	01010113          	addi	sp,sp,16
	return z_impl_k_mutex_init(mutex);
    5614:	0d40106f          	j	66e8 <z_impl_k_mutex_init>

00005618 <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
    5618:	fff00593          	li	a1,-1
    561c:	fff00613          	li	a2,-1
    5620:	0e00106f          	j	6700 <z_impl_k_mutex_lock>

00005624 <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
    5624:	23c0106f          	j	6860 <z_impl_k_mutex_unlock>

00005628 <z_impl_sys_rand32_get>:
 *
 * @return a 32-bit number
 */

uint32_t z_impl_sys_rand32_get(void)
{
    5628:	ff010113          	addi	sp,sp,-16
    562c:	00812423          	sw	s0,8(sp)
    5630:	00112623          	sw	ra,12(sp)

extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    5634:	079000ef          	jal	ra,5eac <sys_clock_cycle_get_32>
    5638:	00050413          	mv	s0,a0
		/* coverity[OVERRUN] */
		return (atomic_val_t) arch_syscall_invoke2(*(uintptr_t *)&target, *(uintptr_t *)&value, K_SYSCALL_ATOMIC_ADD);
	}
#endif
	compiler_barrier();
	return z_impl_atomic_add(target, value);
    563c:	3b9ad5b7          	lui	a1,0x3b9ad
    5640:	0000d537          	lui	a0,0xd
    5644:	a0358593          	addi	a1,a1,-1533 # 3b9aca03 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x389fd983>
    5648:	02c50513          	addi	a0,a0,44 # d02c <_rand32_counter>
    564c:	3c8020ef          	jal	ra,7a14 <z_impl_atomic_add>
	return k_cycle_get_32() + atomic_add(&_rand32_counter, _RAND32_INC);
}
    5650:	00c12083          	lw	ra,12(sp)
    5654:	00850533          	add	a0,a0,s0
    5658:	00812403          	lw	s0,8(sp)
    565c:	01010113          	addi	sp,sp,16
    5660:	00008067          	ret

00005664 <swerv_pic_init>:
	return *(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg);
}

static void swerv_pic_write(uint32_t reg, uint32_t val)
{
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    5664:	f00c37b7          	lui	a5,0xf00c3
    5668:	0007a023          	sw	zero,0(a5) # f00c3000 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xf00c3001>
    566c:	f00c27b7          	lui	a5,0xf00c2
    5670:	00478713          	addi	a4,a5,4 # f00c2004 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xf00c2005>

	/* Init priority order to 0, 0=lowest to 15=highest */
	swerv_pic_write(SWERV_PIC_mpiccfg, 0);

	/* Ensure that all interrupts are disabled initially */
	for (i = 1; i < SWERV_PIC_MAX_ID; i++) {
    5674:	12c78793          	addi	a5,a5,300
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    5678:	00072023          	sw	zero,0(a4)
	for (i = 1; i < SWERV_PIC_MAX_ID; i++) {
    567c:	00470713          	addi	a4,a4,4
    5680:	fef71ce3          	bne	a4,a5,5678 <swerv_pic_init+0x14>
    5684:	f00c07b7          	lui	a5,0xf00c0
    5688:	00478713          	addi	a4,a5,4 # f00c0004 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xf00c0005>
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    568c:	00f00693          	li	a3,15
		swerv_pic_write(SWERV_PIC_meie(i), 0);
	}

	/* Set priority of each interrupt line to 0 initially */
	for (i = 1; i < SWERV_PIC_MAX_ID; i++) {
    5690:	12c78793          	addi	a5,a5,300
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    5694:	00d72023          	sw	a3,0(a4)
	for (i = 1; i < SWERV_PIC_MAX_ID; i++) {
    5698:	00470713          	addi	a4,a4,4
    569c:	fef71ce3          	bne	a4,a5,5694 <swerv_pic_init+0x30>
    56a0:	f00c47b7          	lui	a5,0xf00c4
    56a4:	00478713          	addi	a4,a5,4 # f00c4004 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xf00c4005>
		swerv_pic_write(SWERV_PIC_meipl(i), 15);
	}

	/* Set property of each interrupt line to level-triggered/high */
	for (i = 1; i < SWERV_PIC_MAX_ID; i++) {
    56a8:	12c78793          	addi	a5,a5,300
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    56ac:	00072023          	sw	zero,0(a4)
	for (i = 1; i < SWERV_PIC_MAX_ID; i++) {
    56b0:	00470713          	addi	a4,a4,4
    56b4:	fef71ce3          	bne	a4,a5,56ac <swerv_pic_init+0x48>
    56b8:	f00c57b7          	lui	a5,0xf00c5
    56bc:	00478713          	addi	a4,a5,4 # f00c5004 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xf00c5005>
		swerv_pic_write(SWERV_PIC_meigwctrl(i), (0<<1)|(0<<0));
	}

	/* clear pending of each interrupt line */
	for (i = 1; i < SWERV_PIC_MAX_ID; i++) {
    56c0:	12c78793          	addi	a5,a5,300
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    56c4:	00072023          	sw	zero,0(a4)
	for (i = 1; i < SWERV_PIC_MAX_ID; i++) {
    56c8:	00470713          	addi	a4,a4,4
    56cc:	fef71ce3          	bne	a4,a5,56c4 <swerv_pic_init+0x60>
		swerv_pic_write(SWERV_PIC_meigwclr(i), 0);
	}

	/* No interrupts masked */
	__asm__ swerv_pic_writecsr(meipt, 0);
    56d0:	bc905073          	csrwi	0xbc9,0
	__asm__ swerv_pic_writecsr(meicidpl, 0);
    56d4:	bcb05073          	csrwi	0xbcb,0
	__asm__ swerv_pic_writecsr(meicurpl, 0);
    56d8:	bcc05073          	csrwi	0xbcc,0

	/*
	 * CSR mie register is updated using atomic instruction csrrs
	 * (atomic read and set bits in CSR register)
	 */
	__asm__ volatile ("csrrs %0, mie, %1\n"
    56dc:	000017b7          	lui	a5,0x1
    56e0:	80078793          	addi	a5,a5,-2048 # 800 <CONFIG_ISR_STACK_SIZE>
    56e4:	3047a7f3          	csrrs	a5,mie,a5
}
    56e8:	00000513          	li	a0,0
    56ec:	00008067          	ret

000056f0 <swerv_pic_irq_handler>:
{
    56f0:	ff010113          	addi	sp,sp,-16
    56f4:	00112623          	sw	ra,12(sp)
    56f8:	00812423          	sw	s0,8(sp)
	__asm__ swerv_pic_writecsr(meicpct, 0);
    56fc:	bca05073          	csrwi	0xbca,0
	__asm__ swerv_pic_readcsr(meihap, tmp);
    5700:	fc802473          	csrr	s0,0xfc8
	irq = (tmp >> 2) & 0xff;
    5704:	00245413          	srli	s0,s0,0x2
    5708:	0ff47413          	andi	s0,s0,255
	save_irq = irq;
    570c:	0000d7b7          	lui	a5,0xd
    5710:	0287a823          	sw	s0,48(a5) # d030 <save_irq>
	if (irq == 0U || irq >= 64) {
    5714:	fff40713          	addi	a4,s0,-1
    5718:	03e00793          	li	a5,62
    571c:	00e7f663          	bgeu	a5,a4,5728 <swerv_pic_irq_handler+0x38>
		z_irq_spurious(NULL);
    5720:	00000513          	li	a0,0
    5724:	c55ff0ef          	jal	ra,5378 <z_irq_spurious>
	irq += RISCV_MAX_GENERIC_IRQ;
    5728:	00b40713          	addi	a4,s0,11
	if (ite->isr)
    572c:	0000c7b7          	lui	a5,0xc
    5730:	00371713          	slli	a4,a4,0x3
    5734:	38478793          	addi	a5,a5,900 # c384 <_sw_isr_table>
    5738:	00e787b3          	add	a5,a5,a4
    573c:	0047a703          	lw	a4,4(a5)
    5740:	00070663          	beqz	a4,574c <swerv_pic_irq_handler+0x5c>
		ite->isr(ite->arg);
    5744:	0007a503          	lw	a0,0(a5)
    5748:	000700e7          	jalr	a4
	swerv_pic_write(SWERV_PIC_meigwclr(irq), 0);
    574c:	000017b7          	lui	a5,0x1
    5750:	40b78793          	addi	a5,a5,1035 # 140b <__muldf3+0xd3>
    5754:	00f40433          	add	s0,s0,a5
    5758:	00241413          	slli	s0,s0,0x2
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    575c:	f00c07b7          	lui	a5,0xf00c0
    5760:	00f40433          	add	s0,s0,a5
}
    5764:	00c12083          	lw	ra,12(sp)
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    5768:	00042023          	sw	zero,0(s0)
}
    576c:	00812403          	lw	s0,8(sp)
    5770:	01010113          	addi	sp,sp,16
    5774:	00008067          	ret

00005778 <swerv_pic_irq_enable>:
	if ((irq >= SWERV_PIC_MAX_ID) || (irq < RISCV_MAX_GENERIC_IRQ)) {
    5778:	ff550713          	addi	a4,a0,-11
    577c:	03f00793          	li	a5,63
    5780:	02e7e663          	bltu	a5,a4,57ac <swerv_pic_irq_enable+0x34>
	__asm__ volatile ("csrrc %0, mstatus, %1"
    5784:	00800793          	li	a5,8
    5788:	3007b7f3          	csrrc	a5,mstatus,a5
	swerv_pic_write(SWERV_PIC_meie(irq - RISCV_MAX_GENERIC_IRQ), 1);
    578c:	7f550513          	addi	a0,a0,2037
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    5790:	f00c0737          	lui	a4,0xf00c0
	swerv_pic_write(SWERV_PIC_meie(irq - RISCV_MAX_GENERIC_IRQ), 1);
    5794:	00251513          	slli	a0,a0,0x2
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    5798:	00e50533          	add	a0,a0,a4
    579c:	00100713          	li	a4,1
    57a0:	00e52023          	sw	a4,0(a0)
	key = (mstatus & MSTATUS_IEN);
    57a4:	0087f793          	andi	a5,a5,8
	__asm__ volatile ("csrrs %0, mstatus, %1"
    57a8:	3007a7f3          	csrrs	a5,mstatus,a5
}
    57ac:	00008067          	ret

000057b0 <arch_irq_enable>:
	if (irq > RISCV_MAX_GENERIC_IRQ) {
    57b0:	00b00793          	li	a5,11
    57b4:	00a7f463          	bgeu	a5,a0,57bc <arch_irq_enable+0xc>
		swerv_pic_irq_enable(irq);
    57b8:	fc1ff06f          	j	5778 <swerv_pic_irq_enable>
			  : "=r" (mie)
			  : "r" (1 << irq));
    57bc:	00100793          	li	a5,1
    57c0:	00a79533          	sll	a0,a5,a0
	__asm__ volatile ("csrrs %0, mie, %1\n"
    57c4:	30452573          	csrrs	a0,mie,a0
}
    57c8:	00008067          	ret

000057cc <uart_console_init>:
{

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    57cc:	0000c537          	lui	a0,0xc
{
    57d0:	ff010113          	addi	sp,sp,-16
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    57d4:	33c50713          	addi	a4,a0,828 # c33c <__device_dts_ord_11>
    57d8:	0000d7b7          	lui	a5,0xd
{
    57dc:	00112623          	sw	ra,12(sp)
    57e0:	00812423          	sw	s0,8(sp)
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    57e4:	02e7aa23          	sw	a4,52(a5) # d034 <uart_console_dev>
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    57e8:	33c50513          	addi	a0,a0,828
    57ec:	784000ef          	jal	ra,5f70 <z_device_ready>
    57f0:	fed00793          	li	a5,-19
    57f4:	00050e63          	beqz	a0,5810 <uart_console_init+0x44>
	__stdout_hook_install(console_out);
    57f8:	00006437          	lui	s0,0x6
    57fc:	82440513          	addi	a0,s0,-2012 # 5824 <console_out>
    5800:	c25ff0ef          	jal	ra,5424 <__stdout_hook_install>
	__printk_hook_install(console_out);
    5804:	82440513          	addi	a0,s0,-2012
    5808:	97dfe0ef          	jal	ra,4184 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    580c:	00000793          	li	a5,0
}
    5810:	00c12083          	lw	ra,12(sp)
    5814:	00812403          	lw	s0,8(sp)
    5818:	00078513          	mv	a0,a5
    581c:	01010113          	addi	sp,sp,16
    5820:	00008067          	ret

00005824 <console_out>:
{
    5824:	ff010113          	addi	sp,sp,-16
    5828:	00812423          	sw	s0,8(sp)
    582c:	00912223          	sw	s1,4(sp)
    5830:	00112623          	sw	ra,12(sp)
    5834:	0000d4b7          	lui	s1,0xd
	if ('\n' == c) {
    5838:	00a00793          	li	a5,10
{
    583c:	00050413          	mv	s0,a0
    5840:	03448493          	addi	s1,s1,52 # d034 <uart_console_dev>
	if ('\n' == c) {
    5844:	00f51c63          	bne	a0,a5,585c <console_out+0x38>
		uart_poll_out(uart_console_dev, '\r');
    5848:	0004a503          	lw	a0,0(s1)
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    584c:	00852783          	lw	a5,8(a0)
    5850:	00d00593          	li	a1,13
    5854:	0047a783          	lw	a5,4(a5)
    5858:	000780e7          	jalr	a5
	uart_poll_out(uart_console_dev, c);
    585c:	0004a503          	lw	a0,0(s1)
    5860:	00852783          	lw	a5,8(a0)
    5864:	0ff47593          	andi	a1,s0,255
    5868:	0047a783          	lw	a5,4(a5)
    586c:	000780e7          	jalr	a5
}
    5870:	00c12083          	lw	ra,12(sp)
    5874:	00040513          	mv	a0,s0
    5878:	00812403          	lw	s0,8(sp)
    587c:	00412483          	lw	s1,4(sp)
    5880:	01010113          	addi	sp,sp,16
    5884:	00008067          	ret

00005888 <gpio_mmio32_config>:

static int gpio_mmio32_config(const struct device *dev,
			      gpio_pin_t pin, gpio_flags_t flags)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = context->config;
    5888:	01052783          	lw	a5,16(a0)
    588c:	0047a683          	lw	a3,4(a5)

	if ((config->mask & (1 << pin)) == 0) {
    5890:	00100793          	li	a5,1
    5894:	00b795b3          	sll	a1,a5,a1
    5898:	0086a783          	lw	a5,8(a3)
    589c:	00f5f7b3          	and	a5,a1,a5
    58a0:	06078c63          	beqz	a5,5918 <gpio_mmio32_config+0x90>
		return -EINVAL; /* Pin not in our validity mask */
	}

	if (flags & ~(GPIO_INPUT | GPIO_OUTPUT |
    58a4:	fffff7b7          	lui	a5,0xfffff
    58a8:	0fe78793          	addi	a5,a5,254 # fffff0fe <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfffff0ff>
    58ac:	00f677b3          	and	a5,a2,a5
		      GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH |
		      GPIO_ACTIVE_LOW)) {
		/* We ignore direction and fake polarity, rest is unsupported */
		return -ENOTSUP;
    58b0:	f7a00513          	li	a0,-134
	if (flags & ~(GPIO_INPUT | GPIO_OUTPUT |
    58b4:	06079463          	bnez	a5,591c <gpio_mmio32_config+0x94>
	}

	if ((flags & GPIO_OUTPUT) != 0) {
    58b8:	20067793          	andi	a5,a2,512
			*reg = (*reg & (config->mask & ~(1 << pin)));
		}
		irq_unlock(key);
	}

	return 0;
    58bc:	00000513          	li	a0,0
	if ((flags & GPIO_OUTPUT) != 0) {
    58c0:	04078e63          	beqz	a5,591c <gpio_mmio32_config+0x94>
		volatile uint32_t *reg = config->reg;
    58c4:	0046a703          	lw	a4,4(a3)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    58c8:	00800793          	li	a5,8
    58cc:	3007b7f3          	csrrc	a5,mstatus,a5
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    58d0:	00b65513          	srli	a0,a2,0xb
    58d4:	00157513          	andi	a0,a0,1
	key = (mstatus & MSTATUS_IEN);
    58d8:	0087f793          	andi	a5,a5,8
    58dc:	00050e63          	beqz	a0,58f8 <gpio_mmio32_config+0x70>
			*reg = (*reg | (1 << pin));
    58e0:	00072683          	lw	a3,0(a4) # f00c0000 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xf00c0001>
    58e4:	00d5e5b3          	or	a1,a1,a3
			*reg = (*reg & (config->mask & ~(1 << pin)));
    58e8:	00b72023          	sw	a1,0(a4)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    58ec:	3007a7f3          	csrrs	a5,mstatus,a5
	return 0;
    58f0:	00000513          	li	a0,0
}
    58f4:	00008067          	ret
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    58f8:	40067613          	andi	a2,a2,1024
    58fc:	fe0608e3          	beqz	a2,58ec <gpio_mmio32_config+0x64>
			*reg = (*reg & (config->mask & ~(1 << pin)));
    5900:	0086a683          	lw	a3,8(a3)
    5904:	00072603          	lw	a2,0(a4)
    5908:	fff5c593          	not	a1,a1
    590c:	00d5f5b3          	and	a1,a1,a3
    5910:	00c5f5b3          	and	a1,a1,a2
    5914:	fd5ff06f          	j	58e8 <gpio_mmio32_config+0x60>
		return -EINVAL; /* Pin not in our validity mask */
    5918:	fea00513          	li	a0,-22
}
    591c:	00008067          	ret

00005920 <gpio_mmio32_port_get_raw>:

static int gpio_mmio32_port_get_raw(const struct device *dev, uint32_t *value)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = context->config;
    5920:	01052783          	lw	a5,16(a0)

	*value = *config->reg & config->mask;

	return 0;
}
    5924:	00000513          	li	a0,0
	const struct gpio_mmio32_config *config = context->config;
    5928:	0047a703          	lw	a4,4(a5)
	*value = *config->reg & config->mask;
    592c:	00472783          	lw	a5,4(a4)
    5930:	0007a683          	lw	a3,0(a5)
    5934:	00872783          	lw	a5,8(a4)
    5938:	00d7f7b3          	and	a5,a5,a3
    593c:	00f5a023          	sw	a5,0(a1)
}
    5940:	00008067          	ret

00005944 <gpio_mmio32_port_set_masked_raw>:
static int gpio_mmio32_port_set_masked_raw(const struct device *dev,
					   uint32_t mask,
					   uint32_t value)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = context->config;
    5944:	01052783          	lw	a5,16(a0)
    5948:	0047a783          	lw	a5,4(a5)
	volatile uint32_t *reg = config->reg;
    594c:	0047a703          	lw	a4,4(a5)
	unsigned int key;

	mask &= config->mask;
    5950:	0087a783          	lw	a5,8(a5)
    5954:	00f5f5b3          	and	a1,a1,a5
	__asm__ volatile ("csrrc %0, mstatus, %1"
    5958:	00800793          	li	a5,8
    595c:	3007b7f3          	csrrc	a5,mstatus,a5
	value &= mask;

	/* Update pin state atomically */
	key = irq_lock();
	*reg = (*reg & ~mask) | value;
    5960:	00072683          	lw	a3,0(a4)
	key = (mstatus & MSTATUS_IEN);
    5964:	0087f793          	andi	a5,a5,8
    5968:	00c6c633          	xor	a2,a3,a2
    596c:	00b67633          	and	a2,a2,a1
    5970:	00d64633          	xor	a2,a2,a3
    5974:	00c72023          	sw	a2,0(a4)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    5978:	3007a7f3          	csrrs	a5,mstatus,a5
	irq_unlock(key);

	return 0;
}
    597c:	00000513          	li	a0,0
    5980:	00008067          	ret

00005984 <gpio_mmio32_port_set_bits_raw>:

static int gpio_mmio32_port_set_bits_raw(const struct device *dev,
					 uint32_t mask)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = context->config;
    5984:	01052783          	lw	a5,16(a0)
    5988:	0047a783          	lw	a5,4(a5)
	volatile uint32_t *reg = config->reg;
	unsigned int key;

	mask &= config->mask;
    598c:	0087a703          	lw	a4,8(a5)
	volatile uint32_t *reg = config->reg;
    5990:	0047a683          	lw	a3,4(a5)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    5994:	00800793          	li	a5,8
	mask &= config->mask;
    5998:	00e5f733          	and	a4,a1,a4
    599c:	3007b7f3          	csrrc	a5,mstatus,a5

	/* Update pin state atomically */
	key = irq_lock();
	*reg = (*reg | mask);
    59a0:	0006a583          	lw	a1,0(a3)
	key = (mstatus & MSTATUS_IEN);
    59a4:	0087f793          	andi	a5,a5,8
    59a8:	00e5e5b3          	or	a1,a1,a4
    59ac:	00b6a023          	sw	a1,0(a3)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    59b0:	3007a7f3          	csrrs	a5,mstatus,a5
	irq_unlock(key);

	return 0;
}
    59b4:	00000513          	li	a0,0
    59b8:	00008067          	ret

000059bc <gpio_mmio32_port_clear_bits_raw>:

static int gpio_mmio32_port_clear_bits_raw(const struct device *dev,
					   uint32_t mask)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = context->config;
    59bc:	01052783          	lw	a5,16(a0)
    59c0:	0047a783          	lw	a5,4(a5)
	volatile uint32_t *reg = config->reg;
    59c4:	0047a703          	lw	a4,4(a5)
	unsigned int key;

	mask &= config->mask;
    59c8:	0087a783          	lw	a5,8(a5)
    59cc:	00f5f5b3          	and	a1,a1,a5
	__asm__ volatile ("csrrc %0, mstatus, %1"
    59d0:	00800793          	li	a5,8
    59d4:	3007b7f3          	csrrc	a5,mstatus,a5

	/* Update pin state atomically */
	key = irq_lock();
	*reg = (*reg & ~mask);
    59d8:	00072683          	lw	a3,0(a4)
    59dc:	fff5c593          	not	a1,a1
	key = (mstatus & MSTATUS_IEN);
    59e0:	0087f793          	andi	a5,a5,8
    59e4:	00d5f5b3          	and	a1,a1,a3
    59e8:	00b72023          	sw	a1,0(a4)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    59ec:	3007a7f3          	csrrs	a5,mstatus,a5
	irq_unlock(key);

	return 0;
}
    59f0:	00000513          	li	a0,0
    59f4:	00008067          	ret

000059f8 <gpio_mmio32_port_toggle_bits>:

static int gpio_mmio32_port_toggle_bits(const struct device *dev,
					uint32_t mask)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = context->config;
    59f8:	01052783          	lw	a5,16(a0)
    59fc:	0047a783          	lw	a5,4(a5)
	volatile uint32_t *reg = config->reg;
	unsigned int key;

	mask &= config->mask;
    5a00:	0087a703          	lw	a4,8(a5)
	volatile uint32_t *reg = config->reg;
    5a04:	0047a683          	lw	a3,4(a5)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    5a08:	00800793          	li	a5,8
	mask &= config->mask;
    5a0c:	00e5f733          	and	a4,a1,a4
    5a10:	3007b7f3          	csrrc	a5,mstatus,a5

	/* Update pin state atomically */
	key = irq_lock();
	*reg = (*reg ^ mask);
    5a14:	0006a583          	lw	a1,0(a3)
	key = (mstatus & MSTATUS_IEN);
    5a18:	0087f793          	andi	a5,a5,8
    5a1c:	00e5c5b3          	xor	a1,a1,a4
    5a20:	00b6a023          	sw	a1,0(a3)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    5a24:	3007a7f3          	csrrs	a5,mstatus,a5
	irq_unlock(key);

	return 0;
}
    5a28:	00000513          	li	a0,0
    5a2c:	00008067          	ret

00005a30 <gpio_mmio32_pin_interrupt_configure>:
static int gpio_mmio32_pin_interrupt_configure(const struct device *dev,
					       gpio_pin_t pin,
					       enum gpio_int_mode mode,
					       enum gpio_int_trig trig)
{
	if (mode != GPIO_INT_MODE_DISABLED) {
    5a30:	000027b7          	lui	a5,0x2
		return -ENOTSUP;
	}

	return 0;
    5a34:	00000513          	li	a0,0
	if (mode != GPIO_INT_MODE_DISABLED) {
    5a38:	00f60463          	beq	a2,a5,5a40 <gpio_mmio32_pin_interrupt_configure+0x10>
		return -ENOTSUP;
    5a3c:	f7a00513          	li	a0,-134
}
    5a40:	00008067          	ret

00005a44 <gpio_mmio32_init>:
int gpio_mmio32_init(const struct device *dev)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = dev->config;

	context->config = config;
    5a44:	01052783          	lw	a5,16(a0)
    5a48:	00452703          	lw	a4,4(a0)

	return 0;
}
    5a4c:	00000513          	li	a0,0
	context->config = config;
    5a50:	00e7a223          	sw	a4,4(a5) # 2004 <CONFIG_SRAM_SIZE+0x4>
}
    5a54:	00008067          	ret

00005a58 <gpio_veerwolf_init>:
/* Driver functions */

static int gpio_veerwolf_init(const struct device *dev)
{
	return 0;
}
    5a58:	00000513          	li	a0,0
    5a5c:	00008067          	ret

00005a60 <gpio_veerwolf_configure>:

static int gpio_veerwolf_configure(const struct device *dev,
				gpio_pin_t pin, gpio_flags_t flags)
{
	return 0;
}
    5a60:	00000513          	li	a0,0
    5a64:	00008067          	ret

00005a68 <gpio_veerwolf_port_get_raw>:

static int gpio_veerwolf_port_get_raw(const struct device *dev,
				   gpio_port_value_t *value)
{
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    5a68:	00452783          	lw	a5,4(a0)

	*value = sys_read32(addr);
	return 0;
}
    5a6c:	00000513          	li	a0,0
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    5a70:	0007a783          	lw	a5,0(a5)
	return *(volatile uint32_t *)addr;
    5a74:	0007a783          	lw	a5,0(a5)
	*value = sys_read32(addr);
    5a78:	00f5a023          	sw	a5,0(a1)
}
    5a7c:	00008067          	ret

00005a80 <gpio_veerwolf_port_set_masked_raw>:

static int gpio_veerwolf_port_set_masked_raw(const struct device *dev,
					  gpio_port_pins_t mask,
					  gpio_port_value_t value)
{
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    5a80:	00452783          	lw	a5,4(a0)
	port_val = sys_read32(addr);
	port_val = (port_val & ~mask) | (value & mask);
	sys_write32(port_val, addr);

	return 0;
}
    5a84:	00000513          	li	a0,0
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    5a88:	0007a783          	lw	a5,0(a5)
    5a8c:	0007a703          	lw	a4,0(a5)
	port_val = (port_val & ~mask) | (value & mask);
    5a90:	00e64633          	xor	a2,a2,a4
    5a94:	00b67633          	and	a2,a2,a1
    5a98:	00e64633          	xor	a2,a2,a4
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
    5a9c:	00c7a023          	sw	a2,0(a5)
}
    5aa0:	00008067          	ret

00005aa4 <gpio_veerwolf_port_set_bits_raw>:

static int gpio_veerwolf_port_set_bits_raw(const struct device *dev,
					gpio_port_pins_t pins)
{
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    5aa4:	00452783          	lw	a5,4(a0)

	port_val = sys_read32(addr) | pins;
	sys_write32(port_val, addr);

	return 0;
}
    5aa8:	00000513          	li	a0,0
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    5aac:	0007a783          	lw	a5,0(a5)
	return *(volatile uint32_t *)addr;
    5ab0:	0007a703          	lw	a4,0(a5)
	port_val = sys_read32(addr) | pins;
    5ab4:	00e5e5b3          	or	a1,a1,a4
	*(volatile uint32_t *)addr = data;
    5ab8:	00b7a023          	sw	a1,0(a5)
}
    5abc:	00008067          	ret

00005ac0 <gpio_veerwolf_port_clear_bits_raw>:

static int gpio_veerwolf_port_clear_bits_raw(const struct device *dev,
					  gpio_port_pins_t pins)
{
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    5ac0:	00452783          	lw	a5,4(a0)
	uint32_t port_val;

	port_val = sys_read32(addr) & ~pins;
    5ac4:	fff5c593          	not	a1,a1
	sys_write32(port_val, addr);

	return 0;
}
    5ac8:	00000513          	li	a0,0
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    5acc:	0007a783          	lw	a5,0(a5)
	return *(volatile uint32_t *)addr;
    5ad0:	0007a703          	lw	a4,0(a5)
	port_val = sys_read32(addr) & ~pins;
    5ad4:	00e5f5b3          	and	a1,a1,a4
	*(volatile uint32_t *)addr = data;
    5ad8:	00b7a023          	sw	a1,0(a5)
}
    5adc:	00008067          	ret

00005ae0 <gpio_veerwolf_port_toggle_bits>:

static int gpio_veerwolf_port_toggle_bits(const struct device *dev,
				       gpio_port_pins_t pins)
{
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    5ae0:	00452783          	lw	a5,4(a0)

	port_val = sys_read32(addr) ^ pins;
	sys_write32(port_val, addr);

	return 0;
}
    5ae4:	00000513          	li	a0,0
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    5ae8:	0007a783          	lw	a5,0(a5)
	return *(volatile uint32_t *)addr;
    5aec:	0007a703          	lw	a4,0(a5)
	port_val = sys_read32(addr) ^ pins;
    5af0:	00e5c5b3          	xor	a1,a1,a4
	*(volatile uint32_t *)addr = data;
    5af4:	00b7a023          	sw	a1,0(a5)
}
    5af8:	00008067          	ret

00005afc <gpio_veerwolf_pin_interrupt_configure>:
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
	int ret = 0;

	if (mode != GPIO_INT_MODE_DISABLED) {
    5afc:	000027b7          	lui	a5,0x2
	int ret = 0;
    5b00:	00000513          	li	a0,0
	if (mode != GPIO_INT_MODE_DISABLED) {
    5b04:	00f60463          	beq	a2,a5,5b0c <gpio_veerwolf_pin_interrupt_configure+0x10>
		ret = -ENOTSUP;
    5b08:	f7a00513          	li	a0,-134
	}
	return ret;
}
    5b0c:	00008067          	ret

00005b10 <uart_ns16550_configure>:
}

static int uart_ns16550_configure(const struct device *dev,
				  const struct uart_config *cfg)
{
	struct uart_ns16550_dev_data * const dev_data = DEV_DATA(dev);
    5b10:	01052883          	lw	a7,16(a0)
{
    5b14:	00050793          	mv	a5,a0
	__asm__ volatile ("csrrc %0, mstatus, %1"
    5b18:	00800693          	li	a3,8
    5b1c:	3006b6f3          	csrrc	a3,mstatus,a3
		OUTWORD(PCP(dev), pcp & ~PCP_UPDATE);
		OUTWORD(PCP(dev), pcp | PCP_UPDATE);
	}
#endif

	set_baud_rate(dev, cfg->baudrate);
    5b20:	0005a503          	lw	a0,0(a1)
	key = (mstatus & MSTATUS_IEN);
    5b24:	0086f693          	andi	a3,a3,8
	if ((baud_rate != 0U) && (dev_cfg->sys_clk_freq != 0U)) {
    5b28:	06050863          	beqz	a0,5b98 <uart_ns16550_configure+0x88>
	const struct uart_ns16550_device_config * const dev_cfg = DEV_CFG(dev);
    5b2c:	0047a603          	lw	a2,4(a5) # 2004 <CONFIG_SRAM_SIZE+0x4>
	if ((baud_rate != 0U) && (dev_cfg->sys_clk_freq != 0U)) {
    5b30:	00462803          	lw	a6,4(a2) # 800004 <__data_region_end+0x7f0e08>
    5b34:	06080263          	beqz	a6,5b98 <uart_ns16550_configure+0x88>
		divisor = ((dev_cfg->sys_clk_freq + (baud_rate << 3))
    5b38:	00351713          	slli	a4,a0,0x3
    5b3c:	01070733          	add	a4,a4,a6
					/ baud_rate) >> 4;
    5b40:	02a75733          	divu	a4,a4,a0
		lcr_cache = INBYTE(LCR(dev));
    5b44:	00062803          	lw	a6,0(a2)
	struct uart_ns16550_dev_data * const dev_data = DEV_DATA(dev);
    5b48:	0107a303          	lw	t1,16(a5)
	return *(volatile uint8_t *)addr;
    5b4c:	00c84603          	lbu	a2,12(a6)
    5b50:	0ff67e13          	andi	t3,a2,255
		OUTBYTE(LCR(dev), LCR_DLAB | lcr_cache);
    5b54:	f8066613          	ori	a2,a2,-128
    5b58:	0ff67613          	andi	a2,a2,255
	*(volatile uint8_t *)addr = data;
    5b5c:	00c80623          	sb	a2,12(a6)
	return DEVICE_MMIO_GET(dev);
    5b60:	0047a803          	lw	a6,4(a5)
    5b64:	00082803          	lw	a6,0(a6)
		divisor = ((dev_cfg->sys_clk_freq + (baud_rate << 3))
    5b68:	00475613          	srli	a2,a4,0x4
		OUTBYTE(BRDL(dev), (unsigned char)(divisor & 0xff));
    5b6c:	0ff67613          	andi	a2,a2,255
    5b70:	00c80023          	sb	a2,0(a6)
	return DEVICE_MMIO_GET(dev);
    5b74:	0047a603          	lw	a2,4(a5)
		OUTBYTE(BRDH(dev), (unsigned char)((divisor >> 8) & 0xff));
    5b78:	00c75713          	srli	a4,a4,0xc
    5b7c:	0ff77713          	andi	a4,a4,255
    5b80:	00062603          	lw	a2,0(a2)
    5b84:	00e60223          	sb	a4,4(a2)
	return DEVICE_MMIO_GET(dev);
    5b88:	0047a703          	lw	a4,4(a5)
		OUTBYTE(LCR(dev), lcr_cache);
    5b8c:	00072703          	lw	a4,0(a4)
    5b90:	01c70623          	sb	t3,12(a4)
		dev_data->uart_config.baudrate = baud_rate;
    5b94:	00a32023          	sw	a0,0(t1)

	/* Local structure to hold temporary values to pass to OUTBYTE() */
	struct uart_config uart_cfg;

	switch (cfg->data_bits) {
    5b98:	0065c603          	lbu	a2,6(a1)
    5b9c:	00300713          	li	a4,3
		break;
	case UART_CFG_DATA_BITS_8:
		uart_cfg.data_bits = LCR_CS8;
		break;
	default:
		ret = -ENOTSUP;
    5ba0:	f7a00513          	li	a0,-134
    5ba4:	08c76663          	bltu	a4,a2,5c30 <uart_ns16550_configure+0x120>
		goto out;
	}

	switch (cfg->stop_bits) {
    5ba8:	0055c803          	lbu	a6,5(a1)
    5bac:	00100513          	li	a0,1
    5bb0:	08a80463          	beq	a6,a0,5c38 <uart_ns16550_configure+0x128>
    5bb4:	f7a00513          	li	a0,-134
    5bb8:	06e81c63          	bne	a6,a4,5c30 <uart_ns16550_configure+0x120>
    5bbc:	00400813          	li	a6,4
	default:
		ret = -ENOTSUP;
		goto out;
	}

	switch (cfg->parity) {
    5bc0:	0045c703          	lbu	a4,4(a1)
    5bc4:	00070a63          	beqz	a4,5bd8 <uart_ns16550_configure+0xc8>
    5bc8:	00200313          	li	t1,2
    5bcc:	f7a00513          	li	a0,-134
    5bd0:	06671063          	bne	a4,t1,5c30 <uart_ns16550_configure+0x120>
    5bd4:	01000713          	li	a4,16
	default:
		ret = -ENOTSUP;
		goto out;
	}

	dev_data->uart_config = *cfg;
    5bd8:	0005a503          	lw	a0,0(a1)

	/* data bits, stop bits, parity, clear DLAB */
	OUTBYTE(LCR(dev),
    5bdc:	01066633          	or	a2,a2,a6
    5be0:	00c76733          	or	a4,a4,a2
	return DEVICE_MMIO_GET(dev);
    5be4:	0047a603          	lw	a2,4(a5)
	dev_data->uart_config = *cfg;
    5be8:	00a8a023          	sw	a0,0(a7) # 80000 <__data_region_end+0x70e04>
    5bec:	0045a583          	lw	a1,4(a1)
	OUTBYTE(LCR(dev),
    5bf0:	00062603          	lw	a2,0(a2)
	int ret = 0;
    5bf4:	00000513          	li	a0,0
	dev_data->uart_config = *cfg;
    5bf8:	00b8a223          	sw	a1,4(a7)
    5bfc:	00e60623          	sb	a4,12(a2)
	return DEVICE_MMIO_GET(dev);
    5c00:	0047a703          	lw	a4,4(a5)
    5c04:	00b00613          	li	a2,11
	if (cfg->flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS) {
		mdc |= MCR_AFCE;
	}
#endif

	OUTBYTE(MDC(dev), mdc);
    5c08:	00072703          	lw	a4,0(a4)
    5c0c:	00c70823          	sb	a2,16(a4)
	return DEVICE_MMIO_GET(dev);
    5c10:	0047a703          	lw	a4,4(a5)
    5c14:	f8700613          	li	a2,-121
	/*
	 * Program FIFO: enabled, mode 0 (set for compatibility with quark),
	 * generate the interrupt at 8th byte
	 * Clear TX and RX FIFO
	 */
	OUTBYTE(FCR(dev),
    5c18:	00072703          	lw	a4,0(a4)
    5c1c:	00c70423          	sb	a2,8(a4)
	return DEVICE_MMIO_GET(dev);
    5c20:	0047a783          	lw	a5,4(a5)
    5c24:	0007a783          	lw	a5,0(a5)
	return *(volatile uint8_t *)addr;
    5c28:	0007c703          	lbu	a4,0(a5)
	*(volatile uint8_t *)addr = data;
    5c2c:	00078223          	sb	zero,4(a5)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    5c30:	3006a6f3          	csrrs	a3,mstatus,a3
	OUTBYTE(IER(dev), 0x00);

out:
	k_spin_unlock(&dev_data->lock, key);
	return ret;
};
    5c34:	00008067          	ret
		uart_cfg.stop_bits = LCR_1_STB;
    5c38:	00000813          	li	a6,0
    5c3c:	f85ff06f          	j	5bc0 <uart_ns16550_configure+0xb0>

00005c40 <uart_ns16550_config_get>:

#ifdef CONFIG_UART_USE_RUNTIME_CONFIGURE
static int uart_ns16550_config_get(const struct device *dev,
				   struct uart_config *cfg)
{
	struct uart_ns16550_dev_data *data = DEV_DATA(dev);
    5c40:	01052783          	lw	a5,16(a0)
	cfg->stop_bits = data->uart_config.stop_bits;
	cfg->data_bits = data->uart_config.data_bits;
	cfg->flow_ctrl = data->uart_config.flow_ctrl;

	return 0;
}
    5c44:	00000513          	li	a0,0
	cfg->baudrate = data->uart_config.baudrate;
    5c48:	0007a703          	lw	a4,0(a5)
    5c4c:	00e5a023          	sw	a4,0(a1)
	cfg->parity = data->uart_config.parity;
    5c50:	0047c703          	lbu	a4,4(a5)
    5c54:	00e58223          	sb	a4,4(a1)
	cfg->stop_bits = data->uart_config.stop_bits;
    5c58:	0057c703          	lbu	a4,5(a5)
    5c5c:	00e582a3          	sb	a4,5(a1)
	cfg->data_bits = data->uart_config.data_bits;
    5c60:	0067c703          	lbu	a4,6(a5)
    5c64:	00e58323          	sb	a4,6(a1)
	cfg->flow_ctrl = data->uart_config.flow_ctrl;
    5c68:	0077c783          	lbu	a5,7(a5)
    5c6c:	00f583a3          	sb	a5,7(a1)
}
    5c70:	00008067          	ret

00005c74 <uart_ns16550_init>:
 */
static int uart_ns16550_init(const struct device *dev)
{
	int ret;

	ret = uart_ns16550_configure(dev, &DEV_DATA(dev)->uart_config);
    5c74:	01052583          	lw	a1,16(a0)
    5c78:	e99ff06f          	j	5b10 <uart_ns16550_configure>

00005c7c <uart_ns16550_poll_in>:
	__asm__ volatile ("csrrc %0, mstatus, %1"
    5c7c:	00800793          	li	a5,8
    5c80:	3007b7f3          	csrrc	a5,mstatus,a5
	return DEVICE_MMIO_GET(dev);
    5c84:	00452703          	lw	a4,4(a0)
	key = (mstatus & MSTATUS_IEN);
    5c88:	0087f793          	andi	a5,a5,8
 *
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */
static int uart_ns16550_poll_in(const struct device *dev, unsigned char *c)
{
	int ret = -1;
    5c8c:	fff00513          	li	a0,-1
	return DEVICE_MMIO_GET(dev);
    5c90:	00072683          	lw	a3,0(a4)
	return *(volatile uint8_t *)addr;
    5c94:	0146c703          	lbu	a4,20(a3)
	k_spinlock_key_t key = k_spin_lock(&DEV_DATA(dev)->lock);

	if ((INBYTE(LSR(dev)) & LSR_RXRDY) != 0) {
    5c98:	00177713          	andi	a4,a4,1
    5c9c:	00070863          	beqz	a4,5cac <uart_ns16550_poll_in+0x30>
    5ca0:	0006c703          	lbu	a4,0(a3)
		/* got a character */
		*c = INBYTE(RDR(dev));
		ret = 0;
    5ca4:	00000513          	li	a0,0
		*c = INBYTE(RDR(dev));
    5ca8:	00e58023          	sb	a4,0(a1)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    5cac:	3007a7f3          	csrrs	a5,mstatus,a5
	}

	k_spin_unlock(&DEV_DATA(dev)->lock, key);

	return ret;
}
    5cb0:	00008067          	ret

00005cb4 <uart_ns16550_poll_out>:
	__asm__ volatile ("csrrc %0, mstatus, %1"
    5cb4:	00800793          	li	a5,8
    5cb8:	3007b7f3          	csrrc	a5,mstatus,a5
	return DEVICE_MMIO_GET(dev);
    5cbc:	00452703          	lw	a4,4(a0)
	key = (mstatus & MSTATUS_IEN);
    5cc0:	0087f793          	andi	a5,a5,8
    5cc4:	00072683          	lw	a3,0(a4)
static void uart_ns16550_poll_out(const struct device *dev,
					   unsigned char c)
{
	k_spinlock_key_t key = k_spin_lock(&DEV_DATA(dev)->lock);

	while ((INBYTE(LSR(dev)) & LSR_THRE) == 0) {
    5cc8:	01468613          	addi	a2,a3,20
    5ccc:	00064703          	lbu	a4,0(a2)
    5cd0:	02077713          	andi	a4,a4,32
    5cd4:	fe070ce3          	beqz	a4,5ccc <uart_ns16550_poll_out+0x18>
	*(volatile uint8_t *)addr = data;
    5cd8:	00b68023          	sb	a1,0(a3)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    5cdc:	3007a7f3          	csrrs	a5,mstatus,a5
	}

	OUTBYTE(THR(dev), c);

	k_spin_unlock(&DEV_DATA(dev)->lock, key);
}
    5ce0:	00008067          	ret

00005ce4 <uart_ns16550_err_check>:
	__asm__ volatile ("csrrc %0, mstatus, %1"
    5ce4:	00800793          	li	a5,8
    5ce8:	3007b7f3          	csrrc	a5,mstatus,a5
	return DEVICE_MMIO_GET(dev);
    5cec:	00452703          	lw	a4,4(a0)
	key = (mstatus & MSTATUS_IEN);
    5cf0:	0087f793          	andi	a5,a5,8
 * UART_BREAK if an error was detected, 0 otherwise.
 */
static int uart_ns16550_err_check(const struct device *dev)
{
	k_spinlock_key_t key = k_spin_lock(&DEV_DATA(dev)->lock);
	int check = (INBYTE(LSR(dev)) & LSR_EOB_MASK);
    5cf4:	00072703          	lw	a4,0(a4)
	return *(volatile uint8_t *)addr;
    5cf8:	01474503          	lbu	a0,20(a4)
    5cfc:	0ff57513          	andi	a0,a0,255
	__asm__ volatile ("csrrs %0, mstatus, %1"
    5d00:	3007a7f3          	csrrs	a5,mstatus,a5
    5d04:	01e57513          	andi	a0,a0,30

	k_spin_unlock(&DEV_DATA(dev)->lock, key);

	return check >> 1;
}
    5d08:	00155513          	srli	a0,a0,0x1
    5d0c:	00008067          	ret

00005d10 <mtime>:
	volatile uint32_t *r = (uint32_t *)RISCV_MTIME_BASE;
	uint32_t lo, hi;

	/* Likewise, must guard against rollover when reading */
	do {
		hi = r[1];
    5d10:	800017b7          	lui	a5,0x80001
    5d14:	0247a703          	lw	a4,36(a5) # 80001024 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80001025>
		lo = r[0];
    5d18:	0207a503          	lw	a0,32(a5)
	} while (r[1] != hi);
    5d1c:	0247a583          	lw	a1,36(a5)
    5d20:	fee59ae3          	bne	a1,a4,5d14 <mtime+0x4>

	return (((uint64_t)hi) << 32) | lo;
#endif
}
    5d24:	00008067          	ret

00005d28 <timer_isr>:

static void timer_isr(const void *arg)
{
    5d28:	fe010113          	addi	sp,sp,-32
    5d2c:	01312623          	sw	s3,12(sp)
    5d30:	00112e23          	sw	ra,28(sp)
    5d34:	00812c23          	sw	s0,24(sp)
    5d38:	00912a23          	sw	s1,20(sp)
    5d3c:	01212823          	sw	s2,16(sp)
    5d40:	01412423          	sw	s4,8(sp)
    5d44:	01512223          	sw	s5,4(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    5d48:	00800993          	li	s3,8
    5d4c:	3009b9f3          	csrrc	s3,mstatus,s3
	ARG_UNUSED(arg);

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint64_t now = mtime();
    5d50:	fc1ff0ef          	jal	ra,5d10 <mtime>
	key = (mstatus & MSTATUS_IEN);
    5d54:	0089f993          	andi	s3,s3,8
    5d58:	00050a13          	mv	s4,a0
    5d5c:	00058913          	mv	s2,a1
	uint32_t dticks = (uint32_t)((now - last_count) / CYC_PER_TICK);

	last_count = now;
    5d60:	0000d437          	lui	s0,0xd
    5d64:	00840413          	addi	s0,s0,8 # d008 <last_count>
    5d68:	00a42023          	sw	a0,0(s0)
    5d6c:	00b42223          	sw	a1,4(s0)
	return z_clock_hw_cycles_per_sec;
    5d70:	0000fab7          	lui	s5,0xf

	if (!TICKLESS) {
		uint64_t next = last_count + CYC_PER_TICK;
    5d74:	134aa503          	lw	a0,308(s5) # f134 <z_clock_hw_cycles_per_sec>
    5d78:	00000693          	li	a3,0
    5d7c:	06400613          	li	a2,100
    5d80:	41f55593          	srai	a1,a0,0x1f
    5d84:	db8fa0ef          	jal	ra,33c <__udivdi3>
    5d88:	00042483          	lw	s1,0(s0)
    5d8c:	00442783          	lw	a5,4(s0)
    5d90:	009504b3          	add	s1,a0,s1
    5d94:	00a4b433          	sltu	s0,s1,a0
    5d98:	00f40433          	add	s0,s0,a5

		if ((int64_t)(next - now) < MIN_DELAY) {
    5d9c:	41448a33          	sub	s4,s1,s4
    5da0:	0144b5b3          	sltu	a1,s1,s4
    5da4:	41240933          	sub	s2,s0,s2
    5da8:	40b90933          	sub	s2,s2,a1
		uint64_t next = last_count + CYC_PER_TICK;
    5dac:	00048793          	mv	a5,s1
    5db0:	00040693          	mv	a3,s0
		if ((int64_t)(next - now) < MIN_DELAY) {
    5db4:	03204863          	bgtz	s2,5de4 <timer_isr+0xbc>
    5db8:	00091663          	bnez	s2,5dc4 <timer_isr+0x9c>
    5dbc:	3e700713          	li	a4,999
    5dc0:	03476263          	bltu	a4,s4,5de4 <timer_isr+0xbc>
			next += CYC_PER_TICK;
    5dc4:	134aa503          	lw	a0,308(s5)
    5dc8:	00000693          	li	a3,0
    5dcc:	06400613          	li	a2,100
    5dd0:	41f55593          	srai	a1,a0,0x1f
    5dd4:	d68fa0ef          	jal	ra,33c <__udivdi3>
    5dd8:	00a487b3          	add	a5,s1,a0
    5ddc:	0097b4b3          	sltu	s1,a5,s1
    5de0:	008486b3          	add	a3,s1,s0
	r[1] = 0xffffffff;
    5de4:	80001737          	lui	a4,0x80001
    5de8:	fff00613          	li	a2,-1
    5dec:	02c72623          	sw	a2,44(a4) # 8000102c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000102d>
	r[0] = (uint32_t)time;
    5df0:	02f72423          	sw	a5,40(a4)
	r[1] = (uint32_t)(time >> 32);
    5df4:	02d72623          	sw	a3,44(a4)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    5df8:	3009a9f3          	csrrs	s3,mstatus,s3
		set_mtimecmp(next);
	}

	k_spin_unlock(&lock, key);
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
}
    5dfc:	01812403          	lw	s0,24(sp)
    5e00:	01c12083          	lw	ra,28(sp)
    5e04:	01412483          	lw	s1,20(sp)
    5e08:	01012903          	lw	s2,16(sp)
    5e0c:	00c12983          	lw	s3,12(sp)
    5e10:	00812a03          	lw	s4,8(sp)
    5e14:	00412a83          	lw	s5,4(sp)
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    5e18:	00100513          	li	a0,1
}
    5e1c:	02010113          	addi	sp,sp,32
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    5e20:	2650106f          	j	7884 <sys_clock_announce>

00005e24 <sys_clock_driver_init>:

int sys_clock_driver_init(const struct device *dev)
{
    5e24:	ff010113          	addi	sp,sp,-16
    5e28:	00812423          	sw	s0,8(sp)
	ARG_UNUSED(dev);

	IRQ_CONNECT(RISCV_MACHINE_TIMER_IRQ, 0, timer_isr, NULL, 0);
	last_count = mtime();
    5e2c:	0000d437          	lui	s0,0xd
{
    5e30:	00112623          	sw	ra,12(sp)
	last_count = mtime();
    5e34:	00840413          	addi	s0,s0,8 # d008 <last_count>
    5e38:	ed9ff0ef          	jal	ra,5d10 <mtime>
    5e3c:	00a42023          	sw	a0,0(s0)
    5e40:	00b42223          	sw	a1,4(s0)
    5e44:	0000f7b7          	lui	a5,0xf
	set_mtimecmp(last_count + CYC_PER_TICK);
    5e48:	1347a503          	lw	a0,308(a5) # f134 <z_clock_hw_cycles_per_sec>
    5e4c:	06400613          	li	a2,100
    5e50:	00000693          	li	a3,0
    5e54:	41f55593          	srai	a1,a0,0x1f
    5e58:	ce4fa0ef          	jal	ra,33c <__udivdi3>
    5e5c:	00042783          	lw	a5,0(s0)
    5e60:	00442703          	lw	a4,4(s0)
	r[1] = 0xffffffff;
    5e64:	fff00693          	li	a3,-1
	set_mtimecmp(last_count + CYC_PER_TICK);
    5e68:	00f507b3          	add	a5,a0,a5
    5e6c:	00a7b533          	sltu	a0,a5,a0
    5e70:	00e50533          	add	a0,a0,a4
	r[1] = 0xffffffff;
    5e74:	80001737          	lui	a4,0x80001
    5e78:	02d72623          	sw	a3,44(a4) # 8000102c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000102d>
	r[0] = (uint32_t)time;
    5e7c:	02f72423          	sw	a5,40(a4)
	r[1] = (uint32_t)(time >> 32);
    5e80:	02a72623          	sw	a0,44(a4)
	irq_enable(RISCV_MACHINE_TIMER_IRQ);
    5e84:	00700513          	li	a0,7
    5e88:	929ff0ef          	jal	ra,57b0 <arch_irq_enable>
	return 0;
}
    5e8c:	00c12083          	lw	ra,12(sp)
    5e90:	00812403          	lw	s0,8(sp)
    5e94:	00000513          	li	a0,0
    5e98:	01010113          	addi	sp,sp,16
    5e9c:	00008067          	ret

00005ea0 <sys_clock_set_timeout>:
	}

	set_mtimecmp(cyc + last_count);
	k_spin_unlock(&lock, key);
#endif
}
    5ea0:	00008067          	ret

00005ea4 <sys_clock_elapsed>:
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = ((uint32_t)mtime() - (uint32_t)last_count) / CYC_PER_TICK;

	k_spin_unlock(&lock, key);
	return ret;
}
    5ea4:	00000513          	li	a0,0
    5ea8:	00008067          	ret

00005eac <sys_clock_cycle_get_32>:

uint32_t sys_clock_cycle_get_32(void)
{
    5eac:	ff010113          	addi	sp,sp,-16
    5eb0:	00112623          	sw	ra,12(sp)
	return (uint32_t)mtime();
    5eb4:	e5dff0ef          	jal	ra,5d10 <mtime>
}
    5eb8:	00c12083          	lw	ra,12(sp)
    5ebc:	01010113          	addi	sp,sp,16
    5ec0:	00008067          	ret

00005ec4 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    5ec4:	00008067          	ret

00005ec8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5ec8:	00251713          	slli	a4,a0,0x2
    5ecc:	0000d7b7          	lui	a5,0xd
    5ed0:	00150513          	addi	a0,a0,1
    5ed4:	c5078793          	addi	a5,a5,-944 # cc50 <levels.0>
    5ed8:	00251513          	slli	a0,a0,0x2
{
    5edc:	fe010113          	addi	sp,sp,-32
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5ee0:	00e78733          	add	a4,a5,a4
    5ee4:	00a78533          	add	a0,a5,a0
{
    5ee8:	00812c23          	sw	s0,24(sp)
    5eec:	01212823          	sw	s2,16(sp)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5ef0:	00072403          	lw	s0,0(a4)
    5ef4:	00052903          	lw	s2,0(a0)
{
    5ef8:	01312623          	sw	s3,12(sp)
    5efc:	00112e23          	sw	ra,28(sp)
    5f00:	00912a23          	sw	s1,20(sp)
					rc = -rc;
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    5f04:	0ff00993          	li	s3,255
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5f08:	03246063          	bltu	s0,s2,5f28 <z_sys_init_run_level+0x60>
			}
			dev->state->initialized = true;
		}
	}
}
    5f0c:	01c12083          	lw	ra,28(sp)
    5f10:	01812403          	lw	s0,24(sp)
    5f14:	01412483          	lw	s1,20(sp)
    5f18:	01012903          	lw	s2,16(sp)
    5f1c:	00c12983          	lw	s3,12(sp)
    5f20:	02010113          	addi	sp,sp,32
    5f24:	00008067          	ret
		const struct device *dev = entry->dev;
    5f28:	00442483          	lw	s1,4(s0)
		int rc = entry->init(dev);
    5f2c:	00042783          	lw	a5,0(s0)
    5f30:	00048513          	mv	a0,s1
    5f34:	000780e7          	jalr	a5
		if (dev != NULL) {
    5f38:	02048863          	beqz	s1,5f68 <z_sys_init_run_level+0xa0>
				dev->state->init_res = rc;
    5f3c:	00c4a783          	lw	a5,12(s1)
			if (rc != 0) {
    5f40:	00050e63          	beqz	a0,5f5c <z_sys_init_run_level+0x94>
				if (rc < 0) {
    5f44:	41f55713          	srai	a4,a0,0x1f
    5f48:	00a74533          	xor	a0,a4,a0
    5f4c:	40e50533          	sub	a0,a0,a4
				dev->state->init_res = rc;
    5f50:	00a9d463          	bge	s3,a0,5f58 <z_sys_init_run_level+0x90>
    5f54:	0ff00513          	li	a0,255
    5f58:	00a78023          	sb	a0,0(a5)
			dev->state->initialized = true;
    5f5c:	0007d703          	lhu	a4,0(a5)
    5f60:	10076713          	ori	a4,a4,256
    5f64:	00e79023          	sh	a4,0(a5)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5f68:	00840413          	addi	s0,s0,8
    5f6c:	f9dff06f          	j	5f08 <z_sys_init_run_level+0x40>

00005f70 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    5f70:	00050e63          	beqz	a0,5f8c <z_device_ready+0x1c>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    5f74:	00c52783          	lw	a5,12(a0)
    5f78:	0007a503          	lw	a0,0(a5)
    5f7c:	1ff57513          	andi	a0,a0,511
    5f80:	f0050513          	addi	a0,a0,-256
    5f84:	00153513          	seqz	a0,a0
    5f88:	00008067          	ret
		return false;
    5f8c:	00000513          	li	a0,0
}
    5f90:	00008067          	ret

00005f94 <arch_system_halt>:
	__asm__ volatile ("csrrc %0, mstatus, %1"
    5f94:	00800793          	li	a5,8
    5f98:	3007b7f3          	csrrc	a5,mstatus,a5
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
    5f9c:	0000006f          	j	5f9c <arch_system_halt+0x8>

00005fa0 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    5fa0:	ff010113          	addi	sp,sp,-16
    5fa4:	00112623          	sw	ra,12(sp)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    5fa8:	fedff0ef          	jal	ra,5f94 <arch_system_halt>

00005fac <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5fac:	fe010113          	addi	sp,sp,-32
    5fb0:	00812c23          	sw	s0,24(sp)
    5fb4:	01212823          	sw	s2,16(sp)
    5fb8:	00112e23          	sw	ra,28(sp)
    5fbc:	00912a23          	sw	s1,20(sp)
    5fc0:	00050913          	mv	s2,a0
    5fc4:	00b12623          	sw	a1,12(sp)
    5fc8:	00800413          	li	s0,8
    5fcc:	30043473          	csrrc	s0,mstatus,s0
	return z_impl_z_current_get();
    5fd0:	464010ef          	jal	ra,7434 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    5fd4:	00c12583          	lw	a1,12(sp)
    5fd8:	00050493          	mv	s1,a0
    5fdc:	00090513          	mv	a0,s2
    5fe0:	fc1ff0ef          	jal	ra,5fa0 <k_sys_fatal_error_handler>
	key = (mstatus & MSTATUS_IEN);
    5fe4:	00847413          	andi	s0,s0,8
	__asm__ volatile ("csrrs %0, mstatus, %1"
    5fe8:	30042473          	csrrs	s0,mstatus,s0
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    5fec:	01812403          	lw	s0,24(sp)
    5ff0:	01c12083          	lw	ra,28(sp)
    5ff4:	01012903          	lw	s2,16(sp)
	z_impl_k_thread_abort(thread);
    5ff8:	00048513          	mv	a0,s1
    5ffc:	01412483          	lw	s1,20(sp)
    6000:	02010113          	addi	sp,sp,32
    6004:	5300106f          	j	7534 <z_impl_k_thread_abort>

00006008 <init_idle_thread>:
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    6008:	01800693          	li	a3,24
    600c:	02d506b3          	mul	a3,a0,a3
{
    6010:	fe010113          	addi	sp,sp,-32
    6014:	00812c23          	sw	s0,24(sp)
	z_setup_new_thread(thread, stack,
    6018:	0000d737          	lui	a4,0xd
	struct k_thread *thread = &z_idle_threads[i];
    601c:	0000d437          	lui	s0,0xd
	k_thread_stack_t *stack = z_idle_stacks[i];
    6020:	00951313          	slli	t1,a0,0x9
	struct k_thread *thread = &z_idle_threads[i];
    6024:	1d840413          	addi	s0,s0,472 # d1d8 <z_idle_threads>
    6028:	00751513          	slli	a0,a0,0x7
	z_setup_new_thread(thread, stack,
    602c:	2e470713          	addi	a4,a4,740 # d2e4 <_kernel>
    6030:	0000e5b7          	lui	a1,0xe
	struct k_thread *thread = &z_idle_threads[i];
    6034:	00a40433          	add	s0,s0,a0
	z_setup_new_thread(thread, stack,
    6038:	00100793          	li	a5,1
    603c:	00d70733          	add	a4,a4,a3
    6040:	31058593          	addi	a1,a1,784 # e310 <z_idle_stacks>
    6044:	000066b7          	lui	a3,0x6
    6048:	00f12023          	sw	a5,0(sp)
    604c:	00012223          	sw	zero,4(sp)
    6050:	00000793          	li	a5,0
    6054:	00040513          	mv	a0,s0
    6058:	00f00893          	li	a7,15
    605c:	00000813          	li	a6,0
    6060:	40468693          	addi	a3,a3,1028 # 6404 <idle>
    6064:	20000613          	li	a2,512
    6068:	006585b3          	add	a1,a1,t1
{
    606c:	00112e23          	sw	ra,28(sp)
	z_setup_new_thread(thread, stack,
    6070:	174000ef          	jal	ra,61e4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6074:	00d44783          	lbu	a5,13(s0)
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    6078:	01c12083          	lw	ra,28(sp)
    607c:	ffb7f793          	andi	a5,a5,-5
    6080:	00f406a3          	sb	a5,13(s0)
    6084:	01812403          	lw	s0,24(sp)
    6088:	02010113          	addi	sp,sp,32
    608c:	00008067          	ret

00006090 <bg_thread_main>:
{
    6090:	ff010113          	addi	sp,sp,-16
	z_sys_post_kernel = true;
    6094:	0000d7b7          	lui	a5,0xd
    6098:	00100713          	li	a4,1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    609c:	00200513          	li	a0,2
{
    60a0:	00112623          	sw	ra,12(sp)
	z_sys_post_kernel = true;
    60a4:	04e78a23          	sb	a4,84(a5) # d054 <z_sys_post_kernel>
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    60a8:	e21ff0ef          	jal	ra,5ec8 <z_sys_init_run_level>
	boot_banner();
    60ac:	18d010ef          	jal	ra,7a38 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    60b0:	00300513          	li	a0,3
    60b4:	e15ff0ef          	jal	ra,5ec8 <z_sys_init_run_level>
	z_init_static_threads();
    60b8:	234000ef          	jal	ra,62ec <z_init_static_threads>
	main();
    60bc:	955fd0ef          	jal	ra,3a10 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    60c0:	0000d7b7          	lui	a5,0xd
    60c4:	25878793          	addi	a5,a5,600 # d258 <z_main_thread>
    60c8:	00c7c703          	lbu	a4,12(a5)
    60cc:	ffe77713          	andi	a4,a4,-2
    60d0:	00e78623          	sb	a4,12(a5)
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    60d4:	00c12083          	lw	ra,12(sp)
    60d8:	01010113          	addi	sp,sp,16
    60dc:	00008067          	ret

000060e0 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    60e0:	0000d537          	lui	a0,0xd

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    60e4:	0000d7b7          	lui	a5,0xd
    60e8:	00850613          	addi	a2,a0,8 # d008 <last_count>
    60ec:	30878793          	addi	a5,a5,776 # d308 <sched_spinlock>
    60f0:	40c78633          	sub	a2,a5,a2
    60f4:	00000593          	li	a1,0
    60f8:	00850513          	addi	a0,a0,8
    60fc:	a19fc06f          	j	2b14 <memset>

00006100 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    6100:	f6010113          	addi	sp,sp,-160
    6104:	08812c23          	sw	s0,152(sp)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    6108:	10100793          	li	a5,257
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    610c:	0000d437          	lui	s0,0xd
    6110:	2e440413          	addi	s0,s0,740 # d2e4 <_kernel>
	dummy_thread->base.user_options = K_ESSENTIAL;
    6114:	00f11e23          	sh	a5,28(sp)
	_current_cpu->current = dummy_thread;
    6118:	01010793          	addi	a5,sp,16
    611c:	08112e23          	sw	ra,156(sp)
    6120:	00f42423          	sw	a5,8(s0)
    6124:	08912a23          	sw	s1,148(sp)
    6128:	09212823          	sw	s2,144(sp)
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    612c:	d99ff0ef          	jal	ra,5ec4 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    6130:	00000513          	li	a0,0
    6134:	d95ff0ef          	jal	ra,5ec8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    6138:	00100513          	li	a0,1
    613c:	d8dff0ef          	jal	ra,5ec8 <z_sys_init_run_level>
	z_sched_init();
    6140:	1f8010ef          	jal	ra,7338 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    6144:	0000d7b7          	lui	a5,0xd
    6148:	c6478793          	addi	a5,a5,-924 # cc64 <levels.0+0x14>
	_kernel.ready_q.cache = &z_main_thread;
    614c:	0000d4b7          	lui	s1,0xd
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    6150:	00f12223          	sw	a5,4(sp)
    6154:	000066b7          	lui	a3,0x6
    6158:	00100793          	li	a5,1
    615c:	0000e5b7          	lui	a1,0xe
	_kernel.ready_q.cache = &z_main_thread;
    6160:	25848913          	addi	s2,s1,600 # d258 <z_main_thread>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    6164:	00000893          	li	a7,0
    6168:	00000813          	li	a6,0
    616c:	00000713          	li	a4,0
    6170:	09068693          	addi	a3,a3,144 # 6090 <bg_thread_main>
    6174:	40000613          	li	a2,1024
    6178:	f1058593          	addi	a1,a1,-240 # df10 <z_main_stack>
    617c:	00f12023          	sw	a5,0(sp)
    6180:	25848513          	addi	a0,s1,600
    6184:	00000793          	li	a5,0
	_kernel.ready_q.cache = &z_main_thread;
    6188:	01242c23          	sw	s2,24(s0)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    618c:	058000ef          	jal	ra,61e4 <z_setup_new_thread>
    6190:	00d94783          	lbu	a5,13(s2)
	z_ready_thread(&z_main_thread);
    6194:	25848513          	addi	a0,s1,600
    6198:	ffb7f793          	andi	a5,a5,-5
    619c:	00f906a3          	sb	a5,13(s2)
    61a0:	491000ef          	jal	ra,6e30 <z_ready_thread>
		init_idle_thread(i);
    61a4:	00000513          	li	a0,0
    61a8:	e61ff0ef          	jal	ra,6008 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    61ac:	0000d7b7          	lui	a5,0xd
    61b0:	1d878793          	addi	a5,a5,472 # d1d8 <z_idle_threads>
    61b4:	00f42623          	sw	a5,12(s0)
		_kernel.cpus[i].irq_stack =
    61b8:	0000f7b7          	lui	a5,0xf
    61bc:	d1078793          	addi	a5,a5,-752 # ed10 <_k_fifo_buf_accel_msgq>
		_kernel.cpus[i].id = i;
    61c0:	00040a23          	sb	zero,20(s0)
		_kernel.cpus[i].irq_stack =
    61c4:	00f42223          	sw	a5,4(s0)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    61c8:	00800513          	li	a0,8
    61cc:	30053573          	csrrc	a0,mstatus,a0
	ret = arch_swap(key);
    61d0:	00857513          	andi	a0,a0,8
    61d4:	8f8fa0ef          	jal	ra,2cc <arch_swap>

000061d8 <z_impl_k_thread_name_set>:

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    61d8:	fa800513          	li	a0,-88
    61dc:	00008067          	ret

000061e0 <z_impl_k_thread_start>:

void z_impl_k_thread_start(struct k_thread *thread)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_thread, start, thread);

	z_sched_start(thread);
    61e0:	4810006f          	j	6e60 <z_sched_start>

000061e4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    61e4:	ff010113          	addi	sp,sp,-16
    61e8:	00812423          	sw	s0,8(sp)
    61ec:	00912223          	sw	s1,4(sp)
    61f0:	00112623          	sw	ra,12(sp)
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    61f4:	06850313          	addi	t1,a0,104
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    61f8:	06652423          	sw	t1,104(a0)
	list->tail = (sys_dnode_t *)list;
    61fc:	06652623          	sw	t1,108(a0)
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    6200:	01012303          	lw	t1,16(sp)
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6204:	00f60613          	addi	a2,a2,15
    6208:	ff067613          	andi	a2,a2,-16
	stack_ptr = (char *)stack + stack_obj_size;
    620c:	00c584b3          	add	s1,a1,a2
	thread_base->user_options = (uint8_t)options;
    6210:	00650623          	sb	t1,12(a0)
	thread_base->thread_state = (uint8_t)initial_state;
    6214:	00400313          	li	t1,4
	thread_base->pended_on = NULL;
    6218:	00052423          	sw	zero,8(a0)
	thread_base->thread_state = (uint8_t)initial_state;
    621c:	006506a3          	sb	t1,13(a0)

	thread_base->prio = priority;
    6220:	01150723          	sb	a7,14(a0)

	thread_base->sched_locked = 0U;
    6224:	000507a3          	sb	zero,15(a0)
 * @return N/A
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
    6228:	00052c23          	sw	zero,24(a0)
	node->prev = NULL;
    622c:	00052e23          	sw	zero,28(a0)
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6230:	00048613          	mv	a2,s1
{
    6234:	00050413          	mv	s0,a0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6238:	99cff0ef          	jal	ra,53d4 <arch_new_thread>
	new_thread->resource_pool = _current->resource_pool;
    623c:	0000d7b7          	lui	a5,0xd
    6240:	2ec7a783          	lw	a5,748(a5) # d2ec <_kernel+0x8>
}
    6244:	00c12083          	lw	ra,12(sp)
	new_thread->init_data = NULL;
    6248:	06042223          	sw	zero,100(s0)
	new_thread->resource_pool = _current->resource_pool;
    624c:	0747a783          	lw	a5,116(a5)
}
    6250:	00048513          	mv	a0,s1
    6254:	00412483          	lw	s1,4(sp)
	new_thread->resource_pool = _current->resource_pool;
    6258:	06f42a23          	sw	a5,116(s0)
}
    625c:	00812403          	lw	s0,8(sp)
    6260:	01010113          	addi	sp,sp,16
    6264:	00008067          	ret

00006268 <z_impl_k_thread_create>:
{
    6268:	fe010113          	addi	sp,sp,-32
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    626c:	02012303          	lw	t1,32(sp)
{
    6270:	01212823          	sw	s2,16(sp)
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    6274:	00012223          	sw	zero,4(sp)
{
    6278:	02812903          	lw	s2,40(sp)
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    627c:	00612023          	sw	t1,0(sp)
{
    6280:	00812c23          	sw	s0,24(sp)
    6284:	00912a23          	sw	s1,20(sp)
    6288:	00112e23          	sw	ra,28(sp)
    628c:	02c12483          	lw	s1,44(sp)
    6290:	00050413          	mv	s0,a0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    6294:	f51ff0ef          	jal	ra,61e4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    6298:	fff00693          	li	a3,-1
    629c:	00d91463          	bne	s2,a3,62a4 <z_impl_k_thread_create+0x3c>
    62a0:	01248a63          	beq	s1,s2,62b4 <z_impl_k_thread_create+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    62a4:	0124e7b3          	or	a5,s1,s2
    62a8:	02079463          	bnez	a5,62d0 <z_impl_k_thread_create+0x68>
	z_sched_start(thread);
    62ac:	00040513          	mv	a0,s0
    62b0:	3b1000ef          	jal	ra,6e60 <z_sched_start>
}
    62b4:	01c12083          	lw	ra,28(sp)
    62b8:	00040513          	mv	a0,s0
    62bc:	01812403          	lw	s0,24(sp)
    62c0:	01412483          	lw	s1,20(sp)
    62c4:	01012903          	lw	s2,16(sp)
    62c8:	02010113          	addi	sp,sp,32
    62cc:	00008067          	ret

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    62d0:	000075b7          	lui	a1,0x7
    62d4:	00090613          	mv	a2,s2
    62d8:	00048693          	mv	a3,s1
    62dc:	f0058593          	addi	a1,a1,-256 # 6f00 <z_thread_timeout>
    62e0:	01840513          	addi	a0,s0,24
    62e4:	354010ef          	jal	ra,7638 <z_add_timeout>
    62e8:	fcdff06f          	j	62b4 <z_impl_k_thread_create+0x4c>

000062ec <z_init_static_threads>:
{
    62ec:	fd010113          	addi	sp,sp,-48
	_FOREACH_STATIC_THREAD(thread_data) {
    62f0:	0000f7b7          	lui	a5,0xf
{
    62f4:	03212023          	sw	s2,32(sp)
	_FOREACH_STATIC_THREAD(thread_data) {
    62f8:	0000f937          	lui	s2,0xf
{
    62fc:	02812423          	sw	s0,40(sp)
    6300:	02912223          	sw	s1,36(sp)
    6304:	02112623          	sw	ra,44(sp)
    6308:	01312e23          	sw	s3,28(sp)
    630c:	01412c23          	sw	s4,24(sp)
    6310:	01512a23          	sw	s5,20(sp)
	_FOREACH_STATIC_THREAD(thread_data) {
    6314:	14c78413          	addi	s0,a5,332 # f14c <__lock___malloc_recursive_mutex>
    6318:	14c78493          	addi	s1,a5,332
    631c:	14c90913          	addi	s2,s2,332 # f14c <__lock___malloc_recursive_mutex>
    6320:	05246063          	bltu	s0,s2,6360 <z_init_static_threads+0x74>
	k_sched_lock();
    6324:	04d000ef          	jal	ra,6b70 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    6328:	00048413          	mv	s0,s1
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    632c:	fff00993          	li	s3,-1
		t += off;
    6330:	00900a13          	li	s4,9
    6334:	00007ab7          	lui	s5,0x7
	_FOREACH_STATIC_THREAD(thread_data) {
    6338:	07246663          	bltu	s0,s2,63a4 <z_init_static_threads+0xb8>
}
    633c:	02812403          	lw	s0,40(sp)
    6340:	02c12083          	lw	ra,44(sp)
    6344:	02412483          	lw	s1,36(sp)
    6348:	02012903          	lw	s2,32(sp)
    634c:	01c12983          	lw	s3,28(sp)
    6350:	01812a03          	lw	s4,24(sp)
    6354:	01412a83          	lw	s5,20(sp)
    6358:	03010113          	addi	sp,sp,48
	k_sched_unlock();
    635c:	7450006f          	j	72a0 <k_sched_unlock>
		z_setup_new_thread(
    6360:	02c42783          	lw	a5,44(s0)
    6364:	00f12223          	sw	a5,4(sp)
    6368:	02042783          	lw	a5,32(s0)
    636c:	00f12023          	sw	a5,0(sp)
    6370:	01442783          	lw	a5,20(s0)
    6374:	01c42883          	lw	a7,28(s0)
    6378:	01842803          	lw	a6,24(s0)
    637c:	01042703          	lw	a4,16(s0)
    6380:	00c42683          	lw	a3,12(s0)
    6384:	00842603          	lw	a2,8(s0)
    6388:	00442583          	lw	a1,4(s0)
    638c:	00042503          	lw	a0,0(s0)
    6390:	e55ff0ef          	jal	ra,61e4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    6394:	00042783          	lw	a5,0(s0)
    6398:	0687a223          	sw	s0,100(a5)
	_FOREACH_STATIC_THREAD(thread_data) {
    639c:	03040413          	addi	s0,s0,48
    63a0:	f81ff06f          	j	6320 <z_init_static_threads+0x34>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    63a4:	02442783          	lw	a5,36(s0)
    63a8:	03378863          	beq	a5,s3,63d8 <z_init_static_threads+0xec>
			schedule_new_thread(thread_data->init_thread,
    63ac:	00042483          	lw	s1,0(s0)
					    K_MSEC(thread_data->init_delay));
    63b0:	0007d463          	bgez	a5,63b8 <z_init_static_threads+0xcc>
    63b4:	00000793          	li	a5,0
    63b8:	00978513          	addi	a0,a5,9
    63bc:	41f7d593          	srai	a1,a5,0x1f
    63c0:	00f537b3          	sltu	a5,a0,a5
    63c4:	00b785b3          	add	a1,a5,a1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    63c8:	01451c63          	bne	a0,s4,63e0 <z_init_static_threads+0xf4>
    63cc:	00059a63          	bnez	a1,63e0 <z_init_static_threads+0xf4>
	z_sched_start(thread);
    63d0:	00048513          	mv	a0,s1
    63d4:	28d000ef          	jal	ra,6e60 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    63d8:	03040413          	addi	s0,s0,48
    63dc:	f5dff06f          	j	6338 <z_init_static_threads+0x4c>
			return t / ((uint64_t)from_hz / to_hz);
    63e0:	00a00613          	li	a2,10
    63e4:	00000693          	li	a3,0
    63e8:	f55f90ef          	jal	ra,33c <__udivdi3>
    63ec:	00050613          	mv	a2,a0
    63f0:	00058693          	mv	a3,a1
    63f4:	01848513          	addi	a0,s1,24
    63f8:	f00a8593          	addi	a1,s5,-256 # 6f00 <z_thread_timeout>
    63fc:	23c010ef          	jal	ra,7638 <z_add_timeout>
    6400:	fd9ff06f          	j	63d8 <z_init_static_threads+0xec>

00006404 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    6404:	ff010113          	addi	sp,sp,-16
    6408:	00812423          	sw	s0,8(sp)
    640c:	00112623          	sw	ra,12(sp)
    6410:	00800413          	li	s0,8
    6414:	300437f3          	csrrc	a5,mstatus,s0
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    6418:	f2dfe0ef          	jal	ra,5344 <arch_cpu_idle>
    641c:	ff9ff06f          	j	6414 <idle+0x10>

00006420 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
    6420:	fd010113          	addi	sp,sp,-48
    6424:	02812423          	sw	s0,40(sp)
    6428:	02912223          	sw	s1,36(sp)
    642c:	01312e23          	sw	s3,28(sp)
    6430:	02112623          	sw	ra,44(sp)
    6434:	03212023          	sw	s2,32(sp)
    6438:	00050413          	mv	s0,a0
    643c:	00068713          	mv	a4,a3

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
    6440:	00850993          	addi	s3,a0,8
    6444:	00800493          	li	s1,8
    6448:	3004b4f3          	csrrc	s1,mstatus,s1

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
    644c:	02052683          	lw	a3,32(a0)
    6450:	00c52783          	lw	a5,12(a0)
	key = (mstatus & MSTATUS_IEN);
    6454:	0084f493          	andi	s1,s1,8
    6458:	08f6fe63          	bgeu	a3,a5,64f4 <z_impl_k_msgq_put+0xd4>
    645c:	00b12623          	sw	a1,12(sp)
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
    6460:	689000ef          	jal	ra,72e8 <z_unpend_first_thread>
    6464:	00842603          	lw	a2,8(s0)
		if (pending_thread != NULL) {
    6468:	00c12583          	lw	a1,12(sp)
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
    646c:	00050913          	mv	s2,a0
		if (pending_thread != NULL) {
    6470:	04050263          	beqz	a0,64b4 <z_impl_k_msgq_put+0x94>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    6474:	01452503          	lw	a0,20(a0)
    6478:	e78fc0ef          	jal	ra,2af0 <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
    647c:	00090513          	mv	a0,s2
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    6480:	06092c23          	sw	zero,120(s2)
    6484:	1ad000ef          	jal	ra,6e30 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
    6488:	00098513          	mv	a0,s3
    648c:	00048593          	mv	a1,s1
    6490:	67c000ef          	jal	ra,6b0c <z_reschedule>
			return 0;
    6494:	00000513          	li	a0,0
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
    6498:	02c12083          	lw	ra,44(sp)
    649c:	02812403          	lw	s0,40(sp)
    64a0:	02412483          	lw	s1,36(sp)
    64a4:	02012903          	lw	s2,32(sp)
    64a8:	01c12983          	lw	s3,28(sp)
    64ac:	03010113          	addi	sp,sp,48
    64b0:	00008067          	ret
    64b4:	01c42503          	lw	a0,28(s0)
    64b8:	e38fc0ef          	jal	ra,2af0 <memcpy>
			msgq->write_ptr += msgq->msg_size;
    64bc:	01c42783          	lw	a5,28(s0)
    64c0:	00842703          	lw	a4,8(s0)
    64c4:	00e787b3          	add	a5,a5,a4
			if (msgq->write_ptr == msgq->buffer_end) {
    64c8:	01442703          	lw	a4,20(s0)
			msgq->write_ptr += msgq->msg_size;
    64cc:	00f42e23          	sw	a5,28(s0)
			if (msgq->write_ptr == msgq->buffer_end) {
    64d0:	00e79663          	bne	a5,a4,64dc <z_impl_k_msgq_put+0xbc>
				msgq->write_ptr = msgq->buffer_start;
    64d4:	01042783          	lw	a5,16(s0)
    64d8:	00f42e23          	sw	a5,28(s0)
			msgq->used_msgs++;
    64dc:	02042783          	lw	a5,32(s0)
		result = 0;
    64e0:	00000513          	li	a0,0
			msgq->used_msgs++;
    64e4:	00178793          	addi	a5,a5,1
    64e8:	02f42023          	sw	a5,32(s0)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    64ec:	3004a4f3          	csrrs	s1,mstatus,s1
	return result;
    64f0:	fa9ff06f          	j	6498 <z_impl_k_msgq_put+0x78>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    64f4:	00e667b3          	or	a5,a2,a4
		result = -ENOMSG;
    64f8:	fdd00513          	li	a0,-35
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    64fc:	fe0788e3          	beqz	a5,64ec <z_impl_k_msgq_put+0xcc>
		_current->base.swap_data = (void *) data;
    6500:	0000d7b7          	lui	a5,0xd
    6504:	2ec7a783          	lw	a5,748(a5) # d2ec <_kernel+0x8>
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    6508:	00060693          	mv	a3,a2
    650c:	00040613          	mv	a2,s0
}
    6510:	02812403          	lw	s0,40(sp)
    6514:	02c12083          	lw	ra,44(sp)
    6518:	02012903          	lw	s2,32(sp)
		_current->base.swap_data = (void *) data;
    651c:	00b7aa23          	sw	a1,20(a5)
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    6520:	00098513          	mv	a0,s3
    6524:	00048593          	mv	a1,s1
}
    6528:	01c12983          	lw	s3,28(sp)
    652c:	02412483          	lw	s1,36(sp)
    6530:	03010113          	addi	sp,sp,48
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    6534:	3810006f          	j	70b4 <z_pend_curr>

00006538 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
    6538:	fe010113          	addi	sp,sp,-32
    653c:	00812c23          	sw	s0,24(sp)
    6540:	00050413          	mv	s0,a0
    6544:	00912a23          	sw	s1,20(sp)
    6548:	01312623          	sw	s3,12(sp)
    654c:	00112e23          	sw	ra,28(sp)
    6550:	01212823          	sw	s2,16(sp)
    6554:	00058513          	mv	a0,a1

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
    6558:	00840993          	addi	s3,s0,8
	__asm__ volatile ("csrrc %0, mstatus, %1"
    655c:	00800493          	li	s1,8
    6560:	3004b4f3          	csrrc	s1,mstatus,s1

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
    6564:	02042783          	lw	a5,32(s0)
	key = (mstatus & MSTATUS_IEN);
    6568:	0084f493          	andi	s1,s1,8
    656c:	0c078263          	beqz	a5,6630 <z_impl_k_msgq_get+0xf8>
    6570:	00842603          	lw	a2,8(s0)
    6574:	01842583          	lw	a1,24(s0)
    6578:	d78fc0ef          	jal	ra,2af0 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
    657c:	01842783          	lw	a5,24(s0)
    6580:	00842703          	lw	a4,8(s0)
    6584:	00e787b3          	add	a5,a5,a4
		if (msgq->read_ptr == msgq->buffer_end) {
    6588:	01442703          	lw	a4,20(s0)
		msgq->read_ptr += msgq->msg_size;
    658c:	00f42c23          	sw	a5,24(s0)
		if (msgq->read_ptr == msgq->buffer_end) {
    6590:	00e79663          	bne	a5,a4,659c <z_impl_k_msgq_get+0x64>
			msgq->read_ptr = msgq->buffer_start;
    6594:	01042783          	lw	a5,16(s0)
    6598:	00f42c23          	sw	a5,24(s0)
		}
		msgq->used_msgs--;
    659c:	02042783          	lw	a5,32(s0)

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
    65a0:	00040513          	mv	a0,s0
		msgq->used_msgs--;
    65a4:	fff78793          	addi	a5,a5,-1
    65a8:	02f42023          	sw	a5,32(s0)
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
    65ac:	53d000ef          	jal	ra,72e8 <z_unpend_first_thread>
    65b0:	00050913          	mv	s2,a0
		if (pending_thread != NULL) {
    65b4:	0c050263          	beqz	a0,6678 <z_impl_k_msgq_get+0x140>
    65b8:	01452583          	lw	a1,20(a0)
    65bc:	00842603          	lw	a2,8(s0)
    65c0:	01c42503          	lw	a0,28(s0)
    65c4:	d2cfc0ef          	jal	ra,2af0 <memcpy>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
    65c8:	01c42783          	lw	a5,28(s0)
    65cc:	00842703          	lw	a4,8(s0)
    65d0:	00e787b3          	add	a5,a5,a4
			if (msgq->write_ptr == msgq->buffer_end) {
    65d4:	01442703          	lw	a4,20(s0)
			msgq->write_ptr += msgq->msg_size;
    65d8:	00f42e23          	sw	a5,28(s0)
			if (msgq->write_ptr == msgq->buffer_end) {
    65dc:	00e79663          	bne	a5,a4,65e8 <z_impl_k_msgq_get+0xb0>
				msgq->write_ptr = msgq->buffer_start;
    65e0:	01042783          	lw	a5,16(s0)
    65e4:	00f42e23          	sw	a5,28(s0)
			}
			msgq->used_msgs++;
    65e8:	02042783          	lw	a5,32(s0)

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
    65ec:	00090513          	mv	a0,s2
			msgq->used_msgs++;
    65f0:	00178793          	addi	a5,a5,1
    65f4:	02f42023          	sw	a5,32(s0)
    65f8:	06092c23          	sw	zero,120(s2)
			z_ready_thread(pending_thread);
    65fc:	035000ef          	jal	ra,6e30 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
    6600:	00048593          	mv	a1,s1
    6604:	00098513          	mv	a0,s3
    6608:	504000ef          	jal	ra,6b0c <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
    660c:	00000793          	li	a5,0
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
    6610:	01c12083          	lw	ra,28(sp)
    6614:	01812403          	lw	s0,24(sp)
    6618:	01412483          	lw	s1,20(sp)
    661c:	01012903          	lw	s2,16(sp)
    6620:	00c12983          	lw	s3,12(sp)
    6624:	00078513          	mv	a0,a5
    6628:	02010113          	addi	sp,sp,32
    662c:	00008067          	ret
    6630:	00068713          	mv	a4,a3
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    6634:	00d666b3          	or	a3,a2,a3
		result = -ENOMSG;
    6638:	fdd00793          	li	a5,-35
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    663c:	04068063          	beqz	a3,667c <z_impl_k_msgq_get+0x144>
		_current->base.swap_data = data;
    6640:	0000d7b7          	lui	a5,0xd
    6644:	2ec7a783          	lw	a5,748(a5) # d2ec <_kernel+0x8>
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    6648:	00060693          	mv	a3,a2
    664c:	00040613          	mv	a2,s0
}
    6650:	01812403          	lw	s0,24(sp)
    6654:	01c12083          	lw	ra,28(sp)
    6658:	01012903          	lw	s2,16(sp)
		_current->base.swap_data = data;
    665c:	00b7aa23          	sw	a1,20(a5)
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    6660:	00098513          	mv	a0,s3
    6664:	00048593          	mv	a1,s1
}
    6668:	00c12983          	lw	s3,12(sp)
    666c:	01412483          	lw	s1,20(sp)
    6670:	02010113          	addi	sp,sp,32
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    6674:	2410006f          	j	70b4 <z_pend_curr>
		result = 0;
    6678:	00000793          	li	a5,0
	__asm__ volatile ("csrrs %0, mstatus, %1"
    667c:	3004a4f3          	csrrs	s1,mstatus,s1
	return result;
    6680:	f91ff06f          	j	6610 <z_impl_k_msgq_get+0xd8>

00006684 <z_impl_k_msgq_peek>:
}
#include <syscalls/k_msgq_get_mrsh.c>
#endif

int z_impl_k_msgq_peek(struct k_msgq *msgq, void *data)
{
    6684:	ff010113          	addi	sp,sp,-16
    6688:	00812423          	sw	s0,8(sp)
    668c:	00112623          	sw	ra,12(sp)
    6690:	00050793          	mv	a5,a0
	__asm__ volatile ("csrrc %0, mstatus, %1"
    6694:	00800413          	li	s0,8
    6698:	30043473          	csrrc	s0,mstatus,s0
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);

	if (msgq->used_msgs > 0U) {
    669c:	02052703          	lw	a4,32(a0)
	key = (mstatus & MSTATUS_IEN);
    66a0:	00847413          	andi	s0,s0,8
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		result = 0;
	} else {
		/* don't wait for a message to become available */
		result = -ENOMSG;
    66a4:	fdd00513          	li	a0,-35
	if (msgq->used_msgs > 0U) {
    66a8:	00070c63          	beqz	a4,66c0 <z_impl_k_msgq_peek+0x3c>
    66ac:	00058513          	mv	a0,a1
    66b0:	0087a603          	lw	a2,8(a5)
    66b4:	0187a583          	lw	a1,24(a5)
    66b8:	c38fc0ef          	jal	ra,2af0 <memcpy>
		result = 0;
    66bc:	00000513          	li	a0,0
	__asm__ volatile ("csrrs %0, mstatus, %1"
    66c0:	30042473          	csrrs	s0,mstatus,s0
	SYS_PORT_TRACING_OBJ_FUNC(k_msgq, peek, msgq, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
    66c4:	00c12083          	lw	ra,12(sp)
    66c8:	00812403          	lw	s0,8(sp)
    66cc:	01010113          	addi	sp,sp,16
    66d0:	00008067          	ret

000066d4 <adjust_owner_prio.isra.0>:
	return new_prio;
}

static bool adjust_owner_prio(struct k_mutex *mutex, int32_t new_prio)
{
	if (mutex->owner->base.prio != new_prio) {
    66d4:	00e50783          	lb	a5,14(a0)
    66d8:	00b78463          	beq	a5,a1,66e0 <adjust_owner_prio.isra.0+0xc>
		LOG_DBG("%p (ready (y/n): %c) prio changed to %d (was %d)",
			mutex->owner, z_is_thread_ready(mutex->owner) ?
			'y' : 'n',
			new_prio, mutex->owner->base.prio);

		return z_set_prio(mutex->owner, new_prio);
    66dc:	21d0006f          	j	70f8 <z_set_prio>
	}
	return false;
}
    66e0:	00000513          	li	a0,0
    66e4:	00008067          	ret

000066e8 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
    66e8:	00052423          	sw	zero,8(a0)
	mutex->lock_count = 0U;
    66ec:	00052623          	sw	zero,12(a0)
	list->head = (sys_dnode_t *)list;
    66f0:	00a52023          	sw	a0,0(a0)
	list->tail = (sys_dnode_t *)list;
    66f4:	00a52223          	sw	a0,4(a0)
}
    66f8:	00000513          	li	a0,0
    66fc:	00008067          	ret

00006700 <z_impl_k_mutex_lock>:

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    6700:	fd010113          	addi	sp,sp,-48
    6704:	02812423          	sw	s0,40(sp)
    6708:	02912223          	sw	s1,36(sp)
    670c:	02112623          	sw	ra,44(sp)
    6710:	03212023          	sw	s2,32(sp)
    6714:	01312e23          	sw	s3,28(sp)
    6718:	00050413          	mv	s0,a0
    671c:	00060713          	mv	a4,a2
	__asm__ volatile ("csrrc %0, mstatus, %1"
    6720:	00800493          	li	s1,8
    6724:	3004b4f3          	csrrc	s1,mstatus,s1

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    6728:	00c52603          	lw	a2,12(a0)
    672c:	0000d7b7          	lui	a5,0xd
	key = (mstatus & MSTATUS_IEN);
    6730:	0084f493          	andi	s1,s1,8
    6734:	2e478793          	addi	a5,a5,740 # d2e4 <_kernel>
    6738:	02060463          	beqz	a2,6760 <z_impl_k_mutex_lock+0x60>
    673c:	00058693          	mv	a3,a1
    6740:	00852503          	lw	a0,8(a0)
    6744:	0087a583          	lw	a1,8(a5)
    6748:	04b50c63          	beq	a0,a1,67a0 <z_impl_k_mutex_lock+0xa0>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    674c:	00e6e7b3          	or	a5,a3,a4
    6750:	04079c63          	bnez	a5,67a8 <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    6754:	3004a4f3          	csrrs	s1,mstatus,s1
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    6758:	ff000513          	li	a0,-16
    675c:	0280006f          	j	6784 <z_impl_k_mutex_lock+0x84>
					_current->base.prio :
    6760:	0087a703          	lw	a4,8(a5)
    6764:	00e70703          	lb	a4,14(a4)
		mutex->owner = _current;
    6768:	0087a783          	lw	a5,8(a5)
		mutex->lock_count++;
    676c:	00160613          	addi	a2,a2,1
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    6770:	00e42823          	sw	a4,16(s0)
		mutex->lock_count++;
    6774:	00c42623          	sw	a2,12(s0)
		mutex->owner = _current;
    6778:	00f42423          	sw	a5,8(s0)
    677c:	3004a4f3          	csrrs	s1,mstatus,s1
		return 0;
    6780:	00000513          	li	a0,0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    6784:	02c12083          	lw	ra,44(sp)
    6788:	02812403          	lw	s0,40(sp)
    678c:	02412483          	lw	s1,36(sp)
    6790:	02012903          	lw	s2,32(sp)
    6794:	01c12983          	lw	s3,28(sp)
    6798:	03010113          	addi	sp,sp,48
    679c:	00008067          	ret
					_current->base.prio :
    67a0:	01042703          	lw	a4,16(s0)
    67a4:	fc5ff06f          	j	6768 <z_impl_k_mutex_lock+0x68>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    67a8:	00e50783          	lb	a5,14(a0)
    67ac:	00e58583          	lb	a1,14(a1)
    67b0:	00b7d463          	bge	a5,a1,67b8 <z_impl_k_mutex_lock+0xb8>
    67b4:	00078593          	mv	a1,a5
    67b8:	f8100613          	li	a2,-127
    67bc:	00c5d463          	bge	a1,a2,67c4 <z_impl_k_mutex_lock+0xc4>
    67c0:	f8100593          	li	a1,-127
	bool resched = false;
    67c4:	00000993          	li	s3,0
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    67c8:	00f5de63          	bge	a1,a5,67e4 <z_impl_k_mutex_lock+0xe4>
    67cc:	00e12623          	sw	a4,12(sp)
    67d0:	00d12423          	sw	a3,8(sp)
		resched = adjust_owner_prio(mutex, new_prio);
    67d4:	f01ff0ef          	jal	ra,66d4 <adjust_owner_prio.isra.0>
    67d8:	00c12703          	lw	a4,12(sp)
    67dc:	00812683          	lw	a3,8(sp)
    67e0:	00050993          	mv	s3,a0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    67e4:	0000d937          	lui	s2,0xd
    67e8:	00040613          	mv	a2,s0
    67ec:	00048593          	mv	a1,s1
    67f0:	30890513          	addi	a0,s2,776 # d308 <sched_spinlock>
    67f4:	0c1000ef          	jal	ra,70b4 <z_pend_curr>
	if (got_mutex == 0) {
    67f8:	f80506e3          	beqz	a0,6784 <z_impl_k_mutex_lock+0x84>
	__asm__ volatile ("csrrc %0, mstatus, %1"
    67fc:	00800493          	li	s1,8
    6800:	3004b4f3          	csrrc	s1,mstatus,s1
	if (likely(mutex->owner != NULL)) {
    6804:	00842503          	lw	a0,8(s0)
	key = (mstatus & MSTATUS_IEN);
    6808:	0084f493          	andi	s1,s1,8
    680c:	02050a63          	beqz	a0,6840 <z_impl_k_mutex_lock+0x140>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    6810:	00042783          	lw	a5,0(s0)
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    6814:	01042583          	lw	a1,16(s0)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6818:	02f40063          	beq	s0,a5,6838 <z_impl_k_mutex_lock+0x138>
    681c:	00078e63          	beqz	a5,6838 <z_impl_k_mutex_lock+0x138>
    6820:	00e78783          	lb	a5,14(a5)
    6824:	00b7d463          	bge	a5,a1,682c <z_impl_k_mutex_lock+0x12c>
    6828:	00078593          	mv	a1,a5
    682c:	f8100793          	li	a5,-127
    6830:	00f5d463          	bge	a1,a5,6838 <z_impl_k_mutex_lock+0x138>
    6834:	f8100593          	li	a1,-127
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    6838:	e9dff0ef          	jal	ra,66d4 <adjust_owner_prio.isra.0>
    683c:	00051463          	bnez	a0,6844 <z_impl_k_mutex_lock+0x144>
	if (resched) {
    6840:	00098c63          	beqz	s3,6858 <z_impl_k_mutex_lock+0x158>
		z_reschedule(&lock, key);
    6844:	00048593          	mv	a1,s1
    6848:	30890513          	addi	a0,s2,776
    684c:	2c0000ef          	jal	ra,6b0c <z_reschedule>
	return -EAGAIN;
    6850:	ff500513          	li	a0,-11
    6854:	f31ff06f          	j	6784 <z_impl_k_mutex_lock+0x84>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    6858:	3004a4f3          	csrrs	s1,mstatus,s1
    685c:	ff5ff06f          	j	6850 <z_impl_k_mutex_lock+0x150>

00006860 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    6860:	00852783          	lw	a5,8(a0)
    6864:	0a078e63          	beqz	a5,6920 <z_impl_k_mutex_unlock+0xc0>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    6868:	0000d737          	lui	a4,0xd
    686c:	2ec72703          	lw	a4,748(a4) # d2ec <_kernel+0x8>
{
    6870:	ff010113          	addi	sp,sp,-16
    6874:	00812423          	sw	s0,8(sp)
    6878:	00112623          	sw	ra,12(sp)
    687c:	00912223          	sw	s1,4(sp)
    6880:	00050413          	mv	s0,a0
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, -EPERM);

		return -EPERM;
    6884:	fff00513          	li	a0,-1
	CHECKIF(mutex->owner != _current) {
    6888:	02e79663          	bne	a5,a4,68b4 <z_impl_k_mutex_unlock+0x54>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    688c:	00f7c703          	lbu	a4,15(a5)
    6890:	fff70713          	addi	a4,a4,-1
    6894:	00e787a3          	sb	a4,15(a5)

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    6898:	00c42783          	lw	a5,12(s0)
    689c:	00100713          	li	a4,1
    68a0:	02f77463          	bgeu	a4,a5,68c8 <z_impl_k_mutex_unlock+0x68>
		mutex->lock_count--;
    68a4:	fff78793          	addi	a5,a5,-1
    68a8:	00f42623          	sw	a5,12(s0)


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    68ac:	1f5000ef          	jal	ra,72a0 <k_sched_unlock>

	return 0;
    68b0:	00000513          	li	a0,0
}
    68b4:	00c12083          	lw	ra,12(sp)
    68b8:	00812403          	lw	s0,8(sp)
    68bc:	00412483          	lw	s1,4(sp)
    68c0:	01010113          	addi	sp,sp,16
    68c4:	00008067          	ret
	__asm__ volatile ("csrrc %0, mstatus, %1"
    68c8:	00800493          	li	s1,8
    68cc:	3004b4f3          	csrrc	s1,mstatus,s1
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    68d0:	01042583          	lw	a1,16(s0)
    68d4:	00842503          	lw	a0,8(s0)
	key = (mstatus & MSTATUS_IEN);
    68d8:	0084f493          	andi	s1,s1,8
    68dc:	df9ff0ef          	jal	ra,66d4 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    68e0:	00040513          	mv	a0,s0
    68e4:	205000ef          	jal	ra,72e8 <z_unpend_first_thread>
	mutex->owner = new_owner;
    68e8:	00a42423          	sw	a0,8(s0)
	if (new_owner != NULL) {
    68ec:	02050463          	beqz	a0,6914 <z_impl_k_mutex_unlock+0xb4>
		mutex->owner_orig_prio = new_owner->base.prio;
    68f0:	00e50703          	lb	a4,14(a0)
    68f4:	00e42823          	sw	a4,16(s0)
    68f8:	06052c23          	sw	zero,120(a0)
		z_ready_thread(new_owner);
    68fc:	534000ef          	jal	ra,6e30 <z_ready_thread>
		z_reschedule(&lock, key);
    6900:	0000d537          	lui	a0,0xd
    6904:	00048593          	mv	a1,s1
    6908:	30850513          	addi	a0,a0,776 # d308 <sched_spinlock>
    690c:	200000ef          	jal	ra,6b0c <z_reschedule>
    6910:	f9dff06f          	j	68ac <z_impl_k_mutex_unlock+0x4c>
		mutex->lock_count = 0U;
    6914:	00042623          	sw	zero,12(s0)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    6918:	3004a4f3          	csrrs	s1,mstatus,s1
    691c:	f91ff06f          	j	68ac <z_impl_k_mutex_unlock+0x4c>
		return -EINVAL;
    6920:	fea00513          	li	a0,-22
}
    6924:	00008067          	ret

00006928 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    6928:	ff010113          	addi	sp,sp,-16
    692c:	00812423          	sw	s0,8(sp)
    6930:	00912223          	sw	s1,4(sp)
    6934:	00112623          	sw	ra,12(sp)
    6938:	00050493          	mv	s1,a0
	__asm__ volatile ("csrrc %0, mstatus, %1"
    693c:	00800413          	li	s0,8
    6940:	30043473          	csrrc	s0,mstatus,s0
	key = (mstatus & MSTATUS_IEN);
    6944:	00847413          	andi	s0,s0,8
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    6948:	1a1000ef          	jal	ra,72e8 <z_unpend_first_thread>

	if (thread != NULL) {
    694c:	02050663          	beqz	a0,6978 <z_impl_k_sem_give+0x50>
    6950:	06052c23          	sw	zero,120(a0)
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    6954:	4dc000ef          	jal	ra,6e30 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    6958:	00040593          	mv	a1,s0

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    695c:	00812403          	lw	s0,8(sp)
    6960:	00c12083          	lw	ra,12(sp)
    6964:	00412483          	lw	s1,4(sp)
	z_reschedule(&lock, key);
    6968:	0000d537          	lui	a0,0xd
    696c:	30850513          	addi	a0,a0,776 # d308 <sched_spinlock>
}
    6970:	01010113          	addi	sp,sp,16
	z_reschedule(&lock, key);
    6974:	1980006f          	j	6b0c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    6978:	0084a703          	lw	a4,8(s1)
    697c:	00c4a783          	lw	a5,12(s1)
    6980:	40e787b3          	sub	a5,a5,a4
    6984:	00f037b3          	snez	a5,a5
    6988:	00e787b3          	add	a5,a5,a4
    698c:	00f4a423          	sw	a5,8(s1)
}
    6990:	fc9ff06f          	j	6958 <z_impl_k_sem_give+0x30>

00006994 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    6994:	00058693          	mv	a3,a1
    6998:	00060713          	mv	a4,a2
	__asm__ volatile ("csrrc %0, mstatus, %1"
    699c:	00800793          	li	a5,8
    69a0:	3007b7f3          	csrrc	a5,mstatus,a5
	key = (mstatus & MSTATUS_IEN);
    69a4:	0087f593          	andi	a1,a5,8

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    69a8:	00852783          	lw	a5,8(a0)
    69ac:	00078c63          	beqz	a5,69c4 <z_impl_k_sem_take+0x30>
		sem->count--;
    69b0:	fff78793          	addi	a5,a5,-1
    69b4:	00f52423          	sw	a5,8(a0)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    69b8:	3005a5f3          	csrrs	a1,mstatus,a1
		k_spin_unlock(&lock, key);
		ret = 0;
    69bc:	00000513          	li	a0,0
		goto out;
    69c0:	00008067          	ret
	}

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    69c4:	00c6e7b3          	or	a5,a3,a2
    69c8:	00079863          	bnez	a5,69d8 <z_impl_k_sem_take+0x44>
    69cc:	3005a5f3          	csrrs	a1,mstatus,a1
		k_spin_unlock(&lock, key);
		ret = -EBUSY;
    69d0:	ff000513          	li	a0,-16

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    69d4:	00008067          	ret
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    69d8:	00050613          	mv	a2,a0
    69dc:	0000d537          	lui	a0,0xd
    69e0:	30850513          	addi	a0,a0,776 # d308 <sched_spinlock>
    69e4:	6d00006f          	j	70b4 <z_pend_curr>

000069e8 <sys_dlist_remove>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    69e8:	00452703          	lw	a4,4(a0)
	sys_dnode_t *const next = node->next;
    69ec:	00052783          	lw	a5,0(a0)

	prev->next = next;
    69f0:	00f72023          	sw	a5,0(a4)
	next->prev = prev;
    69f4:	00e7a223          	sw	a4,4(a5)
	node->next = NULL;
    69f8:	00052023          	sw	zero,0(a0)
	node->prev = NULL;
    69fc:	00052223          	sw	zero,4(a0)
	sys_dnode_init(node);
}
    6a00:	00008067          	ret

00006a04 <unpend_thread_no_timeout>:
		pend_locked(thread, wait_q, timeout);
	}
}

static inline void unpend_thread_no_timeout(struct k_thread *thread)
{
    6a04:	ff010113          	addi	sp,sp,-16
    6a08:	00812423          	sw	s0,8(sp)
    6a0c:	00112623          	sw	ra,12(sp)
    6a10:	00050413          	mv	s0,a0

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    6a14:	fd5ff0ef          	jal	ra,69e8 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6a18:	00d44783          	lbu	a5,13(s0)
}
    6a1c:	00c12083          	lw	ra,12(sp)
	thread->base.pended_on = NULL;
    6a20:	00042423          	sw	zero,8(s0)
    6a24:	ffd7f793          	andi	a5,a5,-3
    6a28:	00f406a3          	sb	a5,13(s0)
}
    6a2c:	00812403          	lw	s0,8(sp)
    6a30:	01010113          	addi	sp,sp,16
    6a34:	00008067          	ret

00006a38 <z_reset_time_slice>:
{
    6a38:	ff010113          	addi	sp,sp,-16
    6a3c:	00812423          	sw	s0,8(sp)
	if (slice_time != 0) {
    6a40:	0000d437          	lui	s0,0xd
    6a44:	04040413          	addi	s0,s0,64 # d040 <slice_time>
    6a48:	00042783          	lw	a5,0(s0)
{
    6a4c:	00112623          	sw	ra,12(sp)
	if (slice_time != 0) {
    6a50:	02078863          	beqz	a5,6a80 <z_reset_time_slice+0x48>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    6a54:	c50ff0ef          	jal	ra,5ea4 <sys_clock_elapsed>
    6a58:	00050793          	mv	a5,a0
    6a5c:	00042503          	lw	a0,0(s0)
}
    6a60:	00812403          	lw	s0,8(sp)
    6a64:	00c12083          	lw	ra,12(sp)
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    6a68:	00f507b3          	add	a5,a0,a5
    6a6c:	0000d737          	lui	a4,0xd
    6a70:	2ef72a23          	sw	a5,756(a4) # d2f4 <_kernel+0x10>
		z_set_timeout_expiry(slice_time, false);
    6a74:	00000593          	li	a1,0
}
    6a78:	01010113          	addi	sp,sp,16
		z_set_timeout_expiry(slice_time, false);
    6a7c:	5b10006f          	j	782c <z_set_timeout_expiry>
}
    6a80:	00c12083          	lw	ra,12(sp)
    6a84:	00812403          	lw	s0,8(sp)
    6a88:	01010113          	addi	sp,sp,16
    6a8c:	00008067          	ret

00006a90 <k_sched_time_slice_set>:
{
    6a90:	ff010113          	addi	sp,sp,-16
    6a94:	00812423          	sw	s0,8(sp)
    6a98:	00912223          	sw	s1,4(sp)
    6a9c:	00112623          	sw	ra,12(sp)
    6aa0:	00050793          	mv	a5,a0
    6aa4:	00058493          	mv	s1,a1
	__asm__ volatile ("csrrc %0, mstatus, %1"
    6aa8:	00800413          	li	s0,8
    6aac:	30043473          	csrrc	s0,mstatus,s0
		_current_cpu->slice_ticks = 0;
    6ab0:	0000d737          	lui	a4,0xd
		t += off;
    6ab4:	00950513          	addi	a0,a0,9
    6ab8:	2e072a23          	sw	zero,756(a4) # d2f4 <_kernel+0x10>
	key = (mstatus & MSTATUS_IEN);
    6abc:	00847413          	andi	s0,s0,8
    6ac0:	00f535b3          	sltu	a1,a0,a5
		if (result32 && (t < BIT64(32))) {
    6ac4:	02f56c63          	bltu	a0,a5,6afc <k_sched_time_slice_set+0x6c>
			return ((uint32_t)t) / (from_hz / to_hz);
    6ac8:	00a00793          	li	a5,10
    6acc:	02f55533          	divu	a0,a0,a5
		slice_time = k_ms_to_ticks_ceil32(slice);
    6ad0:	0000d7b7          	lui	a5,0xd
    6ad4:	04a7a023          	sw	a0,64(a5) # d040 <slice_time>
		slice_max_prio = prio;
    6ad8:	0000d7b7          	lui	a5,0xd
    6adc:	0297ae23          	sw	s1,60(a5) # d03c <slice_max_prio>
		z_reset_time_slice();
    6ae0:	f59ff0ef          	jal	ra,6a38 <z_reset_time_slice>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    6ae4:	30042473          	csrrs	s0,mstatus,s0
}
    6ae8:	00c12083          	lw	ra,12(sp)
    6aec:	00812403          	lw	s0,8(sp)
    6af0:	00412483          	lw	s1,4(sp)
    6af4:	01010113          	addi	sp,sp,16
    6af8:	00008067          	ret
			return t / ((uint64_t)from_hz / to_hz);
    6afc:	00a00613          	li	a2,10
    6b00:	00000693          	li	a3,0
    6b04:	839f90ef          	jal	ra,33c <__udivdi3>
    6b08:	fc9ff06f          	j	6ad0 <k_sched_time_slice_set+0x40>

00006b0c <z_reschedule>:
	return (key & MSTATUS_IEN) == MSTATUS_IEN;
    6b0c:	0085f713          	andi	a4,a1,8
{
    6b10:	00058513          	mv	a0,a1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    6b14:	02070263          	beqz	a4,6b38 <z_reschedule+0x2c>
FUNC_NORETURN void z_riscv_fatal_error(unsigned int reason,
				       const z_arch_esf_t *esf);

static inline bool arch_is_in_isr(void)
{
	return _kernel.cpus[0].nested != 0U;
    6b18:	0000d7b7          	lui	a5,0xd
    6b1c:	2e478793          	addi	a5,a5,740 # d2e4 <_kernel>
	if (resched(key.key) && need_swap()) {
    6b20:	0007a683          	lw	a3,0(a5)
    6b24:	00069a63          	bnez	a3,6b38 <z_reschedule+0x2c>
    6b28:	0187a683          	lw	a3,24(a5)
    6b2c:	0087a783          	lw	a5,8(a5)
    6b30:	00f68463          	beq	a3,a5,6b38 <z_reschedule+0x2c>
    6b34:	f98f906f          	j	2cc <arch_swap>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    6b38:	30072773          	csrrs	a4,mstatus,a4
}
    6b3c:	00008067          	ret

00006b40 <z_reschedule_irqlock>:
	return (key & MSTATUS_IEN) == MSTATUS_IEN;
    6b40:	00857793          	andi	a5,a0,8
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    6b44:	00078a63          	beqz	a5,6b58 <z_reschedule_irqlock+0x18>
	if (resched(key)) {
    6b48:	0000d737          	lui	a4,0xd
    6b4c:	2e472703          	lw	a4,740(a4) # d2e4 <_kernel>
    6b50:	00071463          	bnez	a4,6b58 <z_reschedule_irqlock+0x18>
    6b54:	f78f906f          	j	2cc <arch_swap>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    6b58:	3007a7f3          	csrrs	a5,mstatus,a5
}
    6b5c:	00008067          	ret

00006b60 <z_reschedule_unlocked>:
	__asm__ volatile ("csrrc %0, mstatus, %1"
    6b60:	00800513          	li	a0,8
    6b64:	30053573          	csrrc	a0,mstatus,a0
	(void) z_reschedule_irqlock(arch_irq_lock());
    6b68:	00857513          	andi	a0,a0,8
    6b6c:	fd5ff06f          	j	6b40 <z_reschedule_irqlock>

00006b70 <k_sched_lock>:
    6b70:	00800793          	li	a5,8
    6b74:	3007b7f3          	csrrc	a5,mstatus,a5
	--_current->base.sched_locked;
    6b78:	0000d737          	lui	a4,0xd
    6b7c:	2ec72683          	lw	a3,748(a4) # d2ec <_kernel+0x8>
    6b80:	00f6c703          	lbu	a4,15(a3)
    6b84:	fff70713          	addi	a4,a4,-1
    6b88:	00e687a3          	sb	a4,15(a3)
	key = (mstatus & MSTATUS_IEN);
    6b8c:	0087f793          	andi	a5,a5,8
	__asm__ volatile ("csrrs %0, mstatus, %1"
    6b90:	3007a7f3          	csrrs	a5,mstatus,a5
}
    6b94:	00008067          	ret

00006b98 <z_priq_dumb_best>:
}

struct k_thread *z_priq_dumb_best(sys_dlist_t *pq)
{
    6b98:	00050793          	mv	a5,a0
	return list->head == list;
    6b9c:	00052503          	lw	a0,0(a0)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6ba0:	00a79463          	bne	a5,a0,6ba8 <z_priq_dumb_best+0x10>
	struct k_thread *thread = NULL;
    6ba4:	00000513          	li	a0,0

	if (n != NULL) {
		thread = CONTAINER_OF(n, struct k_thread, base.qnode_dlist);
	}
	return thread;
}
    6ba8:	00008067          	ret

00006bac <update_cache>:
{
    6bac:	ff010113          	addi	sp,sp,-16
    6bb0:	01212023          	sw	s2,0(sp)
    6bb4:	00050913          	mv	s2,a0
	thread = _priq_run_best(&_kernel.ready_q.runq);
    6bb8:	0000d537          	lui	a0,0xd
    6bbc:	30050513          	addi	a0,a0,768 # d300 <_kernel+0x1c>
{
    6bc0:	00812423          	sw	s0,8(sp)
    6bc4:	00912223          	sw	s1,4(sp)
    6bc8:	00112623          	sw	ra,12(sp)
    6bcc:	0000d437          	lui	s0,0xd
	thread = _priq_run_best(&_kernel.ready_q.runq);
    6bd0:	fc9ff0ef          	jal	ra,6b98 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    6bd4:	2e440413          	addi	s0,s0,740 # d2e4 <_kernel>
    6bd8:	00050493          	mv	s1,a0
    6bdc:	00051463          	bnez	a0,6be4 <update_cache+0x38>
    6be0:	00c42483          	lw	s1,12(s0)
	if (z_is_thread_prevented_from_running(_current)) {
    6be4:	00842783          	lw	a5,8(s0)
	if (preempt_ok != 0) {
    6be8:	02091c63          	bnez	s2,6c20 <update_cache+0x74>
	if (z_is_thread_prevented_from_running(_current)) {
    6bec:	00d7c703          	lbu	a4,13(a5)
    6bf0:	01f77713          	andi	a4,a4,31
    6bf4:	02071663          	bnez	a4,6c20 <update_cache+0x74>
	if (is_preempt(_current) || is_metairq(thread)) {
    6bf8:	00e7d683          	lhu	a3,14(a5)
    6bfc:	07f00713          	li	a4,127
    6c00:	02d77063          	bgeu	a4,a3,6c20 <update_cache+0x74>
		_kernel.ready_q.cache = _current;
    6c04:	00f42c23          	sw	a5,24(s0)
}
    6c08:	00c12083          	lw	ra,12(sp)
    6c0c:	00812403          	lw	s0,8(sp)
    6c10:	00412483          	lw	s1,4(sp)
    6c14:	00012903          	lw	s2,0(sp)
    6c18:	01010113          	addi	sp,sp,16
    6c1c:	00008067          	ret
		if (thread != _current) {
    6c20:	00f48463          	beq	s1,a5,6c28 <update_cache+0x7c>
			z_reset_time_slice();
    6c24:	e15ff0ef          	jal	ra,6a38 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    6c28:	00942c23          	sw	s1,24(s0)
}
    6c2c:	fddff06f          	j	6c08 <update_cache+0x5c>

00006c30 <move_thread_to_end_of_prio_q>:
{
    6c30:	ff010113          	addi	sp,sp,-16
    6c34:	00812423          	sw	s0,8(sp)
    6c38:	00112623          	sw	ra,12(sp)
	return (thread->base.thread_state & state) != 0U;
    6c3c:	00d54783          	lbu	a5,13(a0)
    6c40:	00050413          	mv	s0,a0
	if (z_is_thread_queued(thread)) {
    6c44:	01879713          	slli	a4,a5,0x18
    6c48:	41875713          	srai	a4,a4,0x18
    6c4c:	00075863          	bgez	a4,6c5c <move_thread_to_end_of_prio_q+0x2c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6c50:	07f7f793          	andi	a5,a5,127
    6c54:	00f506a3          	sb	a5,13(a0)
	sys_dlist_remove(&thread->base.qnode_dlist);
    6c58:	d91ff0ef          	jal	ra,69e8 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    6c5c:	00d44783          	lbu	a5,13(s0)
	return list->head == list;
    6c60:	0000d737          	lui	a4,0xd
    6c64:	2e470693          	addi	a3,a4,740 # d2e4 <_kernel>
    6c68:	f807e793          	ori	a5,a5,-128
    6c6c:	00f406a3          	sb	a5,13(s0)
    6c70:	01c6a783          	lw	a5,28(a3)
	return (node == list->tail) ? NULL : node->next;
    6c74:	0206a583          	lw	a1,32(a3)
    6c78:	0000d6b7          	lui	a3,0xd
    6c7c:	30068693          	addi	a3,a3,768 # d300 <_kernel+0x1c>
    6c80:	2e470713          	addi	a4,a4,740
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6c84:	04d78c63          	beq	a5,a3,6cdc <move_thread_to_end_of_prio_q+0xac>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6c88:	04078a63          	beqz	a5,6cdc <move_thread_to_end_of_prio_q+0xac>
	int32_t b1 = thread_1->base.prio;
    6c8c:	00e40503          	lb	a0,14(s0)
	int32_t b2 = thread_2->base.prio;
    6c90:	00e78603          	lb	a2,14(a5)
	if (b1 != b2) {
    6c94:	02c50e63          	beq	a0,a2,6cd0 <move_thread_to_end_of_prio_q+0xa0>
		return b2 - b1;
    6c98:	40a60633          	sub	a2,a2,a0
		if (z_sched_prio_cmp(thread, t) > 0) {
    6c9c:	02c05a63          	blez	a2,6cd0 <move_thread_to_end_of_prio_q+0xa0>
	sys_dnode_t *const prev = successor->prev;
    6ca0:	0047a683          	lw	a3,4(a5)
	node->next = successor;
    6ca4:	00f42023          	sw	a5,0(s0)
	node->prev = prev;
    6ca8:	00d42223          	sw	a3,4(s0)
	prev->next = node;
    6cac:	0086a023          	sw	s0,0(a3)
	successor->prev = node;
    6cb0:	0087a223          	sw	s0,4(a5)
	update_cache(thread == _current);
    6cb4:	00872503          	lw	a0,8(a4)
}
    6cb8:	00c12083          	lw	ra,12(sp)
	update_cache(thread == _current);
    6cbc:	40850533          	sub	a0,a0,s0
}
    6cc0:	00812403          	lw	s0,8(sp)
	update_cache(thread == _current);
    6cc4:	00153513          	seqz	a0,a0
}
    6cc8:	01010113          	addi	sp,sp,16
	update_cache(thread == _current);
    6ccc:	ee1ff06f          	j	6bac <update_cache>
	return (node == list->tail) ? NULL : node->next;
    6cd0:	00b78663          	beq	a5,a1,6cdc <move_thread_to_end_of_prio_q+0xac>
    6cd4:	0007a783          	lw	a5,0(a5)
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6cd8:	fa079ce3          	bnez	a5,6c90 <move_thread_to_end_of_prio_q+0x60>
	node->next = list;
    6cdc:	00d42023          	sw	a3,0(s0)
	node->prev = tail;
    6ce0:	00b42223          	sw	a1,4(s0)
	tail->next = node;
    6ce4:	0085a023          	sw	s0,0(a1)
	list->tail = node;
    6ce8:	02872023          	sw	s0,32(a4)
}
    6cec:	fc9ff06f          	j	6cb4 <move_thread_to_end_of_prio_q+0x84>

00006cf0 <z_time_slice>:
{
    6cf0:	ff010113          	addi	sp,sp,-16
    6cf4:	00812423          	sw	s0,8(sp)
    6cf8:	00112623          	sw	ra,12(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    6cfc:	00800413          	li	s0,8
    6d00:	30043473          	csrrc	s0,mstatus,s0
	if (slice_time && sliceable(_current)) {
    6d04:	0000d7b7          	lui	a5,0xd
    6d08:	0407a703          	lw	a4,64(a5) # d040 <slice_time>
    6d0c:	0000d7b7          	lui	a5,0xd
	key = (mstatus & MSTATUS_IEN);
    6d10:	00847413          	andi	s0,s0,8
    6d14:	2e478793          	addi	a5,a5,740 # d2e4 <_kernel>
    6d18:	06070863          	beqz	a4,6d88 <z_time_slice+0x98>
    6d1c:	00050693          	mv	a3,a0
    6d20:	0087a503          	lw	a0,8(a5)
		&& !z_is_idle_thread_object(thread);
    6d24:	07f00713          	li	a4,127
    6d28:	00e55603          	lhu	a2,14(a0)
    6d2c:	04c76e63          	bltu	a4,a2,6d88 <z_time_slice+0x98>
		&& !z_is_thread_prevented_from_running(thread)
    6d30:	00d54703          	lbu	a4,13(a0)
    6d34:	01f77713          	andi	a4,a4,31
    6d38:	04071863          	bnez	a4,6d88 <z_time_slice+0x98>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    6d3c:	0000d737          	lui	a4,0xd
    6d40:	00e50603          	lb	a2,14(a0)
    6d44:	03c72703          	lw	a4,60(a4) # d03c <slice_max_prio>
    6d48:	04e64063          	blt	a2,a4,6d88 <z_time_slice+0x98>
		&& !z_is_idle_thread_object(thread);
    6d4c:	0000d737          	lui	a4,0xd
    6d50:	1d870713          	addi	a4,a4,472 # d1d8 <z_idle_threads>
    6d54:	02e50a63          	beq	a0,a4,6d88 <z_time_slice+0x98>
		if (ticks >= _current_cpu->slice_ticks) {
    6d58:	0107a703          	lw	a4,16(a5)
    6d5c:	02e6c063          	blt	a3,a4,6d7c <z_time_slice+0x8c>
			move_thread_to_end_of_prio_q(_current);
    6d60:	ed1ff0ef          	jal	ra,6c30 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
    6d64:	cd5ff0ef          	jal	ra,6a38 <z_reset_time_slice>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    6d68:	30042473          	csrrs	s0,mstatus,s0
}
    6d6c:	00c12083          	lw	ra,12(sp)
    6d70:	00812403          	lw	s0,8(sp)
    6d74:	01010113          	addi	sp,sp,16
    6d78:	00008067          	ret
			_current_cpu->slice_ticks -= ticks;
    6d7c:	40d70733          	sub	a4,a4,a3
    6d80:	00e7a823          	sw	a4,16(a5)
    6d84:	fe5ff06f          	j	6d68 <z_time_slice+0x78>
		_current_cpu->slice_ticks = 0;
    6d88:	0007a823          	sw	zero,16(a5)
    6d8c:	fddff06f          	j	6d68 <z_time_slice+0x78>

00006d90 <ready_thread>:
    6d90:	00d54783          	lbu	a5,13(a0)
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    6d94:	01879713          	slli	a4,a5,0x18
    6d98:	41875713          	srai	a4,a4,0x18
    6d9c:	08074863          	bltz	a4,6e2c <ready_thread+0x9c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    6da0:	01f7f713          	andi	a4,a5,31
    6da4:	08071463          	bnez	a4,6e2c <ready_thread+0x9c>
    6da8:	01852703          	lw	a4,24(a0)
    6dac:	08071063          	bnez	a4,6e2c <ready_thread+0x9c>
	thread->base.thread_state |= _THREAD_QUEUED;
    6db0:	f807e793          	ori	a5,a5,-128
	return list->head == list;
    6db4:	0000d737          	lui	a4,0xd
    6db8:	2e470693          	addi	a3,a4,740 # d2e4 <_kernel>
    6dbc:	00f506a3          	sb	a5,13(a0)
    6dc0:	01c6a783          	lw	a5,28(a3)
	return (node == list->tail) ? NULL : node->next;
    6dc4:	0206a583          	lw	a1,32(a3)
    6dc8:	0000d6b7          	lui	a3,0xd
    6dcc:	30068693          	addi	a3,a3,768 # d300 <_kernel+0x1c>
    6dd0:	2e470713          	addi	a4,a4,740
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6dd4:	04d78263          	beq	a5,a3,6e18 <ready_thread+0x88>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6dd8:	04078063          	beqz	a5,6e18 <ready_thread+0x88>
	int32_t b1 = thread_1->base.prio;
    6ddc:	00e50803          	lb	a6,14(a0)
	int32_t b2 = thread_2->base.prio;
    6de0:	00e78603          	lb	a2,14(a5)
	if (b1 != b2) {
    6de4:	02c80463          	beq	a6,a2,6e0c <ready_thread+0x7c>
		return b2 - b1;
    6de8:	41060633          	sub	a2,a2,a6
		if (z_sched_prio_cmp(thread, t) > 0) {
    6dec:	02c05063          	blez	a2,6e0c <ready_thread+0x7c>
	sys_dnode_t *const prev = successor->prev;
    6df0:	0047a703          	lw	a4,4(a5)
	node->next = successor;
    6df4:	00f52023          	sw	a5,0(a0)
	node->prev = prev;
    6df8:	00e52223          	sw	a4,4(a0)
	prev->next = node;
    6dfc:	00a72023          	sw	a0,0(a4)
	successor->prev = node;
    6e00:	00a7a223          	sw	a0,4(a5)
		update_cache(0);
    6e04:	00000513          	li	a0,0
    6e08:	da5ff06f          	j	6bac <update_cache>
	return (node == list->tail) ? NULL : node->next;
    6e0c:	00b78663          	beq	a5,a1,6e18 <ready_thread+0x88>
    6e10:	0007a783          	lw	a5,0(a5)
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6e14:	fc0796e3          	bnez	a5,6de0 <ready_thread+0x50>
	node->next = list;
    6e18:	00d52023          	sw	a3,0(a0)
	node->prev = tail;
    6e1c:	00b52223          	sw	a1,4(a0)
	tail->next = node;
    6e20:	00a5a023          	sw	a0,0(a1)
	list->tail = node;
    6e24:	02a72023          	sw	a0,32(a4)
}
    6e28:	fddff06f          	j	6e04 <ready_thread+0x74>
}
    6e2c:	00008067          	ret

00006e30 <z_ready_thread>:
{
    6e30:	ff010113          	addi	sp,sp,-16
    6e34:	00812423          	sw	s0,8(sp)
    6e38:	00112623          	sw	ra,12(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    6e3c:	00800413          	li	s0,8
    6e40:	30043473          	csrrc	s0,mstatus,s0
			ready_thread(thread);
    6e44:	f4dff0ef          	jal	ra,6d90 <ready_thread>
	key = (mstatus & MSTATUS_IEN);
    6e48:	00847413          	andi	s0,s0,8
	__asm__ volatile ("csrrs %0, mstatus, %1"
    6e4c:	30042473          	csrrs	s0,mstatus,s0
}
    6e50:	00c12083          	lw	ra,12(sp)
    6e54:	00812403          	lw	s0,8(sp)
    6e58:	01010113          	addi	sp,sp,16
    6e5c:	00008067          	ret

00006e60 <z_sched_start>:
	__asm__ volatile ("csrrc %0, mstatus, %1"
    6e60:	00800593          	li	a1,8
    6e64:	3005b5f3          	csrrc	a1,mstatus,a1
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    6e68:	00d54703          	lbu	a4,13(a0)
	key = (mstatus & MSTATUS_IEN);
    6e6c:	0085f593          	andi	a1,a1,8
	if (z_has_thread_started(thread)) {
    6e70:	00477693          	andi	a3,a4,4
    6e74:	00069663          	bnez	a3,6e80 <z_sched_start+0x20>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    6e78:	3005a5f3          	csrrs	a1,mstatus,a1
		return;
    6e7c:	00008067          	ret
{
    6e80:	fe010113          	addi	sp,sp,-32
    6e84:	00112e23          	sw	ra,28(sp)
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6e88:	ffb77713          	andi	a4,a4,-5
    6e8c:	00e506a3          	sb	a4,13(a0)
    6e90:	00b12623          	sw	a1,12(sp)
	ready_thread(thread);
    6e94:	efdff0ef          	jal	ra,6d90 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    6e98:	00c12583          	lw	a1,12(sp)
}
    6e9c:	01c12083          	lw	ra,28(sp)
	z_reschedule(&sched_spinlock, key);
    6ea0:	0000d537          	lui	a0,0xd
    6ea4:	30850513          	addi	a0,a0,776 # d308 <sched_spinlock>
}
    6ea8:	02010113          	addi	sp,sp,32
	z_reschedule(&sched_spinlock, key);
    6eac:	c61ff06f          	j	6b0c <z_reschedule>

00006eb0 <z_impl_k_thread_resume>:
	__asm__ volatile ("csrrc %0, mstatus, %1"
    6eb0:	00800593          	li	a1,8
    6eb4:	3005b5f3          	csrrc	a1,mstatus,a1
	return (thread->base.thread_state & _THREAD_SUSPENDED) != 0U;
    6eb8:	00d54703          	lbu	a4,13(a0)
	key = (mstatus & MSTATUS_IEN);
    6ebc:	0085f593          	andi	a1,a1,8
	if (!z_is_thread_suspended(thread)) {
    6ec0:	01077693          	andi	a3,a4,16
    6ec4:	00069663          	bnez	a3,6ed0 <z_impl_k_thread_resume+0x20>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    6ec8:	3005a5f3          	csrrs	a1,mstatus,a1
		return;
    6ecc:	00008067          	ret
{
    6ed0:	fe010113          	addi	sp,sp,-32
    6ed4:	00112e23          	sw	ra,28(sp)
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    6ed8:	fef77713          	andi	a4,a4,-17
    6edc:	00e506a3          	sb	a4,13(a0)
    6ee0:	00b12623          	sw	a1,12(sp)
	ready_thread(thread);
    6ee4:	eadff0ef          	jal	ra,6d90 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    6ee8:	00c12583          	lw	a1,12(sp)
}
    6eec:	01c12083          	lw	ra,28(sp)
	z_reschedule(&sched_spinlock, key);
    6ef0:	0000d537          	lui	a0,0xd
    6ef4:	30850513          	addi	a0,a0,776 # d308 <sched_spinlock>
}
    6ef8:	02010113          	addi	sp,sp,32
	z_reschedule(&sched_spinlock, key);
    6efc:	c11ff06f          	j	6b0c <z_reschedule>

00006f00 <z_thread_timeout>:
{
    6f00:	fe010113          	addi	sp,sp,-32
    6f04:	00912a23          	sw	s1,20(sp)
    6f08:	00112e23          	sw	ra,28(sp)
    6f0c:	00812c23          	sw	s0,24(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    6f10:	00800493          	li	s1,8
    6f14:	3004b4f3          	csrrc	s1,mstatus,s1
		if (!killed) {
    6f18:	ff554783          	lbu	a5,-11(a0)
	key = (mstatus & MSTATUS_IEN);
    6f1c:	0084f493          	andi	s1,s1,8
    6f20:	0287f793          	andi	a5,a5,40
    6f24:	02079863          	bnez	a5,6f54 <z_thread_timeout+0x54>
    6f28:	00050413          	mv	s0,a0
			if (thread->base.pended_on != NULL) {
    6f2c:	ff042783          	lw	a5,-16(s0)
	struct k_thread *thread = CONTAINER_OF(timeout,
    6f30:	fe850513          	addi	a0,a0,-24
			if (thread->base.pended_on != NULL) {
    6f34:	00078863          	beqz	a5,6f44 <z_thread_timeout+0x44>
				unpend_thread_no_timeout(thread);
    6f38:	00a12623          	sw	a0,12(sp)
    6f3c:	ac9ff0ef          	jal	ra,6a04 <unpend_thread_no_timeout>
    6f40:	00c12503          	lw	a0,12(sp)
    6f44:	ff544783          	lbu	a5,-11(s0)
    6f48:	feb7f793          	andi	a5,a5,-21
    6f4c:	fef40aa3          	sb	a5,-11(s0)
			ready_thread(thread);
    6f50:	e41ff0ef          	jal	ra,6d90 <ready_thread>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    6f54:	3004a4f3          	csrrs	s1,mstatus,s1
}
    6f58:	01c12083          	lw	ra,28(sp)
    6f5c:	01812403          	lw	s0,24(sp)
    6f60:	01412483          	lw	s1,20(sp)
    6f64:	02010113          	addi	sp,sp,32
    6f68:	00008067          	ret

00006f6c <unready_thread>:
{
    6f6c:	ff010113          	addi	sp,sp,-16
    6f70:	00812423          	sw	s0,8(sp)
    6f74:	00112623          	sw	ra,12(sp)
	return (thread->base.thread_state & state) != 0U;
    6f78:	00d54783          	lbu	a5,13(a0)
    6f7c:	00050413          	mv	s0,a0
	if (z_is_thread_queued(thread)) {
    6f80:	01879713          	slli	a4,a5,0x18
    6f84:	41875713          	srai	a4,a4,0x18
    6f88:	00075863          	bgez	a4,6f98 <unready_thread+0x2c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6f8c:	07f7f793          	andi	a5,a5,127
    6f90:	00f506a3          	sb	a5,13(a0)
	sys_dlist_remove(&thread->base.qnode_dlist);
    6f94:	a55ff0ef          	jal	ra,69e8 <sys_dlist_remove>
	update_cache(thread == _current);
    6f98:	0000d7b7          	lui	a5,0xd
    6f9c:	2ec7a503          	lw	a0,748(a5) # d2ec <_kernel+0x8>
}
    6fa0:	00c12083          	lw	ra,12(sp)
	update_cache(thread == _current);
    6fa4:	40850533          	sub	a0,a0,s0
}
    6fa8:	00812403          	lw	s0,8(sp)
	update_cache(thread == _current);
    6fac:	00153513          	seqz	a0,a0
}
    6fb0:	01010113          	addi	sp,sp,16
	update_cache(thread == _current);
    6fb4:	bf9ff06f          	j	6bac <update_cache>

00006fb8 <add_to_waitq_locked>:
{
    6fb8:	ff010113          	addi	sp,sp,-16
    6fbc:	00812423          	sw	s0,8(sp)
    6fc0:	00912223          	sw	s1,4(sp)
    6fc4:	00050413          	mv	s0,a0
    6fc8:	00112623          	sw	ra,12(sp)
    6fcc:	00058493          	mv	s1,a1
	unready_thread(thread);
    6fd0:	f9dff0ef          	jal	ra,6f6c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    6fd4:	00d44783          	lbu	a5,13(s0)
    6fd8:	0027e793          	ori	a5,a5,2
    6fdc:	00f406a3          	sb	a5,13(s0)
	if (wait_q != NULL) {
    6fe0:	02048e63          	beqz	s1,701c <add_to_waitq_locked+0x64>
	return list->head == list;
    6fe4:	0004a783          	lw	a5,0(s1)
		thread->base.pended_on = wait_q;
    6fe8:	00942423          	sw	s1,8(s0)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6fec:	04f48a63          	beq	s1,a5,7040 <add_to_waitq_locked+0x88>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6ff0:	04078863          	beqz	a5,7040 <add_to_waitq_locked+0x88>
	int32_t b1 = thread_1->base.prio;
    6ff4:	00e40683          	lb	a3,14(s0)
	int32_t b2 = thread_2->base.prio;
    6ff8:	00e78703          	lb	a4,14(a5)
	if (b1 != b2) {
    6ffc:	02e68a63          	beq	a3,a4,7030 <add_to_waitq_locked+0x78>
		return b2 - b1;
    7000:	40d70733          	sub	a4,a4,a3
		if (z_sched_prio_cmp(thread, t) > 0) {
    7004:	02e05663          	blez	a4,7030 <add_to_waitq_locked+0x78>
	sys_dnode_t *const prev = successor->prev;
    7008:	0047a703          	lw	a4,4(a5)
	node->next = successor;
    700c:	00f42023          	sw	a5,0(s0)
	node->prev = prev;
    7010:	00e42223          	sw	a4,4(s0)
	prev->next = node;
    7014:	00872023          	sw	s0,0(a4)
	successor->prev = node;
    7018:	0087a223          	sw	s0,4(a5)
}
    701c:	00c12083          	lw	ra,12(sp)
    7020:	00812403          	lw	s0,8(sp)
    7024:	00412483          	lw	s1,4(sp)
    7028:	01010113          	addi	sp,sp,16
    702c:	00008067          	ret
	return (node == list->tail) ? NULL : node->next;
    7030:	0044a703          	lw	a4,4(s1)
    7034:	00e78663          	beq	a5,a4,7040 <add_to_waitq_locked+0x88>
    7038:	0007a783          	lw	a5,0(a5)
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    703c:	fa079ee3          	bnez	a5,6ff8 <add_to_waitq_locked+0x40>
	sys_dnode_t *const tail = list->tail;
    7040:	0044a783          	lw	a5,4(s1)
	node->next = list;
    7044:	00942023          	sw	s1,0(s0)
	node->prev = tail;
    7048:	00f42223          	sw	a5,4(s0)
	tail->next = node;
    704c:	0087a023          	sw	s0,0(a5)
	list->tail = node;
    7050:	0084a223          	sw	s0,4(s1)
}
    7054:	fc9ff06f          	j	701c <add_to_waitq_locked+0x64>

00007058 <pend_locked>:
{
    7058:	fe010113          	addi	sp,sp,-32
    705c:	00812c23          	sw	s0,24(sp)
    7060:	00c12623          	sw	a2,12(sp)
    7064:	00d12423          	sw	a3,8(sp)
    7068:	00112e23          	sw	ra,28(sp)
    706c:	00050413          	mv	s0,a0
	add_to_waitq_locked(thread, wait_q);
    7070:	f49ff0ef          	jal	ra,6fb8 <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
    7074:	00c12603          	lw	a2,12(sp)
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7078:	fff00593          	li	a1,-1
    707c:	00812683          	lw	a3,8(sp)
    7080:	00b61463          	bne	a2,a1,7088 <pend_locked+0x30>
    7084:	02c68063          	beq	a3,a2,70a4 <pend_locked+0x4c>
    7088:	01840513          	addi	a0,s0,24
}
    708c:	01812403          	lw	s0,24(sp)
    7090:	01c12083          	lw	ra,28(sp)
    7094:	000075b7          	lui	a1,0x7
    7098:	f0058593          	addi	a1,a1,-256 # 6f00 <z_thread_timeout>
    709c:	02010113          	addi	sp,sp,32
    70a0:	5980006f          	j	7638 <z_add_timeout>
    70a4:	01c12083          	lw	ra,28(sp)
    70a8:	01812403          	lw	s0,24(sp)
    70ac:	02010113          	addi	sp,sp,32
    70b0:	00008067          	ret

000070b4 <z_pend_curr>:
{
    70b4:	ff010113          	addi	sp,sp,-16
    70b8:	00812423          	sw	s0,8(sp)
    70bc:	00112623          	sw	ra,12(sp)
    70c0:	00058413          	mv	s0,a1
	__asm__ volatile ("csrrc %0, mstatus, %1"
    70c4:	00800793          	li	a5,8
    70c8:	00060593          	mv	a1,a2
    70cc:	00068613          	mv	a2,a3
    70d0:	00070693          	mv	a3,a4
    70d4:	3007b7f3          	csrrc	a5,mstatus,a5
	pend_locked(_current, wait_q, timeout);
    70d8:	0000d7b7          	lui	a5,0xd
    70dc:	2ec7a503          	lw	a0,748(a5) # d2ec <_kernel+0x8>
    70e0:	f79ff0ef          	jal	ra,7058 <pend_locked>
    70e4:	00040513          	mv	a0,s0
}
    70e8:	00812403          	lw	s0,8(sp)
    70ec:	00c12083          	lw	ra,12(sp)
    70f0:	01010113          	addi	sp,sp,16
    70f4:	9d8f906f          	j	2cc <arch_swap>

000070f8 <z_set_prio>:
{
    70f8:	ff010113          	addi	sp,sp,-16
    70fc:	00812423          	sw	s0,8(sp)
    7100:	01212023          	sw	s2,0(sp)
    7104:	00112623          	sw	ra,12(sp)
    7108:	00912223          	sw	s1,4(sp)
    710c:	00050413          	mv	s0,a0
    7110:	00800913          	li	s2,8
    7114:	30093973          	csrrc	s2,mstatus,s2
	uint8_t state = thread->base.thread_state;
    7118:	00d54783          	lbu	a5,13(a0)
				thread->base.prio = prio;
    711c:	01859493          	slli	s1,a1,0x18
	key = (mstatus & MSTATUS_IEN);
    7120:	00897913          	andi	s2,s2,8
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    7124:	01f7f713          	andi	a4,a5,31
    7128:	4184d493          	srai	s1,s1,0x18
    712c:	0a071e63          	bnez	a4,71e8 <z_set_prio+0xf0>
		if (need_sched) {
    7130:	01852703          	lw	a4,24(a0)
    7134:	0a071a63          	bnez	a4,71e8 <z_set_prio+0xf0>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7138:	07f7f793          	andi	a5,a5,127
    713c:	00f506a3          	sb	a5,13(a0)
	sys_dlist_remove(&thread->base.qnode_dlist);
    7140:	8a9ff0ef          	jal	ra,69e8 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    7144:	00d44783          	lbu	a5,13(s0)
	return list->head == list;
    7148:	0000d737          	lui	a4,0xd
    714c:	0000d6b7          	lui	a3,0xd
    7150:	f807e793          	ori	a5,a5,-128
    7154:	00f406a3          	sb	a5,13(s0)
    7158:	2e470793          	addi	a5,a4,740 # d2e4 <_kernel>
    715c:	01c7a783          	lw	a5,28(a5)
				thread->base.prio = prio;
    7160:	00940723          	sb	s1,14(s0)
    7164:	30068693          	addi	a3,a3,768 # d300 <_kernel+0x1c>
    7168:	2e470713          	addi	a4,a4,740
	return sys_dlist_is_empty(list) ? NULL : list->head;
    716c:	06d78263          	beq	a5,a3,71d0 <z_set_prio+0xd8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7170:	06078063          	beqz	a5,71d0 <z_set_prio+0xd8>
	return (node == list->tail) ? NULL : node->next;
    7174:	02072583          	lw	a1,32(a4)
	int32_t b2 = thread_2->base.prio;
    7178:	00e78603          	lb	a2,14(a5)
	if (b1 != b2) {
    717c:	04c48463          	beq	s1,a2,71c4 <z_set_prio+0xcc>
		return b2 - b1;
    7180:	40960633          	sub	a2,a2,s1
		if (z_sched_prio_cmp(thread, t) > 0) {
    7184:	04c05063          	blez	a2,71c4 <z_set_prio+0xcc>
	sys_dnode_t *const prev = successor->prev;
    7188:	0047a703          	lw	a4,4(a5)
	node->next = successor;
    718c:	00f42023          	sw	a5,0(s0)
	node->prev = prev;
    7190:	00e42223          	sw	a4,4(s0)
	prev->next = node;
    7194:	00872023          	sw	s0,0(a4)
	successor->prev = node;
    7198:	0087a223          	sw	s0,4(a5)
			update_cache(1);
    719c:	00100513          	li	a0,1
    71a0:	a0dff0ef          	jal	ra,6bac <update_cache>
    71a4:	00100513          	li	a0,1
	__asm__ volatile ("csrrs %0, mstatus, %1"
    71a8:	30092973          	csrrs	s2,mstatus,s2
}
    71ac:	00c12083          	lw	ra,12(sp)
    71b0:	00812403          	lw	s0,8(sp)
    71b4:	00412483          	lw	s1,4(sp)
    71b8:	00012903          	lw	s2,0(sp)
    71bc:	01010113          	addi	sp,sp,16
    71c0:	00008067          	ret
	return (node == list->tail) ? NULL : node->next;
    71c4:	00b78663          	beq	a5,a1,71d0 <z_set_prio+0xd8>
    71c8:	0007a783          	lw	a5,0(a5)
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    71cc:	fa0796e3          	bnez	a5,7178 <z_set_prio+0x80>
	sys_dnode_t *const tail = list->tail;
    71d0:	02072783          	lw	a5,32(a4)
	node->next = list;
    71d4:	00d42023          	sw	a3,0(s0)
	node->prev = tail;
    71d8:	00f42223          	sw	a5,4(s0)
	tail->next = node;
    71dc:	0087a023          	sw	s0,0(a5)
	list->tail = node;
    71e0:	02872023          	sw	s0,32(a4)
}
    71e4:	fb9ff06f          	j	719c <z_set_prio+0xa4>
			thread->base.prio = prio;
    71e8:	00940723          	sb	s1,14(s0)
    71ec:	00000513          	li	a0,0
    71f0:	fb9ff06f          	j	71a8 <z_set_prio+0xb0>

000071f4 <z_impl_k_thread_suspend>:
{
    71f4:	ff010113          	addi	sp,sp,-16
    71f8:	00812423          	sw	s0,8(sp)
    71fc:	00050413          	mv	s0,a0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    7200:	01850513          	addi	a0,a0,24
    7204:	00912223          	sw	s1,4(sp)
    7208:	00112623          	sw	ra,12(sp)
    720c:	01212023          	sw	s2,0(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    7210:	00800493          	li	s1,8
    7214:	5d4000ef          	jal	ra,77e8 <z_abort_timeout>
    7218:	3004b4f3          	csrrc	s1,mstatus,s1
	return (thread->base.thread_state & state) != 0U;
    721c:	00d44783          	lbu	a5,13(s0)
	key = (mstatus & MSTATUS_IEN);
    7220:	0084f493          	andi	s1,s1,8
		if (z_is_thread_queued(thread)) {
    7224:	01879713          	slli	a4,a5,0x18
    7228:	41875713          	srai	a4,a4,0x18
    722c:	00075a63          	bgez	a4,7240 <z_impl_k_thread_suspend+0x4c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7230:	07f7f793          	andi	a5,a5,127
    7234:	00f406a3          	sb	a5,13(s0)
	sys_dlist_remove(&thread->base.qnode_dlist);
    7238:	00040513          	mv	a0,s0
    723c:	facff0ef          	jal	ra,69e8 <sys_dlist_remove>
		update_cache(thread == _current);
    7240:	0000d937          	lui	s2,0xd
    7244:	2e490913          	addi	s2,s2,740 # d2e4 <_kernel>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    7248:	00d44783          	lbu	a5,13(s0)
    724c:	00892503          	lw	a0,8(s2)
    7250:	0107e793          	ori	a5,a5,16
    7254:	40850533          	sub	a0,a0,s0
    7258:	00f406a3          	sb	a5,13(s0)
    725c:	00153513          	seqz	a0,a0
    7260:	94dff0ef          	jal	ra,6bac <update_cache>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    7264:	3004a4f3          	csrrs	s1,mstatus,s1
	if (thread == _current) {
    7268:	00892783          	lw	a5,8(s2)
    726c:	00879e63          	bne	a5,s0,7288 <z_impl_k_thread_suspend+0x94>
}
    7270:	00812403          	lw	s0,8(sp)
    7274:	00c12083          	lw	ra,12(sp)
    7278:	00412483          	lw	s1,4(sp)
    727c:	00012903          	lw	s2,0(sp)
    7280:	01010113          	addi	sp,sp,16
		z_reschedule_unlocked();
    7284:	8ddff06f          	j	6b60 <z_reschedule_unlocked>
}
    7288:	00c12083          	lw	ra,12(sp)
    728c:	00812403          	lw	s0,8(sp)
    7290:	00412483          	lw	s1,4(sp)
    7294:	00012903          	lw	s2,0(sp)
    7298:	01010113          	addi	sp,sp,16
    729c:	00008067          	ret

000072a0 <k_sched_unlock>:
{
    72a0:	ff010113          	addi	sp,sp,-16
    72a4:	00812423          	sw	s0,8(sp)
    72a8:	00112623          	sw	ra,12(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    72ac:	00800413          	li	s0,8
    72b0:	30043473          	csrrc	s0,mstatus,s0
		++_current->base.sched_locked;
    72b4:	0000d7b7          	lui	a5,0xd
    72b8:	2ec7a703          	lw	a4,748(a5) # d2ec <_kernel+0x8>
		update_cache(0);
    72bc:	00000513          	li	a0,0
	key = (mstatus & MSTATUS_IEN);
    72c0:	00847413          	andi	s0,s0,8
		++_current->base.sched_locked;
    72c4:	00f74783          	lbu	a5,15(a4)
    72c8:	00178793          	addi	a5,a5,1
    72cc:	00f707a3          	sb	a5,15(a4)
		update_cache(0);
    72d0:	8ddff0ef          	jal	ra,6bac <update_cache>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    72d4:	30042473          	csrrs	s0,mstatus,s0
}
    72d8:	00812403          	lw	s0,8(sp)
    72dc:	00c12083          	lw	ra,12(sp)
    72e0:	01010113          	addi	sp,sp,16
	z_reschedule_unlocked();
    72e4:	87dff06f          	j	6b60 <z_reschedule_unlocked>

000072e8 <z_unpend_first_thread>:
{
    72e8:	ff010113          	addi	sp,sp,-16
    72ec:	00812423          	sw	s0,8(sp)
    72f0:	00112623          	sw	ra,12(sp)
    72f4:	00912223          	sw	s1,4(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    72f8:	00800413          	li	s0,8
    72fc:	30043473          	csrrc	s0,mstatus,s0
		thread = _priq_wait_best(&wait_q->waitq);
    7300:	899ff0ef          	jal	ra,6b98 <z_priq_dumb_best>
	key = (mstatus & MSTATUS_IEN);
    7304:	00847413          	andi	s0,s0,8
    7308:	00050493          	mv	s1,a0
		if (thread != NULL) {
    730c:	00050863          	beqz	a0,731c <z_unpend_first_thread+0x34>
			unpend_thread_no_timeout(thread);
    7310:	ef4ff0ef          	jal	ra,6a04 <unpend_thread_no_timeout>
    7314:	01848513          	addi	a0,s1,24
    7318:	4d0000ef          	jal	ra,77e8 <z_abort_timeout>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    731c:	30042473          	csrrs	s0,mstatus,s0
}
    7320:	00c12083          	lw	ra,12(sp)
    7324:	00812403          	lw	s0,8(sp)
    7328:	00048513          	mv	a0,s1
    732c:	00412483          	lw	s1,4(sp)
    7330:	01010113          	addi	sp,sp,16
    7334:	00008067          	ret

00007338 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    7338:	0000d7b7          	lui	a5,0xd
    733c:	0000d737          	lui	a4,0xd
    7340:	2e478793          	addi	a5,a5,740 # d2e4 <_kernel>
    7344:	30070713          	addi	a4,a4,768 # d300 <_kernel+0x1c>
    7348:	00e7ae23          	sw	a4,28(a5)
	list->tail = (sys_dnode_t *)list;
    734c:	02e7a023          	sw	a4,32(a5)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    7350:	00000593          	li	a1,0
    7354:	00000513          	li	a0,0
    7358:	f38ff06f          	j	6a90 <k_sched_time_slice_set>

0000735c <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    735c:	ff010113          	addi	sp,sp,-16
    7360:	00912223          	sw	s1,4(sp)
    7364:	00112623          	sw	ra,12(sp)
    7368:	00812423          	sw	s0,8(sp)
    736c:	01212023          	sw	s2,0(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    7370:	00800493          	li	s1,8
    7374:	3004b4f3          	csrrc	s1,mstatus,s1

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
    7378:	0000d437          	lui	s0,0xd
    737c:	2e440913          	addi	s2,s0,740 # d2e4 <_kernel>
    7380:	00892503          	lw	a0,8(s2)
	key = (mstatus & MSTATUS_IEN);
    7384:	0084f493          	andi	s1,s1,8
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7388:	00d54783          	lbu	a5,13(a0)
    738c:	07f7f793          	andi	a5,a5,127
    7390:	00f506a3          	sb	a5,13(a0)
	sys_dlist_remove(&thread->base.qnode_dlist);
    7394:	e54ff0ef          	jal	ra,69e8 <sys_dlist_remove>
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
    7398:	00892783          	lw	a5,8(s2)
	thread->base.thread_state |= _THREAD_QUEUED;
    739c:	0000d637          	lui	a2,0xd
    73a0:	30060613          	addi	a2,a2,768 # d300 <_kernel+0x1c>
    73a4:	00d7c703          	lbu	a4,13(a5)
    73a8:	2e440693          	addi	a3,s0,740
    73ac:	f8076713          	ori	a4,a4,-128
    73b0:	00e786a3          	sb	a4,13(a5)
	return list->head == list;
    73b4:	01c92703          	lw	a4,28(s2)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    73b8:	06c70263          	beq	a4,a2,741c <z_impl_k_yield+0xc0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    73bc:	06070063          	beqz	a4,741c <z_impl_k_yield+0xc0>
	return (node == list->tail) ? NULL : node->next;
    73c0:	0206a803          	lw	a6,32(a3)
	int32_t b1 = thread_1->base.prio;
    73c4:	00e78503          	lb	a0,14(a5)
	int32_t b2 = thread_2->base.prio;
    73c8:	00e70583          	lb	a1,14(a4)
	if (b1 != b2) {
    73cc:	04b50263          	beq	a0,a1,7410 <z_impl_k_yield+0xb4>
		return b2 - b1;
    73d0:	40a585b3          	sub	a1,a1,a0
		if (z_sched_prio_cmp(thread, t) > 0) {
    73d4:	02b05e63          	blez	a1,7410 <z_impl_k_yield+0xb4>
	sys_dnode_t *const prev = successor->prev;
    73d8:	00472683          	lw	a3,4(a4)
	node->next = successor;
    73dc:	00e7a023          	sw	a4,0(a5)
	node->prev = prev;
    73e0:	00d7a223          	sw	a3,4(a5)
	prev->next = node;
    73e4:	00f6a023          	sw	a5,0(a3)
	successor->prev = node;
    73e8:	00f72223          	sw	a5,4(a4)
	update_cache(1);
    73ec:	00100513          	li	a0,1
    73f0:	fbcff0ef          	jal	ra,6bac <update_cache>
	z_swap(&sched_spinlock, key);
}
    73f4:	00812403          	lw	s0,8(sp)
    73f8:	00c12083          	lw	ra,12(sp)
    73fc:	00012903          	lw	s2,0(sp)
    7400:	00048513          	mv	a0,s1
    7404:	00412483          	lw	s1,4(sp)
    7408:	01010113          	addi	sp,sp,16
    740c:	ec1f806f          	j	2cc <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    7410:	01070663          	beq	a4,a6,741c <z_impl_k_yield+0xc0>
    7414:	00072703          	lw	a4,0(a4)
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7418:	fa0718e3          	bnez	a4,73c8 <z_impl_k_yield+0x6c>
	sys_dnode_t *const tail = list->tail;
    741c:	0206a703          	lw	a4,32(a3)
	node->next = list;
    7420:	00c7a023          	sw	a2,0(a5)
	node->prev = tail;
    7424:	00e7a223          	sw	a4,4(a5)
	tail->next = node;
    7428:	00f72023          	sw	a5,0(a4)
	list->tail = node;
    742c:	02f6a023          	sw	a5,32(a3)
}
    7430:	fbdff06f          	j	73ec <z_impl_k_yield+0x90>

00007434 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    7434:	0000d7b7          	lui	a5,0xd
    7438:	2ec7a503          	lw	a0,748(a5) # d2ec <_kernel+0x8>
    743c:	00008067          	ret

00007440 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    7440:	fe010113          	addi	sp,sp,-32
    7444:	00912a23          	sw	s1,20(sp)
    7448:	00112e23          	sw	ra,28(sp)
    744c:	00812c23          	sw	s0,24(sp)
    7450:	01212823          	sw	s2,16(sp)
    7454:	01312623          	sw	s3,12(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    7458:	00800493          	li	s1,8
    745c:	3004b4f3          	csrrc	s1,mstatus,s1
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    7460:	00d54783          	lbu	a5,13(a0)
	key = (mstatus & MSTATUS_IEN);
    7464:	0084f493          	andi	s1,s1,8
    7468:	0087f713          	andi	a4,a5,8
    746c:	02070263          	beqz	a4,7490 <z_thread_abort+0x50>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    7470:	3004a4f3          	csrrs	s1,mstatus,s1
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    7474:	01c12083          	lw	ra,28(sp)
    7478:	01812403          	lw	s0,24(sp)
    747c:	01412483          	lw	s1,20(sp)
    7480:	01012903          	lw	s2,16(sp)
    7484:	00c12983          	lw	s3,12(sp)
    7488:	02010113          	addi	sp,sp,32
    748c:	00008067          	ret
		thread->base.thread_state &= ~_THREAD_ABORTING;
    7490:	fdf7f713          	andi	a4,a5,-33
    7494:	00876713          	ori	a4,a4,8
		if (z_is_thread_queued(thread)) {
    7498:	01871693          	slli	a3,a4,0x18
    749c:	4186d693          	srai	a3,a3,0x18
    74a0:	00050413          	mv	s0,a0
    74a4:	0406ce63          	bltz	a3,7500 <z_thread_abort+0xc0>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    74a8:	00e506a3          	sb	a4,13(a0)
		if (thread->base.pended_on != NULL) {
    74ac:	00842783          	lw	a5,8(s0)
    74b0:	00078663          	beqz	a5,74bc <z_thread_abort+0x7c>
			unpend_thread_no_timeout(thread);
    74b4:	00040513          	mv	a0,s0
    74b8:	d4cff0ef          	jal	ra,6a04 <unpend_thread_no_timeout>
    74bc:	01840513          	addi	a0,s0,24
    74c0:	328000ef          	jal	ra,77e8 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    74c4:	06840993          	addi	s3,s0,104
	return list->head == list;
    74c8:	06842903          	lw	s2,104(s0)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    74cc:	01390463          	beq	s2,s3,74d4 <z_thread_abort+0x94>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    74d0:	04091263          	bnez	s2,7514 <z_thread_abort+0xd4>
		update_cache(1);
    74d4:	00100513          	li	a0,1
    74d8:	ed4ff0ef          	jal	ra,6bac <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    74dc:	0000d7b7          	lui	a5,0xd
    74e0:	2e478793          	addi	a5,a5,740 # d2e4 <_kernel>
    74e4:	0087a703          	lw	a4,8(a5)
    74e8:	f88714e3          	bne	a4,s0,7470 <z_thread_abort+0x30>
    74ec:	0007a783          	lw	a5,0(a5)
    74f0:	f80790e3          	bnez	a5,7470 <z_thread_abort+0x30>
    74f4:	00048513          	mv	a0,s1
    74f8:	dd5f80ef          	jal	ra,2cc <arch_swap>
	return ret;
    74fc:	f75ff06f          	j	7470 <z_thread_abort+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7500:	05f7f793          	andi	a5,a5,95
    7504:	0087e793          	ori	a5,a5,8
    7508:	00f506a3          	sb	a5,13(a0)
	sys_dlist_remove(&thread->base.qnode_dlist);
    750c:	cdcff0ef          	jal	ra,69e8 <sys_dlist_remove>
}
    7510:	f9dff06f          	j	74ac <z_thread_abort+0x6c>
		unpend_thread_no_timeout(thread);
    7514:	00090513          	mv	a0,s2
    7518:	cecff0ef          	jal	ra,6a04 <unpend_thread_no_timeout>
    751c:	01890513          	addi	a0,s2,24
    7520:	2c8000ef          	jal	ra,77e8 <z_abort_timeout>
		ready_thread(thread);
    7524:	00090513          	mv	a0,s2
	thread->arch.swap_return_value = value;
    7528:	06092c23          	sw	zero,120(s2)
    752c:	865ff0ef          	jal	ra,6d90 <ready_thread>
    7530:	f99ff06f          	j	74c8 <z_thread_abort+0x88>

00007534 <z_impl_k_thread_abort>:
#if !defined(CONFIG_ARCH_HAS_THREAD_ABORT)
void z_impl_k_thread_abort(struct k_thread *thread)
{
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_thread, abort, thread);

	z_thread_abort(thread);
    7534:	f0dff06f          	j	7440 <z_thread_abort>

00007538 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    7538:	0000d7b7          	lui	a5,0xd
    753c:	0447a783          	lw	a5,68(a5) # d044 <announce_remaining>
    7540:	00079463          	bnez	a5,7548 <elapsed+0x10>
    7544:	961fe06f          	j	5ea4 <sys_clock_elapsed>
}
    7548:	00000513          	li	a0,0
    754c:	00008067          	ret

00007550 <next_timeout>:
	return list->head == list;
    7550:	0000f7b7          	lui	a5,0xf

static int32_t next_timeout(void)
{
    7554:	ff010113          	addi	sp,sp,-16
    7558:	12c78793          	addi	a5,a5,300 # f12c <timeout_list>
    755c:	00812423          	sw	s0,8(sp)
    7560:	0007a403          	lw	s0,0(a5)
    7564:	00112623          	sw	ra,12(sp)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7568:	00f41463          	bne	s0,a5,7570 <next_timeout+0x20>
    756c:	00000413          	li	s0,0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    7570:	fc9ff0ef          	jal	ra,7538 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
    7574:	02040c63          	beqz	s0,75ac <next_timeout+0x5c>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    7578:	01042703          	lw	a4,16(s0)
    757c:	01442783          	lw	a5,20(s0)
    7580:	41f55693          	srai	a3,a0,0x1f
    7584:	40a70533          	sub	a0,a4,a0
    7588:	00a73733          	sltu	a4,a4,a0
    758c:	40d787b3          	sub	a5,a5,a3
    7590:	40e787b3          	sub	a5,a5,a4
	int32_t ret = to == NULL ? MAX_WAIT
    7594:	00f04663          	bgtz	a5,75a0 <next_timeout+0x50>
    7598:	04079063          	bnez	a5,75d8 <next_timeout+0x88>
    759c:	02050e63          	beqz	a0,75d8 <next_timeout+0x88>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    75a0:	00f04663          	bgtz	a5,75ac <next_timeout+0x5c>
    75a4:	00079863          	bnez	a5,75b4 <next_timeout+0x64>
    75a8:	00055663          	bgez	a0,75b4 <next_timeout+0x64>
	int32_t ret = to == NULL ? MAX_WAIT
    75ac:	80000537          	lui	a0,0x80000
    75b0:	fff54513          	not	a0,a0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    75b4:	0000d7b7          	lui	a5,0xd
    75b8:	2f47a783          	lw	a5,756(a5) # d2f4 <_kernel+0x10>
    75bc:	00078663          	beqz	a5,75c8 <next_timeout+0x78>
    75c0:	00a7d463          	bge	a5,a0,75c8 <next_timeout+0x78>
    75c4:	00078513          	mv	a0,a5
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    75c8:	00c12083          	lw	ra,12(sp)
    75cc:	00812403          	lw	s0,8(sp)
    75d0:	01010113          	addi	sp,sp,16
    75d4:	00008067          	ret
	int32_t ret = to == NULL ? MAX_WAIT
    75d8:	00000513          	li	a0,0
    75dc:	fd9ff06f          	j	75b4 <next_timeout+0x64>

000075e0 <remove_timeout>:
	return (node == list->tail) ? NULL : node->next;
    75e0:	00052783          	lw	a5,0(a0) # 80000000 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000001>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    75e4:	02050e63          	beqz	a0,7620 <remove_timeout+0x40>
	return (node == list->tail) ? NULL : node->next;
    75e8:	0000f737          	lui	a4,0xf
    75ec:	13072703          	lw	a4,304(a4) # f130 <timeout_list+0x4>
    75f0:	02e50863          	beq	a0,a4,7620 <remove_timeout+0x40>
	if (next(t) != NULL) {
    75f4:	02078663          	beqz	a5,7620 <remove_timeout+0x40>
		next(t)->dticks += t->dticks;
    75f8:	0107a703          	lw	a4,16(a5)
    75fc:	01052683          	lw	a3,16(a0)
    7600:	01452583          	lw	a1,20(a0)
    7604:	0147a603          	lw	a2,20(a5)
    7608:	00d706b3          	add	a3,a4,a3
    760c:	00e6b733          	sltu	a4,a3,a4
    7610:	00b60633          	add	a2,a2,a1
    7614:	00c70733          	add	a4,a4,a2
    7618:	00d7a823          	sw	a3,16(a5)
    761c:	00e7aa23          	sw	a4,20(a5)
	sys_dnode_t *const prev = node->prev;
    7620:	00452703          	lw	a4,4(a0)
	prev->next = next;
    7624:	00f72023          	sw	a5,0(a4)
	next->prev = prev;
    7628:	00e7a223          	sw	a4,4(a5)
	node->next = NULL;
    762c:	00052023          	sw	zero,0(a0)
	node->prev = NULL;
    7630:	00052223          	sw	zero,4(a0)
}
    7634:	00008067          	ret

00007638 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    7638:	fe010113          	addi	sp,sp,-32
    763c:	00812c23          	sw	s0,24(sp)
    7640:	00912a23          	sw	s1,20(sp)
    7644:	01312623          	sw	s3,12(sp)
    7648:	00112e23          	sw	ra,28(sp)
    764c:	00068993          	mv	s3,a3
    7650:	01212823          	sw	s2,16(sp)
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7654:	fff00693          	li	a3,-1
{
    7658:	00050413          	mv	s0,a0
    765c:	00060493          	mv	s1,a2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7660:	00d61463          	bne	a2,a3,7668 <z_add_timeout+0x30>
    7664:	16c98463          	beq	s3,a2,77cc <z_add_timeout+0x194>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    7668:	00b42423          	sw	a1,8(s0)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    766c:	00800913          	li	s2,8
    7670:	30093973          	csrrc	s2,mstatus,s2

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    7674:	ffe00693          	li	a3,-2
    7678:	409687b3          	sub	a5,a3,s1
    767c:	00f6b733          	sltu	a4,a3,a5
    7680:	fff9c793          	not	a5,s3
    7684:	40e787b3          	sub	a5,a5,a4
	key = (mstatus & MSTATUS_IEN);
    7688:	00897913          	andi	s2,s2,8
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    768c:	0607ce63          	bltz	a5,7708 <z_add_timeout+0xd0>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    7690:	0000d7b7          	lui	a5,0xd
    7694:	01078793          	addi	a5,a5,16 # d010 <curr_tick>
    7698:	0007a703          	lw	a4,0(a5)
    769c:	0047a783          	lw	a5,4(a5)
    76a0:	40e68733          	sub	a4,a3,a4
    76a4:	00e6b6b3          	sltu	a3,a3,a4
    76a8:	fff7c793          	not	a5,a5
    76ac:	40d787b3          	sub	a5,a5,a3
    76b0:	409704b3          	sub	s1,a4,s1
    76b4:	00973733          	sltu	a4,a4,s1
    76b8:	413786b3          	sub	a3,a5,s3

			to->dticks = MAX(1, ticks);
    76bc:	40e686b3          	sub	a3,a3,a4
    76c0:	00d04a63          	bgtz	a3,76d4 <z_add_timeout+0x9c>
    76c4:	00069463          	bnez	a3,76cc <z_add_timeout+0x94>
    76c8:	00049663          	bnez	s1,76d4 <z_add_timeout+0x9c>
    76cc:	00100493          	li	s1,1
    76d0:	00000693          	li	a3,0
    76d4:	00942823          	sw	s1,16(s0)
	return list->head == list;
    76d8:	0000f637          	lui	a2,0xf
    76dc:	12c60713          	addi	a4,a2,300 # f12c <timeout_list>
    76e0:	00072783          	lw	a5,0(a4)
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    76e4:	00d42a23          	sw	a3,20(s0)
    76e8:	12c60613          	addi	a2,a2,300
	sys_dnode_t *const tail = list->tail;
    76ec:	00472803          	lw	a6,4(a4)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    76f0:	06c79263          	bne	a5,a2,7754 <z_add_timeout+0x11c>
	node->next = list;
    76f4:	00c42023          	sw	a2,0(s0)
	node->prev = tail;
    76f8:	01042223          	sw	a6,4(s0)
	tail->next = node;
    76fc:	00882023          	sw	s0,0(a6)
	list->tail = node;
    7700:	00862223          	sw	s0,4(a2)
}
    7704:	09c0006f          	j	77a0 <z_add_timeout+0x168>
    7708:	e31ff0ef          	jal	ra,7538 <elapsed>
    770c:	00148793          	addi	a5,s1,1
    7710:	0097b4b3          	sltu	s1,a5,s1
    7714:	013486b3          	add	a3,s1,s3
    7718:	41f55493          	srai	s1,a0,0x1f
    771c:	00a78533          	add	a0,a5,a0
    7720:	00f537b3          	sltu	a5,a0,a5
    7724:	009686b3          	add	a3,a3,s1
    7728:	00d786b3          	add	a3,a5,a3
    772c:	00a42823          	sw	a0,16(s0)
    7730:	fa9ff06f          	j	76d8 <z_add_timeout+0xa0>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    7734:	40e68733          	sub	a4,a3,a4
    7738:	00e6b6b3          	sltu	a3,a3,a4
    773c:	40a585b3          	sub	a1,a1,a0
    7740:	40d586b3          	sub	a3,a1,a3
    7744:	00e42823          	sw	a4,16(s0)
    7748:	00d42a23          	sw	a3,20(s0)
	return (node == list->tail) ? NULL : node->next;
    774c:	faf804e3          	beq	a6,a5,76f4 <z_add_timeout+0xbc>
    7750:	0007a783          	lw	a5,0(a5)
		for (t = first(); t != NULL; t = next(t)) {
    7754:	fa0780e3          	beqz	a5,76f4 <z_add_timeout+0xbc>
			if (t->dticks > to->dticks) {
    7758:	0147a503          	lw	a0,20(a5)
    775c:	01442583          	lw	a1,20(s0)
    7760:	0107a703          	lw	a4,16(a5)
    7764:	01042683          	lw	a3,16(s0)
    7768:	00a5c663          	blt	a1,a0,7774 <z_add_timeout+0x13c>
    776c:	fcb514e3          	bne	a0,a1,7734 <z_add_timeout+0xfc>
    7770:	fce6f2e3          	bgeu	a3,a4,7734 <z_add_timeout+0xfc>
				t->dticks -= to->dticks;
    7774:	40d706b3          	sub	a3,a4,a3
    7778:	00d73733          	sltu	a4,a4,a3
    777c:	40b505b3          	sub	a1,a0,a1
    7780:	40e58733          	sub	a4,a1,a4
    7784:	00e7aa23          	sw	a4,20(a5)
	sys_dnode_t *const prev = successor->prev;
    7788:	0047a703          	lw	a4,4(a5)
    778c:	00d7a823          	sw	a3,16(a5)
	node->next = successor;
    7790:	00f42023          	sw	a5,0(s0)
	node->prev = prev;
    7794:	00e42223          	sw	a4,4(s0)
	prev->next = node;
    7798:	00872023          	sw	s0,0(a4)
	successor->prev = node;
    779c:	0087a223          	sw	s0,4(a5)
	return list->head == list;
    77a0:	00062783          	lw	a5,0(a2)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    77a4:	02c78263          	beq	a5,a2,77c8 <z_add_timeout+0x190>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    77a8:	02f41063          	bne	s0,a5,77c8 <z_add_timeout+0x190>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    77ac:	da5ff0ef          	jal	ra,7550 <next_timeout>

			if (next_time == 0 ||
    77b0:	00050863          	beqz	a0,77c0 <z_add_timeout+0x188>
			    _current_cpu->slice_ticks != next_time) {
    77b4:	0000d7b7          	lui	a5,0xd
			if (next_time == 0 ||
    77b8:	2f47a783          	lw	a5,756(a5) # d2f4 <_kernel+0x10>
    77bc:	00a78663          	beq	a5,a0,77c8 <z_add_timeout+0x190>
				sys_clock_set_timeout(next_time, false);
    77c0:	00000593          	li	a1,0
    77c4:	edcfe0ef          	jal	ra,5ea0 <sys_clock_set_timeout>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    77c8:	30092973          	csrrs	s2,mstatus,s2
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    77cc:	01c12083          	lw	ra,28(sp)
    77d0:	01812403          	lw	s0,24(sp)
    77d4:	01412483          	lw	s1,20(sp)
    77d8:	01012903          	lw	s2,16(sp)
    77dc:	00c12983          	lw	s3,12(sp)
    77e0:	02010113          	addi	sp,sp,32
    77e4:	00008067          	ret

000077e8 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    77e8:	ff010113          	addi	sp,sp,-16
    77ec:	00812423          	sw	s0,8(sp)
    77f0:	00112623          	sw	ra,12(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    77f4:	00800413          	li	s0,8
    77f8:	30043473          	csrrc	s0,mstatus,s0
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    77fc:	00052783          	lw	a5,0(a0)
	key = (mstatus & MSTATUS_IEN);
    7800:	00847413          	andi	s0,s0,8
    7804:	02078063          	beqz	a5,7824 <z_abort_timeout+0x3c>
			remove_timeout(to);
    7808:	dd9ff0ef          	jal	ra,75e0 <remove_timeout>
			ret = 0;
    780c:	00000513          	li	a0,0
	__asm__ volatile ("csrrs %0, mstatus, %1"
    7810:	30042473          	csrrs	s0,mstatus,s0
		}
	}

	return ret;
}
    7814:	00c12083          	lw	ra,12(sp)
    7818:	00812403          	lw	s0,8(sp)
    781c:	01010113          	addi	sp,sp,16
    7820:	00008067          	ret
	int ret = -EINVAL;
    7824:	fea00513          	li	a0,-22
    7828:	fe9ff06f          	j	7810 <z_abort_timeout+0x28>

0000782c <z_set_timeout_expiry>:
	}
	return ret;
}

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    782c:	fe010113          	addi	sp,sp,-32
    7830:	00812c23          	sw	s0,24(sp)
    7834:	00912a23          	sw	s1,20(sp)
    7838:	00112e23          	sw	ra,28(sp)
    783c:	00050493          	mv	s1,a0
    7840:	00b12623          	sw	a1,12(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    7844:	00800413          	li	s0,8
    7848:	30043473          	csrrc	s0,mstatus,s0
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    784c:	d05ff0ef          	jal	ra,7550 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    7850:	00100793          	li	a5,1
	key = (mstatus & MSTATUS_IEN);
    7854:	00847413          	andi	s0,s0,8
    7858:	00a7da63          	bge	a5,a0,786c <z_set_timeout_expiry+0x40>
    785c:	00c12583          	lw	a1,12(sp)
    7860:	00954663          	blt	a0,s1,786c <z_set_timeout_expiry+0x40>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    7864:	00048513          	mv	a0,s1
    7868:	e38fe0ef          	jal	ra,5ea0 <sys_clock_set_timeout>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    786c:	30042473          	csrrs	s0,mstatus,s0
		}
	}
}
    7870:	01c12083          	lw	ra,28(sp)
    7874:	01812403          	lw	s0,24(sp)
    7878:	01412483          	lw	s1,20(sp)
    787c:	02010113          	addi	sp,sp,32
    7880:	00008067          	ret

00007884 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    7884:	fd010113          	addi	sp,sp,-48
    7888:	02812423          	sw	s0,40(sp)
    788c:	02912223          	sw	s1,36(sp)
    7890:	02112623          	sw	ra,44(sp)
    7894:	03212023          	sw	s2,32(sp)
    7898:	01312e23          	sw	s3,28(sp)
    789c:	01412c23          	sw	s4,24(sp)
    78a0:	00050493          	mv	s1,a0
	__asm__ volatile ("csrrc %0, mstatus, %1"
    78a4:	00800413          	li	s0,8
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    78a8:	c48ff0ef          	jal	ra,6cf0 <z_time_slice>
    78ac:	30043473          	csrrc	s0,mstatus,s0
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    78b0:	0000d937          	lui	s2,0xd
    78b4:	04992223          	sw	s1,68(s2) # d044 <announce_remaining>
	return list->head == list;
    78b8:	0000f9b7          	lui	s3,0xf

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    78bc:	0000d4b7          	lui	s1,0xd
	key = (mstatus & MSTATUS_IEN);
    78c0:	00847413          	andi	s0,s0,8
	while (first() != NULL && first()->dticks <= announce_remaining) {
    78c4:	04490913          	addi	s2,s2,68
    78c8:	12c98993          	addi	s3,s3,300 # f12c <timeout_list>
		curr_tick += dt;
    78cc:	01048493          	addi	s1,s1,16 # d010 <curr_tick>
	__asm__ volatile ("csrrc %0, mstatus, %1"
    78d0:	00800a13          	li	s4,8
	while (first() != NULL && first()->dticks <= announce_remaining) {
    78d4:	00092783          	lw	a5,0(s2)
    78d8:	0009a503          	lw	a0,0(s3)
		curr_tick += dt;
    78dc:	0004a683          	lw	a3,0(s1)
    78e0:	0044a883          	lw	a7,4(s1)
    78e4:	41f7d593          	srai	a1,a5,0x1f
	return sys_dlist_is_empty(list) ? NULL : list->head;
    78e8:	03350a63          	beq	a0,s3,791c <sys_clock_announce+0x98>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    78ec:	02050863          	beqz	a0,791c <sys_clock_announce+0x98>
    78f0:	01452603          	lw	a2,20(a0)
    78f4:	01052703          	lw	a4,16(a0)
    78f8:	00c5c663          	blt	a1,a2,7904 <sys_clock_announce+0x80>
    78fc:	06b61663          	bne	a2,a1,7968 <sys_clock_announce+0xe4>
    7900:	06e7f463          	bgeu	a5,a4,7968 <sys_clock_announce+0xe4>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    7904:	40f70833          	sub	a6,a4,a5
    7908:	01073733          	sltu	a4,a4,a6
    790c:	40b60633          	sub	a2,a2,a1
    7910:	40e60733          	sub	a4,a2,a4
    7914:	01052823          	sw	a6,16(a0)
    7918:	00e52a23          	sw	a4,20(a0)
	}

	curr_tick += announce_remaining;
    791c:	00d786b3          	add	a3,a5,a3
    7920:	011585b3          	add	a1,a1,a7
    7924:	00f6b7b3          	sltu	a5,a3,a5
    7928:	00b787b3          	add	a5,a5,a1
    792c:	00d4a023          	sw	a3,0(s1)
    7930:	00f4a223          	sw	a5,4(s1)
	announce_remaining = 0;
    7934:	00092023          	sw	zero,0(s2)

	sys_clock_set_timeout(next_timeout(), false);
    7938:	c19ff0ef          	jal	ra,7550 <next_timeout>
    793c:	00000593          	li	a1,0
    7940:	d60fe0ef          	jal	ra,5ea0 <sys_clock_set_timeout>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    7944:	30042473          	csrrs	s0,mstatus,s0

	k_spin_unlock(&timeout_lock, key);
}
    7948:	02c12083          	lw	ra,44(sp)
    794c:	02812403          	lw	s0,40(sp)
    7950:	02412483          	lw	s1,36(sp)
    7954:	02012903          	lw	s2,32(sp)
    7958:	01c12983          	lw	s3,28(sp)
    795c:	01812a03          	lw	s4,24(sp)
    7960:	03010113          	addi	sp,sp,48
    7964:	00008067          	ret
		curr_tick += dt;
    7968:	00d706b3          	add	a3,a4,a3
		announce_remaining -= dt;
    796c:	40e787b3          	sub	a5,a5,a4
		curr_tick += dt;
    7970:	41f75593          	srai	a1,a4,0x1f
    7974:	00e6b633          	sltu	a2,a3,a4
    7978:	011585b3          	add	a1,a1,a7
		announce_remaining -= dt;
    797c:	00f92023          	sw	a5,0(s2)
		t->dticks = 0;
    7980:	00000813          	li	a6,0
    7984:	00000793          	li	a5,0
		curr_tick += dt;
    7988:	00b605b3          	add	a1,a2,a1
		t->dticks = 0;
    798c:	00f52823          	sw	a5,16(a0)
    7990:	01052a23          	sw	a6,20(a0)
		curr_tick += dt;
    7994:	00d4a023          	sw	a3,0(s1)
    7998:	00b4a223          	sw	a1,4(s1)
		remove_timeout(t);
    799c:	00a12623          	sw	a0,12(sp)
    79a0:	c41ff0ef          	jal	ra,75e0 <remove_timeout>
    79a4:	30042473          	csrrs	s0,mstatus,s0
		t->fn(t);
    79a8:	00c12503          	lw	a0,12(sp)
    79ac:	00852783          	lw	a5,8(a0)
    79b0:	000780e7          	jalr	a5
	__asm__ volatile ("csrrc %0, mstatus, %1"
    79b4:	300a3473          	csrrc	s0,mstatus,s4
	key = (mstatus & MSTATUS_IEN);
    79b8:	00847413          	andi	s0,s0,8
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    79bc:	f19ff06f          	j	78d4 <sys_clock_announce+0x50>

000079c0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    79c0:	ff010113          	addi	sp,sp,-16
    79c4:	00812423          	sw	s0,8(sp)
    79c8:	00112623          	sw	ra,12(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    79cc:	00800413          	li	s0,8
    79d0:	30043473          	csrrc	s0,mstatus,s0
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    79d4:	cd0fe0ef          	jal	ra,5ea4 <sys_clock_elapsed>
    79d8:	0000d737          	lui	a4,0xd
    79dc:	01070713          	addi	a4,a4,16 # d010 <curr_tick>
    79e0:	00050793          	mv	a5,a0
    79e4:	00072503          	lw	a0,0(a4)
    79e8:	00472583          	lw	a1,4(a4)
	key = (mstatus & MSTATUS_IEN);
    79ec:	00847413          	andi	s0,s0,8
    79f0:	00a78533          	add	a0,a5,a0
    79f4:	00f537b3          	sltu	a5,a0,a5
    79f8:	00b785b3          	add	a1,a5,a1
	__asm__ volatile ("csrrs %0, mstatus, %1"
    79fc:	30042473          	csrrs	s0,mstatus,s0
	}
	return t;
}
    7a00:	00c12083          	lw	ra,12(sp)
    7a04:	00812403          	lw	s0,8(sp)
    7a08:	01010113          	addi	sp,sp,16
    7a0c:	00008067          	ret

00007a10 <z_impl_k_uptime_ticks>:
#endif
}

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    7a10:	fb1ff06f          	j	79c0 <sys_clock_tick_get>

00007a14 <z_impl_atomic_add>:
 * @param value the value to add
 *
 * @return The previous value from <target>
 */
atomic_val_t z_impl_atomic_add(atomic_t *target, atomic_val_t value)
{
    7a14:	00050713          	mv	a4,a0
	__asm__ volatile ("csrrc %0, mstatus, %1"
    7a18:	00800793          	li	a5,8
    7a1c:	3007b7f3          	csrrc	a5,mstatus,a5
	k_spinlock_key_t key;
	atomic_val_t ret;

	key = k_spin_lock(&lock);

	ret = *target;
    7a20:	00052503          	lw	a0,0(a0)
	key = (mstatus & MSTATUS_IEN);
    7a24:	0087f793          	andi	a5,a5,8
	*target += value;
    7a28:	00b505b3          	add	a1,a0,a1
    7a2c:	00b72023          	sw	a1,0(a4)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    7a30:	3007a7f3          	csrrs	a5,mstatus,a5

	k_spin_unlock(&lock, key);

	return ret;
}
    7a34:	00008067          	ret

00007a38 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    7a38:	0000d637          	lui	a2,0xd
    7a3c:	0000d5b7          	lui	a1,0xd
    7a40:	0000d537          	lui	a0,0xd
    7a44:	a4060613          	addi	a2,a2,-1472 # ca40 <__mprec_tens+0x258>
    7a48:	c6c58593          	addi	a1,a1,-916 # cc6c <levels.0+0x1c>
    7a4c:	c7450513          	addi	a0,a0,-908 # cc74 <levels.0+0x24>
    7a50:	f70fc06f          	j	41c0 <printk>

00007a54 <k_heap_init>:
	sys_dlist_init(&w->waitq);
    7a54:	00c50713          	addi	a4,a0,12
	list->head = (sys_dnode_t *)list;
    7a58:	00e52623          	sw	a4,12(a0)
	list->tail = (sys_dnode_t *)list;
    7a5c:	00e52823          	sw	a4,16(a0)
#include <linker/linker-defs.h>

void k_heap_init(struct k_heap *h, void *mem, size_t bytes)
{
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
    7a60:	a91fc06f          	j	44f0 <sys_heap_init>

00007a64 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    7a64:	ff010113          	addi	sp,sp,-16
    7a68:	00812423          	sw	s0,8(sp)
    7a6c:	00912223          	sw	s1,4(sp)
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    7a70:	0000f437          	lui	s0,0xf
    7a74:	0000f4b7          	lui	s1,0xf
{
    7a78:	00112623          	sw	ra,12(sp)
	STRUCT_SECTION_FOREACH(k_heap, h) {
    7a7c:	14c40413          	addi	s0,s0,332 # f14c <__lock___malloc_recursive_mutex>
    7a80:	14c48493          	addi	s1,s1,332 # f14c <__lock___malloc_recursive_mutex>
    7a84:	00946e63          	bltu	s0,s1,7aa0 <statics_init+0x3c>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    7a88:	00c12083          	lw	ra,12(sp)
    7a8c:	00812403          	lw	s0,8(sp)
    7a90:	00412483          	lw	s1,4(sp)
    7a94:	00000513          	li	a0,0
    7a98:	01010113          	addi	sp,sp,16
    7a9c:	00008067          	ret
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    7aa0:	00842603          	lw	a2,8(s0)
    7aa4:	00442583          	lw	a1,4(s0)
    7aa8:	00040513          	mv	a0,s0
	STRUCT_SECTION_FOREACH(k_heap, h) {
    7aac:	01440413          	addi	s0,s0,20
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    7ab0:	fa5ff0ef          	jal	ra,7a54 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    7ab4:	fd1ff06f          	j	7a84 <statics_init+0x20>

00007ab8 <malloc>:
    7ab8:	0000f7b7          	lui	a5,0xf
    7abc:	00050593          	mv	a1,a0
    7ac0:	1387a503          	lw	a0,312(a5) # f138 <_impure_ptr>
    7ac4:	1080006f          	j	7bcc <_malloc_r>

00007ac8 <_free_r>:
    7ac8:	10058063          	beqz	a1,7bc8 <_free_r+0x100>
    7acc:	ffc5a783          	lw	a5,-4(a1)
    7ad0:	fe010113          	addi	sp,sp,-32
    7ad4:	00812c23          	sw	s0,24(sp)
    7ad8:	00112e23          	sw	ra,28(sp)
    7adc:	ffc58413          	addi	s0,a1,-4
    7ae0:	0007d463          	bgez	a5,7ae8 <_free_r+0x20>
    7ae4:	00f40433          	add	s0,s0,a5
    7ae8:	00a12623          	sw	a0,12(sp)
    7aec:	19d020ef          	jal	ra,a488 <__malloc_lock>
    7af0:	0000d737          	lui	a4,0xd
    7af4:	04872783          	lw	a5,72(a4) # d048 <__malloc_free_list>
    7af8:	00c12503          	lw	a0,12(sp)
    7afc:	00070613          	mv	a2,a4
    7b00:	00079e63          	bnez	a5,7b1c <_free_r+0x54>
    7b04:	00042223          	sw	zero,4(s0)
    7b08:	04872423          	sw	s0,72(a4)
    7b0c:	01812403          	lw	s0,24(sp)
    7b10:	01c12083          	lw	ra,28(sp)
    7b14:	02010113          	addi	sp,sp,32
    7b18:	17d0206f          	j	a494 <__malloc_unlock>
    7b1c:	02f47663          	bgeu	s0,a5,7b48 <_free_r+0x80>
    7b20:	00042683          	lw	a3,0(s0)
    7b24:	00d40733          	add	a4,s0,a3
    7b28:	00e79a63          	bne	a5,a4,7b3c <_free_r+0x74>
    7b2c:	0007a703          	lw	a4,0(a5)
    7b30:	0047a783          	lw	a5,4(a5)
    7b34:	00d70733          	add	a4,a4,a3
    7b38:	00e42023          	sw	a4,0(s0)
    7b3c:	00f42223          	sw	a5,4(s0)
    7b40:	04862423          	sw	s0,72(a2)
    7b44:	fc9ff06f          	j	7b0c <_free_r+0x44>
    7b48:	00078713          	mv	a4,a5
    7b4c:	0047a783          	lw	a5,4(a5)
    7b50:	00078463          	beqz	a5,7b58 <_free_r+0x90>
    7b54:	fef47ae3          	bgeu	s0,a5,7b48 <_free_r+0x80>
    7b58:	00072683          	lw	a3,0(a4)
    7b5c:	00d70633          	add	a2,a4,a3
    7b60:	02861863          	bne	a2,s0,7b90 <_free_r+0xc8>
    7b64:	00042603          	lw	a2,0(s0)
    7b68:	00c686b3          	add	a3,a3,a2
    7b6c:	00d72023          	sw	a3,0(a4)
    7b70:	00d70633          	add	a2,a4,a3
    7b74:	f8c79ce3          	bne	a5,a2,7b0c <_free_r+0x44>
    7b78:	0007a603          	lw	a2,0(a5)
    7b7c:	0047a783          	lw	a5,4(a5)
    7b80:	00d606b3          	add	a3,a2,a3
    7b84:	00d72023          	sw	a3,0(a4)
    7b88:	00f72223          	sw	a5,4(a4)
    7b8c:	f81ff06f          	j	7b0c <_free_r+0x44>
    7b90:	00c47863          	bgeu	s0,a2,7ba0 <_free_r+0xd8>
    7b94:	00c00793          	li	a5,12
    7b98:	00f52023          	sw	a5,0(a0)
    7b9c:	f71ff06f          	j	7b0c <_free_r+0x44>
    7ba0:	00042603          	lw	a2,0(s0)
    7ba4:	00c406b3          	add	a3,s0,a2
    7ba8:	00d79a63          	bne	a5,a3,7bbc <_free_r+0xf4>
    7bac:	0007a683          	lw	a3,0(a5)
    7bb0:	0047a783          	lw	a5,4(a5)
    7bb4:	00c686b3          	add	a3,a3,a2
    7bb8:	00d42023          	sw	a3,0(s0)
    7bbc:	00f42223          	sw	a5,4(s0)
    7bc0:	00872223          	sw	s0,4(a4)
    7bc4:	f49ff06f          	j	7b0c <_free_r+0x44>
    7bc8:	00008067          	ret

00007bcc <_malloc_r>:
    7bcc:	fe010113          	addi	sp,sp,-32
    7bd0:	00912a23          	sw	s1,20(sp)
    7bd4:	00358493          	addi	s1,a1,3
    7bd8:	ffc4f493          	andi	s1,s1,-4
    7bdc:	01212823          	sw	s2,16(sp)
    7be0:	00112e23          	sw	ra,28(sp)
    7be4:	00812c23          	sw	s0,24(sp)
    7be8:	01312623          	sw	s3,12(sp)
    7bec:	00848493          	addi	s1,s1,8
    7bf0:	00c00793          	li	a5,12
    7bf4:	00050913          	mv	s2,a0
    7bf8:	06f4f863          	bgeu	s1,a5,7c68 <_malloc_r+0x9c>
    7bfc:	00c00493          	li	s1,12
    7c00:	06b4e663          	bltu	s1,a1,7c6c <_malloc_r+0xa0>
    7c04:	00090513          	mv	a0,s2
    7c08:	081020ef          	jal	ra,a488 <__malloc_lock>
    7c0c:	0000d7b7          	lui	a5,0xd
    7c10:	0487a703          	lw	a4,72(a5) # d048 <__malloc_free_list>
    7c14:	04878693          	addi	a3,a5,72
    7c18:	00070413          	mv	s0,a4
    7c1c:	06041c63          	bnez	s0,7c94 <_malloc_r+0xc8>
    7c20:	0000d437          	lui	s0,0xd
    7c24:	04c40413          	addi	s0,s0,76 # d04c <__malloc_sbrk_start>
    7c28:	00042783          	lw	a5,0(s0)
    7c2c:	00079a63          	bnez	a5,7c40 <_malloc_r+0x74>
    7c30:	00000593          	li	a1,0
    7c34:	00090513          	mv	a0,s2
    7c38:	058010ef          	jal	ra,8c90 <_sbrk_r>
    7c3c:	00a42023          	sw	a0,0(s0)
    7c40:	00048593          	mv	a1,s1
    7c44:	00090513          	mv	a0,s2
    7c48:	048010ef          	jal	ra,8c90 <_sbrk_r>
    7c4c:	fff00993          	li	s3,-1
    7c50:	0b351a63          	bne	a0,s3,7d04 <_malloc_r+0x138>
    7c54:	00c00793          	li	a5,12
    7c58:	00f92023          	sw	a5,0(s2)
    7c5c:	00090513          	mv	a0,s2
    7c60:	035020ef          	jal	ra,a494 <__malloc_unlock>
    7c64:	0100006f          	j	7c74 <_malloc_r+0xa8>
    7c68:	f804dce3          	bgez	s1,7c00 <_malloc_r+0x34>
    7c6c:	00c00793          	li	a5,12
    7c70:	00f92023          	sw	a5,0(s2)
    7c74:	00000513          	li	a0,0
    7c78:	01c12083          	lw	ra,28(sp)
    7c7c:	01812403          	lw	s0,24(sp)
    7c80:	01412483          	lw	s1,20(sp)
    7c84:	01012903          	lw	s2,16(sp)
    7c88:	00c12983          	lw	s3,12(sp)
    7c8c:	02010113          	addi	sp,sp,32
    7c90:	00008067          	ret
    7c94:	00042783          	lw	a5,0(s0)
    7c98:	409787b3          	sub	a5,a5,s1
    7c9c:	0407ce63          	bltz	a5,7cf8 <_malloc_r+0x12c>
    7ca0:	00b00613          	li	a2,11
    7ca4:	00f67a63          	bgeu	a2,a5,7cb8 <_malloc_r+0xec>
    7ca8:	00f42023          	sw	a5,0(s0)
    7cac:	00f40433          	add	s0,s0,a5
    7cb0:	00942023          	sw	s1,0(s0)
    7cb4:	0100006f          	j	7cc4 <_malloc_r+0xf8>
    7cb8:	00442783          	lw	a5,4(s0)
    7cbc:	02871a63          	bne	a4,s0,7cf0 <_malloc_r+0x124>
    7cc0:	00f6a023          	sw	a5,0(a3)
    7cc4:	00090513          	mv	a0,s2
    7cc8:	7cc020ef          	jal	ra,a494 <__malloc_unlock>
    7ccc:	00b40513          	addi	a0,s0,11
    7cd0:	00440793          	addi	a5,s0,4
    7cd4:	ff857513          	andi	a0,a0,-8
    7cd8:	40f50733          	sub	a4,a0,a5
    7cdc:	f8f50ee3          	beq	a0,a5,7c78 <_malloc_r+0xac>
    7ce0:	00e40433          	add	s0,s0,a4
    7ce4:	40a787b3          	sub	a5,a5,a0
    7ce8:	00f42023          	sw	a5,0(s0)
    7cec:	f8dff06f          	j	7c78 <_malloc_r+0xac>
    7cf0:	00f72223          	sw	a5,4(a4)
    7cf4:	fd1ff06f          	j	7cc4 <_malloc_r+0xf8>
    7cf8:	00040713          	mv	a4,s0
    7cfc:	00442403          	lw	s0,4(s0)
    7d00:	f1dff06f          	j	7c1c <_malloc_r+0x50>
    7d04:	00350413          	addi	s0,a0,3
    7d08:	ffc47413          	andi	s0,s0,-4
    7d0c:	fa8502e3          	beq	a0,s0,7cb0 <_malloc_r+0xe4>
    7d10:	40a405b3          	sub	a1,s0,a0
    7d14:	00090513          	mv	a0,s2
    7d18:	779000ef          	jal	ra,8c90 <_sbrk_r>
    7d1c:	f9351ae3          	bne	a0,s3,7cb0 <_malloc_r+0xe4>
    7d20:	f35ff06f          	j	7c54 <_malloc_r+0x88>

00007d24 <__cvt>:
    7d24:	fd010113          	addi	sp,sp,-48
    7d28:	02812423          	sw	s0,40(sp)
    7d2c:	03212023          	sw	s2,32(sp)
    7d30:	01412c23          	sw	s4,24(sp)
    7d34:	01512a23          	sw	s5,20(sp)
    7d38:	01612823          	sw	s6,16(sp)
    7d3c:	02112623          	sw	ra,44(sp)
    7d40:	02912223          	sw	s1,36(sp)
    7d44:	01312e23          	sw	s3,28(sp)
    7d48:	00070b13          	mv	s6,a4
    7d4c:	00058a13          	mv	s4,a1
    7d50:	00060413          	mv	s0,a2
    7d54:	00068913          	mv	s2,a3
    7d58:	00080a93          	mv	s5,a6
    7d5c:	00000713          	li	a4,0
    7d60:	00065863          	bgez	a2,7d70 <__cvt+0x4c>
    7d64:	80000737          	lui	a4,0x80000
    7d68:	00c74433          	xor	s0,a4,a2
    7d6c:	02d00713          	li	a4,45
    7d70:	00e78023          	sb	a4,0(a5)
    7d74:	fdf8f493          	andi	s1,a7,-33
    7d78:	04600793          	li	a5,70
    7d7c:	00300693          	li	a3,3
    7d80:	00f48a63          	beq	s1,a5,7d94 <__cvt+0x70>
    7d84:	04500793          	li	a5,69
    7d88:	00200693          	li	a3,2
    7d8c:	00f49463          	bne	s1,a5,7d94 <__cvt+0x70>
    7d90:	00190913          	addi	s2,s2,1
    7d94:	000a8793          	mv	a5,s5
    7d98:	00c10893          	addi	a7,sp,12
    7d9c:	00810813          	addi	a6,sp,8
    7da0:	00090713          	mv	a4,s2
    7da4:	000a0593          	mv	a1,s4
    7da8:	00040613          	mv	a2,s0
    7dac:	13c010ef          	jal	ra,8ee8 <_dtoa_r>
    7db0:	04700793          	li	a5,71
    7db4:	00050993          	mv	s3,a0
    7db8:	00f49663          	bne	s1,a5,7dc4 <__cvt+0xa0>
    7dbc:	001b7613          	andi	a2,s6,1
    7dc0:	06060863          	beqz	a2,7e30 <__cvt+0x10c>
    7dc4:	04600793          	li	a5,70
    7dc8:	01298b33          	add	s6,s3,s2
    7dcc:	02f49e63          	bne	s1,a5,7e08 <__cvt+0xe4>
    7dd0:	0009c703          	lbu	a4,0(s3)
    7dd4:	03000793          	li	a5,48
    7dd8:	02f71463          	bne	a4,a5,7e00 <__cvt+0xdc>
    7ddc:	00000613          	li	a2,0
    7de0:	00000693          	li	a3,0
    7de4:	000a0513          	mv	a0,s4
    7de8:	00040593          	mv	a1,s0
    7dec:	d1cfb0ef          	jal	ra,3308 <__eqdf2>
    7df0:	00050863          	beqz	a0,7e00 <__cvt+0xdc>
    7df4:	00100613          	li	a2,1
    7df8:	412606b3          	sub	a3,a2,s2
    7dfc:	00daa023          	sw	a3,0(s5)
    7e00:	000aa783          	lw	a5,0(s5)
    7e04:	00fb0b33          	add	s6,s6,a5
    7e08:	00000613          	li	a2,0
    7e0c:	00000693          	li	a3,0
    7e10:	000a0513          	mv	a0,s4
    7e14:	00040593          	mv	a1,s0
    7e18:	cf0fb0ef          	jal	ra,3308 <__eqdf2>
    7e1c:	00051463          	bnez	a0,7e24 <__cvt+0x100>
    7e20:	01612623          	sw	s6,12(sp)
    7e24:	03000713          	li	a4,48
    7e28:	00c12783          	lw	a5,12(sp)
    7e2c:	0567e063          	bltu	a5,s6,7e6c <__cvt+0x148>
    7e30:	00c12783          	lw	a5,12(sp)
    7e34:	03012703          	lw	a4,48(sp)
    7e38:	02c12083          	lw	ra,44(sp)
    7e3c:	02812403          	lw	s0,40(sp)
    7e40:	413787b3          	sub	a5,a5,s3
    7e44:	00f72023          	sw	a5,0(a4) # 80000000 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000001>
    7e48:	02412483          	lw	s1,36(sp)
    7e4c:	02012903          	lw	s2,32(sp)
    7e50:	01812a03          	lw	s4,24(sp)
    7e54:	01412a83          	lw	s5,20(sp)
    7e58:	01012b03          	lw	s6,16(sp)
    7e5c:	00098513          	mv	a0,s3
    7e60:	01c12983          	lw	s3,28(sp)
    7e64:	03010113          	addi	sp,sp,48
    7e68:	00008067          	ret
    7e6c:	00178693          	addi	a3,a5,1
    7e70:	00d12623          	sw	a3,12(sp)
    7e74:	00e78023          	sb	a4,0(a5)
    7e78:	fb1ff06f          	j	7e28 <__cvt+0x104>

00007e7c <__exponent>:
    7e7c:	00c50023          	sb	a2,0(a0)
    7e80:	00250793          	addi	a5,a0,2
    7e84:	02b00713          	li	a4,43
    7e88:	0005d663          	bgez	a1,7e94 <__exponent+0x18>
    7e8c:	40b005b3          	neg	a1,a1
    7e90:	02d00713          	li	a4,45
    7e94:	00e500a3          	sb	a4,1(a0)
    7e98:	00900713          	li	a4,9
    7e9c:	08b75263          	bge	a4,a1,7f20 <__exponent+0xa4>
    7ea0:	ff010113          	addi	sp,sp,-16
    7ea4:	00f10713          	addi	a4,sp,15
    7ea8:	00070813          	mv	a6,a4
    7eac:	00a00893          	li	a7,10
    7eb0:	06300313          	li	t1,99
    7eb4:	0315e633          	rem	a2,a1,a7
    7eb8:	00070693          	mv	a3,a4
    7ebc:	fff70713          	addi	a4,a4,-1
    7ec0:	03060613          	addi	a2,a2,48
    7ec4:	fec68fa3          	sb	a2,-1(a3)
    7ec8:	00058613          	mv	a2,a1
    7ecc:	0315c5b3          	div	a1,a1,a7
    7ed0:	fec342e3          	blt	t1,a2,7eb4 <__exponent+0x38>
    7ed4:	ffe68893          	addi	a7,a3,-2
    7ed8:	03058593          	addi	a1,a1,48
    7edc:	feb70fa3          	sb	a1,-1(a4)
    7ee0:	00078613          	mv	a2,a5
    7ee4:	00088713          	mv	a4,a7
    7ee8:	03076263          	bltu	a4,a6,7f0c <__exponent+0x90>
    7eec:	00000713          	li	a4,0
    7ef0:	01186663          	bltu	a6,a7,7efc <__exponent+0x80>
    7ef4:	01110713          	addi	a4,sp,17
    7ef8:	40d70733          	sub	a4,a4,a3
    7efc:	00e787b3          	add	a5,a5,a4
    7f00:	40a78533          	sub	a0,a5,a0
    7f04:	01010113          	addi	sp,sp,16
    7f08:	00008067          	ret
    7f0c:	00074583          	lbu	a1,0(a4)
    7f10:	00170713          	addi	a4,a4,1
    7f14:	00160613          	addi	a2,a2,1
    7f18:	feb60fa3          	sb	a1,-1(a2)
    7f1c:	fcdff06f          	j	7ee8 <__exponent+0x6c>
    7f20:	03000793          	li	a5,48
    7f24:	00f50123          	sb	a5,2(a0)
    7f28:	03058593          	addi	a1,a1,48
    7f2c:	00450793          	addi	a5,a0,4
    7f30:	00b501a3          	sb	a1,3(a0)
    7f34:	40a78533          	sub	a0,a5,a0
    7f38:	00008067          	ret

00007f3c <_printf_float>:
    7f3c:	f8010113          	addi	sp,sp,-128
    7f40:	06112e23          	sw	ra,124(sp)
    7f44:	06812c23          	sw	s0,120(sp)
    7f48:	06912a23          	sw	s1,116(sp)
    7f4c:	00058413          	mv	s0,a1
    7f50:	07212823          	sw	s2,112(sp)
    7f54:	07312623          	sw	s3,108(sp)
    7f58:	07412423          	sw	s4,104(sp)
    7f5c:	07512223          	sw	s5,100(sp)
    7f60:	00070a13          	mv	s4,a4
    7f64:	07612023          	sw	s6,96(sp)
    7f68:	05712e23          	sw	s7,92(sp)
    7f6c:	05812c23          	sw	s8,88(sp)
    7f70:	00060913          	mv	s2,a2
    7f74:	00068993          	mv	s3,a3
    7f78:	05912a23          	sw	s9,84(sp)
    7f7c:	05a12823          	sw	s10,80(sp)
    7f80:	05b12623          	sw	s11,76(sp)
    7f84:	00050493          	mv	s1,a0
    7f88:	4d0020ef          	jal	ra,a458 <_localeconv_r>
    7f8c:	00052c03          	lw	s8,0(a0)
    7f90:	000c0513          	mv	a0,s8
    7f94:	549000ef          	jal	ra,8cdc <strlen>
    7f98:	00042b03          	lw	s6,0(s0)
    7f9c:	02012c23          	sw	zero,56(sp)
    7fa0:	01844a83          	lbu	s5,24(s0)
    7fa4:	100b7713          	andi	a4,s6,256
    7fa8:	000a2783          	lw	a5,0(s4)
    7fac:	00050b93          	mv	s7,a0
    7fb0:	12070c63          	beqz	a4,80e8 <_printf_float+0x1ac>
    7fb4:	00478713          	addi	a4,a5,4
    7fb8:	00ea2023          	sw	a4,0(s4)
    7fbc:	0007a783          	lw	a5,0(a5)
    7fc0:	02010513          	addi	a0,sp,32
    7fc4:	0007a703          	lw	a4,0(a5)
    7fc8:	02e12023          	sw	a4,32(sp)
    7fcc:	0047a703          	lw	a4,4(a5)
    7fd0:	02e12223          	sw	a4,36(sp)
    7fd4:	0087a703          	lw	a4,8(a5)
    7fd8:	02e12423          	sw	a4,40(sp)
    7fdc:	00c7a783          	lw	a5,12(a5)
    7fe0:	02f12623          	sw	a5,44(sp)
    7fe4:	e08fb0ef          	jal	ra,35ec <__trunctfdf2>
    7fe8:	04a42423          	sw	a0,72(s0)
    7fec:	04b42623          	sw	a1,76(s0)
    7ff0:	04c42a03          	lw	s4,76(s0)
    7ff4:	0000c737          	lui	a4,0xc
    7ff8:	04842c83          	lw	s9,72(s0)
    7ffc:	5a872d03          	lw	s10,1448(a4) # c5a8 <__device_handles_end+0xc>
    8000:	5ac72d83          	lw	s11,1452(a4)
    8004:	001a1793          	slli	a5,s4,0x1
    8008:	0017d793          	srli	a5,a5,0x1
    800c:	000d0613          	mv	a2,s10
    8010:	000d8693          	mv	a3,s11
    8014:	000c8513          	mv	a0,s9
    8018:	00078593          	mv	a1,a5
    801c:	00f12e23          	sw	a5,28(sp)
    8020:	c58fb0ef          	jal	ra,3478 <__unorddf2>
    8024:	0e051463          	bnez	a0,810c <_printf_float+0x1d0>
    8028:	01c12783          	lw	a5,28(sp)
    802c:	000d0613          	mv	a2,s10
    8030:	000d8693          	mv	a3,s11
    8034:	000c8513          	mv	a0,s9
    8038:	00078593          	mv	a1,a5
    803c:	b58fb0ef          	jal	ra,3394 <__ledf2>
    8040:	0ca05663          	blez	a0,810c <_printf_float+0x1d0>
    8044:	00000613          	li	a2,0
    8048:	00000693          	li	a3,0
    804c:	000c8513          	mv	a0,s9
    8050:	000a0593          	mv	a1,s4
    8054:	b40fb0ef          	jal	ra,3394 <__ledf2>
    8058:	00055663          	bgez	a0,8064 <_printf_float+0x128>
    805c:	02d00793          	li	a5,45
    8060:	04f401a3          	sb	a5,67(s0)
    8064:	04700793          	li	a5,71
    8068:	0d57fe63          	bgeu	a5,s5,8144 <_printf_float+0x208>
    806c:	0000da37          	lui	s4,0xd
    8070:	da4a0a13          	addi	s4,s4,-604 # cda4 <_ctype_+0x108>
    8074:	ffbb7b13          	andi	s6,s6,-5
    8078:	00300793          	li	a5,3
    807c:	01642023          	sw	s6,0(s0)
    8080:	00f42823          	sw	a5,16(s0)
    8084:	00000b13          	li	s6,0
    8088:	00098713          	mv	a4,s3
    808c:	00090693          	mv	a3,s2
    8090:	03c10613          	addi	a2,sp,60
    8094:	00040593          	mv	a1,s0
    8098:	00048513          	mv	a0,s1
    809c:	634000ef          	jal	ra,86d0 <_printf_common>
    80a0:	fff00c93          	li	s9,-1
    80a4:	23951a63          	bne	a0,s9,82d8 <_printf_float+0x39c>
    80a8:	fff00513          	li	a0,-1
    80ac:	07c12083          	lw	ra,124(sp)
    80b0:	07812403          	lw	s0,120(sp)
    80b4:	07412483          	lw	s1,116(sp)
    80b8:	07012903          	lw	s2,112(sp)
    80bc:	06c12983          	lw	s3,108(sp)
    80c0:	06812a03          	lw	s4,104(sp)
    80c4:	06412a83          	lw	s5,100(sp)
    80c8:	06012b03          	lw	s6,96(sp)
    80cc:	05c12b83          	lw	s7,92(sp)
    80d0:	05812c03          	lw	s8,88(sp)
    80d4:	05412c83          	lw	s9,84(sp)
    80d8:	05012d03          	lw	s10,80(sp)
    80dc:	04c12d83          	lw	s11,76(sp)
    80e0:	08010113          	addi	sp,sp,128
    80e4:	00008067          	ret
    80e8:	00778793          	addi	a5,a5,7
    80ec:	ff87f793          	andi	a5,a5,-8
    80f0:	00878713          	addi	a4,a5,8
    80f4:	00ea2023          	sw	a4,0(s4)
    80f8:	0007a703          	lw	a4,0(a5)
    80fc:	0047a783          	lw	a5,4(a5)
    8100:	04e42423          	sw	a4,72(s0)
    8104:	04f42623          	sw	a5,76(s0)
    8108:	ee9ff06f          	j	7ff0 <_printf_float+0xb4>
    810c:	000c8613          	mv	a2,s9
    8110:	000a0693          	mv	a3,s4
    8114:	000c8513          	mv	a0,s9
    8118:	000a0593          	mv	a1,s4
    811c:	b5cfb0ef          	jal	ra,3478 <__unorddf2>
    8120:	02050e63          	beqz	a0,815c <_printf_float+0x220>
    8124:	000a5663          	bgez	s4,8130 <_printf_float+0x1f4>
    8128:	02d00793          	li	a5,45
    812c:	04f401a3          	sb	a5,67(s0)
    8130:	04700793          	li	a5,71
    8134:	0157fe63          	bgeu	a5,s5,8150 <_printf_float+0x214>
    8138:	0000da37          	lui	s4,0xd
    813c:	daca0a13          	addi	s4,s4,-596 # cdac <_ctype_+0x110>
    8140:	f35ff06f          	j	8074 <_printf_float+0x138>
    8144:	0000da37          	lui	s4,0xd
    8148:	da0a0a13          	addi	s4,s4,-608 # cda0 <_ctype_+0x104>
    814c:	f29ff06f          	j	8074 <_printf_float+0x138>
    8150:	0000da37          	lui	s4,0xd
    8154:	da8a0a13          	addi	s4,s4,-600 # cda8 <_ctype_+0x10c>
    8158:	f1dff06f          	j	8074 <_printf_float+0x138>
    815c:	00442783          	lw	a5,4(s0)
    8160:	fff00713          	li	a4,-1
    8164:	0dfafd13          	andi	s10,s5,223
    8168:	0ce79263          	bne	a5,a4,822c <_printf_float+0x2f0>
    816c:	00600793          	li	a5,6
    8170:	00f42223          	sw	a5,4(s0)
    8174:	00442683          	lw	a3,4(s0)
    8178:	400b6713          	ori	a4,s6,1024
    817c:	03810793          	addi	a5,sp,56
    8180:	00f12023          	sw	a5,0(sp)
    8184:	000a0613          	mv	a2,s4
    8188:	03310793          	addi	a5,sp,51
    818c:	000c8593          	mv	a1,s9
    8190:	00e42023          	sw	a4,0(s0)
    8194:	00012223          	sw	zero,4(sp)
    8198:	000a8893          	mv	a7,s5
    819c:	03410813          	addi	a6,sp,52
    81a0:	00048513          	mv	a0,s1
    81a4:	b81ff0ef          	jal	ra,7d24 <__cvt>
    81a8:	04700793          	li	a5,71
    81ac:	03412583          	lw	a1,52(sp)
    81b0:	00050a13          	mv	s4,a0
    81b4:	00fd1e63          	bne	s10,a5,81d0 <_printf_float+0x294>
    81b8:	ffd00793          	li	a5,-3
    81bc:	00f5c663          	blt	a1,a5,81c8 <_printf_float+0x28c>
    81c0:	00442783          	lw	a5,4(s0)
    81c4:	0cb7dc63          	bge	a5,a1,829c <_printf_float+0x360>
    81c8:	ffea8a93          	addi	s5,s5,-2
    81cc:	0ffafa93          	andi	s5,s5,255
    81d0:	06500793          	li	a5,101
    81d4:	0757e663          	bltu	a5,s5,8240 <_printf_float+0x304>
    81d8:	fff58593          	addi	a1,a1,-1
    81dc:	000a8613          	mv	a2,s5
    81e0:	05040513          	addi	a0,s0,80
    81e4:	02b12a23          	sw	a1,52(sp)
    81e8:	c95ff0ef          	jal	ra,7e7c <__exponent>
    81ec:	03812703          	lw	a4,56(sp)
    81f0:	00100693          	li	a3,1
    81f4:	00050b13          	mv	s6,a0
    81f8:	00a707b3          	add	a5,a4,a0
    81fc:	00f42823          	sw	a5,16(s0)
    8200:	00e6c863          	blt	a3,a4,8210 <_printf_float+0x2d4>
    8204:	00042703          	lw	a4,0(s0)
    8208:	00177713          	andi	a4,a4,1
    820c:	00070663          	beqz	a4,8218 <_printf_float+0x2dc>
    8210:	00178793          	addi	a5,a5,1
    8214:	00f42823          	sw	a5,16(s0)
    8218:	03314783          	lbu	a5,51(sp)
    821c:	e60786e3          	beqz	a5,8088 <_printf_float+0x14c>
    8220:	02d00793          	li	a5,45
    8224:	04f401a3          	sb	a5,67(s0)
    8228:	e61ff06f          	j	8088 <_printf_float+0x14c>
    822c:	04700713          	li	a4,71
    8230:	f4ed12e3          	bne	s10,a4,8174 <_printf_float+0x238>
    8234:	f40790e3          	bnez	a5,8174 <_printf_float+0x238>
    8238:	00100793          	li	a5,1
    823c:	f35ff06f          	j	8170 <_printf_float+0x234>
    8240:	06600793          	li	a5,102
    8244:	04fa9e63          	bne	s5,a5,82a0 <_printf_float+0x364>
    8248:	00442783          	lw	a5,4(s0)
    824c:	02b05463          	blez	a1,8274 <_printf_float+0x338>
    8250:	00b42823          	sw	a1,16(s0)
    8254:	00079863          	bnez	a5,8264 <_printf_float+0x328>
    8258:	00042703          	lw	a4,0(s0)
    825c:	00177713          	andi	a4,a4,1
    8260:	02070863          	beqz	a4,8290 <_printf_float+0x354>
    8264:	00178793          	addi	a5,a5,1
    8268:	00b787b3          	add	a5,a5,a1
    826c:	00f42823          	sw	a5,16(s0)
    8270:	0200006f          	j	8290 <_printf_float+0x354>
    8274:	00079a63          	bnez	a5,8288 <_printf_float+0x34c>
    8278:	00042703          	lw	a4,0(s0)
    827c:	00100693          	li	a3,1
    8280:	00177713          	andi	a4,a4,1
    8284:	00070463          	beqz	a4,828c <_printf_float+0x350>
    8288:	00278693          	addi	a3,a5,2
    828c:	00d42823          	sw	a3,16(s0)
    8290:	04b42c23          	sw	a1,88(s0)
    8294:	00000b13          	li	s6,0
    8298:	f81ff06f          	j	8218 <_printf_float+0x2dc>
    829c:	06700a93          	li	s5,103
    82a0:	03812783          	lw	a5,56(sp)
    82a4:	00f5ce63          	blt	a1,a5,82c0 <_printf_float+0x384>
    82a8:	00042783          	lw	a5,0(s0)
    82ac:	00b42823          	sw	a1,16(s0)
    82b0:	0017f793          	andi	a5,a5,1
    82b4:	fc078ee3          	beqz	a5,8290 <_printf_float+0x354>
    82b8:	00158793          	addi	a5,a1,1
    82bc:	fb1ff06f          	j	826c <_printf_float+0x330>
    82c0:	00100713          	li	a4,1
    82c4:	00b04663          	bgtz	a1,82d0 <_printf_float+0x394>
    82c8:	00200713          	li	a4,2
    82cc:	40b70733          	sub	a4,a4,a1
    82d0:	00e787b3          	add	a5,a5,a4
    82d4:	f99ff06f          	j	826c <_printf_float+0x330>
    82d8:	00042783          	lw	a5,0(s0)
    82dc:	4007f713          	andi	a4,a5,1024
    82e0:	02071e63          	bnez	a4,831c <_printf_float+0x3e0>
    82e4:	01042683          	lw	a3,16(s0)
    82e8:	000a0613          	mv	a2,s4
    82ec:	00090593          	mv	a1,s2
    82f0:	00048513          	mv	a0,s1
    82f4:	000980e7          	jalr	s3
    82f8:	db9508e3          	beq	a0,s9,80a8 <_printf_float+0x16c>
    82fc:	00042783          	lw	a5,0(s0)
    8300:	0027f793          	andi	a5,a5,2
    8304:	3a079e63          	bnez	a5,86c0 <_printf_float+0x784>
    8308:	03c12783          	lw	a5,60(sp)
    830c:	00c42503          	lw	a0,12(s0)
    8310:	d8f55ee3          	bge	a0,a5,80ac <_printf_float+0x170>
    8314:	00078513          	mv	a0,a5
    8318:	d95ff06f          	j	80ac <_printf_float+0x170>
    831c:	06500713          	li	a4,101
    8320:	29577863          	bgeu	a4,s5,85b0 <_printf_float+0x674>
    8324:	04842503          	lw	a0,72(s0)
    8328:	04c42583          	lw	a1,76(s0)
    832c:	00000613          	li	a2,0
    8330:	00000693          	li	a3,0
    8334:	fd5fa0ef          	jal	ra,3308 <__eqdf2>
    8338:	08051663          	bnez	a0,83c4 <_printf_float+0x488>
    833c:	0000d637          	lui	a2,0xd
    8340:	00100693          	li	a3,1
    8344:	c2c60613          	addi	a2,a2,-980 # cc2c <gpio_veerwolf_driver_api+0x28>
    8348:	00090593          	mv	a1,s2
    834c:	00048513          	mv	a0,s1
    8350:	000980e7          	jalr	s3
    8354:	d5950ae3          	beq	a0,s9,80a8 <_printf_float+0x16c>
    8358:	03412703          	lw	a4,52(sp)
    835c:	03812783          	lw	a5,56(sp)
    8360:	00f74863          	blt	a4,a5,8370 <_printf_float+0x434>
    8364:	00042783          	lw	a5,0(s0)
    8368:	0017f793          	andi	a5,a5,1
    836c:	f80788e3          	beqz	a5,82fc <_printf_float+0x3c0>
    8370:	000b8693          	mv	a3,s7
    8374:	000c0613          	mv	a2,s8
    8378:	00090593          	mv	a1,s2
    837c:	00048513          	mv	a0,s1
    8380:	000980e7          	jalr	s3
    8384:	fff00793          	li	a5,-1
    8388:	d2f500e3          	beq	a0,a5,80a8 <_printf_float+0x16c>
    838c:	00000a13          	li	s4,0
    8390:	01a40a93          	addi	s5,s0,26
    8394:	fff00b13          	li	s6,-1
    8398:	03812783          	lw	a5,56(sp)
    839c:	fff78793          	addi	a5,a5,-1
    83a0:	f4fa5ee3          	bge	s4,a5,82fc <_printf_float+0x3c0>
    83a4:	00100693          	li	a3,1
    83a8:	000a8613          	mv	a2,s5
    83ac:	00090593          	mv	a1,s2
    83b0:	00048513          	mv	a0,s1
    83b4:	000980e7          	jalr	s3
    83b8:	cf6508e3          	beq	a0,s6,80a8 <_printf_float+0x16c>
    83bc:	001a0a13          	addi	s4,s4,1
    83c0:	fd9ff06f          	j	8398 <_printf_float+0x45c>
    83c4:	03412783          	lw	a5,52(sp)
    83c8:	0af04863          	bgtz	a5,8478 <_printf_float+0x53c>
    83cc:	0000d637          	lui	a2,0xd
    83d0:	00100693          	li	a3,1
    83d4:	c2c60613          	addi	a2,a2,-980 # cc2c <gpio_veerwolf_driver_api+0x28>
    83d8:	00090593          	mv	a1,s2
    83dc:	00048513          	mv	a0,s1
    83e0:	000980e7          	jalr	s3
    83e4:	cd9502e3          	beq	a0,s9,80a8 <_printf_float+0x16c>
    83e8:	03412783          	lw	a5,52(sp)
    83ec:	03812703          	lw	a4,56(sp)
    83f0:	00e7e7b3          	or	a5,a5,a4
    83f4:	00079863          	bnez	a5,8404 <_printf_float+0x4c8>
    83f8:	00042783          	lw	a5,0(s0)
    83fc:	0017f793          	andi	a5,a5,1
    8400:	ee078ee3          	beqz	a5,82fc <_printf_float+0x3c0>
    8404:	000b8693          	mv	a3,s7
    8408:	000c0613          	mv	a2,s8
    840c:	00090593          	mv	a1,s2
    8410:	00048513          	mv	a0,s1
    8414:	000980e7          	jalr	s3
    8418:	fff00793          	li	a5,-1
    841c:	c8f506e3          	beq	a0,a5,80a8 <_printf_float+0x16c>
    8420:	00000a93          	li	s5,0
    8424:	01a40b13          	addi	s6,s0,26
    8428:	fff00b93          	li	s7,-1
    842c:	03412783          	lw	a5,52(sp)
    8430:	40f007b3          	neg	a5,a5
    8434:	02fac263          	blt	s5,a5,8458 <_printf_float+0x51c>
    8438:	03812683          	lw	a3,56(sp)
    843c:	000a0613          	mv	a2,s4
    8440:	00090593          	mv	a1,s2
    8444:	00048513          	mv	a0,s1
    8448:	000980e7          	jalr	s3
    844c:	fff00793          	li	a5,-1
    8450:	eaf516e3          	bne	a0,a5,82fc <_printf_float+0x3c0>
    8454:	c55ff06f          	j	80a8 <_printf_float+0x16c>
    8458:	00100693          	li	a3,1
    845c:	000b0613          	mv	a2,s6
    8460:	00090593          	mv	a1,s2
    8464:	00048513          	mv	a0,s1
    8468:	000980e7          	jalr	s3
    846c:	c3750ee3          	beq	a0,s7,80a8 <_printf_float+0x16c>
    8470:	001a8a93          	addi	s5,s5,1
    8474:	fb9ff06f          	j	842c <_printf_float+0x4f0>
    8478:	05842783          	lw	a5,88(s0)
    847c:	03812a83          	lw	s5,56(sp)
    8480:	0157d463          	bge	a5,s5,8488 <_printf_float+0x54c>
    8484:	00078a93          	mv	s5,a5
    8488:	0b504463          	bgtz	s5,8530 <_printf_float+0x5f4>
    848c:	00000b13          	li	s6,0
    8490:	01a40d13          	addi	s10,s0,26
    8494:	fff00d93          	li	s11,-1
    8498:	05842c83          	lw	s9,88(s0)
    849c:	000a8793          	mv	a5,s5
    84a0:	000ad463          	bgez	s5,84a8 <_printf_float+0x56c>
    84a4:	00000793          	li	a5,0
    84a8:	40fc87b3          	sub	a5,s9,a5
    84ac:	0afb4263          	blt	s6,a5,8550 <_printf_float+0x614>
    84b0:	03412703          	lw	a4,52(sp)
    84b4:	03812783          	lw	a5,56(sp)
    84b8:	0af74c63          	blt	a4,a5,8570 <_printf_float+0x634>
    84bc:	00042783          	lw	a5,0(s0)
    84c0:	0017f793          	andi	a5,a5,1
    84c4:	0a079663          	bnez	a5,8570 <_printf_float+0x634>
    84c8:	03812a83          	lw	s5,56(sp)
    84cc:	03412703          	lw	a4,52(sp)
    84d0:	419a87b3          	sub	a5,s5,s9
    84d4:	40ea8ab3          	sub	s5,s5,a4
    84d8:	0157d463          	bge	a5,s5,84e0 <_printf_float+0x5a4>
    84dc:	00078a93          	mv	s5,a5
    84e0:	0b504863          	bgtz	s5,8590 <_printf_float+0x654>
    84e4:	00000a13          	li	s4,0
    84e8:	01a40b13          	addi	s6,s0,26
    84ec:	fff00b93          	li	s7,-1
    84f0:	03412703          	lw	a4,52(sp)
    84f4:	03812783          	lw	a5,56(sp)
    84f8:	40e787b3          	sub	a5,a5,a4
    84fc:	000a8713          	mv	a4,s5
    8500:	000ad463          	bgez	s5,8508 <_printf_float+0x5cc>
    8504:	00000713          	li	a4,0
    8508:	40e787b3          	sub	a5,a5,a4
    850c:	defa58e3          	bge	s4,a5,82fc <_printf_float+0x3c0>
    8510:	00100693          	li	a3,1
    8514:	000b0613          	mv	a2,s6
    8518:	00090593          	mv	a1,s2
    851c:	00048513          	mv	a0,s1
    8520:	000980e7          	jalr	s3
    8524:	b97502e3          	beq	a0,s7,80a8 <_printf_float+0x16c>
    8528:	001a0a13          	addi	s4,s4,1
    852c:	fc5ff06f          	j	84f0 <_printf_float+0x5b4>
    8530:	000a8693          	mv	a3,s5
    8534:	000a0613          	mv	a2,s4
    8538:	00090593          	mv	a1,s2
    853c:	00048513          	mv	a0,s1
    8540:	000980e7          	jalr	s3
    8544:	fff00793          	li	a5,-1
    8548:	f4f512e3          	bne	a0,a5,848c <_printf_float+0x550>
    854c:	b5dff06f          	j	80a8 <_printf_float+0x16c>
    8550:	00100693          	li	a3,1
    8554:	000d0613          	mv	a2,s10
    8558:	00090593          	mv	a1,s2
    855c:	00048513          	mv	a0,s1
    8560:	000980e7          	jalr	s3
    8564:	b5b502e3          	beq	a0,s11,80a8 <_printf_float+0x16c>
    8568:	001b0b13          	addi	s6,s6,1
    856c:	f2dff06f          	j	8498 <_printf_float+0x55c>
    8570:	000b8693          	mv	a3,s7
    8574:	000c0613          	mv	a2,s8
    8578:	00090593          	mv	a1,s2
    857c:	00048513          	mv	a0,s1
    8580:	000980e7          	jalr	s3
    8584:	fff00793          	li	a5,-1
    8588:	f4f510e3          	bne	a0,a5,84c8 <_printf_float+0x58c>
    858c:	b1dff06f          	j	80a8 <_printf_float+0x16c>
    8590:	000a8693          	mv	a3,s5
    8594:	019a0633          	add	a2,s4,s9
    8598:	00090593          	mv	a1,s2
    859c:	00048513          	mv	a0,s1
    85a0:	000980e7          	jalr	s3
    85a4:	fff00793          	li	a5,-1
    85a8:	f2f51ee3          	bne	a0,a5,84e4 <_printf_float+0x5a8>
    85ac:	afdff06f          	j	80a8 <_printf_float+0x16c>
    85b0:	03812683          	lw	a3,56(sp)
    85b4:	00100713          	li	a4,1
    85b8:	00d74663          	blt	a4,a3,85c4 <_printf_float+0x688>
    85bc:	0017f793          	andi	a5,a5,1
    85c0:	0a078a63          	beqz	a5,8674 <_printf_float+0x738>
    85c4:	00100693          	li	a3,1
    85c8:	000a0613          	mv	a2,s4
    85cc:	00090593          	mv	a1,s2
    85d0:	00048513          	mv	a0,s1
    85d4:	000980e7          	jalr	s3
    85d8:	fff00a93          	li	s5,-1
    85dc:	ad5506e3          	beq	a0,s5,80a8 <_printf_float+0x16c>
    85e0:	000b8693          	mv	a3,s7
    85e4:	000c0613          	mv	a2,s8
    85e8:	00090593          	mv	a1,s2
    85ec:	00048513          	mv	a0,s1
    85f0:	000980e7          	jalr	s3
    85f4:	ab550ae3          	beq	a0,s5,80a8 <_printf_float+0x16c>
    85f8:	04842503          	lw	a0,72(s0)
    85fc:	04c42583          	lw	a1,76(s0)
    8600:	00000613          	li	a2,0
    8604:	00000693          	li	a3,0
    8608:	d01fa0ef          	jal	ra,3308 <__eqdf2>
    860c:	04050c63          	beqz	a0,8664 <_printf_float+0x728>
    8610:	03812683          	lw	a3,56(sp)
    8614:	001a0613          	addi	a2,s4,1
    8618:	00090593          	mv	a1,s2
    861c:	fff68693          	addi	a3,a3,-1
    8620:	00048513          	mv	a0,s1
    8624:	000980e7          	jalr	s3
    8628:	a95500e3          	beq	a0,s5,80a8 <_printf_float+0x16c>
    862c:	000b0693          	mv	a3,s6
    8630:	05040613          	addi	a2,s0,80
    8634:	e0dff06f          	j	8440 <_printf_float+0x504>
    8638:	00100693          	li	a3,1
    863c:	000a8613          	mv	a2,s5
    8640:	00090593          	mv	a1,s2
    8644:	00048513          	mv	a0,s1
    8648:	000980e7          	jalr	s3
    864c:	a5750ee3          	beq	a0,s7,80a8 <_printf_float+0x16c>
    8650:	001a0a13          	addi	s4,s4,1
    8654:	03812783          	lw	a5,56(sp)
    8658:	fff78793          	addi	a5,a5,-1
    865c:	fcfa4ee3          	blt	s4,a5,8638 <_printf_float+0x6fc>
    8660:	fcdff06f          	j	862c <_printf_float+0x6f0>
    8664:	00000a13          	li	s4,0
    8668:	01a40a93          	addi	s5,s0,26
    866c:	fff00b93          	li	s7,-1
    8670:	fe5ff06f          	j	8654 <_printf_float+0x718>
    8674:	00100693          	li	a3,1
    8678:	000a0613          	mv	a2,s4
    867c:	00090593          	mv	a1,s2
    8680:	00048513          	mv	a0,s1
    8684:	000980e7          	jalr	s3
    8688:	fb9512e3          	bne	a0,s9,862c <_printf_float+0x6f0>
    868c:	a1dff06f          	j	80a8 <_printf_float+0x16c>
    8690:	00100693          	li	a3,1
    8694:	000a8613          	mv	a2,s5
    8698:	00090593          	mv	a1,s2
    869c:	00048513          	mv	a0,s1
    86a0:	000980e7          	jalr	s3
    86a4:	a16502e3          	beq	a0,s6,80a8 <_printf_float+0x16c>
    86a8:	001a0a13          	addi	s4,s4,1
    86ac:	00c42783          	lw	a5,12(s0)
    86b0:	03c12703          	lw	a4,60(sp)
    86b4:	40e787b3          	sub	a5,a5,a4
    86b8:	fcfa4ce3          	blt	s4,a5,8690 <_printf_float+0x754>
    86bc:	c4dff06f          	j	8308 <_printf_float+0x3cc>
    86c0:	00000a13          	li	s4,0
    86c4:	01940a93          	addi	s5,s0,25
    86c8:	fff00b13          	li	s6,-1
    86cc:	fe1ff06f          	j	86ac <_printf_float+0x770>

000086d0 <_printf_common>:
    86d0:	fd010113          	addi	sp,sp,-48
    86d4:	01412c23          	sw	s4,24(sp)
    86d8:	0105a783          	lw	a5,16(a1)
    86dc:	00070a13          	mv	s4,a4
    86e0:	0085a703          	lw	a4,8(a1)
    86e4:	02812423          	sw	s0,40(sp)
    86e8:	02912223          	sw	s1,36(sp)
    86ec:	01312e23          	sw	s3,28(sp)
    86f0:	01512a23          	sw	s5,20(sp)
    86f4:	02112623          	sw	ra,44(sp)
    86f8:	03212023          	sw	s2,32(sp)
    86fc:	01612823          	sw	s6,16(sp)
    8700:	01712623          	sw	s7,12(sp)
    8704:	00050993          	mv	s3,a0
    8708:	00058413          	mv	s0,a1
    870c:	00060493          	mv	s1,a2
    8710:	00068a93          	mv	s5,a3
    8714:	00e7d463          	bge	a5,a4,871c <_printf_common+0x4c>
    8718:	00070793          	mv	a5,a4
    871c:	00f4a023          	sw	a5,0(s1)
    8720:	04344703          	lbu	a4,67(s0)
    8724:	00070663          	beqz	a4,8730 <_printf_common+0x60>
    8728:	00178793          	addi	a5,a5,1
    872c:	00f4a023          	sw	a5,0(s1)
    8730:	00042783          	lw	a5,0(s0)
    8734:	0207f793          	andi	a5,a5,32
    8738:	00078863          	beqz	a5,8748 <_printf_common+0x78>
    873c:	0004a783          	lw	a5,0(s1)
    8740:	00278793          	addi	a5,a5,2
    8744:	00f4a023          	sw	a5,0(s1)
    8748:	00042903          	lw	s2,0(s0)
    874c:	00697913          	andi	s2,s2,6
    8750:	00091e63          	bnez	s2,876c <_printf_common+0x9c>
    8754:	01940b13          	addi	s6,s0,25
    8758:	fff00b93          	li	s7,-1
    875c:	00c42783          	lw	a5,12(s0)
    8760:	0004a703          	lw	a4,0(s1)
    8764:	40e787b3          	sub	a5,a5,a4
    8768:	08f94263          	blt	s2,a5,87ec <_printf_common+0x11c>
    876c:	04344783          	lbu	a5,67(s0)
    8770:	00f036b3          	snez	a3,a5
    8774:	00042783          	lw	a5,0(s0)
    8778:	0207f793          	andi	a5,a5,32
    877c:	0c079063          	bnez	a5,883c <_printf_common+0x16c>
    8780:	04340613          	addi	a2,s0,67
    8784:	000a8593          	mv	a1,s5
    8788:	00098513          	mv	a0,s3
    878c:	000a00e7          	jalr	s4
    8790:	fff00793          	li	a5,-1
    8794:	06f50863          	beq	a0,a5,8804 <_printf_common+0x134>
    8798:	00042783          	lw	a5,0(s0)
    879c:	00400613          	li	a2,4
    87a0:	0004a703          	lw	a4,0(s1)
    87a4:	0067f793          	andi	a5,a5,6
    87a8:	00c42683          	lw	a3,12(s0)
    87ac:	00000493          	li	s1,0
    87b0:	00c79863          	bne	a5,a2,87c0 <_printf_common+0xf0>
    87b4:	40e684b3          	sub	s1,a3,a4
    87b8:	0004d463          	bgez	s1,87c0 <_printf_common+0xf0>
    87bc:	00000493          	li	s1,0
    87c0:	00842783          	lw	a5,8(s0)
    87c4:	01042703          	lw	a4,16(s0)
    87c8:	00f75663          	bge	a4,a5,87d4 <_printf_common+0x104>
    87cc:	40e787b3          	sub	a5,a5,a4
    87d0:	00f484b3          	add	s1,s1,a5
    87d4:	00000913          	li	s2,0
    87d8:	01a40413          	addi	s0,s0,26
    87dc:	fff00b13          	li	s6,-1
    87e0:	09249063          	bne	s1,s2,8860 <_printf_common+0x190>
    87e4:	00000513          	li	a0,0
    87e8:	0200006f          	j	8808 <_printf_common+0x138>
    87ec:	00100693          	li	a3,1
    87f0:	000b0613          	mv	a2,s6
    87f4:	000a8593          	mv	a1,s5
    87f8:	00098513          	mv	a0,s3
    87fc:	000a00e7          	jalr	s4
    8800:	03751a63          	bne	a0,s7,8834 <_printf_common+0x164>
    8804:	fff00513          	li	a0,-1
    8808:	02c12083          	lw	ra,44(sp)
    880c:	02812403          	lw	s0,40(sp)
    8810:	02412483          	lw	s1,36(sp)
    8814:	02012903          	lw	s2,32(sp)
    8818:	01c12983          	lw	s3,28(sp)
    881c:	01812a03          	lw	s4,24(sp)
    8820:	01412a83          	lw	s5,20(sp)
    8824:	01012b03          	lw	s6,16(sp)
    8828:	00c12b83          	lw	s7,12(sp)
    882c:	03010113          	addi	sp,sp,48
    8830:	00008067          	ret
    8834:	00190913          	addi	s2,s2,1
    8838:	f25ff06f          	j	875c <_printf_common+0x8c>
    883c:	00d40733          	add	a4,s0,a3
    8840:	03000613          	li	a2,48
    8844:	04c701a3          	sb	a2,67(a4)
    8848:	04544703          	lbu	a4,69(s0)
    884c:	00168793          	addi	a5,a3,1
    8850:	00f407b3          	add	a5,s0,a5
    8854:	00268693          	addi	a3,a3,2
    8858:	04e781a3          	sb	a4,67(a5)
    885c:	f25ff06f          	j	8780 <_printf_common+0xb0>
    8860:	00100693          	li	a3,1
    8864:	00040613          	mv	a2,s0
    8868:	000a8593          	mv	a1,s5
    886c:	00098513          	mv	a0,s3
    8870:	000a00e7          	jalr	s4
    8874:	f96508e3          	beq	a0,s6,8804 <_printf_common+0x134>
    8878:	00190913          	addi	s2,s2,1
    887c:	f65ff06f          	j	87e0 <_printf_common+0x110>

00008880 <_printf_i>:
    8880:	fd010113          	addi	sp,sp,-48
    8884:	02812423          	sw	s0,40(sp)
    8888:	02912223          	sw	s1,36(sp)
    888c:	03212023          	sw	s2,32(sp)
    8890:	01312e23          	sw	s3,28(sp)
    8894:	02112623          	sw	ra,44(sp)
    8898:	01412c23          	sw	s4,24(sp)
    889c:	01512a23          	sw	s5,20(sp)
    88a0:	01612823          	sw	s6,16(sp)
    88a4:	0185c883          	lbu	a7,24(a1)
    88a8:	07800793          	li	a5,120
    88ac:	00050493          	mv	s1,a0
    88b0:	00058413          	mv	s0,a1
    88b4:	00060913          	mv	s2,a2
    88b8:	00068993          	mv	s3,a3
    88bc:	0117ee63          	bltu	a5,a7,88d8 <_printf_i+0x58>
    88c0:	06200793          	li	a5,98
    88c4:	04358693          	addi	a3,a1,67
    88c8:	0117ee63          	bltu	a5,a7,88e4 <_printf_i+0x64>
    88cc:	28088a63          	beqz	a7,8b60 <_printf_i+0x2e0>
    88d0:	05800793          	li	a5,88
    88d4:	1cf88063          	beq	a7,a5,8a94 <_printf_i+0x214>
    88d8:	04240a93          	addi	s5,s0,66
    88dc:	05140123          	sb	a7,66(s0)
    88e0:	0440006f          	j	8924 <_printf_i+0xa4>
    88e4:	f9d88793          	addi	a5,a7,-99
    88e8:	0ff7f793          	andi	a5,a5,255
    88ec:	01500613          	li	a2,21
    88f0:	fef664e3          	bltu	a2,a5,88d8 <_printf_i+0x58>
    88f4:	0000d637          	lui	a2,0xd
    88f8:	00279793          	slli	a5,a5,0x2
    88fc:	dd860613          	addi	a2,a2,-552 # cdd8 <_ctype_+0x13c>
    8900:	00c787b3          	add	a5,a5,a2
    8904:	0007a783          	lw	a5,0(a5)
    8908:	00078067          	jr	a5
    890c:	00072783          	lw	a5,0(a4)
    8910:	04258a93          	addi	s5,a1,66
    8914:	00478693          	addi	a3,a5,4
    8918:	0007a783          	lw	a5,0(a5)
    891c:	00d72023          	sw	a3,0(a4)
    8920:	04f58123          	sb	a5,66(a1)
    8924:	00100793          	li	a5,1
    8928:	2740006f          	j	8b9c <_printf_i+0x31c>
    892c:	0005a783          	lw	a5,0(a1)
    8930:	00072503          	lw	a0,0(a4)
    8934:	0807f613          	andi	a2,a5,128
    8938:	00450593          	addi	a1,a0,4
    893c:	02060663          	beqz	a2,8968 <_printf_i+0xe8>
    8940:	00052783          	lw	a5,0(a0)
    8944:	00b72023          	sw	a1,0(a4)
    8948:	0000d837          	lui	a6,0xd
    894c:	0007d863          	bgez	a5,895c <_printf_i+0xdc>
    8950:	02d00713          	li	a4,45
    8954:	40f007b3          	neg	a5,a5
    8958:	04e401a3          	sb	a4,67(s0)
    895c:	db080813          	addi	a6,a6,-592 # cdb0 <_ctype_+0x114>
    8960:	00a00713          	li	a4,10
    8964:	0680006f          	j	89cc <_printf_i+0x14c>
    8968:	0407f613          	andi	a2,a5,64
    896c:	00052783          	lw	a5,0(a0)
    8970:	00b72023          	sw	a1,0(a4)
    8974:	fc060ae3          	beqz	a2,8948 <_printf_i+0xc8>
    8978:	01079793          	slli	a5,a5,0x10
    897c:	4107d793          	srai	a5,a5,0x10
    8980:	fc9ff06f          	j	8948 <_printf_i+0xc8>
    8984:	0005a603          	lw	a2,0(a1)
    8988:	00072783          	lw	a5,0(a4)
    898c:	08067513          	andi	a0,a2,128
    8990:	00478593          	addi	a1,a5,4
    8994:	00050863          	beqz	a0,89a4 <_printf_i+0x124>
    8998:	00b72023          	sw	a1,0(a4)
    899c:	0007a783          	lw	a5,0(a5)
    89a0:	0140006f          	j	89b4 <_printf_i+0x134>
    89a4:	04067613          	andi	a2,a2,64
    89a8:	00b72023          	sw	a1,0(a4)
    89ac:	fe0608e3          	beqz	a2,899c <_printf_i+0x11c>
    89b0:	0007d783          	lhu	a5,0(a5)
    89b4:	0000d837          	lui	a6,0xd
    89b8:	06f00713          	li	a4,111
    89bc:	db080813          	addi	a6,a6,-592 # cdb0 <_ctype_+0x114>
    89c0:	14e88e63          	beq	a7,a4,8b1c <_printf_i+0x29c>
    89c4:	00a00713          	li	a4,10
    89c8:	040401a3          	sb	zero,67(s0)
    89cc:	00442603          	lw	a2,4(s0)
    89d0:	00c42423          	sw	a2,8(s0)
    89d4:	00064863          	bltz	a2,89e4 <_printf_i+0x164>
    89d8:	00042583          	lw	a1,0(s0)
    89dc:	ffb5f593          	andi	a1,a1,-5
    89e0:	00b42023          	sw	a1,0(s0)
    89e4:	00079663          	bnez	a5,89f0 <_printf_i+0x170>
    89e8:	00068a93          	mv	s5,a3
    89ec:	02060463          	beqz	a2,8a14 <_printf_i+0x194>
    89f0:	00068a93          	mv	s5,a3
    89f4:	02e7f633          	remu	a2,a5,a4
    89f8:	fffa8a93          	addi	s5,s5,-1
    89fc:	00c80633          	add	a2,a6,a2
    8a00:	00064603          	lbu	a2,0(a2)
    8a04:	00ca8023          	sb	a2,0(s5)
    8a08:	00078613          	mv	a2,a5
    8a0c:	02e7d7b3          	divu	a5,a5,a4
    8a10:	fee672e3          	bgeu	a2,a4,89f4 <_printf_i+0x174>
    8a14:	00800793          	li	a5,8
    8a18:	02f71463          	bne	a4,a5,8a40 <_printf_i+0x1c0>
    8a1c:	00042783          	lw	a5,0(s0)
    8a20:	0017f793          	andi	a5,a5,1
    8a24:	00078e63          	beqz	a5,8a40 <_printf_i+0x1c0>
    8a28:	00442703          	lw	a4,4(s0)
    8a2c:	01042783          	lw	a5,16(s0)
    8a30:	00e7c863          	blt	a5,a4,8a40 <_printf_i+0x1c0>
    8a34:	03000793          	li	a5,48
    8a38:	fefa8fa3          	sb	a5,-1(s5)
    8a3c:	fffa8a93          	addi	s5,s5,-1
    8a40:	415686b3          	sub	a3,a3,s5
    8a44:	00d42823          	sw	a3,16(s0)
    8a48:	00098713          	mv	a4,s3
    8a4c:	00090693          	mv	a3,s2
    8a50:	00c10613          	addi	a2,sp,12
    8a54:	00040593          	mv	a1,s0
    8a58:	00048513          	mv	a0,s1
    8a5c:	c75ff0ef          	jal	ra,86d0 <_printf_common>
    8a60:	fff00a13          	li	s4,-1
    8a64:	15451263          	bne	a0,s4,8ba8 <_printf_i+0x328>
    8a68:	fff00513          	li	a0,-1
    8a6c:	02c12083          	lw	ra,44(sp)
    8a70:	02812403          	lw	s0,40(sp)
    8a74:	02412483          	lw	s1,36(sp)
    8a78:	02012903          	lw	s2,32(sp)
    8a7c:	01c12983          	lw	s3,28(sp)
    8a80:	01812a03          	lw	s4,24(sp)
    8a84:	01412a83          	lw	s5,20(sp)
    8a88:	01012b03          	lw	s6,16(sp)
    8a8c:	03010113          	addi	sp,sp,48
    8a90:	00008067          	ret
    8a94:	0000d837          	lui	a6,0xd
    8a98:	051582a3          	sb	a7,69(a1)
    8a9c:	db080813          	addi	a6,a6,-592 # cdb0 <_ctype_+0x114>
    8aa0:	00042603          	lw	a2,0(s0)
    8aa4:	00072583          	lw	a1,0(a4)
    8aa8:	08067513          	andi	a0,a2,128
    8aac:	0005a783          	lw	a5,0(a1)
    8ab0:	00458593          	addi	a1,a1,4
    8ab4:	04050863          	beqz	a0,8b04 <_printf_i+0x284>
    8ab8:	00b72023          	sw	a1,0(a4)
    8abc:	00167713          	andi	a4,a2,1
    8ac0:	00070663          	beqz	a4,8acc <_printf_i+0x24c>
    8ac4:	02066613          	ori	a2,a2,32
    8ac8:	00c42023          	sw	a2,0(s0)
    8acc:	01000713          	li	a4,16
    8ad0:	ee079ce3          	bnez	a5,89c8 <_printf_i+0x148>
    8ad4:	00042603          	lw	a2,0(s0)
    8ad8:	fdf67613          	andi	a2,a2,-33
    8adc:	00c42023          	sw	a2,0(s0)
    8ae0:	ee9ff06f          	j	89c8 <_printf_i+0x148>
    8ae4:	0005a783          	lw	a5,0(a1)
    8ae8:	0207e793          	ori	a5,a5,32
    8aec:	00f5a023          	sw	a5,0(a1)
    8af0:	07800793          	li	a5,120
    8af4:	0000d837          	lui	a6,0xd
    8af8:	04f402a3          	sb	a5,69(s0)
    8afc:	dc480813          	addi	a6,a6,-572 # cdc4 <_ctype_+0x128>
    8b00:	fa1ff06f          	j	8aa0 <_printf_i+0x220>
    8b04:	04067513          	andi	a0,a2,64
    8b08:	00b72023          	sw	a1,0(a4)
    8b0c:	fa0508e3          	beqz	a0,8abc <_printf_i+0x23c>
    8b10:	01079793          	slli	a5,a5,0x10
    8b14:	0107d793          	srli	a5,a5,0x10
    8b18:	fa5ff06f          	j	8abc <_printf_i+0x23c>
    8b1c:	00800713          	li	a4,8
    8b20:	ea9ff06f          	j	89c8 <_printf_i+0x148>
    8b24:	0005a603          	lw	a2,0(a1)
    8b28:	00072783          	lw	a5,0(a4)
    8b2c:	0145a583          	lw	a1,20(a1)
    8b30:	08067813          	andi	a6,a2,128
    8b34:	00478513          	addi	a0,a5,4
    8b38:	00080a63          	beqz	a6,8b4c <_printf_i+0x2cc>
    8b3c:	00a72023          	sw	a0,0(a4)
    8b40:	0007a783          	lw	a5,0(a5)
    8b44:	00b7a023          	sw	a1,0(a5)
    8b48:	0180006f          	j	8b60 <_printf_i+0x2e0>
    8b4c:	00a72023          	sw	a0,0(a4)
    8b50:	04067613          	andi	a2,a2,64
    8b54:	0007a783          	lw	a5,0(a5)
    8b58:	fe0606e3          	beqz	a2,8b44 <_printf_i+0x2c4>
    8b5c:	00b79023          	sh	a1,0(a5)
    8b60:	00042823          	sw	zero,16(s0)
    8b64:	00068a93          	mv	s5,a3
    8b68:	ee1ff06f          	j	8a48 <_printf_i+0x1c8>
    8b6c:	00072783          	lw	a5,0(a4)
    8b70:	0045a603          	lw	a2,4(a1)
    8b74:	00000593          	li	a1,0
    8b78:	00478693          	addi	a3,a5,4
    8b7c:	00d72023          	sw	a3,0(a4)
    8b80:	0007aa83          	lw	s5,0(a5)
    8b84:	000a8513          	mv	a0,s5
    8b88:	0dd010ef          	jal	ra,a464 <memchr>
    8b8c:	00050663          	beqz	a0,8b98 <_printf_i+0x318>
    8b90:	41550533          	sub	a0,a0,s5
    8b94:	00a42223          	sw	a0,4(s0)
    8b98:	00442783          	lw	a5,4(s0)
    8b9c:	00f42823          	sw	a5,16(s0)
    8ba0:	040401a3          	sb	zero,67(s0)
    8ba4:	ea5ff06f          	j	8a48 <_printf_i+0x1c8>
    8ba8:	01042683          	lw	a3,16(s0)
    8bac:	000a8613          	mv	a2,s5
    8bb0:	00090593          	mv	a1,s2
    8bb4:	00048513          	mv	a0,s1
    8bb8:	000980e7          	jalr	s3
    8bbc:	eb4506e3          	beq	a0,s4,8a68 <_printf_i+0x1e8>
    8bc0:	00042783          	lw	a5,0(s0)
    8bc4:	0027f793          	andi	a5,a5,2
    8bc8:	04079463          	bnez	a5,8c10 <_printf_i+0x390>
    8bcc:	00c12783          	lw	a5,12(sp)
    8bd0:	00c42503          	lw	a0,12(s0)
    8bd4:	e8f55ce3          	bge	a0,a5,8a6c <_printf_i+0x1ec>
    8bd8:	00078513          	mv	a0,a5
    8bdc:	e91ff06f          	j	8a6c <_printf_i+0x1ec>
    8be0:	00100693          	li	a3,1
    8be4:	000a8613          	mv	a2,s5
    8be8:	00090593          	mv	a1,s2
    8bec:	00048513          	mv	a0,s1
    8bf0:	000980e7          	jalr	s3
    8bf4:	e7650ae3          	beq	a0,s6,8a68 <_printf_i+0x1e8>
    8bf8:	001a0a13          	addi	s4,s4,1
    8bfc:	00c42783          	lw	a5,12(s0)
    8c00:	00c12703          	lw	a4,12(sp)
    8c04:	40e787b3          	sub	a5,a5,a4
    8c08:	fcfa4ce3          	blt	s4,a5,8be0 <_printf_i+0x360>
    8c0c:	fc1ff06f          	j	8bcc <_printf_i+0x34c>
    8c10:	00000a13          	li	s4,0
    8c14:	01940a93          	addi	s5,s0,25
    8c18:	fff00b13          	li	s6,-1
    8c1c:	fe1ff06f          	j	8bfc <_printf_i+0x37c>

00008c20 <iprintf>:
    8c20:	fb010113          	addi	sp,sp,-80
    8c24:	04f12223          	sw	a5,68(sp)
    8c28:	0000f7b7          	lui	a5,0xf
    8c2c:	02812423          	sw	s0,40(sp)
    8c30:	00050413          	mv	s0,a0
    8c34:	1387a503          	lw	a0,312(a5) # f138 <_impure_ptr>
    8c38:	02112623          	sw	ra,44(sp)
    8c3c:	02b12a23          	sw	a1,52(sp)
    8c40:	02c12c23          	sw	a2,56(sp)
    8c44:	02d12e23          	sw	a3,60(sp)
    8c48:	04e12023          	sw	a4,64(sp)
    8c4c:	05012423          	sw	a6,72(sp)
    8c50:	05112623          	sw	a7,76(sp)
    8c54:	00050c63          	beqz	a0,8c6c <iprintf+0x4c>
    8c58:	01852783          	lw	a5,24(a0)
    8c5c:	00079863          	bnez	a5,8c6c <iprintf+0x4c>
    8c60:	00a12623          	sw	a0,12(sp)
    8c64:	58c010ef          	jal	ra,a1f0 <__sinit>
    8c68:	00c12503          	lw	a0,12(sp)
    8c6c:	00852583          	lw	a1,8(a0)
    8c70:	03410693          	addi	a3,sp,52
    8c74:	00040613          	mv	a2,s0
    8c78:	00d12e23          	sw	a3,28(sp)
    8c7c:	5c0020ef          	jal	ra,b23c <_vfiprintf_r>
    8c80:	02c12083          	lw	ra,44(sp)
    8c84:	02812403          	lw	s0,40(sp)
    8c88:	05010113          	addi	sp,sp,80
    8c8c:	00008067          	ret

00008c90 <_sbrk_r>:
    8c90:	ff010113          	addi	sp,sp,-16
    8c94:	00812423          	sw	s0,8(sp)
    8c98:	00912223          	sw	s1,4(sp)
    8c9c:	00050413          	mv	s0,a0
    8ca0:	0000d4b7          	lui	s1,0xd
    8ca4:	00058513          	mv	a0,a1
    8ca8:	00112623          	sw	ra,12(sp)
    8cac:	0404a823          	sw	zero,80(s1) # d050 <errno>
    8cb0:	905fc0ef          	jal	ra,55b4 <_sbrk>
    8cb4:	fff00793          	li	a5,-1
    8cb8:	00f51863          	bne	a0,a5,8cc8 <_sbrk_r+0x38>
    8cbc:	0504a783          	lw	a5,80(s1)
    8cc0:	00078463          	beqz	a5,8cc8 <_sbrk_r+0x38>
    8cc4:	00f42023          	sw	a5,0(s0)
    8cc8:	00c12083          	lw	ra,12(sp)
    8ccc:	00812403          	lw	s0,8(sp)
    8cd0:	00412483          	lw	s1,4(sp)
    8cd4:	01010113          	addi	sp,sp,16
    8cd8:	00008067          	ret

00008cdc <strlen>:
    8cdc:	00050793          	mv	a5,a0
    8ce0:	0007c703          	lbu	a4,0(a5)
    8ce4:	00178793          	addi	a5,a5,1
    8ce8:	fe071ce3          	bnez	a4,8ce0 <strlen+0x4>
    8cec:	40a78533          	sub	a0,a5,a0
    8cf0:	fff50513          	addi	a0,a0,-1
    8cf4:	00008067          	ret

00008cf8 <strnlen>:
    8cf8:	00b505b3          	add	a1,a0,a1
    8cfc:	00050793          	mv	a5,a0
    8d00:	00b78663          	beq	a5,a1,8d0c <strnlen+0x14>
    8d04:	0007c703          	lbu	a4,0(a5)
    8d08:	00071663          	bnez	a4,8d14 <strnlen+0x1c>
    8d0c:	40a78533          	sub	a0,a5,a0
    8d10:	00008067          	ret
    8d14:	00178793          	addi	a5,a5,1
    8d18:	fe9ff06f          	j	8d00 <strnlen+0x8>

00008d1c <quorem>:
    8d1c:	fe010113          	addi	sp,sp,-32
    8d20:	00812c23          	sw	s0,24(sp)
    8d24:	01052783          	lw	a5,16(a0)
    8d28:	0105a403          	lw	s0,16(a1)
    8d2c:	00112e23          	sw	ra,28(sp)
    8d30:	00912a23          	sw	s1,20(sp)
    8d34:	01212823          	sw	s2,16(sp)
    8d38:	01312623          	sw	s3,12(sp)
    8d3c:	01412423          	sw	s4,8(sp)
    8d40:	01512223          	sw	s5,4(sp)
    8d44:	1887ce63          	blt	a5,s0,8ee0 <quorem+0x1c4>
    8d48:	fff40413          	addi	s0,s0,-1
    8d4c:	00241613          	slli	a2,s0,0x2
    8d50:	01458a13          	addi	s4,a1,20
    8d54:	00ca0ab3          	add	s5,s4,a2
    8d58:	01450993          	addi	s3,a0,20
    8d5c:	000aa783          	lw	a5,0(s5)
    8d60:	00c98633          	add	a2,s3,a2
    8d64:	00062703          	lw	a4,0(a2)
    8d68:	00178793          	addi	a5,a5,1
    8d6c:	00050913          	mv	s2,a0
    8d70:	02f754b3          	divu	s1,a4,a5
    8d74:	08f76863          	bltu	a4,a5,8e04 <quorem+0xe8>
    8d78:	00010537          	lui	a0,0x10
    8d7c:	000a0813          	mv	a6,s4
    8d80:	00098893          	mv	a7,s3
    8d84:	00000313          	li	t1,0
    8d88:	00000e13          	li	t3,0
    8d8c:	fff50513          	addi	a0,a0,-1 # ffff <__data_region_end+0xe03>
    8d90:	00082683          	lw	a3,0(a6)
    8d94:	00488893          	addi	a7,a7,4
    8d98:	00480813          	addi	a6,a6,4
    8d9c:	00a6f7b3          	and	a5,a3,a0
    8da0:	0106d693          	srli	a3,a3,0x10
    8da4:	029787b3          	mul	a5,a5,s1
    8da8:	029686b3          	mul	a3,a3,s1
    8dac:	006787b3          	add	a5,a5,t1
    8db0:	0107d713          	srli	a4,a5,0x10
    8db4:	00a7f7b3          	and	a5,a5,a0
    8db8:	40fe07b3          	sub	a5,t3,a5
    8dbc:	00e686b3          	add	a3,a3,a4
    8dc0:	ffc8a703          	lw	a4,-4(a7)
    8dc4:	0106d313          	srli	t1,a3,0x10
    8dc8:	00a6f6b3          	and	a3,a3,a0
    8dcc:	00a77e33          	and	t3,a4,a0
    8dd0:	01c787b3          	add	a5,a5,t3
    8dd4:	01075713          	srli	a4,a4,0x10
    8dd8:	40d70733          	sub	a4,a4,a3
    8ddc:	4107d693          	srai	a3,a5,0x10
    8de0:	00d70733          	add	a4,a4,a3
    8de4:	41075e13          	srai	t3,a4,0x10
    8de8:	00a7f7b3          	and	a5,a5,a0
    8dec:	01071713          	slli	a4,a4,0x10
    8df0:	00f767b3          	or	a5,a4,a5
    8df4:	fef8ae23          	sw	a5,-4(a7)
    8df8:	f90afce3          	bgeu	s5,a6,8d90 <quorem+0x74>
    8dfc:	00062783          	lw	a5,0(a2)
    8e00:	0a078a63          	beqz	a5,8eb4 <quorem+0x198>
    8e04:	00090513          	mv	a0,s2
    8e08:	795010ef          	jal	ra,ad9c <__mcmp>
    8e0c:	06054a63          	bltz	a0,8e80 <quorem+0x164>
    8e10:	000106b7          	lui	a3,0x10
    8e14:	00148493          	addi	s1,s1,1
    8e18:	00098613          	mv	a2,s3
    8e1c:	00000593          	li	a1,0
    8e20:	fff68693          	addi	a3,a3,-1 # ffff <__data_region_end+0xe03>
    8e24:	000a2503          	lw	a0,0(s4)
    8e28:	00062783          	lw	a5,0(a2)
    8e2c:	00460613          	addi	a2,a2,4
    8e30:	00d57733          	and	a4,a0,a3
    8e34:	40e585b3          	sub	a1,a1,a4
    8e38:	00d7f733          	and	a4,a5,a3
    8e3c:	00e58733          	add	a4,a1,a4
    8e40:	0107d793          	srli	a5,a5,0x10
    8e44:	01055513          	srli	a0,a0,0x10
    8e48:	41075593          	srai	a1,a4,0x10
    8e4c:	40a787b3          	sub	a5,a5,a0
    8e50:	00b787b3          	add	a5,a5,a1
    8e54:	4107d593          	srai	a1,a5,0x10
    8e58:	00d77733          	and	a4,a4,a3
    8e5c:	01079793          	slli	a5,a5,0x10
    8e60:	00e7e7b3          	or	a5,a5,a4
    8e64:	004a0a13          	addi	s4,s4,4
    8e68:	fef62e23          	sw	a5,-4(a2)
    8e6c:	fb4afce3          	bgeu	s5,s4,8e24 <quorem+0x108>
    8e70:	00241793          	slli	a5,s0,0x2
    8e74:	00f987b3          	add	a5,s3,a5
    8e78:	0007a703          	lw	a4,0(a5)
    8e7c:	04070a63          	beqz	a4,8ed0 <quorem+0x1b4>
    8e80:	00048513          	mv	a0,s1
    8e84:	01c12083          	lw	ra,28(sp)
    8e88:	01812403          	lw	s0,24(sp)
    8e8c:	01412483          	lw	s1,20(sp)
    8e90:	01012903          	lw	s2,16(sp)
    8e94:	00c12983          	lw	s3,12(sp)
    8e98:	00812a03          	lw	s4,8(sp)
    8e9c:	00412a83          	lw	s5,4(sp)
    8ea0:	02010113          	addi	sp,sp,32
    8ea4:	00008067          	ret
    8ea8:	00062783          	lw	a5,0(a2)
    8eac:	00079863          	bnez	a5,8ebc <quorem+0x1a0>
    8eb0:	fff40413          	addi	s0,s0,-1
    8eb4:	ffc60613          	addi	a2,a2,-4
    8eb8:	fec9e8e3          	bltu	s3,a2,8ea8 <quorem+0x18c>
    8ebc:	00892823          	sw	s0,16(s2)
    8ec0:	f45ff06f          	j	8e04 <quorem+0xe8>
    8ec4:	0007a703          	lw	a4,0(a5)
    8ec8:	00071863          	bnez	a4,8ed8 <quorem+0x1bc>
    8ecc:	fff40413          	addi	s0,s0,-1
    8ed0:	ffc78793          	addi	a5,a5,-4
    8ed4:	fef9e8e3          	bltu	s3,a5,8ec4 <quorem+0x1a8>
    8ed8:	00892823          	sw	s0,16(s2)
    8edc:	fa5ff06f          	j	8e80 <quorem+0x164>
    8ee0:	00000513          	li	a0,0
    8ee4:	fa1ff06f          	j	8e84 <quorem+0x168>

00008ee8 <_dtoa_r>:
    8ee8:	f5010113          	addi	sp,sp,-176
    8eec:	02f12c23          	sw	a5,56(sp)
    8ef0:	02452783          	lw	a5,36(a0)
    8ef4:	0a812423          	sw	s0,168(sp)
    8ef8:	0a912223          	sw	s1,164(sp)
    8efc:	0b212023          	sw	s2,160(sp)
    8f00:	09312e23          	sw	s3,156(sp)
    8f04:	09512a23          	sw	s5,148(sp)
    8f08:	09612823          	sw	s6,144(sp)
    8f0c:	0a112623          	sw	ra,172(sp)
    8f10:	09412c23          	sw	s4,152(sp)
    8f14:	09712623          	sw	s7,140(sp)
    8f18:	09812423          	sw	s8,136(sp)
    8f1c:	09912223          	sw	s9,132(sp)
    8f20:	09a12023          	sw	s10,128(sp)
    8f24:	07b12e23          	sw	s11,124(sp)
    8f28:	00d12a23          	sw	a3,20(sp)
    8f2c:	02e12023          	sw	a4,32(sp)
    8f30:	03112223          	sw	a7,36(sp)
    8f34:	00050493          	mv	s1,a0
    8f38:	00058a93          	mv	s5,a1
    8f3c:	00060413          	mv	s0,a2
    8f40:	00080913          	mv	s2,a6
    8f44:	00058993          	mv	s3,a1
    8f48:	00060b13          	mv	s6,a2
    8f4c:	04079063          	bnez	a5,8f8c <_dtoa_r+0xa4>
    8f50:	01000513          	li	a0,16
    8f54:	b65fe0ef          	jal	ra,7ab8 <malloc>
    8f58:	02a4a223          	sw	a0,36(s1)
    8f5c:	02051063          	bnez	a0,8f7c <_dtoa_r+0x94>
    8f60:	0000d6b7          	lui	a3,0xd
    8f64:	e4068693          	addi	a3,a3,-448 # ce40 <_ctype_+0x1a4>
    8f68:	00000613          	li	a2,0
    8f6c:	0ea00593          	li	a1,234
    8f70:	0000d537          	lui	a0,0xd
    8f74:	e5850513          	addi	a0,a0,-424 # ce58 <_ctype_+0x1bc>
    8f78:	331020ef          	jal	ra,baa8 <__assert_func>
    8f7c:	00052223          	sw	zero,4(a0)
    8f80:	00052423          	sw	zero,8(a0)
    8f84:	00052023          	sw	zero,0(a0)
    8f88:	00052623          	sw	zero,12(a0)
    8f8c:	0244a783          	lw	a5,36(s1)
    8f90:	0007a583          	lw	a1,0(a5)
    8f94:	02058463          	beqz	a1,8fbc <_dtoa_r+0xd4>
    8f98:	0047a703          	lw	a4,4(a5)
    8f9c:	00100793          	li	a5,1
    8fa0:	00048513          	mv	a0,s1
    8fa4:	00e797b3          	sll	a5,a5,a4
    8fa8:	00f5a423          	sw	a5,8(a1)
    8fac:	00e5a223          	sw	a4,4(a1)
    8fb0:	5f0010ef          	jal	ra,a5a0 <_Bfree>
    8fb4:	0244a783          	lw	a5,36(s1)
    8fb8:	0007a023          	sw	zero,0(a5)
    8fbc:	04045c63          	bgez	s0,9014 <_dtoa_r+0x12c>
    8fc0:	00100793          	li	a5,1
    8fc4:	00141413          	slli	s0,s0,0x1
    8fc8:	00f92023          	sw	a5,0(s2)
    8fcc:	00145b13          	srli	s6,s0,0x1
    8fd0:	7ff007b7          	lui	a5,0x7ff00
    8fd4:	00fb7733          	and	a4,s6,a5
    8fd8:	0af71863          	bne	a4,a5,9088 <_dtoa_r+0x1a0>
    8fdc:	03812703          	lw	a4,56(sp)
    8fe0:	000027b7          	lui	a5,0x2
    8fe4:	00cb1b13          	slli	s6,s6,0xc
    8fe8:	70f78793          	addi	a5,a5,1807 # 270f <__subsf3+0x26f>
    8fec:	00cb5b13          	srli	s6,s6,0xc
    8ff0:	00f72023          	sw	a5,0(a4)
    8ff4:	015b6ab3          	or	s5,s6,s5
    8ff8:	000a9463          	bnez	s5,9000 <_dtoa_r+0x118>
    8ffc:	0540106f          	j	a050 <_dtoa_r+0x1168>
    9000:	02412783          	lw	a5,36(sp)
    9004:	0000d537          	lui	a0,0xd
    9008:	06079663          	bnez	a5,9074 <_dtoa_r+0x18c>
    900c:	e3c50793          	addi	a5,a0,-452 # ce3c <_ctype_+0x1a0>
    9010:	0540106f          	j	a064 <_dtoa_r+0x117c>
    9014:	00092023          	sw	zero,0(s2)
    9018:	fb9ff06f          	j	8fd0 <_dtoa_r+0xe8>
    901c:	e3050793          	addi	a5,a0,-464
    9020:	00f12823          	sw	a5,16(sp)
    9024:	0000d7b7          	lui	a5,0xd
    9028:	e3878793          	addi	a5,a5,-456 # ce38 <_ctype_+0x19c>
    902c:	02412703          	lw	a4,36(sp)
    9030:	00f72023          	sw	a5,0(a4)
    9034:	0ac12083          	lw	ra,172(sp)
    9038:	0a812403          	lw	s0,168(sp)
    903c:	01012503          	lw	a0,16(sp)
    9040:	0a412483          	lw	s1,164(sp)
    9044:	0a012903          	lw	s2,160(sp)
    9048:	09c12983          	lw	s3,156(sp)
    904c:	09812a03          	lw	s4,152(sp)
    9050:	09412a83          	lw	s5,148(sp)
    9054:	09012b03          	lw	s6,144(sp)
    9058:	08c12b83          	lw	s7,140(sp)
    905c:	08812c03          	lw	s8,136(sp)
    9060:	08412c83          	lw	s9,132(sp)
    9064:	08012d03          	lw	s10,128(sp)
    9068:	07c12d83          	lw	s11,124(sp)
    906c:	0b010113          	addi	sp,sp,176
    9070:	00008067          	ret
    9074:	e3c50793          	addi	a5,a0,-452
    9078:	00f12823          	sw	a5,16(sp)
    907c:	0000d7b7          	lui	a5,0xd
    9080:	e3f78793          	addi	a5,a5,-449 # ce3f <_ctype_+0x1a3>
    9084:	fa9ff06f          	j	902c <_dtoa_r+0x144>
    9088:	00000613          	li	a2,0
    908c:	00000693          	li	a3,0
    9090:	000a8513          	mv	a0,s5
    9094:	000b0593          	mv	a1,s6
    9098:	03512623          	sw	s5,44(sp)
    909c:	03612823          	sw	s6,48(sp)
    90a0:	a68fa0ef          	jal	ra,3308 <__eqdf2>
    90a4:	02051c63          	bnez	a0,90dc <_dtoa_r+0x1f4>
    90a8:	03812703          	lw	a4,56(sp)
    90ac:	00100793          	li	a5,1
    90b0:	00f72023          	sw	a5,0(a4)
    90b4:	0000d737          	lui	a4,0xd
    90b8:	c2c70793          	addi	a5,a4,-980 # cc2c <gpio_veerwolf_driver_api+0x28>
    90bc:	00f12823          	sw	a5,16(sp)
    90c0:	02412783          	lw	a5,36(sp)
    90c4:	f60788e3          	beqz	a5,9034 <_dtoa_r+0x14c>
    90c8:	02412683          	lw	a3,36(sp)
    90cc:	0000d7b7          	lui	a5,0xd
    90d0:	c2d78793          	addi	a5,a5,-979 # cc2d <gpio_veerwolf_driver_api+0x29>
    90d4:	00f6a023          	sw	a5,0(a3)
    90d8:	f5dff06f          	j	9034 <_dtoa_r+0x14c>
    90dc:	06810713          	addi	a4,sp,104
    90e0:	06c10693          	addi	a3,sp,108
    90e4:	000b0613          	mv	a2,s6
    90e8:	000a8593          	mv	a1,s5
    90ec:	00048513          	mv	a0,s1
    90f0:	6fd010ef          	jal	ra,afec <__d2b>
    90f4:	014b5913          	srli	s2,s6,0x14
    90f8:	00a12623          	sw	a0,12(sp)
    90fc:	7ff97913          	andi	s2,s2,2047
    9100:	06812a03          	lw	s4,104(sp)
    9104:	1a090063          	beqz	s2,92a4 <_dtoa_r+0x3bc>
    9108:	03012783          	lw	a5,48(sp)
    910c:	02c12503          	lw	a0,44(sp)
    9110:	c0190913          	addi	s2,s2,-1023
    9114:	00c79593          	slli	a1,a5,0xc
    9118:	00c5d593          	srli	a1,a1,0xc
    911c:	3ff007b7          	lui	a5,0x3ff00
    9120:	00f5e5b3          	or	a1,a1,a5
    9124:	04012c23          	sw	zero,88(sp)
    9128:	0000c7b7          	lui	a5,0xc
    912c:	5b07a603          	lw	a2,1456(a5) # c5b0 <__device_handles_end+0x14>
    9130:	5b47a683          	lw	a3,1460(a5)
    9134:	fccf80ef          	jal	ra,1900 <__subdf3>
    9138:	0000c7b7          	lui	a5,0xc
    913c:	5b87a603          	lw	a2,1464(a5) # c5b8 <__device_handles_end+0x1c>
    9140:	5bc7a683          	lw	a3,1468(a5)
    9144:	9f4f80ef          	jal	ra,1338 <__muldf3>
    9148:	0000c7b7          	lui	a5,0xc
    914c:	5c07a603          	lw	a2,1472(a5) # c5c0 <__device_handles_end+0x24>
    9150:	5c47a683          	lw	a3,1476(a5)
    9154:	9ddf90ef          	jal	ra,2b30 <__adddf3>
    9158:	00050b93          	mv	s7,a0
    915c:	00090513          	mv	a0,s2
    9160:	00058a93          	mv	s5,a1
    9164:	be0fa0ef          	jal	ra,3544 <__floatsidf>
    9168:	0000c7b7          	lui	a5,0xc
    916c:	5c87a603          	lw	a2,1480(a5) # c5c8 <__device_handles_end+0x2c>
    9170:	5cc7a683          	lw	a3,1484(a5)
    9174:	9c4f80ef          	jal	ra,1338 <__muldf3>
    9178:	00050613          	mv	a2,a0
    917c:	00058693          	mv	a3,a1
    9180:	000b8513          	mv	a0,s7
    9184:	000a8593          	mv	a1,s5
    9188:	9a9f90ef          	jal	ra,2b30 <__adddf3>
    918c:	00050b93          	mv	s7,a0
    9190:	00058a93          	mv	s5,a1
    9194:	b30fa0ef          	jal	ra,34c4 <__fixdfsi>
    9198:	00050413          	mv	s0,a0
    919c:	00000613          	li	a2,0
    91a0:	00000693          	li	a3,0
    91a4:	000b8513          	mv	a0,s7
    91a8:	000a8593          	mv	a1,s5
    91ac:	9e8fa0ef          	jal	ra,3394 <__ledf2>
    91b0:	02055063          	bgez	a0,91d0 <_dtoa_r+0x2e8>
    91b4:	00040513          	mv	a0,s0
    91b8:	b8cfa0ef          	jal	ra,3544 <__floatsidf>
    91bc:	000b8613          	mv	a2,s7
    91c0:	000a8693          	mv	a3,s5
    91c4:	944fa0ef          	jal	ra,3308 <__eqdf2>
    91c8:	00050463          	beqz	a0,91d0 <_dtoa_r+0x2e8>
    91cc:	fff40413          	addi	s0,s0,-1
    91d0:	00100713          	li	a4,1
    91d4:	01600793          	li	a5,22
    91d8:	02e12a23          	sw	a4,52(sp)
    91dc:	0287ea63          	bltu	a5,s0,9210 <_dtoa_r+0x328>
    91e0:	0000c737          	lui	a4,0xc
    91e4:	00341793          	slli	a5,s0,0x3
    91e8:	7e870713          	addi	a4,a4,2024 # c7e8 <__mprec_tens>
    91ec:	00e787b3          	add	a5,a5,a4
    91f0:	0007a603          	lw	a2,0(a5)
    91f4:	0047a683          	lw	a3,4(a5)
    91f8:	02c12503          	lw	a0,44(sp)
    91fc:	03012583          	lw	a1,48(sp)
    9200:	994fa0ef          	jal	ra,3394 <__ledf2>
    9204:	00055463          	bgez	a0,920c <_dtoa_r+0x324>
    9208:	fff40413          	addi	s0,s0,-1
    920c:	02012a23          	sw	zero,52(sp)
    9210:	412a0933          	sub	s2,s4,s2
    9214:	fff90c13          	addi	s8,s2,-1
    9218:	00000b93          	li	s7,0
    921c:	000c5863          	bgez	s8,922c <_dtoa_r+0x344>
    9220:	00100b93          	li	s7,1
    9224:	412b8bb3          	sub	s7,s7,s2
    9228:	00000c13          	li	s8,0
    922c:	0c044663          	bltz	s0,92f8 <_dtoa_r+0x410>
    9230:	008c0c33          	add	s8,s8,s0
    9234:	02812423          	sw	s0,40(sp)
    9238:	00000c93          	li	s9,0
    923c:	01412703          	lw	a4,20(sp)
    9240:	00900793          	li	a5,9
    9244:	14e7e863          	bltu	a5,a4,9394 <_dtoa_r+0x4ac>
    9248:	00500793          	li	a5,5
    924c:	00100913          	li	s2,1
    9250:	00e7d863          	bge	a5,a4,9260 <_dtoa_r+0x378>
    9254:	ffc70793          	addi	a5,a4,-4
    9258:	00f12a23          	sw	a5,20(sp)
    925c:	00000913          	li	s2,0
    9260:	01412703          	lw	a4,20(sp)
    9264:	00400793          	li	a5,4
    9268:	0af70063          	beq	a4,a5,9308 <_dtoa_r+0x420>
    926c:	00500793          	li	a5,5
    9270:	10f70063          	beq	a4,a5,9370 <_dtoa_r+0x488>
    9274:	00200793          	li	a5,2
    9278:	0ef70863          	beq	a4,a5,9368 <_dtoa_r+0x480>
    927c:	00300793          	li	a5,3
    9280:	00012e23          	sw	zero,28(sp)
    9284:	0ef70a63          	beq	a4,a5,9378 <_dtoa_r+0x490>
    9288:	00100793          	li	a5,1
    928c:	00f12e23          	sw	a5,28(sp)
    9290:	fff00d93          	li	s11,-1
    9294:	fff00d13          	li	s10,-1
    9298:	01200793          	li	a5,18
    929c:	02012023          	sw	zero,32(sp)
    92a0:	08c0006f          	j	932c <_dtoa_r+0x444>
    92a4:	06c12903          	lw	s2,108(sp)
    92a8:	02000793          	li	a5,32
    92ac:	012a0933          	add	s2,s4,s2
    92b0:	43290593          	addi	a1,s2,1074
    92b4:	02b7dc63          	bge	a5,a1,92ec <_dtoa_r+0x404>
    92b8:	04000513          	li	a0,64
    92bc:	40b50533          	sub	a0,a0,a1
    92c0:	41290593          	addi	a1,s2,1042
    92c4:	00ab1533          	sll	a0,s6,a0
    92c8:	00badab3          	srl	s5,s5,a1
    92cc:	01556533          	or	a0,a0,s5
    92d0:	e1df80ef          	jal	ra,20ec <__floatunsidf>
    92d4:	fe1007b7          	lui	a5,0xfe100
    92d8:	00b785b3          	add	a1,a5,a1
    92dc:	00100793          	li	a5,1
    92e0:	fff90913          	addi	s2,s2,-1
    92e4:	04f12c23          	sw	a5,88(sp)
    92e8:	e41ff06f          	j	9128 <_dtoa_r+0x240>
    92ec:	40b78533          	sub	a0,a5,a1
    92f0:	00aa9533          	sll	a0,s5,a0
    92f4:	fddff06f          	j	92d0 <_dtoa_r+0x3e8>
    92f8:	408b8bb3          	sub	s7,s7,s0
    92fc:	40800cb3          	neg	s9,s0
    9300:	02012423          	sw	zero,40(sp)
    9304:	f39ff06f          	j	923c <_dtoa_r+0x354>
    9308:	00100793          	li	a5,1
    930c:	00f12e23          	sw	a5,28(sp)
    9310:	02012783          	lw	a5,32(sp)
    9314:	08f04663          	bgtz	a5,93a0 <_dtoa_r+0x4b8>
    9318:	00100713          	li	a4,1
    931c:	00100d93          	li	s11,1
    9320:	00100d13          	li	s10,1
    9324:	00100793          	li	a5,1
    9328:	02e12023          	sw	a4,32(sp)
    932c:	0244a683          	lw	a3,36(s1)
    9330:	00400713          	li	a4,4
    9334:	0006a223          	sw	zero,4(a3)
    9338:	01470613          	addi	a2,a4,20
    933c:	0046a583          	lw	a1,4(a3)
    9340:	06c7f863          	bgeu	a5,a2,93b0 <_dtoa_r+0x4c8>
    9344:	00048513          	mv	a0,s1
    9348:	158010ef          	jal	ra,a4a0 <_Balloc>
    934c:	00a12823          	sw	a0,16(sp)
    9350:	06051863          	bnez	a0,93c0 <_dtoa_r+0x4d8>
    9354:	0000d6b7          	lui	a3,0xd
    9358:	ebc68693          	addi	a3,a3,-324 # cebc <_ctype_+0x220>
    935c:	00000613          	li	a2,0
    9360:	1aa00593          	li	a1,426
    9364:	c0dff06f          	j	8f70 <_dtoa_r+0x88>
    9368:	00012e23          	sw	zero,28(sp)
    936c:	fa5ff06f          	j	9310 <_dtoa_r+0x428>
    9370:	00100793          	li	a5,1
    9374:	00f12e23          	sw	a5,28(sp)
    9378:	02012783          	lw	a5,32(sp)
    937c:	00f40db3          	add	s11,s0,a5
    9380:	001d8d13          	addi	s10,s11,1
    9384:	000d0793          	mv	a5,s10
    9388:	fba042e3          	bgtz	s10,932c <_dtoa_r+0x444>
    938c:	00100793          	li	a5,1
    9390:	f9dff06f          	j	932c <_dtoa_r+0x444>
    9394:	00100913          	li	s2,1
    9398:	00012a23          	sw	zero,20(sp)
    939c:	eedff06f          	j	9288 <_dtoa_r+0x3a0>
    93a0:	02012d83          	lw	s11,32(sp)
    93a4:	000d8d13          	mv	s10,s11
    93a8:	000d8793          	mv	a5,s11
    93ac:	f81ff06f          	j	932c <_dtoa_r+0x444>
    93b0:	00158593          	addi	a1,a1,1
    93b4:	00b6a223          	sw	a1,4(a3)
    93b8:	00171713          	slli	a4,a4,0x1
    93bc:	f7dff06f          	j	9338 <_dtoa_r+0x450>
    93c0:	0244a783          	lw	a5,36(s1)
    93c4:	01012703          	lw	a4,16(sp)
    93c8:	00e7a023          	sw	a4,0(a5) # fe100000 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfe100001>
    93cc:	00e00793          	li	a5,14
    93d0:	19a7ea63          	bltu	a5,s10,9564 <_dtoa_r+0x67c>
    93d4:	18090863          	beqz	s2,9564 <_dtoa_r+0x67c>
    93d8:	24805263          	blez	s0,961c <_dtoa_r+0x734>
    93dc:	00f47793          	andi	a5,s0,15
    93e0:	0000c737          	lui	a4,0xc
    93e4:	7e870713          	addi	a4,a4,2024 # c7e8 <__mprec_tens>
    93e8:	00379793          	slli	a5,a5,0x3
    93ec:	40445a93          	srai	s5,s0,0x4
    93f0:	00e787b3          	add	a5,a5,a4
    93f4:	0000c937          	lui	s2,0xc
    93f8:	010af693          	andi	a3,s5,16
    93fc:	0007a703          	lw	a4,0(a5)
    9400:	7c090913          	addi	s2,s2,1984 # c7c0 <__mprec_bigtens>
    9404:	0047a783          	lw	a5,4(a5)
    9408:	00200a13          	li	s4,2
    940c:	02068c63          	beqz	a3,9444 <_dtoa_r+0x55c>
    9410:	02092603          	lw	a2,32(s2)
    9414:	02492683          	lw	a3,36(s2)
    9418:	02c12503          	lw	a0,44(sp)
    941c:	03012583          	lw	a1,48(sp)
    9420:	02f12e23          	sw	a5,60(sp)
    9424:	00e12c23          	sw	a4,24(sp)
    9428:	f4cf70ef          	jal	ra,b74 <__divdf3>
    942c:	03c12783          	lw	a5,60(sp)
    9430:	01812703          	lw	a4,24(sp)
    9434:	00fafa93          	andi	s5,s5,15
    9438:	00050993          	mv	s3,a0
    943c:	00058b13          	mv	s6,a1
    9440:	00300a13          	li	s4,3
    9444:	1a0a9263          	bnez	s5,95e8 <_dtoa_r+0x700>
    9448:	00098513          	mv	a0,s3
    944c:	00070613          	mv	a2,a4
    9450:	00078693          	mv	a3,a5
    9454:	000b0593          	mv	a1,s6
    9458:	f1cf70ef          	jal	ra,b74 <__divdf3>
    945c:	00050993          	mv	s3,a0
    9460:	00058b13          	mv	s6,a1
    9464:	03412783          	lw	a5,52(sp)
    9468:	24078263          	beqz	a5,96ac <_dtoa_r+0x7c4>
    946c:	0000c7b7          	lui	a5,0xc
    9470:	5d07a603          	lw	a2,1488(a5) # c5d0 <__device_handles_end+0x34>
    9474:	5d47a683          	lw	a3,1492(a5)
    9478:	00098513          	mv	a0,s3
    947c:	000b0593          	mv	a1,s6
    9480:	f15f90ef          	jal	ra,3394 <__ledf2>
    9484:	22055463          	bgez	a0,96ac <_dtoa_r+0x7c4>
    9488:	220d0863          	beqz	s10,96b8 <_dtoa_r+0x7d0>
    948c:	0db05863          	blez	s11,955c <_dtoa_r+0x674>
    9490:	fff40793          	addi	a5,s0,-1
    9494:	00f12c23          	sw	a5,24(sp)
    9498:	0000c7b7          	lui	a5,0xc
    949c:	5d87a603          	lw	a2,1496(a5) # c5d8 <__device_handles_end+0x3c>
    94a0:	5dc7a683          	lw	a3,1500(a5)
    94a4:	00098513          	mv	a0,s3
    94a8:	000b0593          	mv	a1,s6
    94ac:	e8df70ef          	jal	ra,1338 <__muldf3>
    94b0:	00050993          	mv	s3,a0
    94b4:	00058b13          	mv	s6,a1
    94b8:	001a0a13          	addi	s4,s4,1
    94bc:	000d8713          	mv	a4,s11
    94c0:	000a0513          	mv	a0,s4
    94c4:	04e12423          	sw	a4,72(sp)
    94c8:	03612e23          	sw	s6,60(sp)
    94cc:	05312023          	sw	s3,64(sp)
    94d0:	874fa0ef          	jal	ra,3544 <__floatsidf>
    94d4:	000b0693          	mv	a3,s6
    94d8:	00098613          	mv	a2,s3
    94dc:	e5df70ef          	jal	ra,1338 <__muldf3>
    94e0:	0000c6b7          	lui	a3,0xc
    94e4:	5e06a603          	lw	a2,1504(a3) # c5e0 <__device_handles_end+0x44>
    94e8:	5e46a683          	lw	a3,1508(a3)
    94ec:	000b0913          	mv	s2,s6
    94f0:	00098a93          	mv	s5,s3
    94f4:	e3cf90ef          	jal	ra,2b30 <__adddf3>
    94f8:	04812703          	lw	a4,72(sp)
    94fc:	fcc008b7          	lui	a7,0xfcc00
    9500:	00050b13          	mv	s6,a0
    9504:	00b88a33          	add	s4,a7,a1
    9508:	1a071e63          	bnez	a4,96c4 <_dtoa_r+0x7dc>
    950c:	0000c737          	lui	a4,0xc
    9510:	5e872603          	lw	a2,1512(a4) # c5e8 <__device_handles_end+0x4c>
    9514:	5ec72683          	lw	a3,1516(a4)
    9518:	00098513          	mv	a0,s3
    951c:	00090593          	mv	a1,s2
    9520:	be0f80ef          	jal	ra,1900 <__subdf3>
    9524:	000b0613          	mv	a2,s6
    9528:	000a0693          	mv	a3,s4
    952c:	00050993          	mv	s3,a0
    9530:	00058913          	mv	s2,a1
    9534:	d21f70ef          	jal	ra,1254 <__gedf2>
    9538:	06a040e3          	bgtz	a0,9d98 <_dtoa_r+0xeb0>
    953c:	800007b7          	lui	a5,0x80000
    9540:	0147c7b3          	xor	a5,a5,s4
    9544:	000b0613          	mv	a2,s6
    9548:	00078693          	mv	a3,a5
    954c:	00098513          	mv	a0,s3
    9550:	00090593          	mv	a1,s2
    9554:	e41f90ef          	jal	ra,3394 <__ledf2>
    9558:	02054ae3          	bltz	a0,9d8c <_dtoa_r+0xea4>
    955c:	02c12983          	lw	s3,44(sp)
    9560:	03012b03          	lw	s6,48(sp)
    9564:	06c12783          	lw	a5,108(sp)
    9568:	4e07cc63          	bltz	a5,9a60 <_dtoa_r+0xb78>
    956c:	00e00713          	li	a4,14
    9570:	4e874863          	blt	a4,s0,9a60 <_dtoa_r+0xb78>
    9574:	0000c737          	lui	a4,0xc
    9578:	00341793          	slli	a5,s0,0x3
    957c:	7e870713          	addi	a4,a4,2024 # c7e8 <__mprec_tens>
    9580:	00e787b3          	add	a5,a5,a4
    9584:	0007aa03          	lw	s4,0(a5) # 80000000 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000001>
    9588:	0047aa83          	lw	s5,4(a5)
    958c:	02012783          	lw	a5,32(sp)
    9590:	3607de63          	bgez	a5,990c <_dtoa_r+0xa24>
    9594:	37a04c63          	bgtz	s10,990c <_dtoa_r+0xa24>
    9598:	7e0d1a63          	bnez	s10,9d8c <_dtoa_r+0xea4>
    959c:	0000c7b7          	lui	a5,0xc
    95a0:	5e87a603          	lw	a2,1512(a5) # c5e8 <__device_handles_end+0x4c>
    95a4:	5ec7a683          	lw	a3,1516(a5)
    95a8:	000a0513          	mv	a0,s4
    95ac:	000a8593          	mv	a1,s5
    95b0:	d89f70ef          	jal	ra,1338 <__muldf3>
    95b4:	00098613          	mv	a2,s3
    95b8:	000b0693          	mv	a3,s6
    95bc:	c99f70ef          	jal	ra,1254 <__gedf2>
    95c0:	00000a13          	li	s4,0
    95c4:	00000913          	li	s2,0
    95c8:	78055063          	bgez	a0,9d48 <_dtoa_r+0xe60>
    95cc:	01012783          	lw	a5,16(sp)
    95d0:	01012703          	lw	a4,16(sp)
    95d4:	00140413          	addi	s0,s0,1
    95d8:	00178993          	addi	s3,a5,1
    95dc:	03100793          	li	a5,49
    95e0:	00f70023          	sb	a5,0(a4)
    95e4:	7700006f          	j	9d54 <_dtoa_r+0xe6c>
    95e8:	001af693          	andi	a3,s5,1
    95ec:	02068263          	beqz	a3,9610 <_dtoa_r+0x728>
    95f0:	00092603          	lw	a2,0(s2)
    95f4:	00492683          	lw	a3,4(s2)
    95f8:	00070513          	mv	a0,a4
    95fc:	00078593          	mv	a1,a5
    9600:	d39f70ef          	jal	ra,1338 <__muldf3>
    9604:	001a0a13          	addi	s4,s4,1
    9608:	00050713          	mv	a4,a0
    960c:	00058793          	mv	a5,a1
    9610:	401ada93          	srai	s5,s5,0x1
    9614:	00890913          	addi	s2,s2,8
    9618:	e2dff06f          	j	9444 <_dtoa_r+0x55c>
    961c:	00200a13          	li	s4,2
    9620:	e40402e3          	beqz	s0,9464 <_dtoa_r+0x57c>
    9624:	40800933          	neg	s2,s0
    9628:	00f97793          	andi	a5,s2,15
    962c:	0000c737          	lui	a4,0xc
    9630:	7e870713          	addi	a4,a4,2024 # c7e8 <__mprec_tens>
    9634:	00379793          	slli	a5,a5,0x3
    9638:	00e787b3          	add	a5,a5,a4
    963c:	0007a603          	lw	a2,0(a5)
    9640:	0047a683          	lw	a3,4(a5)
    9644:	02c12503          	lw	a0,44(sp)
    9648:	03012583          	lw	a1,48(sp)
    964c:	0000cab7          	lui	s5,0xc
    9650:	40495913          	srai	s2,s2,0x4
    9654:	ce5f70ef          	jal	ra,1338 <__muldf3>
    9658:	00050793          	mv	a5,a0
    965c:	00050993          	mv	s3,a0
    9660:	00058b13          	mv	s6,a1
    9664:	7c0a8a93          	addi	s5,s5,1984 # c7c0 <__mprec_bigtens>
    9668:	00000713          	li	a4,0
    966c:	00091863          	bnez	s2,967c <_dtoa_r+0x794>
    9670:	de070ae3          	beqz	a4,9464 <_dtoa_r+0x57c>
    9674:	00078993          	mv	s3,a5
    9678:	de9ff06f          	j	9460 <_dtoa_r+0x578>
    967c:	00197693          	andi	a3,s2,1
    9680:	02068063          	beqz	a3,96a0 <_dtoa_r+0x7b8>
    9684:	000aa603          	lw	a2,0(s5)
    9688:	004aa683          	lw	a3,4(s5)
    968c:	00078513          	mv	a0,a5
    9690:	001a0a13          	addi	s4,s4,1
    9694:	ca5f70ef          	jal	ra,1338 <__muldf3>
    9698:	00050793          	mv	a5,a0
    969c:	00100713          	li	a4,1
    96a0:	40195913          	srai	s2,s2,0x1
    96a4:	008a8a93          	addi	s5,s5,8
    96a8:	fc5ff06f          	j	966c <_dtoa_r+0x784>
    96ac:	00812c23          	sw	s0,24(sp)
    96b0:	000d0713          	mv	a4,s10
    96b4:	e0dff06f          	j	94c0 <_dtoa_r+0x5d8>
    96b8:	00812c23          	sw	s0,24(sp)
    96bc:	00000713          	li	a4,0
    96c0:	e01ff06f          	j	94c0 <_dtoa_r+0x5d8>
    96c4:	fff70793          	addi	a5,a4,-1
    96c8:	0000c6b7          	lui	a3,0xc
    96cc:	7e868693          	addi	a3,a3,2024 # c7e8 <__mprec_tens>
    96d0:	00379793          	slli	a5,a5,0x3
    96d4:	00d787b3          	add	a5,a5,a3
    96d8:	0007a603          	lw	a2,0(a5)
    96dc:	0047a683          	lw	a3,4(a5)
    96e0:	01012783          	lw	a5,16(sp)
    96e4:	00e787b3          	add	a5,a5,a4
    96e8:	02f12e23          	sw	a5,60(sp)
    96ec:	01c12783          	lw	a5,28(sp)
    96f0:	10078863          	beqz	a5,9800 <_dtoa_r+0x918>
    96f4:	0000c7b7          	lui	a5,0xc
    96f8:	5f47a583          	lw	a1,1524(a5) # c5f4 <__device_handles_end+0x58>
    96fc:	04a12023          	sw	a0,64(sp)
    9700:	5f07a503          	lw	a0,1520(a5)
    9704:	c70f70ef          	jal	ra,b74 <__divdf3>
    9708:	000b0613          	mv	a2,s6
    970c:	000a0693          	mv	a3,s4
    9710:	9f0f80ef          	jal	ra,1900 <__subdf3>
    9714:	0000c7b7          	lui	a5,0xc
    9718:	5d47a803          	lw	a6,1492(a5) # c5d4 <__device_handles_end+0x38>
    971c:	5d07a783          	lw	a5,1488(a5)
    9720:	01012983          	lw	s3,16(sp)
    9724:	05012623          	sw	a6,76(sp)
    9728:	04f12423          	sw	a5,72(sp)
    972c:	0000c7b7          	lui	a5,0xc
    9730:	5dc7a803          	lw	a6,1500(a5) # c5dc <__device_handles_end+0x40>
    9734:	5d87a783          	lw	a5,1496(a5)
    9738:	00050a13          	mv	s4,a0
    973c:	00058b13          	mv	s6,a1
    9740:	04f12023          	sw	a5,64(sp)
    9744:	05012223          	sw	a6,68(sp)
    9748:	00090593          	mv	a1,s2
    974c:	000a8513          	mv	a0,s5
    9750:	d75f90ef          	jal	ra,34c4 <__fixdfsi>
    9754:	04a12823          	sw	a0,80(sp)
    9758:	dedf90ef          	jal	ra,3544 <__floatsidf>
    975c:	00050613          	mv	a2,a0
    9760:	00058693          	mv	a3,a1
    9764:	000a8513          	mv	a0,s5
    9768:	00090593          	mv	a1,s2
    976c:	994f80ef          	jal	ra,1900 <__subdf3>
    9770:	05012783          	lw	a5,80(sp)
    9774:	00198993          	addi	s3,s3,1
    9778:	000a0613          	mv	a2,s4
    977c:	03078793          	addi	a5,a5,48
    9780:	fef98fa3          	sb	a5,-1(s3)
    9784:	000b0693          	mv	a3,s6
    9788:	00050913          	mv	s2,a0
    978c:	00058a93          	mv	s5,a1
    9790:	c05f90ef          	jal	ra,3394 <__ledf2>
    9794:	14054c63          	bltz	a0,98ec <_dtoa_r+0xa04>
    9798:	04812503          	lw	a0,72(sp)
    979c:	04c12583          	lw	a1,76(sp)
    97a0:	00090613          	mv	a2,s2
    97a4:	000a8693          	mv	a3,s5
    97a8:	958f80ef          	jal	ra,1900 <__subdf3>
    97ac:	000a0613          	mv	a2,s4
    97b0:	000b0693          	mv	a3,s6
    97b4:	be1f90ef          	jal	ra,3394 <__ledf2>
    97b8:	22054c63          	bltz	a0,99f0 <_dtoa_r+0xb08>
    97bc:	03c12783          	lw	a5,60(sp)
    97c0:	d8f98ee3          	beq	s3,a5,955c <_dtoa_r+0x674>
    97c4:	04012603          	lw	a2,64(sp)
    97c8:	04412683          	lw	a3,68(sp)
    97cc:	000a0513          	mv	a0,s4
    97d0:	000b0593          	mv	a1,s6
    97d4:	b65f70ef          	jal	ra,1338 <__muldf3>
    97d8:	04012603          	lw	a2,64(sp)
    97dc:	04412683          	lw	a3,68(sp)
    97e0:	00050a13          	mv	s4,a0
    97e4:	00058b13          	mv	s6,a1
    97e8:	00090513          	mv	a0,s2
    97ec:	000a8593          	mv	a1,s5
    97f0:	b49f70ef          	jal	ra,1338 <__muldf3>
    97f4:	00050a93          	mv	s5,a0
    97f8:	00058913          	mv	s2,a1
    97fc:	f4dff06f          	j	9748 <_dtoa_r+0x860>
    9800:	000a0593          	mv	a1,s4
    9804:	b35f70ef          	jal	ra,1338 <__muldf3>
    9808:	03c12783          	lw	a5,60(sp)
    980c:	01012983          	lw	s3,16(sp)
    9810:	04a12423          	sw	a0,72(sp)
    9814:	04f12023          	sw	a5,64(sp)
    9818:	0000c7b7          	lui	a5,0xc
    981c:	5dc7a803          	lw	a6,1500(a5) # c5dc <__device_handles_end+0x40>
    9820:	5d87a783          	lw	a5,1496(a5)
    9824:	00058b13          	mv	s6,a1
    9828:	05012a23          	sw	a6,84(sp)
    982c:	04f12823          	sw	a5,80(sp)
    9830:	00090593          	mv	a1,s2
    9834:	000a8513          	mv	a0,s5
    9838:	c8df90ef          	jal	ra,34c4 <__fixdfsi>
    983c:	04a12e23          	sw	a0,92(sp)
    9840:	d05f90ef          	jal	ra,3544 <__floatsidf>
    9844:	00050613          	mv	a2,a0
    9848:	00058693          	mv	a3,a1
    984c:	000a8513          	mv	a0,s5
    9850:	00090593          	mv	a1,s2
    9854:	8acf80ef          	jal	ra,1900 <__subdf3>
    9858:	05c12783          	lw	a5,92(sp)
    985c:	00198993          	addi	s3,s3,1
    9860:	00050a13          	mv	s4,a0
    9864:	03078793          	addi	a5,a5,48
    9868:	fef98fa3          	sb	a5,-1(s3)
    986c:	03c12783          	lw	a5,60(sp)
    9870:	00058913          	mv	s2,a1
    9874:	08f99063          	bne	s3,a5,98f4 <_dtoa_r+0xa0c>
    9878:	0000cab7          	lui	s5,0xc
    987c:	5f0aa603          	lw	a2,1520(s5) # c5f0 <__device_handles_end+0x54>
    9880:	5f4aa683          	lw	a3,1524(s5)
    9884:	04812503          	lw	a0,72(sp)
    9888:	000b0593          	mv	a1,s6
    988c:	aa4f90ef          	jal	ra,2b30 <__adddf3>
    9890:	00050613          	mv	a2,a0
    9894:	00058693          	mv	a3,a1
    9898:	000a0513          	mv	a0,s4
    989c:	00090593          	mv	a1,s2
    98a0:	9b5f70ef          	jal	ra,1254 <__gedf2>
    98a4:	14a04663          	bgtz	a0,99f0 <_dtoa_r+0xb08>
    98a8:	04812603          	lw	a2,72(sp)
    98ac:	5f0aa503          	lw	a0,1520(s5)
    98b0:	5f4aa583          	lw	a1,1524(s5)
    98b4:	000b0693          	mv	a3,s6
    98b8:	848f80ef          	jal	ra,1900 <__subdf3>
    98bc:	00050613          	mv	a2,a0
    98c0:	00058693          	mv	a3,a1
    98c4:	000a0513          	mv	a0,s4
    98c8:	00090593          	mv	a1,s2
    98cc:	ac9f90ef          	jal	ra,3394 <__ledf2>
    98d0:	c80556e3          	bgez	a0,955c <_dtoa_r+0x674>
    98d4:	03000793          	li	a5,48
    98d8:	04012983          	lw	s3,64(sp)
    98dc:	fff98713          	addi	a4,s3,-1
    98e0:	04e12023          	sw	a4,64(sp)
    98e4:	fff9c703          	lbu	a4,-1(s3)
    98e8:	fef708e3          	beq	a4,a5,98d8 <_dtoa_r+0x9f0>
    98ec:	01812403          	lw	s0,24(sp)
    98f0:	0d00006f          	j	99c0 <_dtoa_r+0xad8>
    98f4:	05012603          	lw	a2,80(sp)
    98f8:	05412683          	lw	a3,84(sp)
    98fc:	a3df70ef          	jal	ra,1338 <__muldf3>
    9900:	00050a93          	mv	s5,a0
    9904:	00058913          	mv	s2,a1
    9908:	f29ff06f          	j	9830 <_dtoa_r+0x948>
    990c:	01012783          	lw	a5,16(sp)
    9910:	000b0c93          	mv	s9,s6
    9914:	00098d93          	mv	s11,s3
    9918:	00178c13          	addi	s8,a5,1
    991c:	01a78d33          	add	s10,a5,s10
    9920:	0000c7b7          	lui	a5,0xc
    9924:	5d87ab03          	lw	s6,1496(a5) # c5d8 <__device_handles_end+0x3c>
    9928:	5dc7ab83          	lw	s7,1500(a5)
    992c:	000a0613          	mv	a2,s4
    9930:	000a8693          	mv	a3,s5
    9934:	000d8513          	mv	a0,s11
    9938:	000c8593          	mv	a1,s9
    993c:	a38f70ef          	jal	ra,b74 <__divdf3>
    9940:	b85f90ef          	jal	ra,34c4 <__fixdfsi>
    9944:	00050913          	mv	s2,a0
    9948:	bfdf90ef          	jal	ra,3544 <__floatsidf>
    994c:	000a0613          	mv	a2,s4
    9950:	000a8693          	mv	a3,s5
    9954:	9e5f70ef          	jal	ra,1338 <__muldf3>
    9958:	00058693          	mv	a3,a1
    995c:	00050613          	mv	a2,a0
    9960:	000c8593          	mv	a1,s9
    9964:	000d8513          	mv	a0,s11
    9968:	f99f70ef          	jal	ra,1900 <__subdf3>
    996c:	03090693          	addi	a3,s2,48
    9970:	fedc0fa3          	sb	a3,-1(s8)
    9974:	000c0993          	mv	s3,s8
    9978:	0b8d1e63          	bne	s10,s8,9a34 <_dtoa_r+0xb4c>
    997c:	00050613          	mv	a2,a0
    9980:	00058693          	mv	a3,a1
    9984:	9acf90ef          	jal	ra,2b30 <__adddf3>
    9988:	000a0613          	mv	a2,s4
    998c:	000a8693          	mv	a3,s5
    9990:	00050b93          	mv	s7,a0
    9994:	00058b13          	mv	s6,a1
    9998:	8bdf70ef          	jal	ra,1254 <__gedf2>
    999c:	04a04863          	bgtz	a0,99ec <_dtoa_r+0xb04>
    99a0:	000a0613          	mv	a2,s4
    99a4:	000a8693          	mv	a3,s5
    99a8:	000b8513          	mv	a0,s7
    99ac:	000b0593          	mv	a1,s6
    99b0:	959f90ef          	jal	ra,3308 <__eqdf2>
    99b4:	00051663          	bnez	a0,99c0 <_dtoa_r+0xad8>
    99b8:	00197913          	andi	s2,s2,1
    99bc:	02091863          	bnez	s2,99ec <_dtoa_r+0xb04>
    99c0:	00c12583          	lw	a1,12(sp)
    99c4:	00048513          	mv	a0,s1
    99c8:	3d9000ef          	jal	ra,a5a0 <_Bfree>
    99cc:	03812783          	lw	a5,56(sp)
    99d0:	00098023          	sb	zero,0(s3)
    99d4:	00140513          	addi	a0,s0,1
    99d8:	00a7a023          	sw	a0,0(a5)
    99dc:	02412783          	lw	a5,36(sp)
    99e0:	e4078a63          	beqz	a5,9034 <_dtoa_r+0x14c>
    99e4:	0137a023          	sw	s3,0(a5)
    99e8:	e4cff06f          	j	9034 <_dtoa_r+0x14c>
    99ec:	00812c23          	sw	s0,24(sp)
    99f0:	00098793          	mv	a5,s3
    99f4:	03900713          	li	a4,57
    99f8:	00078993          	mv	s3,a5
    99fc:	fff7c683          	lbu	a3,-1(a5)
    9a00:	fff78793          	addi	a5,a5,-1
    9a04:	02e69063          	bne	a3,a4,9a24 <_dtoa_r+0xb3c>
    9a08:	01012683          	lw	a3,16(sp)
    9a0c:	fef696e3          	bne	a3,a5,99f8 <_dtoa_r+0xb10>
    9a10:	01812703          	lw	a4,24(sp)
    9a14:	00170713          	addi	a4,a4,1
    9a18:	00e12c23          	sw	a4,24(sp)
    9a1c:	03000713          	li	a4,48
    9a20:	00e68023          	sb	a4,0(a3)
    9a24:	0007c703          	lbu	a4,0(a5)
    9a28:	00170713          	addi	a4,a4,1
    9a2c:	00e78023          	sb	a4,0(a5)
    9a30:	ebdff06f          	j	98ec <_dtoa_r+0xa04>
    9a34:	000b0613          	mv	a2,s6
    9a38:	000b8693          	mv	a3,s7
    9a3c:	8fdf70ef          	jal	ra,1338 <__muldf3>
    9a40:	00000613          	li	a2,0
    9a44:	00000693          	li	a3,0
    9a48:	00050d93          	mv	s11,a0
    9a4c:	00058c93          	mv	s9,a1
    9a50:	001c0c13          	addi	s8,s8,1
    9a54:	8b5f90ef          	jal	ra,3308 <__eqdf2>
    9a58:	ec051ae3          	bnez	a0,992c <_dtoa_r+0xa44>
    9a5c:	f65ff06f          	j	99c0 <_dtoa_r+0xad8>
    9a60:	01c12703          	lw	a4,28(sp)
    9a64:	16070c63          	beqz	a4,9bdc <_dtoa_r+0xcf4>
    9a68:	01412683          	lw	a3,20(sp)
    9a6c:	00100713          	li	a4,1
    9a70:	12d74463          	blt	a4,a3,9b98 <_dtoa_r+0xcb0>
    9a74:	05812703          	lw	a4,88(sp)
    9a78:	43378793          	addi	a5,a5,1075
    9a7c:	00071863          	bnez	a4,9a8c <_dtoa_r+0xba4>
    9a80:	06812703          	lw	a4,104(sp)
    9a84:	03600793          	li	a5,54
    9a88:	40e787b3          	sub	a5,a5,a4
    9a8c:	000c8a13          	mv	s4,s9
    9a90:	000b8a93          	mv	s5,s7
    9a94:	00100593          	li	a1,1
    9a98:	00048513          	mv	a0,s1
    9a9c:	00fb8bb3          	add	s7,s7,a5
    9aa0:	00fc0c33          	add	s8,s8,a5
    9aa4:	5d5000ef          	jal	ra,a878 <__i2b>
    9aa8:	00050913          	mv	s2,a0
    9aac:	03505063          	blez	s5,9acc <_dtoa_r+0xbe4>
    9ab0:	01805e63          	blez	s8,9acc <_dtoa_r+0xbe4>
    9ab4:	000a8793          	mv	a5,s5
    9ab8:	015c5463          	bge	s8,s5,9ac0 <_dtoa_r+0xbd8>
    9abc:	000c0793          	mv	a5,s8
    9ac0:	40fb8bb3          	sub	s7,s7,a5
    9ac4:	40fa8ab3          	sub	s5,s5,a5
    9ac8:	40fc0c33          	sub	s8,s8,a5
    9acc:	060c8263          	beqz	s9,9b30 <_dtoa_r+0xc48>
    9ad0:	01c12783          	lw	a5,28(sp)
    9ad4:	10078c63          	beqz	a5,9bec <_dtoa_r+0xd04>
    9ad8:	05405063          	blez	s4,9b18 <_dtoa_r+0xc30>
    9adc:	00090593          	mv	a1,s2
    9ae0:	000a0613          	mv	a2,s4
    9ae4:	00048513          	mv	a0,s1
    9ae8:	7ed000ef          	jal	ra,aad4 <__pow5mult>
    9aec:	00c12603          	lw	a2,12(sp)
    9af0:	00050593          	mv	a1,a0
    9af4:	00050913          	mv	s2,a0
    9af8:	00048513          	mv	a0,s1
    9afc:	5d1000ef          	jal	ra,a8cc <__multiply>
    9b00:	00c12583          	lw	a1,12(sp)
    9b04:	00a12c23          	sw	a0,24(sp)
    9b08:	00048513          	mv	a0,s1
    9b0c:	295000ef          	jal	ra,a5a0 <_Bfree>
    9b10:	01812783          	lw	a5,24(sp)
    9b14:	00f12623          	sw	a5,12(sp)
    9b18:	414c8633          	sub	a2,s9,s4
    9b1c:	014c8a63          	beq	s9,s4,9b30 <_dtoa_r+0xc48>
    9b20:	00c12583          	lw	a1,12(sp)
    9b24:	00048513          	mv	a0,s1
    9b28:	7ad000ef          	jal	ra,aad4 <__pow5mult>
    9b2c:	00a12623          	sw	a0,12(sp)
    9b30:	00100593          	li	a1,1
    9b34:	00048513          	mv	a0,s1
    9b38:	541000ef          	jal	ra,a878 <__i2b>
    9b3c:	02812783          	lw	a5,40(sp)
    9b40:	00050a13          	mv	s4,a0
    9b44:	0af05863          	blez	a5,9bf4 <_dtoa_r+0xd0c>
    9b48:	00078613          	mv	a2,a5
    9b4c:	00050593          	mv	a1,a0
    9b50:	00048513          	mv	a0,s1
    9b54:	781000ef          	jal	ra,aad4 <__pow5mult>
    9b58:	01412703          	lw	a4,20(sp)
    9b5c:	00100793          	li	a5,1
    9b60:	00050a13          	mv	s4,a0
    9b64:	00000c93          	li	s9,0
    9b68:	0ae7c463          	blt	a5,a4,9c10 <_dtoa_r+0xd28>
    9b6c:	00000c93          	li	s9,0
    9b70:	08099a63          	bnez	s3,9c04 <_dtoa_r+0xd1c>
    9b74:	00cb1793          	slli	a5,s6,0xc
    9b78:	08079663          	bnez	a5,9c04 <_dtoa_r+0xd1c>
    9b7c:	7ff005b7          	lui	a1,0x7ff00
    9b80:	00bb7b33          	and	s6,s6,a1
    9b84:	080b0063          	beqz	s6,9c04 <_dtoa_r+0xd1c>
    9b88:	001b8b93          	addi	s7,s7,1
    9b8c:	001c0c13          	addi	s8,s8,1
    9b90:	00100c93          	li	s9,1
    9b94:	0700006f          	j	9c04 <_dtoa_r+0xd1c>
    9b98:	fffd0a13          	addi	s4,s10,-1
    9b9c:	014ccc63          	blt	s9,s4,9bb4 <_dtoa_r+0xccc>
    9ba0:	414c8a33          	sub	s4,s9,s4
    9ba4:	020d5663          	bgez	s10,9bd0 <_dtoa_r+0xce8>
    9ba8:	41ab8ab3          	sub	s5,s7,s10
    9bac:	00000793          	li	a5,0
    9bb0:	ee5ff06f          	j	9a94 <_dtoa_r+0xbac>
    9bb4:	02812783          	lw	a5,40(sp)
    9bb8:	419a0cb3          	sub	s9,s4,s9
    9bbc:	019787b3          	add	a5,a5,s9
    9bc0:	02f12423          	sw	a5,40(sp)
    9bc4:	000a0c93          	mv	s9,s4
    9bc8:	00000a13          	li	s4,0
    9bcc:	fd9ff06f          	j	9ba4 <_dtoa_r+0xcbc>
    9bd0:	000b8a93          	mv	s5,s7
    9bd4:	000d0793          	mv	a5,s10
    9bd8:	ebdff06f          	j	9a94 <_dtoa_r+0xbac>
    9bdc:	000c8a13          	mv	s4,s9
    9be0:	000b8a93          	mv	s5,s7
    9be4:	00000913          	li	s2,0
    9be8:	ec5ff06f          	j	9aac <_dtoa_r+0xbc4>
    9bec:	000c8613          	mv	a2,s9
    9bf0:	f31ff06f          	j	9b20 <_dtoa_r+0xc38>
    9bf4:	01412703          	lw	a4,20(sp)
    9bf8:	00100793          	li	a5,1
    9bfc:	00000c93          	li	s9,0
    9c00:	f6e7d6e3          	bge	a5,a4,9b6c <_dtoa_r+0xc84>
    9c04:	02812783          	lw	a5,40(sp)
    9c08:	00100513          	li	a0,1
    9c0c:	02078263          	beqz	a5,9c30 <_dtoa_r+0xd48>
    9c10:	010a2783          	lw	a5,16(s4)
    9c14:	00378793          	addi	a5,a5,3
    9c18:	00279793          	slli	a5,a5,0x2
    9c1c:	00fa07b3          	add	a5,s4,a5
    9c20:	0047a503          	lw	a0,4(a5)
    9c24:	331000ef          	jal	ra,a754 <__hi0bits>
    9c28:	02000793          	li	a5,32
    9c2c:	40a78533          	sub	a0,a5,a0
    9c30:	00ac0533          	add	a0,s8,a0
    9c34:	01f57513          	andi	a0,a0,31
    9c38:	0c050463          	beqz	a0,9d00 <_dtoa_r+0xe18>
    9c3c:	02000793          	li	a5,32
    9c40:	40a787b3          	sub	a5,a5,a0
    9c44:	00400713          	li	a4,4
    9c48:	0af75863          	bge	a4,a5,9cf8 <_dtoa_r+0xe10>
    9c4c:	01c00793          	li	a5,28
    9c50:	40a78533          	sub	a0,a5,a0
    9c54:	00ab8bb3          	add	s7,s7,a0
    9c58:	00aa8ab3          	add	s5,s5,a0
    9c5c:	00ac0c33          	add	s8,s8,a0
    9c60:	01705c63          	blez	s7,9c78 <_dtoa_r+0xd90>
    9c64:	00c12583          	lw	a1,12(sp)
    9c68:	000b8613          	mv	a2,s7
    9c6c:	00048513          	mv	a0,s1
    9c70:	7a9000ef          	jal	ra,ac18 <__lshift>
    9c74:	00a12623          	sw	a0,12(sp)
    9c78:	01805c63          	blez	s8,9c90 <_dtoa_r+0xda8>
    9c7c:	000a0593          	mv	a1,s4
    9c80:	000c0613          	mv	a2,s8
    9c84:	00048513          	mv	a0,s1
    9c88:	791000ef          	jal	ra,ac18 <__lshift>
    9c8c:	00050a13          	mv	s4,a0
    9c90:	03412783          	lw	a5,52(sp)
    9c94:	06078a63          	beqz	a5,9d08 <_dtoa_r+0xe20>
    9c98:	00c12503          	lw	a0,12(sp)
    9c9c:	000a0593          	mv	a1,s4
    9ca0:	0fc010ef          	jal	ra,ad9c <__mcmp>
    9ca4:	06055263          	bgez	a0,9d08 <_dtoa_r+0xe20>
    9ca8:	00c12583          	lw	a1,12(sp)
    9cac:	00000693          	li	a3,0
    9cb0:	00a00613          	li	a2,10
    9cb4:	00048513          	mv	a0,s1
    9cb8:	17d000ef          	jal	ra,a634 <__multadd>
    9cbc:	01c12783          	lw	a5,28(sp)
    9cc0:	00a12623          	sw	a0,12(sp)
    9cc4:	fff40413          	addi	s0,s0,-1
    9cc8:	3a078263          	beqz	a5,a06c <_dtoa_r+0x1184>
    9ccc:	00090593          	mv	a1,s2
    9cd0:	00000693          	li	a3,0
    9cd4:	00a00613          	li	a2,10
    9cd8:	00048513          	mv	a0,s1
    9cdc:	159000ef          	jal	ra,a634 <__multadd>
    9ce0:	00050913          	mv	s2,a0
    9ce4:	0db04863          	bgtz	s11,9db4 <_dtoa_r+0xecc>
    9ce8:	01412703          	lw	a4,20(sp)
    9cec:	00200793          	li	a5,2
    9cf0:	02e7c663          	blt	a5,a4,9d1c <_dtoa_r+0xe34>
    9cf4:	0c00006f          	j	9db4 <_dtoa_r+0xecc>
    9cf8:	f6e784e3          	beq	a5,a4,9c60 <_dtoa_r+0xd78>
    9cfc:	00078513          	mv	a0,a5
    9d00:	01c50513          	addi	a0,a0,28
    9d04:	f51ff06f          	j	9c54 <_dtoa_r+0xd6c>
    9d08:	0ba04063          	bgtz	s10,9da8 <_dtoa_r+0xec0>
    9d0c:	01412703          	lw	a4,20(sp)
    9d10:	00200793          	li	a5,2
    9d14:	08e7da63          	bge	a5,a4,9da8 <_dtoa_r+0xec0>
    9d18:	000d0d93          	mv	s11,s10
    9d1c:	020d9663          	bnez	s11,9d48 <_dtoa_r+0xe60>
    9d20:	000a0593          	mv	a1,s4
    9d24:	00000693          	li	a3,0
    9d28:	00500613          	li	a2,5
    9d2c:	00048513          	mv	a0,s1
    9d30:	105000ef          	jal	ra,a634 <__multadd>
    9d34:	00050a13          	mv	s4,a0
    9d38:	00050593          	mv	a1,a0
    9d3c:	00c12503          	lw	a0,12(sp)
    9d40:	05c010ef          	jal	ra,ad9c <__mcmp>
    9d44:	88a044e3          	bgtz	a0,95cc <_dtoa_r+0x6e4>
    9d48:	02012783          	lw	a5,32(sp)
    9d4c:	01012983          	lw	s3,16(sp)
    9d50:	fff7c413          	not	s0,a5
    9d54:	00000b13          	li	s6,0
    9d58:	000a0593          	mv	a1,s4
    9d5c:	00048513          	mv	a0,s1
    9d60:	041000ef          	jal	ra,a5a0 <_Bfree>
    9d64:	c4090ee3          	beqz	s2,99c0 <_dtoa_r+0xad8>
    9d68:	000b0a63          	beqz	s6,9d7c <_dtoa_r+0xe94>
    9d6c:	012b0863          	beq	s6,s2,9d7c <_dtoa_r+0xe94>
    9d70:	000b0593          	mv	a1,s6
    9d74:	00048513          	mv	a0,s1
    9d78:	029000ef          	jal	ra,a5a0 <_Bfree>
    9d7c:	00090593          	mv	a1,s2
    9d80:	00048513          	mv	a0,s1
    9d84:	01d000ef          	jal	ra,a5a0 <_Bfree>
    9d88:	c39ff06f          	j	99c0 <_dtoa_r+0xad8>
    9d8c:	00000a13          	li	s4,0
    9d90:	00000913          	li	s2,0
    9d94:	fb5ff06f          	j	9d48 <_dtoa_r+0xe60>
    9d98:	01812403          	lw	s0,24(sp)
    9d9c:	00000a13          	li	s4,0
    9da0:	00000913          	li	s2,0
    9da4:	829ff06f          	j	95cc <_dtoa_r+0x6e4>
    9da8:	01c12783          	lw	a5,28(sp)
    9dac:	000d0d93          	mv	s11,s10
    9db0:	2c078663          	beqz	a5,a07c <_dtoa_r+0x1194>
    9db4:	01505c63          	blez	s5,9dcc <_dtoa_r+0xee4>
    9db8:	00090593          	mv	a1,s2
    9dbc:	000a8613          	mv	a2,s5
    9dc0:	00048513          	mv	a0,s1
    9dc4:	655000ef          	jal	ra,ac18 <__lshift>
    9dc8:	00050913          	mv	s2,a0
    9dcc:	00090513          	mv	a0,s2
    9dd0:	040c8a63          	beqz	s9,9e24 <_dtoa_r+0xf3c>
    9dd4:	00492583          	lw	a1,4(s2)
    9dd8:	00048513          	mv	a0,s1
    9ddc:	6c4000ef          	jal	ra,a4a0 <_Balloc>
    9de0:	00050a93          	mv	s5,a0
    9de4:	00051c63          	bnez	a0,9dfc <_dtoa_r+0xf14>
    9de8:	0000d6b7          	lui	a3,0xd
    9dec:	ebc68693          	addi	a3,a3,-324 # cebc <_ctype_+0x220>
    9df0:	00000613          	li	a2,0
    9df4:	2ea00593          	li	a1,746
    9df8:	978ff06f          	j	8f70 <_dtoa_r+0x88>
    9dfc:	01092603          	lw	a2,16(s2)
    9e00:	00c90593          	addi	a1,s2,12
    9e04:	00c50513          	addi	a0,a0,12
    9e08:	00260613          	addi	a2,a2,2
    9e0c:	00261613          	slli	a2,a2,0x2
    9e10:	ce1f80ef          	jal	ra,2af0 <memcpy>
    9e14:	00100613          	li	a2,1
    9e18:	000a8593          	mv	a1,s5
    9e1c:	00048513          	mv	a0,s1
    9e20:	5f9000ef          	jal	ra,ac18 <__lshift>
    9e24:	01012783          	lw	a5,16(sp)
    9e28:	00090b13          	mv	s6,s2
    9e2c:	00050913          	mv	s2,a0
    9e30:	00178c13          	addi	s8,a5,1
    9e34:	01b787b3          	add	a5,a5,s11
    9e38:	00f12c23          	sw	a5,24(sp)
    9e3c:	0019fd93          	andi	s11,s3,1
    9e40:	00c12503          	lw	a0,12(sp)
    9e44:	000a0593          	mv	a1,s4
    9e48:	fffc0d13          	addi	s10,s8,-1
    9e4c:	ed1fe0ef          	jal	ra,8d1c <quorem>
    9e50:	00050c93          	mv	s9,a0
    9e54:	03050a93          	addi	s5,a0,48
    9e58:	00c12503          	lw	a0,12(sp)
    9e5c:	000b0593          	mv	a1,s6
    9e60:	73d000ef          	jal	ra,ad9c <__mcmp>
    9e64:	000a0593          	mv	a1,s4
    9e68:	00050b93          	mv	s7,a0
    9e6c:	00090613          	mv	a2,s2
    9e70:	00048513          	mv	a0,s1
    9e74:	77d000ef          	jal	ra,adf0 <__mdiff>
    9e78:	00c52683          	lw	a3,12(a0)
    9e7c:	00050593          	mv	a1,a0
    9e80:	00100713          	li	a4,1
    9e84:	00069c63          	bnez	a3,9e9c <_dtoa_r+0xfb4>
    9e88:	00a12e23          	sw	a0,28(sp)
    9e8c:	00c12503          	lw	a0,12(sp)
    9e90:	70d000ef          	jal	ra,ad9c <__mcmp>
    9e94:	01c12583          	lw	a1,28(sp)
    9e98:	00050713          	mv	a4,a0
    9e9c:	00048513          	mv	a0,s1
    9ea0:	00e12e23          	sw	a4,28(sp)
    9ea4:	6fc000ef          	jal	ra,a5a0 <_Bfree>
    9ea8:	01412783          	lw	a5,20(sp)
    9eac:	01c12703          	lw	a4,28(sp)
    9eb0:	000c0993          	mv	s3,s8
    9eb4:	00e7e6b3          	or	a3,a5,a4
    9eb8:	01b6e6b3          	or	a3,a3,s11
    9ebc:	00069e63          	bnez	a3,9ed8 <_dtoa_r+0xff0>
    9ec0:	03900713          	li	a4,57
    9ec4:	06ea8063          	beq	s5,a4,9f24 <_dtoa_r+0x103c>
    9ec8:	01705463          	blez	s7,9ed0 <_dtoa_r+0xfe8>
    9ecc:	031c8a93          	addi	s5,s9,49
    9ed0:	015d0023          	sb	s5,0(s10)
    9ed4:	e85ff06f          	j	9d58 <_dtoa_r+0xe70>
    9ed8:	000bca63          	bltz	s7,9eec <_dtoa_r+0x1004>
    9edc:	01412783          	lw	a5,20(sp)
    9ee0:	0177ebb3          	or	s7,a5,s7
    9ee4:	01bbebb3          	or	s7,s7,s11
    9ee8:	060b9463          	bnez	s7,9f50 <_dtoa_r+0x1068>
    9eec:	fee052e3          	blez	a4,9ed0 <_dtoa_r+0xfe8>
    9ef0:	00c12583          	lw	a1,12(sp)
    9ef4:	00100613          	li	a2,1
    9ef8:	00048513          	mv	a0,s1
    9efc:	51d000ef          	jal	ra,ac18 <__lshift>
    9f00:	000a0593          	mv	a1,s4
    9f04:	00a12623          	sw	a0,12(sp)
    9f08:	695000ef          	jal	ra,ad9c <__mcmp>
    9f0c:	00a04863          	bgtz	a0,9f1c <_dtoa_r+0x1034>
    9f10:	fc0510e3          	bnez	a0,9ed0 <_dtoa_r+0xfe8>
    9f14:	001af713          	andi	a4,s5,1
    9f18:	fa070ce3          	beqz	a4,9ed0 <_dtoa_r+0xfe8>
    9f1c:	03900713          	li	a4,57
    9f20:	faea96e3          	bne	s5,a4,9ecc <_dtoa_r+0xfe4>
    9f24:	03900793          	li	a5,57
    9f28:	00fd0023          	sb	a5,0(s10)
    9f2c:	00098793          	mv	a5,s3
    9f30:	03900693          	li	a3,57
    9f34:	00078993          	mv	s3,a5
    9f38:	fff9c703          	lbu	a4,-1(s3)
    9f3c:	fff78793          	addi	a5,a5,-1
    9f40:	0ed70c63          	beq	a4,a3,a038 <_dtoa_r+0x1150>
    9f44:	00170713          	addi	a4,a4,1
    9f48:	00e78023          	sb	a4,0(a5)
    9f4c:	e0dff06f          	j	9d58 <_dtoa_r+0xe70>
    9f50:	00e05c63          	blez	a4,9f68 <_dtoa_r+0x1080>
    9f54:	03900713          	li	a4,57
    9f58:	fcea86e3          	beq	s5,a4,9f24 <_dtoa_r+0x103c>
    9f5c:	001a8793          	addi	a5,s5,1
    9f60:	00fd0023          	sb	a5,0(s10)
    9f64:	df5ff06f          	j	9d58 <_dtoa_r+0xe70>
    9f68:	01812783          	lw	a5,24(sp)
    9f6c:	ff5c0fa3          	sb	s5,-1(s8)
    9f70:	09878063          	beq	a5,s8,9ff0 <_dtoa_r+0x1108>
    9f74:	00c12583          	lw	a1,12(sp)
    9f78:	00000693          	li	a3,0
    9f7c:	00a00613          	li	a2,10
    9f80:	00048513          	mv	a0,s1
    9f84:	6b0000ef          	jal	ra,a634 <__multadd>
    9f88:	00a12623          	sw	a0,12(sp)
    9f8c:	00000693          	li	a3,0
    9f90:	00a00613          	li	a2,10
    9f94:	000b0593          	mv	a1,s6
    9f98:	00048513          	mv	a0,s1
    9f9c:	012b1c63          	bne	s6,s2,9fb4 <_dtoa_r+0x10cc>
    9fa0:	694000ef          	jal	ra,a634 <__multadd>
    9fa4:	00050b13          	mv	s6,a0
    9fa8:	00050913          	mv	s2,a0
    9fac:	001c0c13          	addi	s8,s8,1
    9fb0:	e91ff06f          	j	9e40 <_dtoa_r+0xf58>
    9fb4:	680000ef          	jal	ra,a634 <__multadd>
    9fb8:	00090593          	mv	a1,s2
    9fbc:	00050b13          	mv	s6,a0
    9fc0:	00000693          	li	a3,0
    9fc4:	00a00613          	li	a2,10
    9fc8:	00048513          	mv	a0,s1
    9fcc:	668000ef          	jal	ra,a634 <__multadd>
    9fd0:	00050913          	mv	s2,a0
    9fd4:	fd9ff06f          	j	9fac <_dtoa_r+0x10c4>
    9fd8:	00100993          	li	s3,1
    9fdc:	01b05463          	blez	s11,9fe4 <_dtoa_r+0x10fc>
    9fe0:	000d8993          	mv	s3,s11
    9fe4:	01012783          	lw	a5,16(sp)
    9fe8:	00000b13          	li	s6,0
    9fec:	013789b3          	add	s3,a5,s3
    9ff0:	00c12583          	lw	a1,12(sp)
    9ff4:	00100613          	li	a2,1
    9ff8:	00048513          	mv	a0,s1
    9ffc:	41d000ef          	jal	ra,ac18 <__lshift>
    a000:	000a0593          	mv	a1,s4
    a004:	00a12623          	sw	a0,12(sp)
    a008:	595000ef          	jal	ra,ad9c <__mcmp>
    a00c:	f2a040e3          	bgtz	a0,9f2c <_dtoa_r+0x1044>
    a010:	00051663          	bnez	a0,a01c <_dtoa_r+0x1134>
    a014:	001af793          	andi	a5,s5,1
    a018:	f0079ae3          	bnez	a5,9f2c <_dtoa_r+0x1044>
    a01c:	00098793          	mv	a5,s3
    a020:	03000713          	li	a4,48
    a024:	00078993          	mv	s3,a5
    a028:	fff7c683          	lbu	a3,-1(a5)
    a02c:	fff78793          	addi	a5,a5,-1
    a030:	fee68ae3          	beq	a3,a4,a024 <_dtoa_r+0x113c>
    a034:	d25ff06f          	j	9d58 <_dtoa_r+0xe70>
    a038:	01012703          	lw	a4,16(sp)
    a03c:	eef71ce3          	bne	a4,a5,9f34 <_dtoa_r+0x104c>
    a040:	03100793          	li	a5,49
    a044:	00140413          	addi	s0,s0,1
    a048:	00f70023          	sb	a5,0(a4)
    a04c:	d0dff06f          	j	9d58 <_dtoa_r+0xe70>
    a050:	02412783          	lw	a5,36(sp)
    a054:	0000d537          	lui	a0,0xd
    a058:	00078463          	beqz	a5,a060 <_dtoa_r+0x1178>
    a05c:	fc1fe06f          	j	901c <_dtoa_r+0x134>
    a060:	e3050793          	addi	a5,a0,-464 # ce30 <_ctype_+0x194>
    a064:	00f12823          	sw	a5,16(sp)
    a068:	fcdfe06f          	j	9034 <_dtoa_r+0x14c>
    a06c:	01b04863          	bgtz	s11,a07c <_dtoa_r+0x1194>
    a070:	01412703          	lw	a4,20(sp)
    a074:	00200793          	li	a5,2
    a078:	cae7c2e3          	blt	a5,a4,9d1c <_dtoa_r+0xe34>
    a07c:	00000993          	li	s3,0
    a080:	00c12503          	lw	a0,12(sp)
    a084:	000a0593          	mv	a1,s4
    a088:	c95fe0ef          	jal	ra,8d1c <quorem>
    a08c:	01012783          	lw	a5,16(sp)
    a090:	03050a93          	addi	s5,a0,48
    a094:	01378733          	add	a4,a5,s3
    a098:	01570023          	sb	s5,0(a4)
    a09c:	00198993          	addi	s3,s3,1
    a0a0:	f3b9dce3          	bge	s3,s11,9fd8 <_dtoa_r+0x10f0>
    a0a4:	00c12583          	lw	a1,12(sp)
    a0a8:	00000693          	li	a3,0
    a0ac:	00a00613          	li	a2,10
    a0b0:	00048513          	mv	a0,s1
    a0b4:	580000ef          	jal	ra,a634 <__multadd>
    a0b8:	00a12623          	sw	a0,12(sp)
    a0bc:	fc5ff06f          	j	a080 <_dtoa_r+0x1198>

0000a0c0 <std>:
    a0c0:	ff010113          	addi	sp,sp,-16
    a0c4:	00812423          	sw	s0,8(sp)
    a0c8:	00112623          	sw	ra,12(sp)
    a0cc:	00050413          	mv	s0,a0
    a0d0:	00b51623          	sh	a1,12(a0)
    a0d4:	00c51723          	sh	a2,14(a0)
    a0d8:	00052023          	sw	zero,0(a0)
    a0dc:	00052223          	sw	zero,4(a0)
    a0e0:	00052423          	sw	zero,8(a0)
    a0e4:	06052223          	sw	zero,100(a0)
    a0e8:	00052823          	sw	zero,16(a0)
    a0ec:	00052a23          	sw	zero,20(a0)
    a0f0:	00052c23          	sw	zero,24(a0)
    a0f4:	00800613          	li	a2,8
    a0f8:	00000593          	li	a1,0
    a0fc:	05c50513          	addi	a0,a0,92
    a100:	a15f80ef          	jal	ra,2b14 <memset>
    a104:	0000b7b7          	lui	a5,0xb
    a108:	67078793          	addi	a5,a5,1648 # b670 <__sread>
    a10c:	02f42223          	sw	a5,36(s0)
    a110:	0000b7b7          	lui	a5,0xb
    a114:	6c078793          	addi	a5,a5,1728 # b6c0 <__swrite>
    a118:	02f42423          	sw	a5,40(s0)
    a11c:	0000b7b7          	lui	a5,0xb
    a120:	74478793          	addi	a5,a5,1860 # b744 <__sseek>
    a124:	02f42623          	sw	a5,44(s0)
    a128:	0000b7b7          	lui	a5,0xb
    a12c:	79c78793          	addi	a5,a5,1948 # b79c <__sclose>
    a130:	00c12083          	lw	ra,12(sp)
    a134:	02842023          	sw	s0,32(s0)
    a138:	02f42823          	sw	a5,48(s0)
    a13c:	00812403          	lw	s0,8(sp)
    a140:	01010113          	addi	sp,sp,16
    a144:	00008067          	ret

0000a148 <_cleanup_r>:
    a148:	0000c5b7          	lui	a1,0xc
    a14c:	d3c58593          	addi	a1,a1,-708 # bd3c <_fflush_r>
    a150:	2580006f          	j	a3a8 <_fwalk_reent>

0000a154 <__sfmoreglue>:
    a154:	ff010113          	addi	sp,sp,-16
    a158:	00912223          	sw	s1,4(sp)
    a15c:	06800613          	li	a2,104
    a160:	fff58493          	addi	s1,a1,-1
    a164:	02c484b3          	mul	s1,s1,a2
    a168:	01212023          	sw	s2,0(sp)
    a16c:	00058913          	mv	s2,a1
    a170:	00812423          	sw	s0,8(sp)
    a174:	00112623          	sw	ra,12(sp)
    a178:	07448593          	addi	a1,s1,116
    a17c:	a51fd0ef          	jal	ra,7bcc <_malloc_r>
    a180:	00050413          	mv	s0,a0
    a184:	02050063          	beqz	a0,a1a4 <__sfmoreglue+0x50>
    a188:	00052023          	sw	zero,0(a0)
    a18c:	01252223          	sw	s2,4(a0)
    a190:	00c50513          	addi	a0,a0,12
    a194:	00a42423          	sw	a0,8(s0)
    a198:	06848613          	addi	a2,s1,104
    a19c:	00000593          	li	a1,0
    a1a0:	975f80ef          	jal	ra,2b14 <memset>
    a1a4:	00c12083          	lw	ra,12(sp)
    a1a8:	00040513          	mv	a0,s0
    a1ac:	00812403          	lw	s0,8(sp)
    a1b0:	00412483          	lw	s1,4(sp)
    a1b4:	00012903          	lw	s2,0(sp)
    a1b8:	01010113          	addi	sp,sp,16
    a1bc:	00008067          	ret

0000a1c0 <__sfp_lock_acquire>:
    a1c0:	0000f537          	lui	a0,0xf
    a1c4:	16050513          	addi	a0,a0,352 # f160 <__lock___sfp_recursive_mutex>
    a1c8:	c50fb06f          	j	5618 <__retarget_lock_acquire_recursive>

0000a1cc <__sfp_lock_release>:
    a1cc:	0000f537          	lui	a0,0xf
    a1d0:	16050513          	addi	a0,a0,352 # f160 <__lock___sfp_recursive_mutex>
    a1d4:	c50fb06f          	j	5624 <__retarget_lock_release_recursive>

0000a1d8 <__sinit_lock_acquire>:
    a1d8:	0000f537          	lui	a0,0xf
    a1dc:	17450513          	addi	a0,a0,372 # f174 <__lock___sinit_recursive_mutex>
    a1e0:	c38fb06f          	j	5618 <__retarget_lock_acquire_recursive>

0000a1e4 <__sinit_lock_release>:
    a1e4:	0000f537          	lui	a0,0xf
    a1e8:	17450513          	addi	a0,a0,372 # f174 <__lock___sinit_recursive_mutex>
    a1ec:	c38fb06f          	j	5624 <__retarget_lock_release_recursive>

0000a1f0 <__sinit>:
    a1f0:	ff010113          	addi	sp,sp,-16
    a1f4:	00812423          	sw	s0,8(sp)
    a1f8:	00112623          	sw	ra,12(sp)
    a1fc:	00050413          	mv	s0,a0
    a200:	fd9ff0ef          	jal	ra,a1d8 <__sinit_lock_acquire>
    a204:	01842783          	lw	a5,24(s0)
    a208:	00078a63          	beqz	a5,a21c <__sinit+0x2c>
    a20c:	00812403          	lw	s0,8(sp)
    a210:	00c12083          	lw	ra,12(sp)
    a214:	01010113          	addi	sp,sp,16
    a218:	fcdff06f          	j	a1e4 <__sinit_lock_release>
    a21c:	0000a7b7          	lui	a5,0xa
    a220:	14878793          	addi	a5,a5,328 # a148 <_cleanup_r>
    a224:	02f42423          	sw	a5,40(s0)
    a228:	0000c7b7          	lui	a5,0xc
    a22c:	6087a783          	lw	a5,1544(a5) # c608 <_global_impure_ptr>
    a230:	04042423          	sw	zero,72(s0)
    a234:	04042623          	sw	zero,76(s0)
    a238:	04042823          	sw	zero,80(s0)
    a23c:	00879663          	bne	a5,s0,a248 <__sinit+0x58>
    a240:	00100793          	li	a5,1
    a244:	00f42c23          	sw	a5,24(s0)
    a248:	00040513          	mv	a0,s0
    a24c:	05c000ef          	jal	ra,a2a8 <__sfp>
    a250:	00a42223          	sw	a0,4(s0)
    a254:	00040513          	mv	a0,s0
    a258:	050000ef          	jal	ra,a2a8 <__sfp>
    a25c:	00a42423          	sw	a0,8(s0)
    a260:	00040513          	mv	a0,s0
    a264:	044000ef          	jal	ra,a2a8 <__sfp>
    a268:	00a42623          	sw	a0,12(s0)
    a26c:	00442503          	lw	a0,4(s0)
    a270:	00000613          	li	a2,0
    a274:	00400593          	li	a1,4
    a278:	e49ff0ef          	jal	ra,a0c0 <std>
    a27c:	00842503          	lw	a0,8(s0)
    a280:	00100613          	li	a2,1
    a284:	00900593          	li	a1,9
    a288:	e39ff0ef          	jal	ra,a0c0 <std>
    a28c:	00c42503          	lw	a0,12(s0)
    a290:	00200613          	li	a2,2
    a294:	01200593          	li	a1,18
    a298:	e29ff0ef          	jal	ra,a0c0 <std>
    a29c:	00100793          	li	a5,1
    a2a0:	00f42c23          	sw	a5,24(s0)
    a2a4:	f69ff06f          	j	a20c <__sinit+0x1c>

0000a2a8 <__sfp>:
    a2a8:	ff010113          	addi	sp,sp,-16
    a2ac:	00912223          	sw	s1,4(sp)
    a2b0:	01212023          	sw	s2,0(sp)
    a2b4:	00112623          	sw	ra,12(sp)
    a2b8:	00812423          	sw	s0,8(sp)
    a2bc:	00050913          	mv	s2,a0
    a2c0:	f01ff0ef          	jal	ra,a1c0 <__sfp_lock_acquire>
    a2c4:	0000c7b7          	lui	a5,0xc
    a2c8:	6087a483          	lw	s1,1544(a5) # c608 <_global_impure_ptr>
    a2cc:	0184a783          	lw	a5,24(s1)
    a2d0:	00079663          	bnez	a5,a2dc <__sfp+0x34>
    a2d4:	00048513          	mv	a0,s1
    a2d8:	f19ff0ef          	jal	ra,a1f0 <__sinit>
    a2dc:	04848493          	addi	s1,s1,72
    a2e0:	0084a403          	lw	s0,8(s1)
    a2e4:	0044a783          	lw	a5,4(s1)
    a2e8:	fff78793          	addi	a5,a5,-1
    a2ec:	0007da63          	bgez	a5,a300 <__sfp+0x58>
    a2f0:	0004a783          	lw	a5,0(s1)
    a2f4:	08078663          	beqz	a5,a380 <__sfp+0xd8>
    a2f8:	0004a483          	lw	s1,0(s1)
    a2fc:	fe5ff06f          	j	a2e0 <__sfp+0x38>
    a300:	00c41703          	lh	a4,12(s0)
    a304:	06071a63          	bnez	a4,a378 <__sfp+0xd0>
    a308:	ffff07b7          	lui	a5,0xffff0
    a30c:	00178793          	addi	a5,a5,1 # ffff0001 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff0002>
    a310:	00f42623          	sw	a5,12(s0)
    a314:	05840513          	addi	a0,s0,88
    a318:	06042223          	sw	zero,100(s0)
    a31c:	ad0fb0ef          	jal	ra,55ec <__retarget_lock_init_recursive>
    a320:	eadff0ef          	jal	ra,a1cc <__sfp_lock_release>
    a324:	00800613          	li	a2,8
    a328:	00042023          	sw	zero,0(s0)
    a32c:	00042423          	sw	zero,8(s0)
    a330:	00042223          	sw	zero,4(s0)
    a334:	00042823          	sw	zero,16(s0)
    a338:	00042a23          	sw	zero,20(s0)
    a33c:	00042c23          	sw	zero,24(s0)
    a340:	00000593          	li	a1,0
    a344:	05c40513          	addi	a0,s0,92
    a348:	fccf80ef          	jal	ra,2b14 <memset>
    a34c:	02042a23          	sw	zero,52(s0)
    a350:	02042c23          	sw	zero,56(s0)
    a354:	04042423          	sw	zero,72(s0)
    a358:	04042623          	sw	zero,76(s0)
    a35c:	00c12083          	lw	ra,12(sp)
    a360:	00040513          	mv	a0,s0
    a364:	00812403          	lw	s0,8(sp)
    a368:	00412483          	lw	s1,4(sp)
    a36c:	00012903          	lw	s2,0(sp)
    a370:	01010113          	addi	sp,sp,16
    a374:	00008067          	ret
    a378:	06840413          	addi	s0,s0,104
    a37c:	f6dff06f          	j	a2e8 <__sfp+0x40>
    a380:	00400593          	li	a1,4
    a384:	00090513          	mv	a0,s2
    a388:	dcdff0ef          	jal	ra,a154 <__sfmoreglue>
    a38c:	00a4a023          	sw	a0,0(s1)
    a390:	00050413          	mv	s0,a0
    a394:	f60512e3          	bnez	a0,a2f8 <__sfp+0x50>
    a398:	e35ff0ef          	jal	ra,a1cc <__sfp_lock_release>
    a39c:	00c00793          	li	a5,12
    a3a0:	00f92023          	sw	a5,0(s2)
    a3a4:	fb9ff06f          	j	a35c <__sfp+0xb4>

0000a3a8 <_fwalk_reent>:
    a3a8:	fd010113          	addi	sp,sp,-48
    a3ac:	02812423          	sw	s0,40(sp)
    a3b0:	03212023          	sw	s2,32(sp)
    a3b4:	01312e23          	sw	s3,28(sp)
    a3b8:	01412c23          	sw	s4,24(sp)
    a3bc:	01612823          	sw	s6,16(sp)
    a3c0:	01712623          	sw	s7,12(sp)
    a3c4:	02112623          	sw	ra,44(sp)
    a3c8:	02912223          	sw	s1,36(sp)
    a3cc:	01512a23          	sw	s5,20(sp)
    a3d0:	00050913          	mv	s2,a0
    a3d4:	00058a13          	mv	s4,a1
    a3d8:	04850413          	addi	s0,a0,72
    a3dc:	00000993          	li	s3,0
    a3e0:	00100b13          	li	s6,1
    a3e4:	fff00b93          	li	s7,-1
    a3e8:	00842483          	lw	s1,8(s0)
    a3ec:	00442a83          	lw	s5,4(s0)
    a3f0:	fffa8a93          	addi	s5,s5,-1
    a3f4:	020ade63          	bgez	s5,a430 <_fwalk_reent+0x88>
    a3f8:	00042403          	lw	s0,0(s0)
    a3fc:	fe0416e3          	bnez	s0,a3e8 <_fwalk_reent+0x40>
    a400:	02c12083          	lw	ra,44(sp)
    a404:	02812403          	lw	s0,40(sp)
    a408:	02412483          	lw	s1,36(sp)
    a40c:	02012903          	lw	s2,32(sp)
    a410:	01812a03          	lw	s4,24(sp)
    a414:	01412a83          	lw	s5,20(sp)
    a418:	01012b03          	lw	s6,16(sp)
    a41c:	00c12b83          	lw	s7,12(sp)
    a420:	00098513          	mv	a0,s3
    a424:	01c12983          	lw	s3,28(sp)
    a428:	03010113          	addi	sp,sp,48
    a42c:	00008067          	ret
    a430:	00c4d783          	lhu	a5,12(s1)
    a434:	00fb7e63          	bgeu	s6,a5,a450 <_fwalk_reent+0xa8>
    a438:	00e49783          	lh	a5,14(s1)
    a43c:	01778a63          	beq	a5,s7,a450 <_fwalk_reent+0xa8>
    a440:	00048593          	mv	a1,s1
    a444:	00090513          	mv	a0,s2
    a448:	000a00e7          	jalr	s4
    a44c:	00a9e9b3          	or	s3,s3,a0
    a450:	06848493          	addi	s1,s1,104
    a454:	f9dff06f          	j	a3f0 <_fwalk_reent+0x48>

0000a458 <_localeconv_r>:
    a458:	0000f537          	lui	a0,0xf
    a45c:	09050513          	addi	a0,a0,144 # f090 <__global_locale+0xf0>
    a460:	00008067          	ret

0000a464 <memchr>:
    a464:	0ff5f593          	andi	a1,a1,255
    a468:	00c50633          	add	a2,a0,a2
    a46c:	00c51663          	bne	a0,a2,a478 <memchr+0x14>
    a470:	00000513          	li	a0,0
    a474:	00008067          	ret
    a478:	00054783          	lbu	a5,0(a0)
    a47c:	feb78ce3          	beq	a5,a1,a474 <memchr+0x10>
    a480:	00150513          	addi	a0,a0,1
    a484:	fe9ff06f          	j	a46c <memchr+0x8>

0000a488 <__malloc_lock>:
    a488:	0000f537          	lui	a0,0xf
    a48c:	14c50513          	addi	a0,a0,332 # f14c <__lock___malloc_recursive_mutex>
    a490:	988fb06f          	j	5618 <__retarget_lock_acquire_recursive>

0000a494 <__malloc_unlock>:
    a494:	0000f537          	lui	a0,0xf
    a498:	14c50513          	addi	a0,a0,332 # f14c <__lock___malloc_recursive_mutex>
    a49c:	988fb06f          	j	5624 <__retarget_lock_release_recursive>

0000a4a0 <_Balloc>:
    a4a0:	02452783          	lw	a5,36(a0)
    a4a4:	ff010113          	addi	sp,sp,-16
    a4a8:	00812423          	sw	s0,8(sp)
    a4ac:	00912223          	sw	s1,4(sp)
    a4b0:	00112623          	sw	ra,12(sp)
    a4b4:	01212023          	sw	s2,0(sp)
    a4b8:	00050413          	mv	s0,a0
    a4bc:	00058493          	mv	s1,a1
    a4c0:	04079063          	bnez	a5,a500 <_Balloc+0x60>
    a4c4:	01000513          	li	a0,16
    a4c8:	df0fd0ef          	jal	ra,7ab8 <malloc>
    a4cc:	02a42223          	sw	a0,36(s0)
    a4d0:	02051063          	bnez	a0,a4f0 <_Balloc+0x50>
    a4d4:	0000d6b7          	lui	a3,0xd
    a4d8:	0000d537          	lui	a0,0xd
    a4dc:	e4068693          	addi	a3,a3,-448 # ce40 <_ctype_+0x1a4>
    a4e0:	00000613          	li	a2,0
    a4e4:	06600593          	li	a1,102
    a4e8:	f3050513          	addi	a0,a0,-208 # cf30 <__sf_fake_stdout+0x20>
    a4ec:	5bc010ef          	jal	ra,baa8 <__assert_func>
    a4f0:	00052223          	sw	zero,4(a0)
    a4f4:	00052423          	sw	zero,8(a0)
    a4f8:	00052023          	sw	zero,0(a0)
    a4fc:	00052623          	sw	zero,12(a0)
    a500:	02442903          	lw	s2,36(s0)
    a504:	00c92783          	lw	a5,12(s2)
    a508:	04078463          	beqz	a5,a550 <_Balloc+0xb0>
    a50c:	02442703          	lw	a4,36(s0)
    a510:	00249793          	slli	a5,s1,0x2
    a514:	00c72703          	lw	a4,12(a4)
    a518:	00f707b3          	add	a5,a4,a5
    a51c:	0007a503          	lw	a0,0(a5)
    a520:	06051663          	bnez	a0,a58c <_Balloc+0xec>
    a524:	00100913          	li	s2,1
    a528:	00991933          	sll	s2,s2,s1
    a52c:	00590613          	addi	a2,s2,5
    a530:	00261613          	slli	a2,a2,0x2
    a534:	00100593          	li	a1,1
    a538:	00040513          	mv	a0,s0
    a53c:	40d000ef          	jal	ra,b148 <_calloc_r>
    a540:	02050863          	beqz	a0,a570 <_Balloc+0xd0>
    a544:	00952223          	sw	s1,4(a0)
    a548:	01252423          	sw	s2,8(a0)
    a54c:	0480006f          	j	a594 <_Balloc+0xf4>
    a550:	02100613          	li	a2,33
    a554:	00400593          	li	a1,4
    a558:	00040513          	mv	a0,s0
    a55c:	3ed000ef          	jal	ra,b148 <_calloc_r>
    a560:	02442783          	lw	a5,36(s0)
    a564:	00a92623          	sw	a0,12(s2)
    a568:	00c7a783          	lw	a5,12(a5)
    a56c:	fa0790e3          	bnez	a5,a50c <_Balloc+0x6c>
    a570:	00000513          	li	a0,0
    a574:	00c12083          	lw	ra,12(sp)
    a578:	00812403          	lw	s0,8(sp)
    a57c:	00412483          	lw	s1,4(sp)
    a580:	00012903          	lw	s2,0(sp)
    a584:	01010113          	addi	sp,sp,16
    a588:	00008067          	ret
    a58c:	00052703          	lw	a4,0(a0)
    a590:	00e7a023          	sw	a4,0(a5)
    a594:	00052823          	sw	zero,16(a0)
    a598:	00052623          	sw	zero,12(a0)
    a59c:	fd9ff06f          	j	a574 <_Balloc+0xd4>

0000a5a0 <_Bfree>:
    a5a0:	02452783          	lw	a5,36(a0)
    a5a4:	ff010113          	addi	sp,sp,-16
    a5a8:	00812423          	sw	s0,8(sp)
    a5ac:	00912223          	sw	s1,4(sp)
    a5b0:	00112623          	sw	ra,12(sp)
    a5b4:	00050493          	mv	s1,a0
    a5b8:	00058413          	mv	s0,a1
    a5bc:	04079063          	bnez	a5,a5fc <_Bfree+0x5c>
    a5c0:	01000513          	li	a0,16
    a5c4:	cf4fd0ef          	jal	ra,7ab8 <malloc>
    a5c8:	02a4a223          	sw	a0,36(s1)
    a5cc:	02051063          	bnez	a0,a5ec <_Bfree+0x4c>
    a5d0:	0000d6b7          	lui	a3,0xd
    a5d4:	0000d537          	lui	a0,0xd
    a5d8:	e4068693          	addi	a3,a3,-448 # ce40 <_ctype_+0x1a4>
    a5dc:	00000613          	li	a2,0
    a5e0:	08a00593          	li	a1,138
    a5e4:	f3050513          	addi	a0,a0,-208 # cf30 <__sf_fake_stdout+0x20>
    a5e8:	4c0010ef          	jal	ra,baa8 <__assert_func>
    a5ec:	00052223          	sw	zero,4(a0)
    a5f0:	00052423          	sw	zero,8(a0)
    a5f4:	00052023          	sw	zero,0(a0)
    a5f8:	00052623          	sw	zero,12(a0)
    a5fc:	02040263          	beqz	s0,a620 <_Bfree+0x80>
    a600:	0244a683          	lw	a3,36(s1)
    a604:	00442783          	lw	a5,4(s0)
    a608:	00279713          	slli	a4,a5,0x2
    a60c:	00c6a783          	lw	a5,12(a3)
    a610:	00e787b3          	add	a5,a5,a4
    a614:	0007a703          	lw	a4,0(a5)
    a618:	00e42023          	sw	a4,0(s0)
    a61c:	0087a023          	sw	s0,0(a5)
    a620:	00c12083          	lw	ra,12(sp)
    a624:	00812403          	lw	s0,8(sp)
    a628:	00412483          	lw	s1,4(sp)
    a62c:	01010113          	addi	sp,sp,16
    a630:	00008067          	ret

0000a634 <__multadd>:
    a634:	fe010113          	addi	sp,sp,-32
    a638:	00812c23          	sw	s0,24(sp)
    a63c:	01212823          	sw	s2,16(sp)
    a640:	01312623          	sw	s3,12(sp)
    a644:	0105a903          	lw	s2,16(a1)
    a648:	00058413          	mv	s0,a1
    a64c:	00068993          	mv	s3,a3
    a650:	01458693          	addi	a3,a1,20
    a654:	000105b7          	lui	a1,0x10
    a658:	00912a23          	sw	s1,20(sp)
    a65c:	00112e23          	sw	ra,28(sp)
    a660:	00050493          	mv	s1,a0
    a664:	01412423          	sw	s4,8(sp)
    a668:	00000513          	li	a0,0
    a66c:	fff58593          	addi	a1,a1,-1 # ffff <__data_region_end+0xe03>
    a670:	0006a783          	lw	a5,0(a3)
    a674:	00468693          	addi	a3,a3,4
    a678:	00150513          	addi	a0,a0,1
    a67c:	00b7f733          	and	a4,a5,a1
    a680:	02c70733          	mul	a4,a4,a2
    a684:	0107d793          	srli	a5,a5,0x10
    a688:	02c787b3          	mul	a5,a5,a2
    a68c:	01370733          	add	a4,a4,s3
    a690:	01075813          	srli	a6,a4,0x10
    a694:	00b77733          	and	a4,a4,a1
    a698:	010787b3          	add	a5,a5,a6
    a69c:	0107d993          	srli	s3,a5,0x10
    a6a0:	01079793          	slli	a5,a5,0x10
    a6a4:	00e787b3          	add	a5,a5,a4
    a6a8:	fef6ae23          	sw	a5,-4(a3)
    a6ac:	fd2542e3          	blt	a0,s2,a670 <__multadd+0x3c>
    a6b0:	08098063          	beqz	s3,a730 <__multadd+0xfc>
    a6b4:	00842783          	lw	a5,8(s0)
    a6b8:	06f94063          	blt	s2,a5,a718 <__multadd+0xe4>
    a6bc:	00442583          	lw	a1,4(s0)
    a6c0:	00048513          	mv	a0,s1
    a6c4:	00158593          	addi	a1,a1,1
    a6c8:	dd9ff0ef          	jal	ra,a4a0 <_Balloc>
    a6cc:	00050a13          	mv	s4,a0
    a6d0:	02051063          	bnez	a0,a6f0 <__multadd+0xbc>
    a6d4:	0000d6b7          	lui	a3,0xd
    a6d8:	0000d537          	lui	a0,0xd
    a6dc:	ebc68693          	addi	a3,a3,-324 # cebc <_ctype_+0x220>
    a6e0:	00000613          	li	a2,0
    a6e4:	0b500593          	li	a1,181
    a6e8:	f3050513          	addi	a0,a0,-208 # cf30 <__sf_fake_stdout+0x20>
    a6ec:	3bc010ef          	jal	ra,baa8 <__assert_func>
    a6f0:	01042603          	lw	a2,16(s0)
    a6f4:	00c40593          	addi	a1,s0,12
    a6f8:	00c50513          	addi	a0,a0,12
    a6fc:	00260613          	addi	a2,a2,2
    a700:	00261613          	slli	a2,a2,0x2
    a704:	becf80ef          	jal	ra,2af0 <memcpy>
    a708:	00040593          	mv	a1,s0
    a70c:	00048513          	mv	a0,s1
    a710:	e91ff0ef          	jal	ra,a5a0 <_Bfree>
    a714:	000a0413          	mv	s0,s4
    a718:	00490793          	addi	a5,s2,4
    a71c:	00279793          	slli	a5,a5,0x2
    a720:	00f407b3          	add	a5,s0,a5
    a724:	0137a223          	sw	s3,4(a5)
    a728:	00190913          	addi	s2,s2,1
    a72c:	01242823          	sw	s2,16(s0)
    a730:	01c12083          	lw	ra,28(sp)
    a734:	00040513          	mv	a0,s0
    a738:	01812403          	lw	s0,24(sp)
    a73c:	01412483          	lw	s1,20(sp)
    a740:	01012903          	lw	s2,16(sp)
    a744:	00c12983          	lw	s3,12(sp)
    a748:	00812a03          	lw	s4,8(sp)
    a74c:	02010113          	addi	sp,sp,32
    a750:	00008067          	ret

0000a754 <__hi0bits>:
    a754:	ffff0737          	lui	a4,0xffff0
    a758:	00e57733          	and	a4,a0,a4
    a75c:	00050793          	mv	a5,a0
    a760:	00000513          	li	a0,0
    a764:	00071663          	bnez	a4,a770 <__hi0bits+0x1c>
    a768:	01079793          	slli	a5,a5,0x10
    a76c:	01000513          	li	a0,16
    a770:	ff000737          	lui	a4,0xff000
    a774:	00e7f733          	and	a4,a5,a4
    a778:	00071663          	bnez	a4,a784 <__hi0bits+0x30>
    a77c:	00850513          	addi	a0,a0,8
    a780:	00879793          	slli	a5,a5,0x8
    a784:	f0000737          	lui	a4,0xf0000
    a788:	00e7f733          	and	a4,a5,a4
    a78c:	00071663          	bnez	a4,a798 <__hi0bits+0x44>
    a790:	00450513          	addi	a0,a0,4
    a794:	00479793          	slli	a5,a5,0x4
    a798:	c0000737          	lui	a4,0xc0000
    a79c:	00e7f733          	and	a4,a5,a4
    a7a0:	00071663          	bnez	a4,a7ac <__hi0bits+0x58>
    a7a4:	00250513          	addi	a0,a0,2
    a7a8:	00279793          	slli	a5,a5,0x2
    a7ac:	0007cc63          	bltz	a5,a7c4 <__hi0bits+0x70>
    a7b0:	40000737          	lui	a4,0x40000
    a7b4:	00e7f7b3          	and	a5,a5,a4
    a7b8:	00150513          	addi	a0,a0,1
    a7bc:	00079463          	bnez	a5,a7c4 <__hi0bits+0x70>
    a7c0:	02000513          	li	a0,32
    a7c4:	00008067          	ret

0000a7c8 <__lo0bits>:
    a7c8:	00052783          	lw	a5,0(a0)
    a7cc:	00050713          	mv	a4,a0
    a7d0:	0077f693          	andi	a3,a5,7
    a7d4:	02068c63          	beqz	a3,a80c <__lo0bits+0x44>
    a7d8:	0017f693          	andi	a3,a5,1
    a7dc:	00000513          	li	a0,0
    a7e0:	08069a63          	bnez	a3,a874 <__lo0bits+0xac>
    a7e4:	0027f693          	andi	a3,a5,2
    a7e8:	00068a63          	beqz	a3,a7fc <__lo0bits+0x34>
    a7ec:	0017d793          	srli	a5,a5,0x1
    a7f0:	00f72023          	sw	a5,0(a4) # 40000000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3d050f80>
    a7f4:	00100513          	li	a0,1
    a7f8:	00008067          	ret
    a7fc:	0027d793          	srli	a5,a5,0x2
    a800:	00f72023          	sw	a5,0(a4)
    a804:	00200513          	li	a0,2
    a808:	00008067          	ret
    a80c:	01079693          	slli	a3,a5,0x10
    a810:	0106d693          	srli	a3,a3,0x10
    a814:	00000513          	li	a0,0
    a818:	00069663          	bnez	a3,a824 <__lo0bits+0x5c>
    a81c:	0107d793          	srli	a5,a5,0x10
    a820:	01000513          	li	a0,16
    a824:	0ff7f693          	andi	a3,a5,255
    a828:	00069663          	bnez	a3,a834 <__lo0bits+0x6c>
    a82c:	00850513          	addi	a0,a0,8
    a830:	0087d793          	srli	a5,a5,0x8
    a834:	00f7f693          	andi	a3,a5,15
    a838:	00069663          	bnez	a3,a844 <__lo0bits+0x7c>
    a83c:	00450513          	addi	a0,a0,4
    a840:	0047d793          	srli	a5,a5,0x4
    a844:	0037f693          	andi	a3,a5,3
    a848:	00069663          	bnez	a3,a854 <__lo0bits+0x8c>
    a84c:	00250513          	addi	a0,a0,2
    a850:	0027d793          	srli	a5,a5,0x2
    a854:	0017f693          	andi	a3,a5,1
    a858:	00069863          	bnez	a3,a868 <__lo0bits+0xa0>
    a85c:	0017d793          	srli	a5,a5,0x1
    a860:	00150513          	addi	a0,a0,1
    a864:	00078663          	beqz	a5,a870 <__lo0bits+0xa8>
    a868:	00f72023          	sw	a5,0(a4)
    a86c:	00008067          	ret
    a870:	02000513          	li	a0,32
    a874:	00008067          	ret

0000a878 <__i2b>:
    a878:	ff010113          	addi	sp,sp,-16
    a87c:	00812423          	sw	s0,8(sp)
    a880:	00058413          	mv	s0,a1
    a884:	00100593          	li	a1,1
    a888:	00112623          	sw	ra,12(sp)
    a88c:	c15ff0ef          	jal	ra,a4a0 <_Balloc>
    a890:	02051063          	bnez	a0,a8b0 <__i2b+0x38>
    a894:	0000d6b7          	lui	a3,0xd
    a898:	0000d537          	lui	a0,0xd
    a89c:	ebc68693          	addi	a3,a3,-324 # cebc <_ctype_+0x220>
    a8a0:	00000613          	li	a2,0
    a8a4:	14000593          	li	a1,320
    a8a8:	f3050513          	addi	a0,a0,-208 # cf30 <__sf_fake_stdout+0x20>
    a8ac:	1fc010ef          	jal	ra,baa8 <__assert_func>
    a8b0:	00c12083          	lw	ra,12(sp)
    a8b4:	00852a23          	sw	s0,20(a0)
    a8b8:	00812403          	lw	s0,8(sp)
    a8bc:	00100713          	li	a4,1
    a8c0:	00e52823          	sw	a4,16(a0)
    a8c4:	01010113          	addi	sp,sp,16
    a8c8:	00008067          	ret

0000a8cc <__multiply>:
    a8cc:	0105a703          	lw	a4,16(a1)
    a8d0:	01062783          	lw	a5,16(a2)
    a8d4:	fe010113          	addi	sp,sp,-32
    a8d8:	00812c23          	sw	s0,24(sp)
    a8dc:	01212823          	sw	s2,16(sp)
    a8e0:	00112e23          	sw	ra,28(sp)
    a8e4:	00912a23          	sw	s1,20(sp)
    a8e8:	01312623          	sw	s3,12(sp)
    a8ec:	01412423          	sw	s4,8(sp)
    a8f0:	00058413          	mv	s0,a1
    a8f4:	00060913          	mv	s2,a2
    a8f8:	00f75663          	bge	a4,a5,a904 <__multiply+0x38>
    a8fc:	00060413          	mv	s0,a2
    a900:	00058913          	mv	s2,a1
    a904:	01042a03          	lw	s4,16(s0)
    a908:	01092983          	lw	s3,16(s2)
    a90c:	00842783          	lw	a5,8(s0)
    a910:	00442583          	lw	a1,4(s0)
    a914:	013a04b3          	add	s1,s4,s3
    a918:	0097d463          	bge	a5,s1,a920 <__multiply+0x54>
    a91c:	00158593          	addi	a1,a1,1
    a920:	b81ff0ef          	jal	ra,a4a0 <_Balloc>
    a924:	02051063          	bnez	a0,a944 <__multiply+0x78>
    a928:	0000d6b7          	lui	a3,0xd
    a92c:	0000d537          	lui	a0,0xd
    a930:	ebc68693          	addi	a3,a3,-324 # cebc <_ctype_+0x220>
    a934:	00000613          	li	a2,0
    a938:	15d00593          	li	a1,349
    a93c:	f3050513          	addi	a0,a0,-208 # cf30 <__sf_fake_stdout+0x20>
    a940:	168010ef          	jal	ra,baa8 <__assert_func>
    a944:	01450693          	addi	a3,a0,20
    a948:	00249813          	slli	a6,s1,0x2
    a94c:	01068833          	add	a6,a3,a6
    a950:	00068793          	mv	a5,a3
    a954:	0707ec63          	bltu	a5,a6,a9cc <__multiply+0x100>
    a958:	01440313          	addi	t1,s0,20
    a95c:	002a1593          	slli	a1,s4,0x2
    a960:	01490613          	addi	a2,s2,20
    a964:	00299893          	slli	a7,s3,0x2
    a968:	00b305b3          	add	a1,t1,a1
    a96c:	01540793          	addi	a5,s0,21
    a970:	011608b3          	add	a7,a2,a7
    a974:	00400e13          	li	t3,4
    a978:	00f5ea63          	bltu	a1,a5,a98c <__multiply+0xc0>
    a97c:	40858433          	sub	s0,a1,s0
    a980:	feb40413          	addi	s0,s0,-21
    a984:	ffc47413          	andi	s0,s0,-4
    a988:	00440e13          	addi	t3,s0,4
    a98c:	00010eb7          	lui	t4,0x10
    a990:	fffe8e93          	addi	t4,t4,-1 # ffff <__data_region_end+0xe03>
    a994:	05166263          	bltu	a2,a7,a9d8 <__multiply+0x10c>
    a998:	00905863          	blez	s1,a9a8 <__multiply+0xdc>
    a99c:	ffc82783          	lw	a5,-4(a6)
    a9a0:	ffc80813          	addi	a6,a6,-4
    a9a4:	12078463          	beqz	a5,aacc <__multiply+0x200>
    a9a8:	01c12083          	lw	ra,28(sp)
    a9ac:	01812403          	lw	s0,24(sp)
    a9b0:	00952823          	sw	s1,16(a0)
    a9b4:	01012903          	lw	s2,16(sp)
    a9b8:	01412483          	lw	s1,20(sp)
    a9bc:	00c12983          	lw	s3,12(sp)
    a9c0:	00812a03          	lw	s4,8(sp)
    a9c4:	02010113          	addi	sp,sp,32
    a9c8:	00008067          	ret
    a9cc:	0007a023          	sw	zero,0(a5)
    a9d0:	00478793          	addi	a5,a5,4
    a9d4:	f81ff06f          	j	a954 <__multiply+0x88>
    a9d8:	00062f83          	lw	t6,0(a2)
    a9dc:	01dfffb3          	and	t6,t6,t4
    a9e0:	060f8663          	beqz	t6,aa4c <__multiply+0x180>
    a9e4:	00068393          	mv	t2,a3
    a9e8:	00030293          	mv	t0,t1
    a9ec:	00000913          	li	s2,0
    a9f0:	0002a703          	lw	a4,0(t0)
    a9f4:	0003a403          	lw	s0,0(t2)
    a9f8:	00438393          	addi	t2,t2,4
    a9fc:	01d77f33          	and	t5,a4,t4
    aa00:	03ff0f33          	mul	t5,t5,t6
    aa04:	01d477b3          	and	a5,s0,t4
    aa08:	01045413          	srli	s0,s0,0x10
    aa0c:	00428293          	addi	t0,t0,4
    aa10:	00ff0f33          	add	t5,t5,a5
    aa14:	01075793          	srli	a5,a4,0x10
    aa18:	03f787b3          	mul	a5,a5,t6
    aa1c:	012f0f33          	add	t5,t5,s2
    aa20:	010f5713          	srli	a4,t5,0x10
    aa24:	01df7f33          	and	t5,t5,t4
    aa28:	008787b3          	add	a5,a5,s0
    aa2c:	00e787b3          	add	a5,a5,a4
    aa30:	0107d913          	srli	s2,a5,0x10
    aa34:	01079793          	slli	a5,a5,0x10
    aa38:	01e7e7b3          	or	a5,a5,t5
    aa3c:	fef3ae23          	sw	a5,-4(t2)
    aa40:	fab2e8e3          	bltu	t0,a1,a9f0 <__multiply+0x124>
    aa44:	01c687b3          	add	a5,a3,t3
    aa48:	0127a023          	sw	s2,0(a5)
    aa4c:	00265383          	lhu	t2,2(a2)
    aa50:	06038863          	beqz	t2,aac0 <__multiply+0x1f4>
    aa54:	0006a783          	lw	a5,0(a3)
    aa58:	00068f93          	mv	t6,a3
    aa5c:	00030f13          	mv	t5,t1
    aa60:	00000293          	li	t0,0
    aa64:	000f2703          	lw	a4,0(t5)
    aa68:	002fd403          	lhu	s0,2(t6)
    aa6c:	01d7f7b3          	and	a5,a5,t4
    aa70:	01d77733          	and	a4,a4,t4
    aa74:	02770733          	mul	a4,a4,t2
    aa78:	004f8f93          	addi	t6,t6,4
    aa7c:	004f0f13          	addi	t5,t5,4
    aa80:	00870733          	add	a4,a4,s0
    aa84:	00570733          	add	a4,a4,t0
    aa88:	01071293          	slli	t0,a4,0x10
    aa8c:	00f2e7b3          	or	a5,t0,a5
    aa90:	feffae23          	sw	a5,-4(t6)
    aa94:	ffef5783          	lhu	a5,-2(t5)
    aa98:	000fa283          	lw	t0,0(t6)
    aa9c:	01075713          	srli	a4,a4,0x10
    aaa0:	027787b3          	mul	a5,a5,t2
    aaa4:	01d2f2b3          	and	t0,t0,t4
    aaa8:	005787b3          	add	a5,a5,t0
    aaac:	00e787b3          	add	a5,a5,a4
    aab0:	0107d293          	srli	t0,a5,0x10
    aab4:	fabf68e3          	bltu	t5,a1,aa64 <__multiply+0x198>
    aab8:	01c68733          	add	a4,a3,t3
    aabc:	00f72023          	sw	a5,0(a4)
    aac0:	00460613          	addi	a2,a2,4
    aac4:	00468693          	addi	a3,a3,4
    aac8:	ecdff06f          	j	a994 <__multiply+0xc8>
    aacc:	fff48493          	addi	s1,s1,-1
    aad0:	ec9ff06f          	j	a998 <__multiply+0xcc>

0000aad4 <__pow5mult>:
    aad4:	fe010113          	addi	sp,sp,-32
    aad8:	00912a23          	sw	s1,20(sp)
    aadc:	01212823          	sw	s2,16(sp)
    aae0:	01312623          	sw	s3,12(sp)
    aae4:	00112e23          	sw	ra,28(sp)
    aae8:	00812c23          	sw	s0,24(sp)
    aaec:	01412423          	sw	s4,8(sp)
    aaf0:	00367793          	andi	a5,a2,3
    aaf4:	00050913          	mv	s2,a0
    aaf8:	00060493          	mv	s1,a2
    aafc:	00058993          	mv	s3,a1
    ab00:	02078463          	beqz	a5,ab28 <__pow5mult+0x54>
    ab04:	fff78793          	addi	a5,a5,-1
    ab08:	0000d737          	lui	a4,0xd
    ab0c:	f9470713          	addi	a4,a4,-108 # cf94 <p05.0>
    ab10:	00279793          	slli	a5,a5,0x2
    ab14:	00f707b3          	add	a5,a4,a5
    ab18:	0007a603          	lw	a2,0(a5)
    ab1c:	00000693          	li	a3,0
    ab20:	b15ff0ef          	jal	ra,a634 <__multadd>
    ab24:	00050993          	mv	s3,a0
    ab28:	4024d493          	srai	s1,s1,0x2
    ab2c:	0c048463          	beqz	s1,abf4 <__pow5mult+0x120>
    ab30:	02492783          	lw	a5,36(s2)
    ab34:	04079063          	bnez	a5,ab74 <__pow5mult+0xa0>
    ab38:	01000513          	li	a0,16
    ab3c:	f7dfc0ef          	jal	ra,7ab8 <malloc>
    ab40:	02a92223          	sw	a0,36(s2)
    ab44:	02051063          	bnez	a0,ab64 <__pow5mult+0x90>
    ab48:	0000d6b7          	lui	a3,0xd
    ab4c:	0000d537          	lui	a0,0xd
    ab50:	e4068693          	addi	a3,a3,-448 # ce40 <_ctype_+0x1a4>
    ab54:	00000613          	li	a2,0
    ab58:	1ae00593          	li	a1,430
    ab5c:	f3050513          	addi	a0,a0,-208 # cf30 <__sf_fake_stdout+0x20>
    ab60:	749000ef          	jal	ra,baa8 <__assert_func>
    ab64:	00052223          	sw	zero,4(a0)
    ab68:	00052423          	sw	zero,8(a0)
    ab6c:	00052023          	sw	zero,0(a0)
    ab70:	00052623          	sw	zero,12(a0)
    ab74:	02492a03          	lw	s4,36(s2)
    ab78:	008a2403          	lw	s0,8(s4)
    ab7c:	00041e63          	bnez	s0,ab98 <__pow5mult+0xc4>
    ab80:	27100593          	li	a1,625
    ab84:	00090513          	mv	a0,s2
    ab88:	cf1ff0ef          	jal	ra,a878 <__i2b>
    ab8c:	00aa2423          	sw	a0,8(s4)
    ab90:	00050413          	mv	s0,a0
    ab94:	00052023          	sw	zero,0(a0)
    ab98:	0014f793          	andi	a5,s1,1
    ab9c:	02078463          	beqz	a5,abc4 <__pow5mult+0xf0>
    aba0:	00098593          	mv	a1,s3
    aba4:	00040613          	mv	a2,s0
    aba8:	00090513          	mv	a0,s2
    abac:	d21ff0ef          	jal	ra,a8cc <__multiply>
    abb0:	00050a13          	mv	s4,a0
    abb4:	00098593          	mv	a1,s3
    abb8:	00090513          	mv	a0,s2
    abbc:	9e5ff0ef          	jal	ra,a5a0 <_Bfree>
    abc0:	000a0993          	mv	s3,s4
    abc4:	4014d493          	srai	s1,s1,0x1
    abc8:	02048663          	beqz	s1,abf4 <__pow5mult+0x120>
    abcc:	00042503          	lw	a0,0(s0)
    abd0:	00051e63          	bnez	a0,abec <__pow5mult+0x118>
    abd4:	00040613          	mv	a2,s0
    abd8:	00040593          	mv	a1,s0
    abdc:	00090513          	mv	a0,s2
    abe0:	cedff0ef          	jal	ra,a8cc <__multiply>
    abe4:	00a42023          	sw	a0,0(s0)
    abe8:	00052023          	sw	zero,0(a0)
    abec:	00050413          	mv	s0,a0
    abf0:	fa9ff06f          	j	ab98 <__pow5mult+0xc4>
    abf4:	01c12083          	lw	ra,28(sp)
    abf8:	01812403          	lw	s0,24(sp)
    abfc:	01412483          	lw	s1,20(sp)
    ac00:	01012903          	lw	s2,16(sp)
    ac04:	00812a03          	lw	s4,8(sp)
    ac08:	00098513          	mv	a0,s3
    ac0c:	00c12983          	lw	s3,12(sp)
    ac10:	02010113          	addi	sp,sp,32
    ac14:	00008067          	ret

0000ac18 <__lshift>:
    ac18:	fe010113          	addi	sp,sp,-32
    ac1c:	00812c23          	sw	s0,24(sp)
    ac20:	00058413          	mv	s0,a1
    ac24:	01612023          	sw	s6,0(sp)
    ac28:	01042b03          	lw	s6,16(s0)
    ac2c:	00912a23          	sw	s1,20(sp)
    ac30:	0045a583          	lw	a1,4(a1)
    ac34:	40565493          	srai	s1,a2,0x5
    ac38:	00842783          	lw	a5,8(s0)
    ac3c:	01648b33          	add	s6,s1,s6
    ac40:	01212823          	sw	s2,16(sp)
    ac44:	01412423          	sw	s4,8(sp)
    ac48:	01512223          	sw	s5,4(sp)
    ac4c:	00112e23          	sw	ra,28(sp)
    ac50:	01312623          	sw	s3,12(sp)
    ac54:	00050a93          	mv	s5,a0
    ac58:	00060913          	mv	s2,a2
    ac5c:	001b0a13          	addi	s4,s6,1
    ac60:	0347c863          	blt	a5,s4,ac90 <__lshift+0x78>
    ac64:	000a8513          	mv	a0,s5
    ac68:	839ff0ef          	jal	ra,a4a0 <_Balloc>
    ac6c:	00050993          	mv	s3,a0
    ac70:	02051663          	bnez	a0,ac9c <__lshift+0x84>
    ac74:	0000d6b7          	lui	a3,0xd
    ac78:	0000d537          	lui	a0,0xd
    ac7c:	ebc68693          	addi	a3,a3,-324 # cebc <_ctype_+0x220>
    ac80:	00000613          	li	a2,0
    ac84:	1d900593          	li	a1,473
    ac88:	f3050513          	addi	a0,a0,-208 # cf30 <__sf_fake_stdout+0x20>
    ac8c:	61d000ef          	jal	ra,baa8 <__assert_func>
    ac90:	00158593          	addi	a1,a1,1
    ac94:	00179793          	slli	a5,a5,0x1
    ac98:	fc9ff06f          	j	ac60 <__lshift+0x48>
    ac9c:	01450793          	addi	a5,a0,20
    aca0:	00078693          	mv	a3,a5
    aca4:	00000713          	li	a4,0
    aca8:	00468693          	addi	a3,a3,4
    acac:	0c974663          	blt	a4,s1,ad78 <__lshift+0x160>
    acb0:	0004d463          	bgez	s1,acb8 <__lshift+0xa0>
    acb4:	00000493          	li	s1,0
    acb8:	00249493          	slli	s1,s1,0x2
    acbc:	009786b3          	add	a3,a5,s1
    acc0:	01042783          	lw	a5,16(s0)
    acc4:	01440713          	addi	a4,s0,20
    acc8:	01f97613          	andi	a2,s2,31
    accc:	00279793          	slli	a5,a5,0x2
    acd0:	00f707b3          	add	a5,a4,a5
    acd4:	0a060863          	beqz	a2,ad84 <__lshift+0x16c>
    acd8:	02000813          	li	a6,32
    acdc:	40c80833          	sub	a6,a6,a2
    ace0:	00068893          	mv	a7,a3
    ace4:	00000593          	li	a1,0
    ace8:	00072503          	lw	a0,0(a4)
    acec:	00488893          	addi	a7,a7,4 # fcc00004 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfcc00005>
    acf0:	00470713          	addi	a4,a4,4
    acf4:	00c51533          	sll	a0,a0,a2
    acf8:	00b565b3          	or	a1,a0,a1
    acfc:	feb8ae23          	sw	a1,-4(a7)
    ad00:	ffc72583          	lw	a1,-4(a4)
    ad04:	0105d5b3          	srl	a1,a1,a6
    ad08:	fef760e3          	bltu	a4,a5,ace8 <__lshift+0xd0>
    ad0c:	01540713          	addi	a4,s0,21
    ad10:	00400613          	li	a2,4
    ad14:	00e7ea63          	bltu	a5,a4,ad28 <__lshift+0x110>
    ad18:	408787b3          	sub	a5,a5,s0
    ad1c:	feb78793          	addi	a5,a5,-21
    ad20:	ffc7f793          	andi	a5,a5,-4
    ad24:	00478613          	addi	a2,a5,4
    ad28:	00c686b3          	add	a3,a3,a2
    ad2c:	00b6a023          	sw	a1,0(a3)
    ad30:	00058463          	beqz	a1,ad38 <__lshift+0x120>
    ad34:	002b0a13          	addi	s4,s6,2
    ad38:	fffa0a13          	addi	s4,s4,-1
    ad3c:	0149a823          	sw	s4,16(s3)
    ad40:	000a8513          	mv	a0,s5
    ad44:	00040593          	mv	a1,s0
    ad48:	859ff0ef          	jal	ra,a5a0 <_Bfree>
    ad4c:	01c12083          	lw	ra,28(sp)
    ad50:	01812403          	lw	s0,24(sp)
    ad54:	01412483          	lw	s1,20(sp)
    ad58:	01012903          	lw	s2,16(sp)
    ad5c:	00812a03          	lw	s4,8(sp)
    ad60:	00412a83          	lw	s5,4(sp)
    ad64:	00012b03          	lw	s6,0(sp)
    ad68:	00098513          	mv	a0,s3
    ad6c:	00c12983          	lw	s3,12(sp)
    ad70:	02010113          	addi	sp,sp,32
    ad74:	00008067          	ret
    ad78:	fe06ae23          	sw	zero,-4(a3)
    ad7c:	00170713          	addi	a4,a4,1
    ad80:	f29ff06f          	j	aca8 <__lshift+0x90>
    ad84:	00072603          	lw	a2,0(a4)
    ad88:	00470713          	addi	a4,a4,4
    ad8c:	00468693          	addi	a3,a3,4
    ad90:	fec6ae23          	sw	a2,-4(a3)
    ad94:	fef768e3          	bltu	a4,a5,ad84 <__lshift+0x16c>
    ad98:	fa1ff06f          	j	ad38 <__lshift+0x120>

0000ad9c <__mcmp>:
    ad9c:	01052683          	lw	a3,16(a0)
    ada0:	0105a703          	lw	a4,16(a1)
    ada4:	00050793          	mv	a5,a0
    ada8:	40e68533          	sub	a0,a3,a4
    adac:	04e69063          	bne	a3,a4,adec <__mcmp+0x50>
    adb0:	00271713          	slli	a4,a4,0x2
    adb4:	01478793          	addi	a5,a5,20
    adb8:	01458593          	addi	a1,a1,20
    adbc:	00e786b3          	add	a3,a5,a4
    adc0:	00e585b3          	add	a1,a1,a4
    adc4:	ffc6a603          	lw	a2,-4(a3)
    adc8:	ffc5a703          	lw	a4,-4(a1)
    adcc:	ffc68693          	addi	a3,a3,-4
    add0:	ffc58593          	addi	a1,a1,-4
    add4:	00e60a63          	beq	a2,a4,ade8 <__mcmp+0x4c>
    add8:	fff00513          	li	a0,-1
    addc:	00e66863          	bltu	a2,a4,adec <__mcmp+0x50>
    ade0:	00100513          	li	a0,1
    ade4:	00008067          	ret
    ade8:	fcd7eee3          	bltu	a5,a3,adc4 <__mcmp+0x28>
    adec:	00008067          	ret

0000adf0 <__mdiff>:
    adf0:	fe010113          	addi	sp,sp,-32
    adf4:	00812c23          	sw	s0,24(sp)
    adf8:	00058413          	mv	s0,a1
    adfc:	01212823          	sw	s2,16(sp)
    ae00:	00060593          	mv	a1,a2
    ae04:	00050913          	mv	s2,a0
    ae08:	00040513          	mv	a0,s0
    ae0c:	00912a23          	sw	s1,20(sp)
    ae10:	00112e23          	sw	ra,28(sp)
    ae14:	01312623          	sw	s3,12(sp)
    ae18:	00060493          	mv	s1,a2
    ae1c:	f81ff0ef          	jal	ra,ad9c <__mcmp>
    ae20:	04051c63          	bnez	a0,ae78 <__mdiff+0x88>
    ae24:	00000593          	li	a1,0
    ae28:	00090513          	mv	a0,s2
    ae2c:	e74ff0ef          	jal	ra,a4a0 <_Balloc>
    ae30:	02051063          	bnez	a0,ae50 <__mdiff+0x60>
    ae34:	0000d6b7          	lui	a3,0xd
    ae38:	ebc68693          	addi	a3,a3,-324 # cebc <_ctype_+0x220>
    ae3c:	00000613          	li	a2,0
    ae40:	23200593          	li	a1,562
    ae44:	0000d537          	lui	a0,0xd
    ae48:	f3050513          	addi	a0,a0,-208 # cf30 <__sf_fake_stdout+0x20>
    ae4c:	45d000ef          	jal	ra,baa8 <__assert_func>
    ae50:	00100793          	li	a5,1
    ae54:	00f52823          	sw	a5,16(a0)
    ae58:	00052a23          	sw	zero,20(a0)
    ae5c:	01c12083          	lw	ra,28(sp)
    ae60:	01812403          	lw	s0,24(sp)
    ae64:	01412483          	lw	s1,20(sp)
    ae68:	01012903          	lw	s2,16(sp)
    ae6c:	00c12983          	lw	s3,12(sp)
    ae70:	02010113          	addi	sp,sp,32
    ae74:	00008067          	ret
    ae78:	00100993          	li	s3,1
    ae7c:	00054a63          	bltz	a0,ae90 <__mdiff+0xa0>
    ae80:	00048793          	mv	a5,s1
    ae84:	00000993          	li	s3,0
    ae88:	00040493          	mv	s1,s0
    ae8c:	00078413          	mv	s0,a5
    ae90:	0044a583          	lw	a1,4(s1)
    ae94:	00090513          	mv	a0,s2
    ae98:	e08ff0ef          	jal	ra,a4a0 <_Balloc>
    ae9c:	00051c63          	bnez	a0,aeb4 <__mdiff+0xc4>
    aea0:	0000d6b7          	lui	a3,0xd
    aea4:	ebc68693          	addi	a3,a3,-324 # cebc <_ctype_+0x220>
    aea8:	00000613          	li	a2,0
    aeac:	24000593          	li	a1,576
    aeb0:	f95ff06f          	j	ae44 <__mdiff+0x54>
    aeb4:	0104a803          	lw	a6,16(s1)
    aeb8:	01042703          	lw	a4,16(s0)
    aebc:	01448893          	addi	a7,s1,20
    aec0:	00281693          	slli	a3,a6,0x2
    aec4:	01440793          	addi	a5,s0,20
    aec8:	00271713          	slli	a4,a4,0x2
    aecc:	00010eb7          	lui	t4,0x10
    aed0:	01352623          	sw	s3,12(a0)
    aed4:	00d886b3          	add	a3,a7,a3
    aed8:	00e787b3          	add	a5,a5,a4
    aedc:	01450613          	addi	a2,a0,20
    aee0:	01400e13          	li	t3,20
    aee4:	00000313          	li	t1,0
    aee8:	fffe8e93          	addi	t4,t4,-1 # ffff <__data_region_end+0xe03>
    aeec:	01c48733          	add	a4,s1,t3
    aef0:	00072703          	lw	a4,0(a4)
    aef4:	01c405b3          	add	a1,s0,t3
    aef8:	0005af03          	lw	t5,0(a1)
    aefc:	01d775b3          	and	a1,a4,t4
    af00:	006585b3          	add	a1,a1,t1
    af04:	01df7333          	and	t1,t5,t4
    af08:	406585b3          	sub	a1,a1,t1
    af0c:	010f5f13          	srli	t5,t5,0x10
    af10:	01075713          	srli	a4,a4,0x10
    af14:	4105d313          	srai	t1,a1,0x10
    af18:	41e70733          	sub	a4,a4,t5
    af1c:	00670733          	add	a4,a4,t1
    af20:	41075313          	srai	t1,a4,0x10
    af24:	01d5f5b3          	and	a1,a1,t4
    af28:	01071713          	slli	a4,a4,0x10
    af2c:	01c50f33          	add	t5,a0,t3
    af30:	00b76733          	or	a4,a4,a1
    af34:	004e0e13          	addi	t3,t3,4
    af38:	00ef2023          	sw	a4,0(t5)
    af3c:	008e0733          	add	a4,t3,s0
    af40:	faf766e3          	bltu	a4,a5,aeec <__mdiff+0xfc>
    af44:	01540593          	addi	a1,s0,21
    af48:	00400713          	li	a4,4
    af4c:	00b7ea63          	bltu	a5,a1,af60 <__mdiff+0x170>
    af50:	408787b3          	sub	a5,a5,s0
    af54:	feb78793          	addi	a5,a5,-21
    af58:	ffc7f793          	andi	a5,a5,-4
    af5c:	00478713          	addi	a4,a5,4
    af60:	00e888b3          	add	a7,a7,a4
    af64:	00010e37          	lui	t3,0x10
    af68:	00e60733          	add	a4,a2,a4
    af6c:	00070e93          	mv	t4,a4
    af70:	00088593          	mv	a1,a7
    af74:	fffe0e13          	addi	t3,t3,-1 # ffff <__data_region_end+0xe03>
    af78:	02d5ea63          	bltu	a1,a3,afac <__mdiff+0x1bc>
    af7c:	ffd88613          	addi	a2,a7,-3
    af80:	00000793          	li	a5,0
    af84:	00c6e863          	bltu	a3,a2,af94 <__mdiff+0x1a4>
    af88:	00368693          	addi	a3,a3,3
    af8c:	411687b3          	sub	a5,a3,a7
    af90:	ffc7f793          	andi	a5,a5,-4
    af94:	00f707b3          	add	a5,a4,a5
    af98:	ffc7a703          	lw	a4,-4(a5)
    af9c:	ffc78793          	addi	a5,a5,-4
    afa0:	04070263          	beqz	a4,afe4 <__mdiff+0x1f4>
    afa4:	01052823          	sw	a6,16(a0)
    afa8:	eb5ff06f          	j	ae5c <__mdiff+0x6c>
    afac:	0005a783          	lw	a5,0(a1)
    afb0:	004e8e93          	addi	t4,t4,4
    afb4:	00458593          	addi	a1,a1,4
    afb8:	01c7f633          	and	a2,a5,t3
    afbc:	00660633          	add	a2,a2,t1
    afc0:	41065313          	srai	t1,a2,0x10
    afc4:	0107d793          	srli	a5,a5,0x10
    afc8:	006787b3          	add	a5,a5,t1
    afcc:	4107d313          	srai	t1,a5,0x10
    afd0:	01c67633          	and	a2,a2,t3
    afd4:	01079793          	slli	a5,a5,0x10
    afd8:	00c7e7b3          	or	a5,a5,a2
    afdc:	fefeae23          	sw	a5,-4(t4)
    afe0:	f99ff06f          	j	af78 <__mdiff+0x188>
    afe4:	fff80813          	addi	a6,a6,-1
    afe8:	fb1ff06f          	j	af98 <__mdiff+0x1a8>

0000afec <__d2b>:
    afec:	fd010113          	addi	sp,sp,-48
    aff0:	02912223          	sw	s1,36(sp)
    aff4:	00058493          	mv	s1,a1
    aff8:	00100593          	li	a1,1
    affc:	02812423          	sw	s0,40(sp)
    b000:	03212023          	sw	s2,32(sp)
    b004:	01312e23          	sw	s3,28(sp)
    b008:	02112623          	sw	ra,44(sp)
    b00c:	01412c23          	sw	s4,24(sp)
    b010:	00060413          	mv	s0,a2
    b014:	00068993          	mv	s3,a3
    b018:	00070913          	mv	s2,a4
    b01c:	c84ff0ef          	jal	ra,a4a0 <_Balloc>
    b020:	02051063          	bnez	a0,b040 <__d2b+0x54>
    b024:	0000d6b7          	lui	a3,0xd
    b028:	0000d537          	lui	a0,0xd
    b02c:	ebc68693          	addi	a3,a3,-324 # cebc <_ctype_+0x220>
    b030:	00000613          	li	a2,0
    b034:	30a00593          	li	a1,778
    b038:	f3050513          	addi	a0,a0,-208 # cf30 <__sf_fake_stdout+0x20>
    b03c:	26d000ef          	jal	ra,baa8 <__assert_func>
    b040:	00100737          	lui	a4,0x100
    b044:	fff70793          	addi	a5,a4,-1 # fffff <__data_region_end+0xf0e03>
    b048:	0087f7b3          	and	a5,a5,s0
    b04c:	01445413          	srli	s0,s0,0x14
    b050:	7ff47413          	andi	s0,s0,2047
    b054:	00050a13          	mv	s4,a0
    b058:	08041a63          	bnez	s0,b0ec <__d2b+0x100>
    b05c:	00f12623          	sw	a5,12(sp)
    b060:	08048e63          	beqz	s1,b0fc <__d2b+0x110>
    b064:	00810513          	addi	a0,sp,8
    b068:	00912423          	sw	s1,8(sp)
    b06c:	f5cff0ef          	jal	ra,a7c8 <__lo0bits>
    b070:	00812683          	lw	a3,8(sp)
    b074:	08050063          	beqz	a0,b0f4 <__d2b+0x108>
    b078:	00c12703          	lw	a4,12(sp)
    b07c:	02000793          	li	a5,32
    b080:	40a787b3          	sub	a5,a5,a0
    b084:	00f717b3          	sll	a5,a4,a5
    b088:	00d7e7b3          	or	a5,a5,a3
    b08c:	00a75733          	srl	a4,a4,a0
    b090:	00fa2a23          	sw	a5,20(s4)
    b094:	00e12623          	sw	a4,12(sp)
    b098:	00c12483          	lw	s1,12(sp)
    b09c:	009a2c23          	sw	s1,24(s4)
    b0a0:	009034b3          	snez	s1,s1
    b0a4:	00148493          	addi	s1,s1,1
    b0a8:	009a2823          	sw	s1,16(s4)
    b0ac:	06040a63          	beqz	s0,b120 <__d2b+0x134>
    b0b0:	bcd40413          	addi	s0,s0,-1075
    b0b4:	00a40433          	add	s0,s0,a0
    b0b8:	03500793          	li	a5,53
    b0bc:	0089a023          	sw	s0,0(s3)
    b0c0:	40a78533          	sub	a0,a5,a0
    b0c4:	00a92023          	sw	a0,0(s2)
    b0c8:	02c12083          	lw	ra,44(sp)
    b0cc:	02812403          	lw	s0,40(sp)
    b0d0:	02412483          	lw	s1,36(sp)
    b0d4:	02012903          	lw	s2,32(sp)
    b0d8:	01c12983          	lw	s3,28(sp)
    b0dc:	000a0513          	mv	a0,s4
    b0e0:	01812a03          	lw	s4,24(sp)
    b0e4:	03010113          	addi	sp,sp,48
    b0e8:	00008067          	ret
    b0ec:	00e7e7b3          	or	a5,a5,a4
    b0f0:	f6dff06f          	j	b05c <__d2b+0x70>
    b0f4:	00da2a23          	sw	a3,20(s4)
    b0f8:	fa1ff06f          	j	b098 <__d2b+0xac>
    b0fc:	00c10513          	addi	a0,sp,12
    b100:	ec8ff0ef          	jal	ra,a7c8 <__lo0bits>
    b104:	00c12783          	lw	a5,12(sp)
    b108:	02050513          	addi	a0,a0,32
    b10c:	00100493          	li	s1,1
    b110:	00fa2a23          	sw	a5,20(s4)
    b114:	00100793          	li	a5,1
    b118:	00fa2823          	sw	a5,16(s4)
    b11c:	f91ff06f          	j	b0ac <__d2b+0xc0>
    b120:	bce50793          	addi	a5,a0,-1074
    b124:	00f9a023          	sw	a5,0(s3)
    b128:	00249793          	slli	a5,s1,0x2
    b12c:	00fa07b3          	add	a5,s4,a5
    b130:	0107a503          	lw	a0,16(a5)
    b134:	00549493          	slli	s1,s1,0x5
    b138:	e1cff0ef          	jal	ra,a754 <__hi0bits>
    b13c:	40a484b3          	sub	s1,s1,a0
    b140:	00992023          	sw	s1,0(s2)
    b144:	f85ff06f          	j	b0c8 <__d2b+0xdc>

0000b148 <_calloc_r>:
    b148:	02c58633          	mul	a2,a1,a2
    b14c:	fe010113          	addi	sp,sp,-32
    b150:	00812c23          	sw	s0,24(sp)
    b154:	00112e23          	sw	ra,28(sp)
    b158:	00060593          	mv	a1,a2
    b15c:	00c12623          	sw	a2,12(sp)
    b160:	a6dfc0ef          	jal	ra,7bcc <_malloc_r>
    b164:	00050413          	mv	s0,a0
    b168:	00050863          	beqz	a0,b178 <_calloc_r+0x30>
    b16c:	00c12603          	lw	a2,12(sp)
    b170:	00000593          	li	a1,0
    b174:	9a1f70ef          	jal	ra,2b14 <memset>
    b178:	01c12083          	lw	ra,28(sp)
    b17c:	00040513          	mv	a0,s0
    b180:	01812403          	lw	s0,24(sp)
    b184:	02010113          	addi	sp,sp,32
    b188:	00008067          	ret

0000b18c <__sfputc_r>:
    b18c:	00862783          	lw	a5,8(a2)
    b190:	fff78793          	addi	a5,a5,-1
    b194:	00f62423          	sw	a5,8(a2)
    b198:	0007dc63          	bgez	a5,b1b0 <__sfputc_r+0x24>
    b19c:	01862703          	lw	a4,24(a2)
    b1a0:	00e7c663          	blt	a5,a4,b1ac <__sfputc_r+0x20>
    b1a4:	00a00793          	li	a5,10
    b1a8:	00f59463          	bne	a1,a5,b1b0 <__sfputc_r+0x24>
    b1ac:	5f80006f          	j	b7a4 <__swbuf_r>
    b1b0:	00062783          	lw	a5,0(a2)
    b1b4:	00058513          	mv	a0,a1
    b1b8:	00178713          	addi	a4,a5,1
    b1bc:	00e62023          	sw	a4,0(a2)
    b1c0:	00b78023          	sb	a1,0(a5)
    b1c4:	00008067          	ret

0000b1c8 <__sfputs_r>:
    b1c8:	fe010113          	addi	sp,sp,-32
    b1cc:	00812c23          	sw	s0,24(sp)
    b1d0:	00912a23          	sw	s1,20(sp)
    b1d4:	01212823          	sw	s2,16(sp)
    b1d8:	01312623          	sw	s3,12(sp)
    b1dc:	01412423          	sw	s4,8(sp)
    b1e0:	00112e23          	sw	ra,28(sp)
    b1e4:	00050913          	mv	s2,a0
    b1e8:	00058993          	mv	s3,a1
    b1ec:	00060413          	mv	s0,a2
    b1f0:	00d604b3          	add	s1,a2,a3
    b1f4:	fff00a13          	li	s4,-1
    b1f8:	00941663          	bne	s0,s1,b204 <__sfputs_r+0x3c>
    b1fc:	00000513          	li	a0,0
    b200:	01c0006f          	j	b21c <__sfputs_r+0x54>
    b204:	00044583          	lbu	a1,0(s0)
    b208:	00098613          	mv	a2,s3
    b20c:	00090513          	mv	a0,s2
    b210:	f7dff0ef          	jal	ra,b18c <__sfputc_r>
    b214:	00140413          	addi	s0,s0,1
    b218:	ff4510e3          	bne	a0,s4,b1f8 <__sfputs_r+0x30>
    b21c:	01c12083          	lw	ra,28(sp)
    b220:	01812403          	lw	s0,24(sp)
    b224:	01412483          	lw	s1,20(sp)
    b228:	01012903          	lw	s2,16(sp)
    b22c:	00c12983          	lw	s3,12(sp)
    b230:	00812a03          	lw	s4,8(sp)
    b234:	02010113          	addi	sp,sp,32
    b238:	00008067          	ret

0000b23c <_vfiprintf_r>:
    b23c:	f5010113          	addi	sp,sp,-176
    b240:	0a812423          	sw	s0,168(sp)
    b244:	0a912223          	sw	s1,164(sp)
    b248:	0b212023          	sw	s2,160(sp)
    b24c:	09312e23          	sw	s3,156(sp)
    b250:	0a112623          	sw	ra,172(sp)
    b254:	09412c23          	sw	s4,152(sp)
    b258:	09512a23          	sw	s5,148(sp)
    b25c:	09612823          	sw	s6,144(sp)
    b260:	09712623          	sw	s7,140(sp)
    b264:	09812423          	sw	s8,136(sp)
    b268:	09912223          	sw	s9,132(sp)
    b26c:	09a12023          	sw	s10,128(sp)
    b270:	07b12e23          	sw	s11,124(sp)
    b274:	00050993          	mv	s3,a0
    b278:	00058413          	mv	s0,a1
    b27c:	00060913          	mv	s2,a2
    b280:	00068493          	mv	s1,a3
    b284:	00050863          	beqz	a0,b294 <_vfiprintf_r+0x58>
    b288:	01852783          	lw	a5,24(a0)
    b28c:	00079463          	bnez	a5,b294 <_vfiprintf_r+0x58>
    b290:	f61fe0ef          	jal	ra,a1f0 <__sinit>
    b294:	0000d7b7          	lui	a5,0xd
    b298:	ef078793          	addi	a5,a5,-272 # cef0 <__sf_fake_stdin>
    b29c:	08f41c63          	bne	s0,a5,b334 <_vfiprintf_r+0xf8>
    b2a0:	0049a403          	lw	s0,4(s3)
    b2a4:	06442783          	lw	a5,100(s0)
    b2a8:	0017f793          	andi	a5,a5,1
    b2ac:	00079c63          	bnez	a5,b2c4 <_vfiprintf_r+0x88>
    b2b0:	00c45783          	lhu	a5,12(s0)
    b2b4:	2007f793          	andi	a5,a5,512
    b2b8:	00079663          	bnez	a5,b2c4 <_vfiprintf_r+0x88>
    b2bc:	05842503          	lw	a0,88(s0)
    b2c0:	b58fa0ef          	jal	ra,5618 <__retarget_lock_acquire_recursive>
    b2c4:	00c45783          	lhu	a5,12(s0)
    b2c8:	0087f793          	andi	a5,a5,8
    b2cc:	00078663          	beqz	a5,b2d8 <_vfiprintf_r+0x9c>
    b2d0:	01042783          	lw	a5,16(s0)
    b2d4:	0a079063          	bnez	a5,b374 <_vfiprintf_r+0x138>
    b2d8:	00040593          	mv	a1,s0
    b2dc:	00098513          	mv	a0,s3
    b2e0:	650000ef          	jal	ra,b930 <__swsetup_r>
    b2e4:	08050863          	beqz	a0,b374 <_vfiprintf_r+0x138>
    b2e8:	06442783          	lw	a5,100(s0)
    b2ec:	0017f793          	andi	a5,a5,1
    b2f0:	06078663          	beqz	a5,b35c <_vfiprintf_r+0x120>
    b2f4:	fff00513          	li	a0,-1
    b2f8:	0ac12083          	lw	ra,172(sp)
    b2fc:	0a812403          	lw	s0,168(sp)
    b300:	0a412483          	lw	s1,164(sp)
    b304:	0a012903          	lw	s2,160(sp)
    b308:	09c12983          	lw	s3,156(sp)
    b30c:	09812a03          	lw	s4,152(sp)
    b310:	09412a83          	lw	s5,148(sp)
    b314:	09012b03          	lw	s6,144(sp)
    b318:	08c12b83          	lw	s7,140(sp)
    b31c:	08812c03          	lw	s8,136(sp)
    b320:	08412c83          	lw	s9,132(sp)
    b324:	08012d03          	lw	s10,128(sp)
    b328:	07c12d83          	lw	s11,124(sp)
    b32c:	0b010113          	addi	sp,sp,176
    b330:	00008067          	ret
    b334:	0000d7b7          	lui	a5,0xd
    b338:	f1078793          	addi	a5,a5,-240 # cf10 <__sf_fake_stdout>
    b33c:	00f41663          	bne	s0,a5,b348 <_vfiprintf_r+0x10c>
    b340:	0089a403          	lw	s0,8(s3)
    b344:	f61ff06f          	j	b2a4 <_vfiprintf_r+0x68>
    b348:	0000d7b7          	lui	a5,0xd
    b34c:	ed078793          	addi	a5,a5,-304 # ced0 <__sf_fake_stderr>
    b350:	f4f41ae3          	bne	s0,a5,b2a4 <_vfiprintf_r+0x68>
    b354:	00c9a403          	lw	s0,12(s3)
    b358:	f4dff06f          	j	b2a4 <_vfiprintf_r+0x68>
    b35c:	00c45783          	lhu	a5,12(s0)
    b360:	2007f793          	andi	a5,a5,512
    b364:	f80798e3          	bnez	a5,b2f4 <_vfiprintf_r+0xb8>
    b368:	05842503          	lw	a0,88(s0)
    b36c:	ab8fa0ef          	jal	ra,5624 <__retarget_lock_release_recursive>
    b370:	f85ff06f          	j	b2f4 <_vfiprintf_r+0xb8>
    b374:	02000793          	li	a5,32
    b378:	02f104a3          	sb	a5,41(sp)
    b37c:	00008ab7          	lui	s5,0x8
    b380:	03000793          	li	a5,48
    b384:	02012223          	sw	zero,36(sp)
    b388:	02f10523          	sb	a5,42(sp)
    b38c:	00912623          	sw	s1,12(sp)
    b390:	02500c93          	li	s9,37
    b394:	0000db37          	lui	s6,0xd
    b398:	0000dbb7          	lui	s7,0xd
    b39c:	0000dd37          	lui	s10,0xd
    b3a0:	0000bc37          	lui	s8,0xb
    b3a4:	f3ca8a93          	addi	s5,s5,-196 # 7f3c <_printf_float>
    b3a8:	00090493          	mv	s1,s2
    b3ac:	0004c783          	lbu	a5,0(s1)
    b3b0:	00078463          	beqz	a5,b3b8 <_vfiprintf_r+0x17c>
    b3b4:	0d979c63          	bne	a5,s9,b48c <_vfiprintf_r+0x250>
    b3b8:	41248db3          	sub	s11,s1,s2
    b3bc:	03248663          	beq	s1,s2,b3e8 <_vfiprintf_r+0x1ac>
    b3c0:	000d8693          	mv	a3,s11
    b3c4:	00090613          	mv	a2,s2
    b3c8:	00040593          	mv	a1,s0
    b3cc:	00098513          	mv	a0,s3
    b3d0:	df9ff0ef          	jal	ra,b1c8 <__sfputs_r>
    b3d4:	fff00793          	li	a5,-1
    b3d8:	24f50463          	beq	a0,a5,b620 <_vfiprintf_r+0x3e4>
    b3dc:	02412783          	lw	a5,36(sp)
    b3e0:	01b787b3          	add	a5,a5,s11
    b3e4:	02f12223          	sw	a5,36(sp)
    b3e8:	0004c783          	lbu	a5,0(s1)
    b3ec:	22078a63          	beqz	a5,b620 <_vfiprintf_r+0x3e4>
    b3f0:	fff00793          	li	a5,-1
    b3f4:	00148913          	addi	s2,s1,1
    b3f8:	00012823          	sw	zero,16(sp)
    b3fc:	00012e23          	sw	zero,28(sp)
    b400:	00f12a23          	sw	a5,20(sp)
    b404:	00012c23          	sw	zero,24(sp)
    b408:	040109a3          	sb	zero,83(sp)
    b40c:	06012423          	sw	zero,104(sp)
    b410:	00100d93          	li	s11,1
    b414:	00094583          	lbu	a1,0(s2)
    b418:	00500613          	li	a2,5
    b41c:	fa0b0513          	addi	a0,s6,-96 # cfa0 <p05.0+0xc>
    b420:	844ff0ef          	jal	ra,a464 <memchr>
    b424:	01012783          	lw	a5,16(sp)
    b428:	00190493          	addi	s1,s2,1
    b42c:	06051463          	bnez	a0,b494 <_vfiprintf_r+0x258>
    b430:	0107f713          	andi	a4,a5,16
    b434:	00070663          	beqz	a4,b440 <_vfiprintf_r+0x204>
    b438:	02000713          	li	a4,32
    b43c:	04e109a3          	sb	a4,83(sp)
    b440:	0087f713          	andi	a4,a5,8
    b444:	00070663          	beqz	a4,b450 <_vfiprintf_r+0x214>
    b448:	02b00713          	li	a4,43
    b44c:	04e109a3          	sb	a4,83(sp)
    b450:	00094683          	lbu	a3,0(s2)
    b454:	02a00713          	li	a4,42
    b458:	04e68c63          	beq	a3,a4,b4b0 <_vfiprintf_r+0x274>
    b45c:	01c12783          	lw	a5,28(sp)
    b460:	00090493          	mv	s1,s2
    b464:	00000693          	li	a3,0
    b468:	00900613          	li	a2,9
    b46c:	00a00513          	li	a0,10
    b470:	0004c703          	lbu	a4,0(s1)
    b474:	00148593          	addi	a1,s1,1
    b478:	fd070713          	addi	a4,a4,-48
    b47c:	08e67c63          	bgeu	a2,a4,b514 <_vfiprintf_r+0x2d8>
    b480:	04068463          	beqz	a3,b4c8 <_vfiprintf_r+0x28c>
    b484:	00f12e23          	sw	a5,28(sp)
    b488:	0400006f          	j	b4c8 <_vfiprintf_r+0x28c>
    b48c:	00148493          	addi	s1,s1,1
    b490:	f1dff06f          	j	b3ac <_vfiprintf_r+0x170>
    b494:	fa0b0713          	addi	a4,s6,-96
    b498:	40e50533          	sub	a0,a0,a4
    b49c:	00ad9533          	sll	a0,s11,a0
    b4a0:	00a7e7b3          	or	a5,a5,a0
    b4a4:	00f12823          	sw	a5,16(sp)
    b4a8:	00048913          	mv	s2,s1
    b4ac:	f69ff06f          	j	b414 <_vfiprintf_r+0x1d8>
    b4b0:	00c12703          	lw	a4,12(sp)
    b4b4:	00470693          	addi	a3,a4,4
    b4b8:	00072703          	lw	a4,0(a4)
    b4bc:	00d12623          	sw	a3,12(sp)
    b4c0:	04074063          	bltz	a4,b500 <_vfiprintf_r+0x2c4>
    b4c4:	00e12e23          	sw	a4,28(sp)
    b4c8:	0004c703          	lbu	a4,0(s1)
    b4cc:	02e00793          	li	a5,46
    b4d0:	08f71663          	bne	a4,a5,b55c <_vfiprintf_r+0x320>
    b4d4:	0014c703          	lbu	a4,1(s1)
    b4d8:	02a00793          	li	a5,42
    b4dc:	04f71a63          	bne	a4,a5,b530 <_vfiprintf_r+0x2f4>
    b4e0:	00c12783          	lw	a5,12(sp)
    b4e4:	00248493          	addi	s1,s1,2
    b4e8:	00478713          	addi	a4,a5,4
    b4ec:	0007a783          	lw	a5,0(a5)
    b4f0:	00e12623          	sw	a4,12(sp)
    b4f4:	0207ca63          	bltz	a5,b528 <_vfiprintf_r+0x2ec>
    b4f8:	00f12a23          	sw	a5,20(sp)
    b4fc:	0600006f          	j	b55c <_vfiprintf_r+0x320>
    b500:	40e00733          	neg	a4,a4
    b504:	0027e793          	ori	a5,a5,2
    b508:	00e12e23          	sw	a4,28(sp)
    b50c:	00f12823          	sw	a5,16(sp)
    b510:	fb9ff06f          	j	b4c8 <_vfiprintf_r+0x28c>
    b514:	02a787b3          	mul	a5,a5,a0
    b518:	00058493          	mv	s1,a1
    b51c:	00100693          	li	a3,1
    b520:	00e787b3          	add	a5,a5,a4
    b524:	f4dff06f          	j	b470 <_vfiprintf_r+0x234>
    b528:	fff00793          	li	a5,-1
    b52c:	fcdff06f          	j	b4f8 <_vfiprintf_r+0x2bc>
    b530:	00148493          	addi	s1,s1,1
    b534:	00012a23          	sw	zero,20(sp)
    b538:	00000693          	li	a3,0
    b53c:	00000793          	li	a5,0
    b540:	00900613          	li	a2,9
    b544:	00a00513          	li	a0,10
    b548:	0004c703          	lbu	a4,0(s1)
    b54c:	00148593          	addi	a1,s1,1
    b550:	fd070713          	addi	a4,a4,-48
    b554:	08e67263          	bgeu	a2,a4,b5d8 <_vfiprintf_r+0x39c>
    b558:	fa0690e3          	bnez	a3,b4f8 <_vfiprintf_r+0x2bc>
    b55c:	0004c583          	lbu	a1,0(s1)
    b560:	00300613          	li	a2,3
    b564:	fa8b8513          	addi	a0,s7,-88 # cfa8 <p05.0+0x14>
    b568:	efdfe0ef          	jal	ra,a464 <memchr>
    b56c:	02050263          	beqz	a0,b590 <_vfiprintf_r+0x354>
    b570:	fa8b8793          	addi	a5,s7,-88
    b574:	40f50533          	sub	a0,a0,a5
    b578:	04000793          	li	a5,64
    b57c:	00a797b3          	sll	a5,a5,a0
    b580:	01012503          	lw	a0,16(sp)
    b584:	00148493          	addi	s1,s1,1
    b588:	00f56533          	or	a0,a0,a5
    b58c:	00a12823          	sw	a0,16(sp)
    b590:	0004c583          	lbu	a1,0(s1)
    b594:	00600613          	li	a2,6
    b598:	facd0513          	addi	a0,s10,-84 # cfac <p05.0+0x18>
    b59c:	00148913          	addi	s2,s1,1
    b5a0:	02b10423          	sb	a1,40(sp)
    b5a4:	ec1fe0ef          	jal	ra,a464 <memchr>
    b5a8:	0a050663          	beqz	a0,b654 <_vfiprintf_r+0x418>
    b5ac:	040a9863          	bnez	s5,b5fc <_vfiprintf_r+0x3c0>
    b5b0:	01012703          	lw	a4,16(sp)
    b5b4:	00c12783          	lw	a5,12(sp)
    b5b8:	10077713          	andi	a4,a4,256
    b5bc:	02070863          	beqz	a4,b5ec <_vfiprintf_r+0x3b0>
    b5c0:	00478793          	addi	a5,a5,4
    b5c4:	00f12623          	sw	a5,12(sp)
    b5c8:	02412783          	lw	a5,36(sp)
    b5cc:	014787b3          	add	a5,a5,s4
    b5d0:	02f12223          	sw	a5,36(sp)
    b5d4:	dd5ff06f          	j	b3a8 <_vfiprintf_r+0x16c>
    b5d8:	02a787b3          	mul	a5,a5,a0
    b5dc:	00058493          	mv	s1,a1
    b5e0:	00100693          	li	a3,1
    b5e4:	00e787b3          	add	a5,a5,a4
    b5e8:	f61ff06f          	j	b548 <_vfiprintf_r+0x30c>
    b5ec:	00778793          	addi	a5,a5,7
    b5f0:	ff87f793          	andi	a5,a5,-8
    b5f4:	00878793          	addi	a5,a5,8
    b5f8:	fcdff06f          	j	b5c4 <_vfiprintf_r+0x388>
    b5fc:	00c10713          	addi	a4,sp,12
    b600:	1c8c0693          	addi	a3,s8,456 # b1c8 <__sfputs_r>
    b604:	00040613          	mv	a2,s0
    b608:	01010593          	addi	a1,sp,16
    b60c:	00098513          	mv	a0,s3
    b610:	92dfc0ef          	jal	ra,7f3c <_printf_float>
    b614:	fff00793          	li	a5,-1
    b618:	00050a13          	mv	s4,a0
    b61c:	faf516e3          	bne	a0,a5,b5c8 <_vfiprintf_r+0x38c>
    b620:	06442783          	lw	a5,100(s0)
    b624:	0017f793          	andi	a5,a5,1
    b628:	00079c63          	bnez	a5,b640 <_vfiprintf_r+0x404>
    b62c:	00c45783          	lhu	a5,12(s0)
    b630:	2007f793          	andi	a5,a5,512
    b634:	00079663          	bnez	a5,b640 <_vfiprintf_r+0x404>
    b638:	05842503          	lw	a0,88(s0)
    b63c:	fe9f90ef          	jal	ra,5624 <__retarget_lock_release_recursive>
    b640:	00c45783          	lhu	a5,12(s0)
    b644:	0407f793          	andi	a5,a5,64
    b648:	ca0796e3          	bnez	a5,b2f4 <_vfiprintf_r+0xb8>
    b64c:	02412503          	lw	a0,36(sp)
    b650:	ca9ff06f          	j	b2f8 <_vfiprintf_r+0xbc>
    b654:	00c10713          	addi	a4,sp,12
    b658:	1c8c0693          	addi	a3,s8,456
    b65c:	00040613          	mv	a2,s0
    b660:	01010593          	addi	a1,sp,16
    b664:	00098513          	mv	a0,s3
    b668:	a18fd0ef          	jal	ra,8880 <_printf_i>
    b66c:	fa9ff06f          	j	b614 <_vfiprintf_r+0x3d8>

0000b670 <__sread>:
    b670:	ff010113          	addi	sp,sp,-16
    b674:	00812423          	sw	s0,8(sp)
    b678:	00058413          	mv	s0,a1
    b67c:	00e59583          	lh	a1,14(a1)
    b680:	00112623          	sw	ra,12(sp)
    b684:	20d000ef          	jal	ra,c090 <_read_r>
    b688:	02054063          	bltz	a0,b6a8 <__sread+0x38>
    b68c:	05442783          	lw	a5,84(s0)
    b690:	00a787b3          	add	a5,a5,a0
    b694:	04f42a23          	sw	a5,84(s0)
    b698:	00c12083          	lw	ra,12(sp)
    b69c:	00812403          	lw	s0,8(sp)
    b6a0:	01010113          	addi	sp,sp,16
    b6a4:	00008067          	ret
    b6a8:	00c45783          	lhu	a5,12(s0)
    b6ac:	fffff737          	lui	a4,0xfffff
    b6b0:	fff70713          	addi	a4,a4,-1 # ffffefff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfffff000>
    b6b4:	00e7f7b3          	and	a5,a5,a4
    b6b8:	00f41623          	sh	a5,12(s0)
    b6bc:	fddff06f          	j	b698 <__sread+0x28>

0000b6c0 <__swrite>:
    b6c0:	00c5d783          	lhu	a5,12(a1)
    b6c4:	fe010113          	addi	sp,sp,-32
    b6c8:	00812c23          	sw	s0,24(sp)
    b6cc:	00912a23          	sw	s1,20(sp)
    b6d0:	01212823          	sw	s2,16(sp)
    b6d4:	01312623          	sw	s3,12(sp)
    b6d8:	00112e23          	sw	ra,28(sp)
    b6dc:	1007f793          	andi	a5,a5,256
    b6e0:	00050493          	mv	s1,a0
    b6e4:	00058413          	mv	s0,a1
    b6e8:	00060913          	mv	s2,a2
    b6ec:	00068993          	mv	s3,a3
    b6f0:	00078a63          	beqz	a5,b704 <__swrite+0x44>
    b6f4:	00e59583          	lh	a1,14(a1)
    b6f8:	00200693          	li	a3,2
    b6fc:	00000613          	li	a2,0
    b700:	760000ef          	jal	ra,be60 <_lseek_r>
    b704:	00c45783          	lhu	a5,12(s0)
    b708:	fffff737          	lui	a4,0xfffff
    b70c:	fff70713          	addi	a4,a4,-1 # ffffefff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfffff000>
    b710:	00e7f7b3          	and	a5,a5,a4
    b714:	00e41583          	lh	a1,14(s0)
    b718:	00f41623          	sh	a5,12(s0)
    b71c:	01812403          	lw	s0,24(sp)
    b720:	01c12083          	lw	ra,28(sp)
    b724:	00098693          	mv	a3,s3
    b728:	00090613          	mv	a2,s2
    b72c:	00c12983          	lw	s3,12(sp)
    b730:	01012903          	lw	s2,16(sp)
    b734:	00048513          	mv	a0,s1
    b738:	01412483          	lw	s1,20(sp)
    b73c:	02010113          	addi	sp,sp,32
    b740:	19c0006f          	j	b8dc <_write_r>

0000b744 <__sseek>:
    b744:	ff010113          	addi	sp,sp,-16
    b748:	00812423          	sw	s0,8(sp)
    b74c:	00058413          	mv	s0,a1
    b750:	00e59583          	lh	a1,14(a1)
    b754:	00112623          	sw	ra,12(sp)
    b758:	708000ef          	jal	ra,be60 <_lseek_r>
    b75c:	fff00793          	li	a5,-1
    b760:	00c45703          	lhu	a4,12(s0)
    b764:	02f51263          	bne	a0,a5,b788 <__sseek+0x44>
    b768:	fffff7b7          	lui	a5,0xfffff
    b76c:	fff78793          	addi	a5,a5,-1 # ffffefff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfffff000>
    b770:	00e7f7b3          	and	a5,a5,a4
    b774:	00f41623          	sh	a5,12(s0)
    b778:	00c12083          	lw	ra,12(sp)
    b77c:	00812403          	lw	s0,8(sp)
    b780:	01010113          	addi	sp,sp,16
    b784:	00008067          	ret
    b788:	000017b7          	lui	a5,0x1
    b78c:	00f767b3          	or	a5,a4,a5
    b790:	00f41623          	sh	a5,12(s0)
    b794:	04a42a23          	sw	a0,84(s0)
    b798:	fe1ff06f          	j	b778 <__sseek+0x34>

0000b79c <__sclose>:
    b79c:	00e59583          	lh	a1,14(a1)
    b7a0:	35c0006f          	j	bafc <_close_r>

0000b7a4 <__swbuf_r>:
    b7a4:	fe010113          	addi	sp,sp,-32
    b7a8:	00812c23          	sw	s0,24(sp)
    b7ac:	00912a23          	sw	s1,20(sp)
    b7b0:	01212823          	sw	s2,16(sp)
    b7b4:	00112e23          	sw	ra,28(sp)
    b7b8:	01312623          	sw	s3,12(sp)
    b7bc:	00050493          	mv	s1,a0
    b7c0:	00058913          	mv	s2,a1
    b7c4:	00060413          	mv	s0,a2
    b7c8:	00050863          	beqz	a0,b7d8 <__swbuf_r+0x34>
    b7cc:	01852783          	lw	a5,24(a0)
    b7d0:	00079463          	bnez	a5,b7d8 <__swbuf_r+0x34>
    b7d4:	a1dfe0ef          	jal	ra,a1f0 <__sinit>
    b7d8:	0000d7b7          	lui	a5,0xd
    b7dc:	ef078793          	addi	a5,a5,-272 # cef0 <__sf_fake_stdin>
    b7e0:	0af41e63          	bne	s0,a5,b89c <__swbuf_r+0xf8>
    b7e4:	0044a403          	lw	s0,4(s1)
    b7e8:	01842783          	lw	a5,24(s0)
    b7ec:	00f42423          	sw	a5,8(s0)
    b7f0:	00c45783          	lhu	a5,12(s0)
    b7f4:	0087f793          	andi	a5,a5,8
    b7f8:	0c078663          	beqz	a5,b8c4 <__swbuf_r+0x120>
    b7fc:	01042783          	lw	a5,16(s0)
    b800:	0c078263          	beqz	a5,b8c4 <__swbuf_r+0x120>
    b804:	01042783          	lw	a5,16(s0)
    b808:	00042503          	lw	a0,0(s0)
    b80c:	0ff97993          	andi	s3,s2,255
    b810:	0ff97913          	andi	s2,s2,255
    b814:	40f50533          	sub	a0,a0,a5
    b818:	01442783          	lw	a5,20(s0)
    b81c:	00f54a63          	blt	a0,a5,b830 <__swbuf_r+0x8c>
    b820:	00040593          	mv	a1,s0
    b824:	00048513          	mv	a0,s1
    b828:	514000ef          	jal	ra,bd3c <_fflush_r>
    b82c:	0a051463          	bnez	a0,b8d4 <__swbuf_r+0x130>
    b830:	00842783          	lw	a5,8(s0)
    b834:	00150513          	addi	a0,a0,1
    b838:	fff78793          	addi	a5,a5,-1
    b83c:	00f42423          	sw	a5,8(s0)
    b840:	00042783          	lw	a5,0(s0)
    b844:	00178713          	addi	a4,a5,1
    b848:	00e42023          	sw	a4,0(s0)
    b84c:	01378023          	sb	s3,0(a5)
    b850:	01442783          	lw	a5,20(s0)
    b854:	00a78c63          	beq	a5,a0,b86c <__swbuf_r+0xc8>
    b858:	00c45783          	lhu	a5,12(s0)
    b85c:	0017f793          	andi	a5,a5,1
    b860:	00078e63          	beqz	a5,b87c <__swbuf_r+0xd8>
    b864:	00a00793          	li	a5,10
    b868:	00f91a63          	bne	s2,a5,b87c <__swbuf_r+0xd8>
    b86c:	00040593          	mv	a1,s0
    b870:	00048513          	mv	a0,s1
    b874:	4c8000ef          	jal	ra,bd3c <_fflush_r>
    b878:	04051e63          	bnez	a0,b8d4 <__swbuf_r+0x130>
    b87c:	01c12083          	lw	ra,28(sp)
    b880:	01812403          	lw	s0,24(sp)
    b884:	01412483          	lw	s1,20(sp)
    b888:	00c12983          	lw	s3,12(sp)
    b88c:	00090513          	mv	a0,s2
    b890:	01012903          	lw	s2,16(sp)
    b894:	02010113          	addi	sp,sp,32
    b898:	00008067          	ret
    b89c:	0000d7b7          	lui	a5,0xd
    b8a0:	f1078793          	addi	a5,a5,-240 # cf10 <__sf_fake_stdout>
    b8a4:	00f41663          	bne	s0,a5,b8b0 <__swbuf_r+0x10c>
    b8a8:	0084a403          	lw	s0,8(s1)
    b8ac:	f3dff06f          	j	b7e8 <__swbuf_r+0x44>
    b8b0:	0000d7b7          	lui	a5,0xd
    b8b4:	ed078793          	addi	a5,a5,-304 # ced0 <__sf_fake_stderr>
    b8b8:	f2f418e3          	bne	s0,a5,b7e8 <__swbuf_r+0x44>
    b8bc:	00c4a403          	lw	s0,12(s1)
    b8c0:	f29ff06f          	j	b7e8 <__swbuf_r+0x44>
    b8c4:	00040593          	mv	a1,s0
    b8c8:	00048513          	mv	a0,s1
    b8cc:	064000ef          	jal	ra,b930 <__swsetup_r>
    b8d0:	f2050ae3          	beqz	a0,b804 <__swbuf_r+0x60>
    b8d4:	fff00913          	li	s2,-1
    b8d8:	fa5ff06f          	j	b87c <__swbuf_r+0xd8>

0000b8dc <_write_r>:
    b8dc:	ff010113          	addi	sp,sp,-16
    b8e0:	00812423          	sw	s0,8(sp)
    b8e4:	00912223          	sw	s1,4(sp)
    b8e8:	00050413          	mv	s0,a0
    b8ec:	0000d4b7          	lui	s1,0xd
    b8f0:	00058513          	mv	a0,a1
    b8f4:	00060593          	mv	a1,a2
    b8f8:	00068613          	mv	a2,a3
    b8fc:	00112623          	sw	ra,12(sp)
    b900:	0404a823          	sw	zero,80(s1) # d050 <errno>
    b904:	c51f90ef          	jal	ra,5554 <_write>
    b908:	fff00793          	li	a5,-1
    b90c:	00f51863          	bne	a0,a5,b91c <_write_r+0x40>
    b910:	0504a783          	lw	a5,80(s1)
    b914:	00078463          	beqz	a5,b91c <_write_r+0x40>
    b918:	00f42023          	sw	a5,0(s0)
    b91c:	00c12083          	lw	ra,12(sp)
    b920:	00812403          	lw	s0,8(sp)
    b924:	00412483          	lw	s1,4(sp)
    b928:	01010113          	addi	sp,sp,16
    b92c:	00008067          	ret

0000b930 <__swsetup_r>:
    b930:	ff010113          	addi	sp,sp,-16
    b934:	0000f7b7          	lui	a5,0xf
    b938:	00912223          	sw	s1,4(sp)
    b93c:	1387a483          	lw	s1,312(a5) # f138 <_impure_ptr>
    b940:	00812423          	sw	s0,8(sp)
    b944:	01212023          	sw	s2,0(sp)
    b948:	00112623          	sw	ra,12(sp)
    b94c:	00050913          	mv	s2,a0
    b950:	00058413          	mv	s0,a1
    b954:	00048a63          	beqz	s1,b968 <__swsetup_r+0x38>
    b958:	0184a783          	lw	a5,24(s1)
    b95c:	00079663          	bnez	a5,b968 <__swsetup_r+0x38>
    b960:	00048513          	mv	a0,s1
    b964:	88dfe0ef          	jal	ra,a1f0 <__sinit>
    b968:	0000d7b7          	lui	a5,0xd
    b96c:	ef078793          	addi	a5,a5,-272 # cef0 <__sf_fake_stdin>
    b970:	02f41e63          	bne	s0,a5,b9ac <__swsetup_r+0x7c>
    b974:	0044a403          	lw	s0,4(s1)
    b978:	00c41783          	lh	a5,12(s0)
    b97c:	01079713          	slli	a4,a5,0x10
    b980:	0087f693          	andi	a3,a5,8
    b984:	01075713          	srli	a4,a4,0x10
    b988:	08069a63          	bnez	a3,ba1c <__swsetup_r+0xec>
    b98c:	01077693          	andi	a3,a4,16
    b990:	04069263          	bnez	a3,b9d4 <__swsetup_r+0xa4>
    b994:	00900713          	li	a4,9
    b998:	00e92023          	sw	a4,0(s2)
    b99c:	0407e793          	ori	a5,a5,64
    b9a0:	00f41623          	sh	a5,12(s0)
    b9a4:	fff00513          	li	a0,-1
    b9a8:	0d00006f          	j	ba78 <__swsetup_r+0x148>
    b9ac:	0000d7b7          	lui	a5,0xd
    b9b0:	f1078793          	addi	a5,a5,-240 # cf10 <__sf_fake_stdout>
    b9b4:	00f41663          	bne	s0,a5,b9c0 <__swsetup_r+0x90>
    b9b8:	0084a403          	lw	s0,8(s1)
    b9bc:	fbdff06f          	j	b978 <__swsetup_r+0x48>
    b9c0:	0000d7b7          	lui	a5,0xd
    b9c4:	ed078793          	addi	a5,a5,-304 # ced0 <__sf_fake_stderr>
    b9c8:	faf418e3          	bne	s0,a5,b978 <__swsetup_r+0x48>
    b9cc:	00c4a403          	lw	s0,12(s1)
    b9d0:	fa9ff06f          	j	b978 <__swsetup_r+0x48>
    b9d4:	00477713          	andi	a4,a4,4
    b9d8:	02070c63          	beqz	a4,ba10 <__swsetup_r+0xe0>
    b9dc:	03442583          	lw	a1,52(s0)
    b9e0:	00058c63          	beqz	a1,b9f8 <__swsetup_r+0xc8>
    b9e4:	04440793          	addi	a5,s0,68
    b9e8:	00f58663          	beq	a1,a5,b9f4 <__swsetup_r+0xc4>
    b9ec:	00090513          	mv	a0,s2
    b9f0:	8d8fc0ef          	jal	ra,7ac8 <_free_r>
    b9f4:	02042a23          	sw	zero,52(s0)
    b9f8:	00c45783          	lhu	a5,12(s0)
    b9fc:	00042223          	sw	zero,4(s0)
    ba00:	fdb7f793          	andi	a5,a5,-37
    ba04:	00f41623          	sh	a5,12(s0)
    ba08:	01042783          	lw	a5,16(s0)
    ba0c:	00f42023          	sw	a5,0(s0)
    ba10:	00c45783          	lhu	a5,12(s0)
    ba14:	0087e793          	ori	a5,a5,8
    ba18:	00f41623          	sh	a5,12(s0)
    ba1c:	01042783          	lw	a5,16(s0)
    ba20:	02079063          	bnez	a5,ba40 <__swsetup_r+0x110>
    ba24:	00c45783          	lhu	a5,12(s0)
    ba28:	20000713          	li	a4,512
    ba2c:	2807f793          	andi	a5,a5,640
    ba30:	00e78863          	beq	a5,a4,ba40 <__swsetup_r+0x110>
    ba34:	00040593          	mv	a1,s0
    ba38:	00090513          	mv	a0,s2
    ba3c:	508000ef          	jal	ra,bf44 <__smakebuf_r>
    ba40:	00c41783          	lh	a5,12(s0)
    ba44:	01079713          	slli	a4,a5,0x10
    ba48:	0017f693          	andi	a3,a5,1
    ba4c:	01075713          	srli	a4,a4,0x10
    ba50:	04068063          	beqz	a3,ba90 <__swsetup_r+0x160>
    ba54:	01442683          	lw	a3,20(s0)
    ba58:	00042423          	sw	zero,8(s0)
    ba5c:	40d006b3          	neg	a3,a3
    ba60:	00d42c23          	sw	a3,24(s0)
    ba64:	01042683          	lw	a3,16(s0)
    ba68:	00000513          	li	a0,0
    ba6c:	00069663          	bnez	a3,ba78 <__swsetup_r+0x148>
    ba70:	08077713          	andi	a4,a4,128
    ba74:	f20714e3          	bnez	a4,b99c <__swsetup_r+0x6c>
    ba78:	00c12083          	lw	ra,12(sp)
    ba7c:	00812403          	lw	s0,8(sp)
    ba80:	00412483          	lw	s1,4(sp)
    ba84:	00012903          	lw	s2,0(sp)
    ba88:	01010113          	addi	sp,sp,16
    ba8c:	00008067          	ret
    ba90:	00277693          	andi	a3,a4,2
    ba94:	00000613          	li	a2,0
    ba98:	00069463          	bnez	a3,baa0 <__swsetup_r+0x170>
    ba9c:	01442603          	lw	a2,20(s0)
    baa0:	00c42423          	sw	a2,8(s0)
    baa4:	fc1ff06f          	j	ba64 <__swsetup_r+0x134>

0000baa8 <__assert_func>:
    baa8:	0000f7b7          	lui	a5,0xf
    baac:	1387a783          	lw	a5,312(a5) # f138 <_impure_ptr>
    bab0:	ff010113          	addi	sp,sp,-16
    bab4:	00060813          	mv	a6,a2
    bab8:	00112623          	sw	ra,12(sp)
    babc:	00050893          	mv	a7,a0
    bac0:	00058713          	mv	a4,a1
    bac4:	00c7a503          	lw	a0,12(a5)
    bac8:	00068613          	mv	a2,a3
    bacc:	02080063          	beqz	a6,baec <__assert_func+0x44>
    bad0:	0000d7b7          	lui	a5,0xd
    bad4:	fb478793          	addi	a5,a5,-76 # cfb4 <p05.0+0x20>
    bad8:	0000d5b7          	lui	a1,0xd
    badc:	00088693          	mv	a3,a7
    bae0:	fc458593          	addi	a1,a1,-60 # cfc4 <p05.0+0x30>
    bae4:	334000ef          	jal	ra,be18 <fiprintf>
    bae8:	62c000ef          	jal	ra,c114 <abort>
    baec:	0000d837          	lui	a6,0xd
    baf0:	a4080793          	addi	a5,a6,-1472 # ca40 <__mprec_tens+0x258>
    baf4:	a4080813          	addi	a6,a6,-1472
    baf8:	fe1ff06f          	j	bad8 <__assert_func+0x30>

0000bafc <_close_r>:
    bafc:	ff010113          	addi	sp,sp,-16
    bb00:	00812423          	sw	s0,8(sp)
    bb04:	00912223          	sw	s1,4(sp)
    bb08:	00050413          	mv	s0,a0
    bb0c:	0000d4b7          	lui	s1,0xd
    bb10:	00058513          	mv	a0,a1
    bb14:	00112623          	sw	ra,12(sp)
    bb18:	0404a823          	sw	zero,80(s1) # d050 <errno>
    bb1c:	a45f90ef          	jal	ra,5560 <_close>
    bb20:	fff00793          	li	a5,-1
    bb24:	00f51863          	bne	a0,a5,bb34 <_close_r+0x38>
    bb28:	0504a783          	lw	a5,80(s1)
    bb2c:	00078463          	beqz	a5,bb34 <_close_r+0x38>
    bb30:	00f42023          	sw	a5,0(s0)
    bb34:	00c12083          	lw	ra,12(sp)
    bb38:	00812403          	lw	s0,8(sp)
    bb3c:	00412483          	lw	s1,4(sp)
    bb40:	01010113          	addi	sp,sp,16
    bb44:	00008067          	ret

0000bb48 <__sflush_r>:
    bb48:	00c5d783          	lhu	a5,12(a1)
    bb4c:	fe010113          	addi	sp,sp,-32
    bb50:	00812c23          	sw	s0,24(sp)
    bb54:	00912a23          	sw	s1,20(sp)
    bb58:	00112e23          	sw	ra,28(sp)
    bb5c:	01212823          	sw	s2,16(sp)
    bb60:	01312623          	sw	s3,12(sp)
    bb64:	0087f713          	andi	a4,a5,8
    bb68:	00050493          	mv	s1,a0
    bb6c:	00058413          	mv	s0,a1
    bb70:	16071263          	bnez	a4,bcd4 <__sflush_r+0x18c>
    bb74:	0045a703          	lw	a4,4(a1)
    bb78:	00e04a63          	bgtz	a4,bb8c <__sflush_r+0x44>
    bb7c:	0405a703          	lw	a4,64(a1)
    bb80:	00e04663          	bgtz	a4,bb8c <__sflush_r+0x44>
    bb84:	00000513          	li	a0,0
    bb88:	1240006f          	j	bcac <__sflush_r+0x164>
    bb8c:	02c42703          	lw	a4,44(s0)
    bb90:	fe070ae3          	beqz	a4,bb84 <__sflush_r+0x3c>
    bb94:	000016b7          	lui	a3,0x1
    bb98:	0004a903          	lw	s2,0(s1)
    bb9c:	00d7f7b3          	and	a5,a5,a3
    bba0:	0004a023          	sw	zero,0(s1)
    bba4:	0c078063          	beqz	a5,bc64 <__sflush_r+0x11c>
    bba8:	05442503          	lw	a0,84(s0)
    bbac:	00c45783          	lhu	a5,12(s0)
    bbb0:	0047f793          	andi	a5,a5,4
    bbb4:	00078e63          	beqz	a5,bbd0 <__sflush_r+0x88>
    bbb8:	00442783          	lw	a5,4(s0)
    bbbc:	40f50533          	sub	a0,a0,a5
    bbc0:	03442783          	lw	a5,52(s0)
    bbc4:	00078663          	beqz	a5,bbd0 <__sflush_r+0x88>
    bbc8:	04042783          	lw	a5,64(s0)
    bbcc:	40f50533          	sub	a0,a0,a5
    bbd0:	02c42783          	lw	a5,44(s0)
    bbd4:	02042583          	lw	a1,32(s0)
    bbd8:	00050613          	mv	a2,a0
    bbdc:	00000693          	li	a3,0
    bbe0:	00048513          	mv	a0,s1
    bbe4:	000780e7          	jalr	a5
    bbe8:	fff00793          	li	a5,-1
    bbec:	00c45703          	lhu	a4,12(s0)
    bbf0:	02f51263          	bne	a0,a5,bc14 <__sflush_r+0xcc>
    bbf4:	0004a683          	lw	a3,0(s1)
    bbf8:	01d00793          	li	a5,29
    bbfc:	0cd7e663          	bltu	a5,a3,bcc8 <__sflush_r+0x180>
    bc00:	204007b7          	lui	a5,0x20400
    bc04:	00178793          	addi	a5,a5,1 # 20400001 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d450f81>
    bc08:	00d7d7b3          	srl	a5,a5,a3
    bc0c:	0017f793          	andi	a5,a5,1
    bc10:	0a078c63          	beqz	a5,bcc8 <__sflush_r+0x180>
    bc14:	01042783          	lw	a5,16(s0)
    bc18:	00042223          	sw	zero,4(s0)
    bc1c:	00f42023          	sw	a5,0(s0)
    bc20:	000017b7          	lui	a5,0x1
    bc24:	00f77733          	and	a4,a4,a5
    bc28:	00070c63          	beqz	a4,bc40 <__sflush_r+0xf8>
    bc2c:	fff00793          	li	a5,-1
    bc30:	00f51663          	bne	a0,a5,bc3c <__sflush_r+0xf4>
    bc34:	0004a783          	lw	a5,0(s1)
    bc38:	00079463          	bnez	a5,bc40 <__sflush_r+0xf8>
    bc3c:	04a42a23          	sw	a0,84(s0)
    bc40:	03442583          	lw	a1,52(s0)
    bc44:	0124a023          	sw	s2,0(s1)
    bc48:	f2058ee3          	beqz	a1,bb84 <__sflush_r+0x3c>
    bc4c:	04440793          	addi	a5,s0,68
    bc50:	00f58663          	beq	a1,a5,bc5c <__sflush_r+0x114>
    bc54:	00048513          	mv	a0,s1
    bc58:	e71fb0ef          	jal	ra,7ac8 <_free_r>
    bc5c:	02042a23          	sw	zero,52(s0)
    bc60:	f25ff06f          	j	bb84 <__sflush_r+0x3c>
    bc64:	02042583          	lw	a1,32(s0)
    bc68:	00100693          	li	a3,1
    bc6c:	00000613          	li	a2,0
    bc70:	00048513          	mv	a0,s1
    bc74:	000700e7          	jalr	a4
    bc78:	fff00793          	li	a5,-1
    bc7c:	f2f518e3          	bne	a0,a5,bbac <__sflush_r+0x64>
    bc80:	0004a783          	lw	a5,0(s1)
    bc84:	f20784e3          	beqz	a5,bbac <__sflush_r+0x64>
    bc88:	01d00713          	li	a4,29
    bc8c:	00e78663          	beq	a5,a4,bc98 <__sflush_r+0x150>
    bc90:	01600713          	li	a4,22
    bc94:	00e79663          	bne	a5,a4,bca0 <__sflush_r+0x158>
    bc98:	0124a023          	sw	s2,0(s1)
    bc9c:	ee9ff06f          	j	bb84 <__sflush_r+0x3c>
    bca0:	00c45783          	lhu	a5,12(s0)
    bca4:	0407e793          	ori	a5,a5,64
    bca8:	00f41623          	sh	a5,12(s0)
    bcac:	01c12083          	lw	ra,28(sp)
    bcb0:	01812403          	lw	s0,24(sp)
    bcb4:	01412483          	lw	s1,20(sp)
    bcb8:	01012903          	lw	s2,16(sp)
    bcbc:	00c12983          	lw	s3,12(sp)
    bcc0:	02010113          	addi	sp,sp,32
    bcc4:	00008067          	ret
    bcc8:	04076713          	ori	a4,a4,64
    bccc:	00e41623          	sh	a4,12(s0)
    bcd0:	fddff06f          	j	bcac <__sflush_r+0x164>
    bcd4:	0105a983          	lw	s3,16(a1)
    bcd8:	ea0986e3          	beqz	s3,bb84 <__sflush_r+0x3c>
    bcdc:	0005a903          	lw	s2,0(a1)
    bce0:	0037f793          	andi	a5,a5,3
    bce4:	0135a023          	sw	s3,0(a1)
    bce8:	41390933          	sub	s2,s2,s3
    bcec:	00000713          	li	a4,0
    bcf0:	00079463          	bnez	a5,bcf8 <__sflush_r+0x1b0>
    bcf4:	0145a703          	lw	a4,20(a1)
    bcf8:	00e42423          	sw	a4,8(s0)
    bcfc:	e92054e3          	blez	s2,bb84 <__sflush_r+0x3c>
    bd00:	02842783          	lw	a5,40(s0)
    bd04:	02042583          	lw	a1,32(s0)
    bd08:	00090693          	mv	a3,s2
    bd0c:	00098613          	mv	a2,s3
    bd10:	00048513          	mv	a0,s1
    bd14:	000780e7          	jalr	a5 # 1000 <__divdf3+0x48c>
    bd18:	00a04c63          	bgtz	a0,bd30 <__sflush_r+0x1e8>
    bd1c:	00c45783          	lhu	a5,12(s0)
    bd20:	fff00513          	li	a0,-1
    bd24:	0407e793          	ori	a5,a5,64
    bd28:	00f41623          	sh	a5,12(s0)
    bd2c:	f81ff06f          	j	bcac <__sflush_r+0x164>
    bd30:	00a989b3          	add	s3,s3,a0
    bd34:	40a90933          	sub	s2,s2,a0
    bd38:	fc5ff06f          	j	bcfc <__sflush_r+0x1b4>

0000bd3c <_fflush_r>:
    bd3c:	0105a783          	lw	a5,16(a1)
    bd40:	ff010113          	addi	sp,sp,-16
    bd44:	00112623          	sw	ra,12(sp)
    bd48:	00812423          	sw	s0,8(sp)
    bd4c:	00912223          	sw	s1,4(sp)
    bd50:	02079063          	bnez	a5,bd70 <_fflush_r+0x34>
    bd54:	00000493          	li	s1,0
    bd58:	00c12083          	lw	ra,12(sp)
    bd5c:	00812403          	lw	s0,8(sp)
    bd60:	00048513          	mv	a0,s1
    bd64:	00412483          	lw	s1,4(sp)
    bd68:	01010113          	addi	sp,sp,16
    bd6c:	00008067          	ret
    bd70:	00050493          	mv	s1,a0
    bd74:	00058413          	mv	s0,a1
    bd78:	00050863          	beqz	a0,bd88 <_fflush_r+0x4c>
    bd7c:	01852783          	lw	a5,24(a0)
    bd80:	00079463          	bnez	a5,bd88 <_fflush_r+0x4c>
    bd84:	c6cfe0ef          	jal	ra,a1f0 <__sinit>
    bd88:	0000d7b7          	lui	a5,0xd
    bd8c:	ef078793          	addi	a5,a5,-272 # cef0 <__sf_fake_stdin>
    bd90:	06f41063          	bne	s0,a5,bdf0 <_fflush_r+0xb4>
    bd94:	0044a403          	lw	s0,4(s1)
    bd98:	00c41783          	lh	a5,12(s0)
    bd9c:	fa078ce3          	beqz	a5,bd54 <_fflush_r+0x18>
    bda0:	06442703          	lw	a4,100(s0)
    bda4:	00177713          	andi	a4,a4,1
    bda8:	00071a63          	bnez	a4,bdbc <_fflush_r+0x80>
    bdac:	2007f793          	andi	a5,a5,512
    bdb0:	00079663          	bnez	a5,bdbc <_fflush_r+0x80>
    bdb4:	05842503          	lw	a0,88(s0)
    bdb8:	861f90ef          	jal	ra,5618 <__retarget_lock_acquire_recursive>
    bdbc:	00048513          	mv	a0,s1
    bdc0:	00040593          	mv	a1,s0
    bdc4:	d85ff0ef          	jal	ra,bb48 <__sflush_r>
    bdc8:	06442783          	lw	a5,100(s0)
    bdcc:	00050493          	mv	s1,a0
    bdd0:	0017f793          	andi	a5,a5,1
    bdd4:	f80792e3          	bnez	a5,bd58 <_fflush_r+0x1c>
    bdd8:	00c45783          	lhu	a5,12(s0)
    bddc:	2007f793          	andi	a5,a5,512
    bde0:	f6079ce3          	bnez	a5,bd58 <_fflush_r+0x1c>
    bde4:	05842503          	lw	a0,88(s0)
    bde8:	83df90ef          	jal	ra,5624 <__retarget_lock_release_recursive>
    bdec:	f6dff06f          	j	bd58 <_fflush_r+0x1c>
    bdf0:	0000d7b7          	lui	a5,0xd
    bdf4:	f1078793          	addi	a5,a5,-240 # cf10 <__sf_fake_stdout>
    bdf8:	00f41663          	bne	s0,a5,be04 <_fflush_r+0xc8>
    bdfc:	0084a403          	lw	s0,8(s1)
    be00:	f99ff06f          	j	bd98 <_fflush_r+0x5c>
    be04:	0000d7b7          	lui	a5,0xd
    be08:	ed078793          	addi	a5,a5,-304 # ced0 <__sf_fake_stderr>
    be0c:	f8f416e3          	bne	s0,a5,bd98 <_fflush_r+0x5c>
    be10:	00c4a403          	lw	s0,12(s1)
    be14:	f85ff06f          	j	bd98 <_fflush_r+0x5c>

0000be18 <fiprintf>:
    be18:	fc010113          	addi	sp,sp,-64
    be1c:	02f12a23          	sw	a5,52(sp)
    be20:	0000f7b7          	lui	a5,0xf
    be24:	02c12423          	sw	a2,40(sp)
    be28:	00058613          	mv	a2,a1
    be2c:	00050593          	mv	a1,a0
    be30:	1387a503          	lw	a0,312(a5) # f138 <_impure_ptr>
    be34:	02d12623          	sw	a3,44(sp)
    be38:	02810693          	addi	a3,sp,40
    be3c:	00112e23          	sw	ra,28(sp)
    be40:	02e12823          	sw	a4,48(sp)
    be44:	03012c23          	sw	a6,56(sp)
    be48:	03112e23          	sw	a7,60(sp)
    be4c:	00d12623          	sw	a3,12(sp)
    be50:	becff0ef          	jal	ra,b23c <_vfiprintf_r>
    be54:	01c12083          	lw	ra,28(sp)
    be58:	04010113          	addi	sp,sp,64
    be5c:	00008067          	ret

0000be60 <_lseek_r>:
    be60:	ff010113          	addi	sp,sp,-16
    be64:	00812423          	sw	s0,8(sp)
    be68:	00912223          	sw	s1,4(sp)
    be6c:	00050413          	mv	s0,a0
    be70:	0000d4b7          	lui	s1,0xd
    be74:	00058513          	mv	a0,a1
    be78:	00060593          	mv	a1,a2
    be7c:	00068613          	mv	a2,a3
    be80:	00112623          	sw	ra,12(sp)
    be84:	0404a823          	sw	zero,80(s1) # d050 <errno>
    be88:	ee0f90ef          	jal	ra,5568 <_lseek>
    be8c:	fff00793          	li	a5,-1
    be90:	00f51863          	bne	a0,a5,bea0 <_lseek_r+0x40>
    be94:	0504a783          	lw	a5,80(s1)
    be98:	00078463          	beqz	a5,bea0 <_lseek_r+0x40>
    be9c:	00f42023          	sw	a5,0(s0)
    bea0:	00c12083          	lw	ra,12(sp)
    bea4:	00812403          	lw	s0,8(sp)
    bea8:	00412483          	lw	s1,4(sp)
    beac:	01010113          	addi	sp,sp,16
    beb0:	00008067          	ret

0000beb4 <__swhatbuf_r>:
    beb4:	f9010113          	addi	sp,sp,-112
    beb8:	07212023          	sw	s2,96(sp)
    bebc:	00058913          	mv	s2,a1
    bec0:	00e59583          	lh	a1,14(a1)
    bec4:	06812423          	sw	s0,104(sp)
    bec8:	06912223          	sw	s1,100(sp)
    becc:	06112623          	sw	ra,108(sp)
    bed0:	00060413          	mv	s0,a2
    bed4:	00068493          	mv	s1,a3
    bed8:	0005de63          	bgez	a1,bef4 <__swhatbuf_r+0x40>
    bedc:	00c91783          	lh	a5,12(s2)
    bee0:	0004a023          	sw	zero,0(s1)
    bee4:	0807f793          	andi	a5,a5,128
    bee8:	02079c63          	bnez	a5,bf20 <__swhatbuf_r+0x6c>
    beec:	40000793          	li	a5,1024
    bef0:	0340006f          	j	bf24 <__swhatbuf_r+0x70>
    bef4:	00810613          	addi	a2,sp,8
    bef8:	234000ef          	jal	ra,c12c <_fstat_r>
    befc:	fe0540e3          	bltz	a0,bedc <__swhatbuf_r+0x28>
    bf00:	00c12703          	lw	a4,12(sp)
    bf04:	0000f7b7          	lui	a5,0xf
    bf08:	00e7f7b3          	and	a5,a5,a4
    bf0c:	ffffe737          	lui	a4,0xffffe
    bf10:	00e787b3          	add	a5,a5,a4
    bf14:	0017b793          	seqz	a5,a5
    bf18:	00f4a023          	sw	a5,0(s1)
    bf1c:	fd1ff06f          	j	beec <__swhatbuf_r+0x38>
    bf20:	04000793          	li	a5,64
    bf24:	06c12083          	lw	ra,108(sp)
    bf28:	00f42023          	sw	a5,0(s0)
    bf2c:	06812403          	lw	s0,104(sp)
    bf30:	06412483          	lw	s1,100(sp)
    bf34:	06012903          	lw	s2,96(sp)
    bf38:	00000513          	li	a0,0
    bf3c:	07010113          	addi	sp,sp,112
    bf40:	00008067          	ret

0000bf44 <__smakebuf_r>:
    bf44:	00c5d783          	lhu	a5,12(a1)
    bf48:	fe010113          	addi	sp,sp,-32
    bf4c:	00812c23          	sw	s0,24(sp)
    bf50:	00112e23          	sw	ra,28(sp)
    bf54:	00912a23          	sw	s1,20(sp)
    bf58:	01212823          	sw	s2,16(sp)
    bf5c:	0027f793          	andi	a5,a5,2
    bf60:	00058413          	mv	s0,a1
    bf64:	02078863          	beqz	a5,bf94 <__smakebuf_r+0x50>
    bf68:	04740793          	addi	a5,s0,71
    bf6c:	00f42023          	sw	a5,0(s0)
    bf70:	00f42823          	sw	a5,16(s0)
    bf74:	00100793          	li	a5,1
    bf78:	00f42a23          	sw	a5,20(s0)
    bf7c:	01c12083          	lw	ra,28(sp)
    bf80:	01812403          	lw	s0,24(sp)
    bf84:	01412483          	lw	s1,20(sp)
    bf88:	01012903          	lw	s2,16(sp)
    bf8c:	02010113          	addi	sp,sp,32
    bf90:	00008067          	ret
    bf94:	00c10693          	addi	a3,sp,12
    bf98:	00810613          	addi	a2,sp,8
    bf9c:	00050913          	mv	s2,a0
    bfa0:	f15ff0ef          	jal	ra,beb4 <__swhatbuf_r>
    bfa4:	00812583          	lw	a1,8(sp)
    bfa8:	00050493          	mv	s1,a0
    bfac:	00090513          	mv	a0,s2
    bfb0:	c1dfb0ef          	jal	ra,7bcc <_malloc_r>
    bfb4:	02051063          	bnez	a0,bfd4 <__smakebuf_r+0x90>
    bfb8:	00c41783          	lh	a5,12(s0)
    bfbc:	2007f713          	andi	a4,a5,512
    bfc0:	fa071ee3          	bnez	a4,bf7c <__smakebuf_r+0x38>
    bfc4:	ffc7f793          	andi	a5,a5,-4
    bfc8:	0027e793          	ori	a5,a5,2
    bfcc:	00f41623          	sh	a5,12(s0)
    bfd0:	f99ff06f          	j	bf68 <__smakebuf_r+0x24>
    bfd4:	0000a7b7          	lui	a5,0xa
    bfd8:	14878793          	addi	a5,a5,328 # a148 <_cleanup_r>
    bfdc:	02f92423          	sw	a5,40(s2)
    bfe0:	00c45783          	lhu	a5,12(s0)
    bfe4:	00a42023          	sw	a0,0(s0)
    bfe8:	00a42823          	sw	a0,16(s0)
    bfec:	0807e793          	ori	a5,a5,128
    bff0:	00f41623          	sh	a5,12(s0)
    bff4:	00812783          	lw	a5,8(sp)
    bff8:	00f42a23          	sw	a5,20(s0)
    bffc:	00c12783          	lw	a5,12(sp)
    c000:	02078263          	beqz	a5,c024 <__smakebuf_r+0xe0>
    c004:	00e41583          	lh	a1,14(s0)
    c008:	00090513          	mv	a0,s2
    c00c:	170000ef          	jal	ra,c17c <_isatty_r>
    c010:	00050a63          	beqz	a0,c024 <__smakebuf_r+0xe0>
    c014:	00c45783          	lhu	a5,12(s0)
    c018:	ffc7f793          	andi	a5,a5,-4
    c01c:	0017e793          	ori	a5,a5,1
    c020:	00f41623          	sh	a5,12(s0)
    c024:	00c45503          	lhu	a0,12(s0)
    c028:	00a4e4b3          	or	s1,s1,a0
    c02c:	00941623          	sh	s1,12(s0)
    c030:	f4dff06f          	j	bf7c <__smakebuf_r+0x38>

0000c034 <__ascii_mbtowc>:
    c034:	02059a63          	bnez	a1,c068 <__ascii_mbtowc+0x34>
    c038:	ff010113          	addi	sp,sp,-16
    c03c:	00c10593          	addi	a1,sp,12
    c040:	00000513          	li	a0,0
    c044:	00060e63          	beqz	a2,c060 <__ascii_mbtowc+0x2c>
    c048:	ffe00513          	li	a0,-2
    c04c:	00068a63          	beqz	a3,c060 <__ascii_mbtowc+0x2c>
    c050:	00064783          	lbu	a5,0(a2)
    c054:	00f5a023          	sw	a5,0(a1)
    c058:	00064503          	lbu	a0,0(a2)
    c05c:	00a03533          	snez	a0,a0
    c060:	01010113          	addi	sp,sp,16
    c064:	00008067          	ret
    c068:	00000513          	li	a0,0
    c06c:	02060063          	beqz	a2,c08c <__ascii_mbtowc+0x58>
    c070:	ffe00513          	li	a0,-2
    c074:	00068c63          	beqz	a3,c08c <__ascii_mbtowc+0x58>
    c078:	00064783          	lbu	a5,0(a2)
    c07c:	00f5a023          	sw	a5,0(a1)
    c080:	00064503          	lbu	a0,0(a2)
    c084:	00a03533          	snez	a0,a0
    c088:	00008067          	ret
    c08c:	00008067          	ret

0000c090 <_read_r>:
    c090:	ff010113          	addi	sp,sp,-16
    c094:	00812423          	sw	s0,8(sp)
    c098:	00912223          	sw	s1,4(sp)
    c09c:	00050413          	mv	s0,a0
    c0a0:	0000d4b7          	lui	s1,0xd
    c0a4:	00058513          	mv	a0,a1
    c0a8:	00060593          	mv	a1,a2
    c0ac:	00068613          	mv	a2,a3
    c0b0:	00112623          	sw	ra,12(sp)
    c0b4:	0404a823          	sw	zero,80(s1) # d050 <errno>
    c0b8:	c90f90ef          	jal	ra,5548 <_read>
    c0bc:	fff00793          	li	a5,-1
    c0c0:	00f51863          	bne	a0,a5,c0d0 <_read_r+0x40>
    c0c4:	0504a783          	lw	a5,80(s1)
    c0c8:	00078463          	beqz	a5,c0d0 <_read_r+0x40>
    c0cc:	00f42023          	sw	a5,0(s0)
    c0d0:	00c12083          	lw	ra,12(sp)
    c0d4:	00812403          	lw	s0,8(sp)
    c0d8:	00412483          	lw	s1,4(sp)
    c0dc:	01010113          	addi	sp,sp,16
    c0e0:	00008067          	ret

0000c0e4 <__ascii_wctomb>:
    c0e4:	02058463          	beqz	a1,c10c <__ascii_wctomb+0x28>
    c0e8:	0ff00793          	li	a5,255
    c0ec:	00c7fa63          	bgeu	a5,a2,c100 <__ascii_wctomb+0x1c>
    c0f0:	08a00793          	li	a5,138
    c0f4:	00f52023          	sw	a5,0(a0)
    c0f8:	fff00513          	li	a0,-1
    c0fc:	00008067          	ret
    c100:	00c58023          	sb	a2,0(a1)
    c104:	00100513          	li	a0,1
    c108:	00008067          	ret
    c10c:	00000513          	li	a0,0
    c110:	00008067          	ret

0000c114 <abort>:
    c114:	ff010113          	addi	sp,sp,-16
    c118:	00600513          	li	a0,6
    c11c:	00112623          	sw	ra,12(sp)
    c120:	158000ef          	jal	ra,c278 <raise>
    c124:	00100513          	li	a0,1
    c128:	c70f90ef          	jal	ra,5598 <_exit>

0000c12c <_fstat_r>:
    c12c:	ff010113          	addi	sp,sp,-16
    c130:	00812423          	sw	s0,8(sp)
    c134:	00912223          	sw	s1,4(sp)
    c138:	00050413          	mv	s0,a0
    c13c:	0000d4b7          	lui	s1,0xd
    c140:	00058513          	mv	a0,a1
    c144:	00060593          	mv	a1,a2
    c148:	00112623          	sw	ra,12(sp)
    c14c:	0404a823          	sw	zero,80(s1) # d050 <errno>
    c150:	c38f90ef          	jal	ra,5588 <_fstat>
    c154:	fff00793          	li	a5,-1
    c158:	00f51863          	bne	a0,a5,c168 <_fstat_r+0x3c>
    c15c:	0504a783          	lw	a5,80(s1)
    c160:	00078463          	beqz	a5,c168 <_fstat_r+0x3c>
    c164:	00f42023          	sw	a5,0(s0)
    c168:	00c12083          	lw	ra,12(sp)
    c16c:	00812403          	lw	s0,8(sp)
    c170:	00412483          	lw	s1,4(sp)
    c174:	01010113          	addi	sp,sp,16
    c178:	00008067          	ret

0000c17c <_isatty_r>:
    c17c:	ff010113          	addi	sp,sp,-16
    c180:	00812423          	sw	s0,8(sp)
    c184:	00912223          	sw	s1,4(sp)
    c188:	00050413          	mv	s0,a0
    c18c:	0000d4b7          	lui	s1,0xd
    c190:	00058513          	mv	a0,a1
    c194:	00112623          	sw	ra,12(sp)
    c198:	0404a823          	sw	zero,80(s1) # d050 <errno>
    c19c:	bd4f90ef          	jal	ra,5570 <_isatty>
    c1a0:	fff00793          	li	a5,-1
    c1a4:	00f51863          	bne	a0,a5,c1b4 <_isatty_r+0x38>
    c1a8:	0504a783          	lw	a5,80(s1)
    c1ac:	00078463          	beqz	a5,c1b4 <_isatty_r+0x38>
    c1b0:	00f42023          	sw	a5,0(s0)
    c1b4:	00c12083          	lw	ra,12(sp)
    c1b8:	00812403          	lw	s0,8(sp)
    c1bc:	00412483          	lw	s1,4(sp)
    c1c0:	01010113          	addi	sp,sp,16
    c1c4:	00008067          	ret

0000c1c8 <_raise_r>:
    c1c8:	fe010113          	addi	sp,sp,-32
    c1cc:	00812c23          	sw	s0,24(sp)
    c1d0:	00112e23          	sw	ra,28(sp)
    c1d4:	01f00793          	li	a5,31
    c1d8:	00050413          	mv	s0,a0
    c1dc:	02b7f063          	bgeu	a5,a1,c1fc <_raise_r+0x34>
    c1e0:	01600793          	li	a5,22
    c1e4:	00f52023          	sw	a5,0(a0)
    c1e8:	fff00513          	li	a0,-1
    c1ec:	01c12083          	lw	ra,28(sp)
    c1f0:	01812403          	lw	s0,24(sp)
    c1f4:	02010113          	addi	sp,sp,32
    c1f8:	00008067          	ret
    c1fc:	04452783          	lw	a5,68(a0)
    c200:	00058613          	mv	a2,a1
    c204:	00078a63          	beqz	a5,c218 <_raise_r+0x50>
    c208:	00259713          	slli	a4,a1,0x2
    c20c:	00e787b3          	add	a5,a5,a4
    c210:	0007a703          	lw	a4,0(a5)
    c214:	02071663          	bnez	a4,c240 <_raise_r+0x78>
    c218:	00040513          	mv	a0,s0
    c21c:	00c12623          	sw	a2,12(sp)
    c220:	0b8000ef          	jal	ra,c2d8 <_getpid_r>
    c224:	00050593          	mv	a1,a0
    c228:	00040513          	mv	a0,s0
    c22c:	01812403          	lw	s0,24(sp)
    c230:	00c12603          	lw	a2,12(sp)
    c234:	01c12083          	lw	ra,28(sp)
    c238:	02010113          	addi	sp,sp,32
    c23c:	04c0006f          	j	c288 <_kill_r>
    c240:	00100693          	li	a3,1
    c244:	00000513          	li	a0,0
    c248:	fad702e3          	beq	a4,a3,c1ec <_raise_r+0x24>
    c24c:	fff00693          	li	a3,-1
    c250:	00d71a63          	bne	a4,a3,c264 <_raise_r+0x9c>
    c254:	01600793          	li	a5,22
    c258:	00f42023          	sw	a5,0(s0)
    c25c:	00100513          	li	a0,1
    c260:	f8dff06f          	j	c1ec <_raise_r+0x24>
    c264:	00058513          	mv	a0,a1
    c268:	0007a023          	sw	zero,0(a5)
    c26c:	000700e7          	jalr	a4 # ffffe000 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffffe001>
    c270:	00000513          	li	a0,0
    c274:	f79ff06f          	j	c1ec <_raise_r+0x24>

0000c278 <raise>:
    c278:	0000f7b7          	lui	a5,0xf
    c27c:	00050593          	mv	a1,a0
    c280:	1387a503          	lw	a0,312(a5) # f138 <_impure_ptr>
    c284:	f45ff06f          	j	c1c8 <_raise_r>

0000c288 <_kill_r>:
    c288:	ff010113          	addi	sp,sp,-16
    c28c:	00812423          	sw	s0,8(sp)
    c290:	00912223          	sw	s1,4(sp)
    c294:	00050413          	mv	s0,a0
    c298:	0000d4b7          	lui	s1,0xd
    c29c:	00058513          	mv	a0,a1
    c2a0:	00060593          	mv	a1,a2
    c2a4:	00112623          	sw	ra,12(sp)
    c2a8:	0404a823          	sw	zero,80(s1) # d050 <errno>
    c2ac:	accf90ef          	jal	ra,5578 <_kill>
    c2b0:	fff00793          	li	a5,-1
    c2b4:	00f51863          	bne	a0,a5,c2c4 <_kill_r+0x3c>
    c2b8:	0504a783          	lw	a5,80(s1)
    c2bc:	00078463          	beqz	a5,c2c4 <_kill_r+0x3c>
    c2c0:	00f42023          	sw	a5,0(s0)
    c2c4:	00c12083          	lw	ra,12(sp)
    c2c8:	00812403          	lw	s0,8(sp)
    c2cc:	00412483          	lw	s1,4(sp)
    c2d0:	01010113          	addi	sp,sp,16
    c2d4:	00008067          	ret

0000c2d8 <_getpid_r>:
    c2d8:	aa8f906f          	j	5580 <_getpid>
