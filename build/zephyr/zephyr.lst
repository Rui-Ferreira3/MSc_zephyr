
zephyr.elf:     file format elf32-littleriscv


Disassembly of section vector:

00000000 <__start>:

	/*
	 * Set mtvec (Machine Trap-Vector Base-Address Register)
	 * to __irq_wrapper.
	 */
	la t0, __irq_wrapper
   0:	00000297          	auipc	t0,0x0
   4:	03028293          	addi	t0,t0,48 # 30 <__irq_wrapper>
	csrw mtvec, t0
   8:	30529073          	csrw	mtvec,t0
	/*
	* To avoid having to hardcode the main clock frequency,
	* we read the actual value from register 0x8000103c
	* and store to z_clock_hw_cycles_per_sec
	*/
	li	t0, 0x80001000
   c:	800012b7          	lui	t0,0x80001
	lw	t1, 0x3c(t0)
  10:	03c2a303          	lw	t1,60(t0) # 8000103c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000103d>
	la	t0, z_clock_hw_cycles_per_sec
  14:	00213297          	auipc	t0,0x213
  18:	78028293          	addi	t0,t0,1920 # 213794 <z_clock_hw_cycles_per_sec>
	sw	t1, 0(t0)
  1c:	0062a023          	sw	t1,0(t0)

	/* Jump to __initialize */
	tail __initialize
  20:	3500506f          	j	5370 <__initialize>

Disassembly of section exceptions:

00000030 <__irq_wrapper>:
	 * Save caller-saved registers on current thread stack.
	 * NOTE: need to be updated to account for floating-point registers
	 * floating-point registers should be accounted for when corresponding
	 * config variable is set
	 */
	STORE_CALLER_SAVED()
  30:	fb010113          	addi	sp,sp,-80
  34:	00112023          	sw	ra,0(sp)
  38:	00412223          	sw	tp,4(sp)
  3c:	00512423          	sw	t0,8(sp)
  40:	00612623          	sw	t1,12(sp)
  44:	00712823          	sw	t2,16(sp)
  48:	01c12a23          	sw	t3,20(sp)
  4c:	01d12c23          	sw	t4,24(sp)
  50:	01e12e23          	sw	t5,28(sp)
  54:	03f12023          	sw	t6,32(sp)
  58:	02a12223          	sw	a0,36(sp)
  5c:	02b12423          	sw	a1,40(sp)
  60:	02c12623          	sw	a2,44(sp)
  64:	02d12823          	sw	a3,48(sp)
  68:	02e12a23          	sw	a4,52(sp)
  6c:	02f12c23          	sw	a5,56(sp)
  70:	03012e23          	sw	a6,60(sp)
  74:	05112023          	sw	a7,64(sp)

skip_store_fp_caller_saved:
#endif /* CONFIG_FPU && CONFIG_FPU_SHARING */

	/* Save MEPC register */
	csrr t0, mepc
  78:	341022f3          	csrr	t0,mepc
	RV_OP_STOREREG t0, __z_arch_esf_t_mepc_OFFSET(sp)
  7c:	04512223          	sw	t0,68(sp)

	/* Save SOC-specific MSTATUS register */
	csrr t0, mstatus
  80:	300022f3          	csrr	t0,mstatus
	RV_OP_STOREREG t0, __z_arch_esf_t_mstatus_OFFSET(sp)
  84:	04512423          	sw	t0,72(sp)
	 * SOCs (like pulpino or riscv-qemu), the MSB is never set to indicate
	 * interrupt. Hence, check for interrupt/exception via the __soc_is_irq
	 * function (that needs to be implemented by each SOC). The result is
	 * returned via register a0 (1: interrupt, 0 exception)
	 */
	jal ra, __soc_is_irq
  88:	228000ef          	jal	ra,2b0 <__soc_is_irq>

	/* If a0 != 0, jump to is_interrupt */
	addi t1, x0, 0
  8c:	00000313          	li	t1,0
	bnez a0, is_interrupt
  90:	02051e63          	bnez	a0,cc <is_interrupt>
	/*
	 * If the exception is the result of an ECALL, check whether to
	 * perform a context-switch or an IRQ offload. Otherwise call _Fault
	 * to report the exception.
	 */
	csrr t0, mcause
  94:	342022f3          	csrr	t0,mcause
	li t2, SOC_MCAUSE_EXP_MASK
  98:	800003b7          	lui	t2,0x80000
  9c:	fff38393          	addi	t2,t2,-1 # 7fffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000000>
	and t0, t0, t2
  a0:	0072f2b3          	and	t0,t0,t2
	li t1, SOC_MCAUSE_ECALL_EXP
  a4:	00b00313          	li	t1,11

	/*
	 * If mcause == SOC_MCAUSE_ECALL_EXP, handle system call from
	 * kernel thread.
	 */
	beq t0, t1, is_kernel_syscall
  a8:	00628a63          	beq	t0,t1,bc <is_kernel_syscall>
	 * Stack pointer is pointing to a z_arch_esf_t structure, pass it
	 * to _Fault (via register a0).
	 * If _Fault shall return, set return address to
	 * no_reschedule to restore stack.
	 */
	addi a0, sp, 0
  ac:	00010513          	mv	a0,sp
	RV_OP_LOADREG t1, _kernel_offset_to_current(t0)
	RV_OP_LOADREG t0, _thread_offset_to_priv_stack_start(t1)
	RV_OP_STOREREG sp, _thread_offset_to_user_sp(t1) /* Update user SP */
	addi sp, t0, CONFIG_PRIVILEGED_STACK_SIZE
#else
	la ra, no_reschedule
  b0:	00000097          	auipc	ra,0x0
  b4:	19408093          	addi	ra,ra,404 # 244 <no_reschedule>
#endif /* CONFIG_USERSPACE */

	tail _Fault
  b8:	2700506f          	j	5328 <_Fault>

000000bc <is_kernel_syscall>:
	 * again upon exiting the ISR.
	 *
	 * It's safe to always increment by 4, even with compressed
	 * instructions, because the ecall instruction is always 4 bytes.
	 */
	RV_OP_LOADREG t0, __z_arch_esf_t_mepc_OFFSET(sp)
  bc:	04412283          	lw	t0,68(sp)
	addi t0, t0, 4
  c0:	00428293          	addi	t0,t0,4
	RV_OP_STOREREG t0, __z_arch_esf_t_mepc_OFFSET(sp)
  c4:	04512223          	sw	t0,68(sp)
	j z_riscv_user_mode_enter_syscall
#endif /* CONFIG_USERSPACE */
	/*
	 * Go to reschedule to handle context-switch
	 */
	j reschedule
  c8:	0800006f          	j	148 <reschedule>

000000cc <is_interrupt>:
	 * Save current thread stack pointer and switch
	 * stack pointer to interrupt stack.
	 */

	/* Save thread stack pointer to temp register t0 */
	addi t0, sp, 0
  cc:	00010293          	mv	t0,sp

	/* Switch to interrupt stack */
	la t2, _kernel
  d0:	0000f397          	auipc	t2,0xf
  d4:	4a838393          	addi	t2,t2,1192 # f578 <_kernel>
	RV_OP_LOADREG sp, _kernel_offset_to_irq_stack(t2)
  d8:	0043a103          	lw	sp,4(t2)

	/*
	 * Save thread stack pointer on interrupt stack
	 * In RISC-V, stack pointer needs to be 16-byte aligned
	 */
	addi sp, sp, -16
  dc:	ff010113          	addi	sp,sp,-16
	RV_OP_STOREREG t0, 0x00(sp)
  e0:	00512023          	sw	t0,0(sp)

000000e4 <on_irq_stack>:
	la t2, _kernel
#endif /* !CONFIG_USERSPACE && !CONFIG_PMP_STACK_GUARD */

on_irq_stack:
	/* Increment _kernel.cpus[0].nested variable */
	lw t3, _kernel_offset_to_nested(t2)
  e4:	0003ae03          	lw	t3,0(t2)
	addi t3, t3, 1
  e8:	001e0e13          	addi	t3,t3,1
	sw t3, _kernel_offset_to_nested(t2)
  ec:	01c3a023          	sw	t3,0(t2)
#ifdef CONFIG_TRACING_ISR
	call sys_trace_isr_enter
#endif

	/* Get IRQ causing interrupt */
	csrr a0, mcause
  f0:	34202573          	csrr	a0,mcause
	li t0, SOC_MCAUSE_EXP_MASK
  f4:	800002b7          	lui	t0,0x80000
  f8:	fff28293          	addi	t0,t0,-1 # 7fffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000000>
	and a0, a0, t0
  fc:	00557533          	and	a0,a0,t0

	/*
	 * Clear pending IRQ generating the interrupt at SOC level
	 * Pass IRQ number to __soc_handle_irq via register a0
	 */
	jal ra, __soc_handle_irq
 100:	1a0000ef          	jal	ra,2a0 <__soc_handle_irq>

	/*
	 * Call corresponding registered function in _sw_isr_table.
	 * (table is 2-word wide, we should shift index accordingly)
	 */
	la t0, _sw_isr_table
 104:	0000c297          	auipc	t0,0xc
 108:	53c28293          	addi	t0,t0,1340 # c640 <_sw_isr_table>
	slli a0, a0, (RV_REGSHIFT + 1)
 10c:	00351513          	slli	a0,a0,0x3
	add t0, t0, a0
 110:	00a282b3          	add	t0,t0,a0

	/* Load argument in a0 register */
	RV_OP_LOADREG a0, 0x00(t0)
 114:	0002a503          	lw	a0,0(t0)

	/* Load ISR function address in register t1 */
	RV_OP_LOADREG t1, RV_REGSIZE(t0)
 118:	0042a303          	lw	t1,4(t0)

	/* Call ISR function */
	jalr ra, t1
 11c:	000300e7          	jalr	t1

00000120 <on_thread_stack>:

on_thread_stack:
	/* Get reference to _kernel */
	la t1, _kernel
 120:	0000f317          	auipc	t1,0xf
 124:	45830313          	addi	t1,t1,1112 # f578 <_kernel>

	/* Decrement _kernel.cpus[0].nested variable */
	lw t2, _kernel_offset_to_nested(t1)
 128:	00032383          	lw	t2,0(t1)
	addi t2, t2, -1
 12c:	fff38393          	addi	t2,t2,-1
	sw t2, _kernel_offset_to_nested(t1)
 130:	00732023          	sw	t2,0(t1)

#if !defined(CONFIG_USERSPACE) && !defined(CONFIG_PMP_STACK_GUARD)
	/* Restore thread stack pointer */
	RV_OP_LOADREG t0, 0x00(sp)
 134:	00012283          	lw	t0,0(sp)
	addi sp, t0, 0
 138:	00028113          	mv	sp,t0
	/*
	 * Check if we need to perform a reschedule
	 */

	/* Get pointer to _kernel.current */
	RV_OP_LOADREG t2, _kernel_offset_to_current(t1)
 13c:	00832383          	lw	t2,8(t1)

	/*
	 * Check if next thread to schedule is current thread.
	 * If yes do not perform a reschedule
	 */
	RV_OP_LOADREG t3, _kernel_offset_to_ready_q_cache(t1)
 140:	01832e03          	lw	t3,24(t1)
	beq t3, t2, no_reschedule
 144:	107e0063          	beq	t3,t2,244 <no_reschedule>

00000148 <reschedule>:
	 * Note:
	 *   Sometimes this code is execute back-to-back before the target thread
	 *   has a chance to run. If this happens, the current thread and the
	 *   target thread will be the same.
	 */
	la t0, _kernel
 148:	0000f297          	auipc	t0,0xf
 14c:	43028293          	addi	t0,t0,1072 # f578 <_kernel>
	RV_OP_LOADREG t2, _kernel_offset_to_current(t0)
 150:	0082a383          	lw	t2,8(t0)
	RV_OP_LOADREG t3, _kernel_offset_to_ready_q_cache(t0)
 154:	0182ae03          	lw	t3,24(t0)
	beq t2, t3, no_reschedule
 158:	0fc38663          	beq	t2,t3,244 <no_reschedule>

#if CONFIG_INSTRUMENT_THREAD_SWITCHING
	call z_thread_mark_switched_out
#endif
	/* Get reference to _kernel */
	la t0, _kernel
 15c:	0000f297          	auipc	t0,0xf
 160:	41c28293          	addi	t0,t0,1052 # f578 <_kernel>

	/* Get pointer to _kernel.current */
	RV_OP_LOADREG t1, _kernel_offset_to_current(t0)
 164:	0082a303          	lw	t1,8(t0)

	/*
	 * Save callee-saved registers of current kernel thread
	 * prior to handle context-switching
	 */
	STORE_CALLEE_SAVED(t1)
 168:	02832a23          	sw	s0,52(t1)
 16c:	02932c23          	sw	s1,56(t1)
 170:	03232e23          	sw	s2,60(t1)
 174:	05332023          	sw	s3,64(t1)
 178:	05432223          	sw	s4,68(t1)
 17c:	05532423          	sw	s5,72(t1)
 180:	05632623          	sw	s6,76(t1)
 184:	05732823          	sw	s7,80(t1)
 188:	05832a23          	sw	s8,84(t1)
 18c:	05932c23          	sw	s9,88(t1)
 190:	05a32e23          	sw	s10,92(t1)
 194:	07b32023          	sw	s11,96(t1)

00000198 <skip_callee_saved_reg>:

	/*
	 * Save stack pointer of current thread and set the default return value
	 * of z_swap to _k_neg_eagain for the thread.
	 */
	RV_OP_STOREREG sp, _thread_offset_to_sp(t1)
 198:	02232823          	sw	sp,48(t1)
	la t2, _k_neg_eagain
 19c:	0000c397          	auipc	t2,0xc
 1a0:	78838393          	addi	t2,t2,1928 # c924 <_k_neg_eagain>
	lw t3, 0x00(t2)
 1a4:	0003ae03          	lw	t3,0(t2)
	sw t3, _thread_offset_to_swap_return_value(t1)
 1a8:	07c32c23          	sw	t3,120(t1)

	/* Get next thread to schedule. */
	RV_OP_LOADREG t1, _kernel_offset_to_ready_q_cache(t0)
 1ac:	0182a303          	lw	t1,24(t0)

	/*
	 * Set _kernel.current to new thread loaded in t1
	 */
	RV_OP_STOREREG t1, _kernel_offset_to_current(t0)
 1b0:	0062a423          	sw	t1,8(t0)

	/* Switch to new thread stack */
	RV_OP_LOADREG sp, _thread_offset_to_sp(t1)
 1b4:	03032103          	lw	sp,48(t1)

	/* Restore callee-saved registers of new thread */
	LOAD_CALLEE_SAVED(t1)
 1b8:	03432403          	lw	s0,52(t1)
 1bc:	03832483          	lw	s1,56(t1)
 1c0:	03c32903          	lw	s2,60(t1)
 1c4:	04032983          	lw	s3,64(t1)
 1c8:	04432a03          	lw	s4,68(t1)
 1cc:	04832a83          	lw	s5,72(t1)
 1d0:	04c32b03          	lw	s6,76(t1)
 1d4:	05032b83          	lw	s7,80(t1)
 1d8:	05432c03          	lw	s8,84(t1)
 1dc:	05832c83          	lw	s9,88(t1)
 1e0:	05c32d03          	lw	s10,92(t1)
 1e4:	06032d83          	lw	s11,96(t1)
	addi a0, sp, __z_arch_esf_t_soc_context_OFFSET
	jal ra, __soc_restore_context
#endif /* CONFIG_RISCV_SOC_CONTEXT_SAVE */

	/* Restore MEPC register */
	RV_OP_LOADREG t0, __z_arch_esf_t_mepc_OFFSET(sp)
 1e8:	04412283          	lw	t0,68(sp)
	csrw mepc, t0
 1ec:	34129073          	csrw	mepc,t0

	/* Restore SOC-specific MSTATUS register */
	RV_OP_LOADREG t0, __z_arch_esf_t_mstatus_OFFSET(sp)
 1f0:	04812283          	lw	t0,72(sp)
	csrw mstatus, t0
 1f4:	30029073          	csrw	mstatus,t0

skip_load_fp_caller_saved_resched:
#endif /* CONFIG_FPU && CONFIG_FPU_SHARING */

	/* Restore caller-saved registers from thread stack */
	LOAD_CALLER_SAVED()
 1f8:	00012083          	lw	ra,0(sp)
 1fc:	00412203          	lw	tp,4(sp)
 200:	00812283          	lw	t0,8(sp)
 204:	00c12303          	lw	t1,12(sp)
 208:	01012383          	lw	t2,16(sp)
 20c:	01412e03          	lw	t3,20(sp)
 210:	01812e83          	lw	t4,24(sp)
 214:	01c12f03          	lw	t5,28(sp)
 218:	02012f83          	lw	t6,32(sp)
 21c:	02412503          	lw	a0,36(sp)
 220:	02812583          	lw	a1,40(sp)
 224:	02c12603          	lw	a2,44(sp)
 228:	03012683          	lw	a3,48(sp)
 22c:	03412703          	lw	a4,52(sp)
 230:	03812783          	lw	a5,56(sp)
 234:	03c12803          	lw	a6,60(sp)
 238:	04012883          	lw	a7,64(sp)
 23c:	05010113          	addi	sp,sp,80

	/* Call SOC_ERET to exit ISR */
	SOC_ERET
 240:	30200073          	mret

00000244 <no_reschedule>:
	addi a0, sp, __z_arch_esf_t_soc_context_OFFSET
	jal ra, __soc_restore_context
#endif /* CONFIG_RISCV_SOC_CONTEXT_SAVE */

	/* Restore MEPC register */
	RV_OP_LOADREG t0, __z_arch_esf_t_mepc_OFFSET(sp)
 244:	04412283          	lw	t0,68(sp)
	csrw mepc, t0
 248:	34129073          	csrw	mepc,t0

	/* Restore SOC-specific MSTATUS register */
	RV_OP_LOADREG t0, __z_arch_esf_t_mstatus_OFFSET(sp)
 24c:	04812283          	lw	t0,72(sp)
	csrw mstatus, t0
 250:	30029073          	csrw	mstatus,t0

skip_load_fp_caller_saved:
#endif /* CONFIG_FPU && CONFIG_FPU_SHARING */

	/* Restore caller-saved registers from thread stack */
	LOAD_CALLER_SAVED()
 254:	00012083          	lw	ra,0(sp)
 258:	00412203          	lw	tp,4(sp)
 25c:	00812283          	lw	t0,8(sp)
 260:	00c12303          	lw	t1,12(sp)
 264:	01012383          	lw	t2,16(sp)
 268:	01412e03          	lw	t3,20(sp)
 26c:	01812e83          	lw	t4,24(sp)
 270:	01c12f03          	lw	t5,28(sp)
 274:	02012f83          	lw	t6,32(sp)
 278:	02412503          	lw	a0,36(sp)
 27c:	02812583          	lw	a1,40(sp)
 280:	02c12603          	lw	a2,44(sp)
 284:	03012683          	lw	a3,48(sp)
 288:	03412703          	lw	a4,52(sp)
 28c:	03812783          	lw	a5,56(sp)
 290:	03c12803          	lw	a6,60(sp)
 294:	04012883          	lw	a7,64(sp)
 298:	05010113          	addi	sp,sp,80

#ifdef CONFIG_PMP_STACK_GUARD
	csrrw sp, mscratch, sp
#endif /* CONFIG_PMP_STACK_GUARD */
	/* Call SOC_ERET to exit ISR */
	SOC_ERET
 29c:	30200073          	mret

000002a0 <__soc_handle_irq>:
 * SOC-specific function to handle pending IRQ number generating the interrupt.
 * Exception number is given as parameter via register a0.
 */
SECTION_FUNC(exception.other, __soc_handle_irq)
	/* Clear exception number from CSR mip register */
	li t1, 1
 2a0:	00100313          	li	t1,1
	sll t0, t1, a0
 2a4:	00a312b3          	sll	t0,t1,a0
	csrrc t1, mip, t0
 2a8:	3442b373          	csrrc	t1,mip,t0

	/* Return */
	jalr x0, ra
 2ac:	00008067          	ret

000002b0 <__soc_is_irq>:
 * return 1 (interrupt) or 0 (exception)
 *
 */
SECTION_FUNC(exception.other, __soc_is_irq)
	/* Read mcause and check if interrupt bit is set */
	csrr t0, mcause
 2b0:	342022f3          	csrr	t0,mcause
	li t1, SOC_MCAUSE_IRQ_MASK
 2b4:	80000337          	lui	t1,0x80000
	and t0, t0, t1
 2b8:	0062f2b3          	and	t0,t0,t1

	/* If interrupt bit is not set, return with 0 */
	addi a0, x0, 0
 2bc:	00000513          	li	a0,0
	beqz t0, not_interrupt
 2c0:	00028463          	beqz	t0,2c8 <not_interrupt>
	addi a0, a0, 1
 2c4:	00150513          	addi	a0,a0,1

000002c8 <not_interrupt>:

not_interrupt:
	/* return */
	jalr x0, ra
 2c8:	00008067          	ret

000002cc <arch_swap>:
 * key is stored in a0 register
 */
SECTION_FUNC(exception.other, arch_swap)

	/* Make a system call to perform context switch */
	ecall
 2cc:	00000073          	ecall
	 * Prior to unlocking irq, load return value of
	 * arch_swap to temp register t2 (from
	 * _thread_offset_to_swap_return_value). Normally, it should be -EAGAIN,
	 * unless someone has previously called arch_thread_return_value_set(..).
	 */
	la t0, _kernel
 2d0:	0000f297          	auipc	t0,0xf
 2d4:	2a828293          	addi	t0,t0,680 # f578 <_kernel>

	/* Get pointer to _kernel.current */
	RV_OP_LOADREG t1, _kernel_offset_to_current(t0)
 2d8:	0082a303          	lw	t1,8(t0)

	/* Load return value of arch_swap function in temp register t2 */
	lw t2, _thread_offset_to_swap_return_value(t1)
 2dc:	07832383          	lw	t2,120(t1) # 80000078 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000079>

	/*
	 * Unlock irq, following IRQ lock state in a0 register.
	 * Use atomic instruction csrrs to do so.
	 */
	andi a0, a0, MSTATUS_IEN
 2e0:	00857513          	andi	a0,a0,8
	csrrs t0, mstatus, a0
 2e4:	300522f3          	csrrs	t0,mstatus,a0

	/* Set value of return register a0 to value of register t2 */
	addi a0, t2, 0
 2e8:	00038513          	mv	a0,t2

	/* Return */
	jalr x0, ra
 2ec:	00008067          	ret

Disassembly of section text:

000002f0 <__clzsi2>:
     2f0:	000107b7          	lui	a5,0x10
     2f4:	02f57a63          	bgeu	a0,a5,328 <__clzsi2+0x38>
     2f8:	0ff00793          	li	a5,255
     2fc:	00a7b7b3          	sltu	a5,a5,a0
     300:	00379793          	slli	a5,a5,0x3
     304:	0000d737          	lui	a4,0xd
     308:	02000693          	li	a3,32
     30c:	40f686b3          	sub	a3,a3,a5
     310:	00f55533          	srl	a0,a0,a5
     314:	92c70793          	addi	a5,a4,-1748 # c92c <__clz_tab>
     318:	00a78533          	add	a0,a5,a0
     31c:	00054503          	lbu	a0,0(a0)
     320:	40a68533          	sub	a0,a3,a0
     324:	00008067          	ret
     328:	01000737          	lui	a4,0x1000
     32c:	01000793          	li	a5,16
     330:	fce56ae3          	bltu	a0,a4,304 <__clzsi2+0x14>
     334:	01800793          	li	a5,24
     338:	fcdff06f          	j	304 <__clzsi2+0x14>

0000033c <__udivdi3>:
     33c:	00050893          	mv	a7,a0
     340:	00058793          	mv	a5,a1
     344:	00060813          	mv	a6,a2
     348:	00068513          	mv	a0,a3
     34c:	00088313          	mv	t1,a7
     350:	28069463          	bnez	a3,5d8 <CONFIG_MAIN_STACK_SIZE+0x1d8>
     354:	0000d6b7          	lui	a3,0xd
     358:	92c68693          	addi	a3,a3,-1748 # c92c <__clz_tab>
     35c:	0ec5f663          	bgeu	a1,a2,448 <CONFIG_MAIN_STACK_SIZE+0x48>
     360:	00010737          	lui	a4,0x10
     364:	0ce67863          	bgeu	a2,a4,434 <CONFIG_MAIN_STACK_SIZE+0x34>
     368:	0ff00713          	li	a4,255
     36c:	00c73733          	sltu	a4,a4,a2
     370:	00371713          	slli	a4,a4,0x3
     374:	00e65533          	srl	a0,a2,a4
     378:	00a686b3          	add	a3,a3,a0
     37c:	0006c683          	lbu	a3,0(a3)
     380:	02000513          	li	a0,32
     384:	00e68733          	add	a4,a3,a4
     388:	40e506b3          	sub	a3,a0,a4
     38c:	00e50c63          	beq	a0,a4,3a4 <__udivdi3+0x68>
     390:	00d795b3          	sll	a1,a5,a3
     394:	00e8d733          	srl	a4,a7,a4
     398:	00d61833          	sll	a6,a2,a3
     39c:	00b765b3          	or	a1,a4,a1
     3a0:	00d89333          	sll	t1,a7,a3
     3a4:	01085893          	srli	a7,a6,0x10
     3a8:	0315d6b3          	divu	a3,a1,a7
     3ac:	01081613          	slli	a2,a6,0x10
     3b0:	01065613          	srli	a2,a2,0x10
     3b4:	01035793          	srli	a5,t1,0x10
     3b8:	0315f733          	remu	a4,a1,a7
     3bc:	00068513          	mv	a0,a3
     3c0:	02d605b3          	mul	a1,a2,a3
     3c4:	01071713          	slli	a4,a4,0x10
     3c8:	00f767b3          	or	a5,a4,a5
     3cc:	00b7fe63          	bgeu	a5,a1,3e8 <__udivdi3+0xac>
     3d0:	010787b3          	add	a5,a5,a6
     3d4:	fff68513          	addi	a0,a3,-1
     3d8:	0107e863          	bltu	a5,a6,3e8 <__udivdi3+0xac>
     3dc:	00b7f663          	bgeu	a5,a1,3e8 <__udivdi3+0xac>
     3e0:	ffe68513          	addi	a0,a3,-2
     3e4:	010787b3          	add	a5,a5,a6
     3e8:	40b787b3          	sub	a5,a5,a1
     3ec:	0317f733          	remu	a4,a5,a7
     3f0:	01031313          	slli	t1,t1,0x10
     3f4:	01035313          	srli	t1,t1,0x10
     3f8:	0317d7b3          	divu	a5,a5,a7
     3fc:	01071713          	slli	a4,a4,0x10
     400:	00676333          	or	t1,a4,t1
     404:	02f606b3          	mul	a3,a2,a5
     408:	00078613          	mv	a2,a5
     40c:	00d37c63          	bgeu	t1,a3,424 <CONFIG_MAIN_STACK_SIZE+0x24>
     410:	00680333          	add	t1,a6,t1
     414:	fff78613          	addi	a2,a5,-1 # ffff <stacks+0xa5f>
     418:	01036663          	bltu	t1,a6,424 <CONFIG_MAIN_STACK_SIZE+0x24>
     41c:	00d37463          	bgeu	t1,a3,424 <CONFIG_MAIN_STACK_SIZE+0x24>
     420:	ffe78613          	addi	a2,a5,-2
     424:	01051513          	slli	a0,a0,0x10
     428:	00c56533          	or	a0,a0,a2
     42c:	00000593          	li	a1,0
     430:	0e40006f          	j	514 <CONFIG_MAIN_STACK_SIZE+0x114>
     434:	01000537          	lui	a0,0x1000
     438:	01000713          	li	a4,16
     43c:	f2a66ce3          	bltu	a2,a0,374 <__udivdi3+0x38>
     440:	01800713          	li	a4,24
     444:	f31ff06f          	j	374 <__udivdi3+0x38>
     448:	00061663          	bnez	a2,454 <CONFIG_MAIN_STACK_SIZE+0x54>
     44c:	00100713          	li	a4,1
     450:	02c75833          	divu	a6,a4,a2
     454:	00010737          	lui	a4,0x10
     458:	0ce87063          	bgeu	a6,a4,518 <CONFIG_MAIN_STACK_SIZE+0x118>
     45c:	0ff00713          	li	a4,255
     460:	01077463          	bgeu	a4,a6,468 <CONFIG_MAIN_STACK_SIZE+0x68>
     464:	00800513          	li	a0,8
     468:	00a85733          	srl	a4,a6,a0
     46c:	00e686b3          	add	a3,a3,a4
     470:	0006c703          	lbu	a4,0(a3)
     474:	02000613          	li	a2,32
     478:	00a70733          	add	a4,a4,a0
     47c:	40e606b3          	sub	a3,a2,a4
     480:	0ae61663          	bne	a2,a4,52c <CONFIG_MAIN_STACK_SIZE+0x12c>
     484:	410787b3          	sub	a5,a5,a6
     488:	00100593          	li	a1,1
     48c:	01085893          	srli	a7,a6,0x10
     490:	01081613          	slli	a2,a6,0x10
     494:	01065613          	srli	a2,a2,0x10
     498:	01035713          	srli	a4,t1,0x10
     49c:	0317f6b3          	remu	a3,a5,a7
     4a0:	0317d7b3          	divu	a5,a5,a7
     4a4:	01069693          	slli	a3,a3,0x10
     4a8:	00e6e733          	or	a4,a3,a4
     4ac:	02f60e33          	mul	t3,a2,a5
     4b0:	00078513          	mv	a0,a5
     4b4:	01c77e63          	bgeu	a4,t3,4d0 <CONFIG_MAIN_STACK_SIZE+0xd0>
     4b8:	01070733          	add	a4,a4,a6
     4bc:	fff78513          	addi	a0,a5,-1
     4c0:	01076863          	bltu	a4,a6,4d0 <CONFIG_MAIN_STACK_SIZE+0xd0>
     4c4:	01c77663          	bgeu	a4,t3,4d0 <CONFIG_MAIN_STACK_SIZE+0xd0>
     4c8:	ffe78513          	addi	a0,a5,-2
     4cc:	01070733          	add	a4,a4,a6
     4d0:	41c70733          	sub	a4,a4,t3
     4d4:	031777b3          	remu	a5,a4,a7
     4d8:	01031313          	slli	t1,t1,0x10
     4dc:	01035313          	srli	t1,t1,0x10
     4e0:	03175733          	divu	a4,a4,a7
     4e4:	01079793          	slli	a5,a5,0x10
     4e8:	0067e333          	or	t1,a5,t1
     4ec:	02e606b3          	mul	a3,a2,a4
     4f0:	00070613          	mv	a2,a4
     4f4:	00d37c63          	bgeu	t1,a3,50c <CONFIG_MAIN_STACK_SIZE+0x10c>
     4f8:	00680333          	add	t1,a6,t1
     4fc:	fff70613          	addi	a2,a4,-1 # ffff <stacks+0xa5f>
     500:	01036663          	bltu	t1,a6,50c <CONFIG_MAIN_STACK_SIZE+0x10c>
     504:	00d37463          	bgeu	t1,a3,50c <CONFIG_MAIN_STACK_SIZE+0x10c>
     508:	ffe70613          	addi	a2,a4,-2
     50c:	01051513          	slli	a0,a0,0x10
     510:	00c56533          	or	a0,a0,a2
     514:	00008067          	ret
     518:	01000737          	lui	a4,0x1000
     51c:	01000513          	li	a0,16
     520:	f4e864e3          	bltu	a6,a4,468 <CONFIG_MAIN_STACK_SIZE+0x68>
     524:	01800513          	li	a0,24
     528:	f41ff06f          	j	468 <CONFIG_MAIN_STACK_SIZE+0x68>
     52c:	00d81833          	sll	a6,a6,a3
     530:	00e7d533          	srl	a0,a5,a4
     534:	00d89333          	sll	t1,a7,a3
     538:	00d797b3          	sll	a5,a5,a3
     53c:	00e8d733          	srl	a4,a7,a4
     540:	01085893          	srli	a7,a6,0x10
     544:	00f76633          	or	a2,a4,a5
     548:	03157733          	remu	a4,a0,a7
     54c:	01081793          	slli	a5,a6,0x10
     550:	0107d793          	srli	a5,a5,0x10
     554:	01065593          	srli	a1,a2,0x10
     558:	03155533          	divu	a0,a0,a7
     55c:	01071713          	slli	a4,a4,0x10
     560:	00b76733          	or	a4,a4,a1
     564:	02a786b3          	mul	a3,a5,a0
     568:	00050593          	mv	a1,a0
     56c:	00d77e63          	bgeu	a4,a3,588 <CONFIG_MAIN_STACK_SIZE+0x188>
     570:	01070733          	add	a4,a4,a6
     574:	fff50593          	addi	a1,a0,-1 # ffffff <__data_region_end+0xdec7df>
     578:	01076863          	bltu	a4,a6,588 <CONFIG_MAIN_STACK_SIZE+0x188>
     57c:	00d77663          	bgeu	a4,a3,588 <CONFIG_MAIN_STACK_SIZE+0x188>
     580:	ffe50593          	addi	a1,a0,-2
     584:	01070733          	add	a4,a4,a6
     588:	40d706b3          	sub	a3,a4,a3
     58c:	0316f733          	remu	a4,a3,a7
     590:	01061613          	slli	a2,a2,0x10
     594:	01065613          	srli	a2,a2,0x10
     598:	0316d6b3          	divu	a3,a3,a7
     59c:	01071713          	slli	a4,a4,0x10
     5a0:	02d78533          	mul	a0,a5,a3
     5a4:	00c767b3          	or	a5,a4,a2
     5a8:	00068713          	mv	a4,a3
     5ac:	00a7fe63          	bgeu	a5,a0,5c8 <CONFIG_MAIN_STACK_SIZE+0x1c8>
     5b0:	010787b3          	add	a5,a5,a6
     5b4:	fff68713          	addi	a4,a3,-1
     5b8:	0107e863          	bltu	a5,a6,5c8 <CONFIG_MAIN_STACK_SIZE+0x1c8>
     5bc:	00a7f663          	bgeu	a5,a0,5c8 <CONFIG_MAIN_STACK_SIZE+0x1c8>
     5c0:	ffe68713          	addi	a4,a3,-2
     5c4:	010787b3          	add	a5,a5,a6
     5c8:	01059593          	slli	a1,a1,0x10
     5cc:	40a787b3          	sub	a5,a5,a0
     5d0:	00e5e5b3          	or	a1,a1,a4
     5d4:	eb9ff06f          	j	48c <CONFIG_MAIN_STACK_SIZE+0x8c>
     5d8:	18d5e663          	bltu	a1,a3,764 <CONFIG_MAIN_STACK_SIZE+0x364>
     5dc:	00010737          	lui	a4,0x10
     5e0:	04e6f463          	bgeu	a3,a4,628 <CONFIG_MAIN_STACK_SIZE+0x228>
     5e4:	0ff00713          	li	a4,255
     5e8:	00d735b3          	sltu	a1,a4,a3
     5ec:	00359593          	slli	a1,a1,0x3
     5f0:	0000d737          	lui	a4,0xd
     5f4:	00b6d533          	srl	a0,a3,a1
     5f8:	92c70713          	addi	a4,a4,-1748 # c92c <__clz_tab>
     5fc:	00a70733          	add	a4,a4,a0
     600:	00074703          	lbu	a4,0(a4)
     604:	02000513          	li	a0,32
     608:	00b70733          	add	a4,a4,a1
     60c:	40e505b3          	sub	a1,a0,a4
     610:	02e51663          	bne	a0,a4,63c <CONFIG_MAIN_STACK_SIZE+0x23c>
     614:	00100513          	li	a0,1
     618:	eef6eee3          	bltu	a3,a5,514 <CONFIG_MAIN_STACK_SIZE+0x114>
     61c:	00c8b533          	sltu	a0,a7,a2
     620:	00154513          	xori	a0,a0,1
     624:	ef1ff06f          	j	514 <CONFIG_MAIN_STACK_SIZE+0x114>
     628:	01000737          	lui	a4,0x1000
     62c:	01000593          	li	a1,16
     630:	fce6e0e3          	bltu	a3,a4,5f0 <CONFIG_MAIN_STACK_SIZE+0x1f0>
     634:	01800593          	li	a1,24
     638:	fb9ff06f          	j	5f0 <CONFIG_MAIN_STACK_SIZE+0x1f0>
     63c:	00e65833          	srl	a6,a2,a4
     640:	00b696b3          	sll	a3,a3,a1
     644:	00d86833          	or	a6,a6,a3
     648:	00e7de33          	srl	t3,a5,a4
     64c:	01085e93          	srli	t4,a6,0x10
     650:	03de76b3          	remu	a3,t3,t4
     654:	00b797b3          	sll	a5,a5,a1
     658:	00e8d733          	srl	a4,a7,a4
     65c:	00b61333          	sll	t1,a2,a1
     660:	00f76633          	or	a2,a4,a5
     664:	01081793          	slli	a5,a6,0x10
     668:	0107d793          	srli	a5,a5,0x10
     66c:	01065713          	srli	a4,a2,0x10
     670:	03de5e33          	divu	t3,t3,t4
     674:	01069693          	slli	a3,a3,0x10
     678:	00e6e733          	or	a4,a3,a4
     67c:	03c78f33          	mul	t5,a5,t3
     680:	000e0513          	mv	a0,t3
     684:	01e77e63          	bgeu	a4,t5,6a0 <CONFIG_MAIN_STACK_SIZE+0x2a0>
     688:	01070733          	add	a4,a4,a6
     68c:	fffe0513          	addi	a0,t3,-1
     690:	01076863          	bltu	a4,a6,6a0 <CONFIG_MAIN_STACK_SIZE+0x2a0>
     694:	01e77663          	bgeu	a4,t5,6a0 <CONFIG_MAIN_STACK_SIZE+0x2a0>
     698:	ffee0513          	addi	a0,t3,-2
     69c:	01070733          	add	a4,a4,a6
     6a0:	41e70733          	sub	a4,a4,t5
     6a4:	03d776b3          	remu	a3,a4,t4
     6a8:	03d75733          	divu	a4,a4,t4
     6ac:	01069693          	slli	a3,a3,0x10
     6b0:	02e78e33          	mul	t3,a5,a4
     6b4:	01061793          	slli	a5,a2,0x10
     6b8:	0107d793          	srli	a5,a5,0x10
     6bc:	00f6e7b3          	or	a5,a3,a5
     6c0:	00070613          	mv	a2,a4
     6c4:	01c7fe63          	bgeu	a5,t3,6e0 <CONFIG_MAIN_STACK_SIZE+0x2e0>
     6c8:	010787b3          	add	a5,a5,a6
     6cc:	fff70613          	addi	a2,a4,-1 # ffffff <__data_region_end+0xdec7df>
     6d0:	0107e863          	bltu	a5,a6,6e0 <CONFIG_MAIN_STACK_SIZE+0x2e0>
     6d4:	01c7f663          	bgeu	a5,t3,6e0 <CONFIG_MAIN_STACK_SIZE+0x2e0>
     6d8:	ffe70613          	addi	a2,a4,-2
     6dc:	010787b3          	add	a5,a5,a6
     6e0:	01051513          	slli	a0,a0,0x10
     6e4:	00010eb7          	lui	t4,0x10
     6e8:	00c56533          	or	a0,a0,a2
     6ec:	fffe8693          	addi	a3,t4,-1 # ffff <stacks+0xa5f>
     6f0:	00d57833          	and	a6,a0,a3
     6f4:	01055613          	srli	a2,a0,0x10
     6f8:	00d376b3          	and	a3,t1,a3
     6fc:	01035313          	srli	t1,t1,0x10
     700:	41c787b3          	sub	a5,a5,t3
     704:	02d80e33          	mul	t3,a6,a3
     708:	02d606b3          	mul	a3,a2,a3
     70c:	010e5713          	srli	a4,t3,0x10
     710:	02680833          	mul	a6,a6,t1
     714:	00d80833          	add	a6,a6,a3
     718:	01070733          	add	a4,a4,a6
     71c:	02660633          	mul	a2,a2,t1
     720:	00d77463          	bgeu	a4,a3,728 <CONFIG_MAIN_STACK_SIZE+0x328>
     724:	01d60633          	add	a2,a2,t4
     728:	01075693          	srli	a3,a4,0x10
     72c:	00c68633          	add	a2,a3,a2
     730:	02c7e663          	bltu	a5,a2,75c <CONFIG_MAIN_STACK_SIZE+0x35c>
     734:	cec79ce3          	bne	a5,a2,42c <CONFIG_MAIN_STACK_SIZE+0x2c>
     738:	000107b7          	lui	a5,0x10
     73c:	fff78793          	addi	a5,a5,-1 # ffff <stacks+0xa5f>
     740:	00f77733          	and	a4,a4,a5
     744:	01071713          	slli	a4,a4,0x10
     748:	00fe7e33          	and	t3,t3,a5
     74c:	00b898b3          	sll	a7,a7,a1
     750:	01c70733          	add	a4,a4,t3
     754:	00000593          	li	a1,0
     758:	dae8fee3          	bgeu	a7,a4,514 <CONFIG_MAIN_STACK_SIZE+0x114>
     75c:	fff50513          	addi	a0,a0,-1
     760:	ccdff06f          	j	42c <CONFIG_MAIN_STACK_SIZE+0x2c>
     764:	00000593          	li	a1,0
     768:	00000513          	li	a0,0
     76c:	da9ff06f          	j	514 <CONFIG_MAIN_STACK_SIZE+0x114>

00000770 <__umoddi3>:
     770:	00050e93          	mv	t4,a0
     774:	00058313          	mv	t1,a1
     778:	00060813          	mv	a6,a2
     77c:	00068793          	mv	a5,a3
     780:	22069a63          	bnez	a3,9b4 <CONFIG_ISR_STACK_SIZE+0x1b4>
     784:	0000d737          	lui	a4,0xd
     788:	92c70713          	addi	a4,a4,-1748 # c92c <__clz_tab>
     78c:	0cc5fc63          	bgeu	a1,a2,864 <CONFIG_ISR_STACK_SIZE+0x64>
     790:	000106b7          	lui	a3,0x10
     794:	0ad67e63          	bgeu	a2,a3,850 <CONFIG_ISR_STACK_SIZE+0x50>
     798:	0ff00693          	li	a3,255
     79c:	00c6f463          	bgeu	a3,a2,7a4 <__umoddi3+0x34>
     7a0:	00800793          	li	a5,8
     7a4:	00f656b3          	srl	a3,a2,a5
     7a8:	00d70733          	add	a4,a4,a3
     7ac:	00074703          	lbu	a4,0(a4)
     7b0:	00f707b3          	add	a5,a4,a5
     7b4:	02000713          	li	a4,32
     7b8:	40f708b3          	sub	a7,a4,a5
     7bc:	00f70c63          	beq	a4,a5,7d4 <__umoddi3+0x64>
     7c0:	011315b3          	sll	a1,t1,a7
     7c4:	00fed7b3          	srl	a5,t4,a5
     7c8:	01161833          	sll	a6,a2,a7
     7cc:	00b7e5b3          	or	a1,a5,a1
     7d0:	011e9533          	sll	a0,t4,a7
     7d4:	01085693          	srli	a3,a6,0x10
     7d8:	02d5f7b3          	remu	a5,a1,a3
     7dc:	01081613          	slli	a2,a6,0x10
     7e0:	01065613          	srli	a2,a2,0x10
     7e4:	01055713          	srli	a4,a0,0x10
     7e8:	02d5d5b3          	divu	a1,a1,a3
     7ec:	01079793          	slli	a5,a5,0x10
     7f0:	00e7e733          	or	a4,a5,a4
     7f4:	02b605b3          	mul	a1,a2,a1
     7f8:	00b77a63          	bgeu	a4,a1,80c <CONFIG_ISR_STACK_SIZE+0xc>
     7fc:	01070733          	add	a4,a4,a6
     800:	01076663          	bltu	a4,a6,80c <CONFIG_ISR_STACK_SIZE+0xc>
     804:	00b77463          	bgeu	a4,a1,80c <CONFIG_ISR_STACK_SIZE+0xc>
     808:	01070733          	add	a4,a4,a6
     80c:	40b70733          	sub	a4,a4,a1
     810:	02d777b3          	remu	a5,a4,a3
     814:	01051513          	slli	a0,a0,0x10
     818:	01055513          	srli	a0,a0,0x10
     81c:	02d75733          	divu	a4,a4,a3
     820:	01079793          	slli	a5,a5,0x10
     824:	00a7e533          	or	a0,a5,a0
     828:	02e60733          	mul	a4,a2,a4
     82c:	00e57a63          	bgeu	a0,a4,840 <CONFIG_ISR_STACK_SIZE+0x40>
     830:	01050533          	add	a0,a0,a6
     834:	01056663          	bltu	a0,a6,840 <CONFIG_ISR_STACK_SIZE+0x40>
     838:	00e57463          	bgeu	a0,a4,840 <CONFIG_ISR_STACK_SIZE+0x40>
     83c:	01050533          	add	a0,a0,a6
     840:	40e50533          	sub	a0,a0,a4
     844:	01155533          	srl	a0,a0,a7
     848:	00000593          	li	a1,0
     84c:	00008067          	ret
     850:	010006b7          	lui	a3,0x1000
     854:	01000793          	li	a5,16
     858:	f4d666e3          	bltu	a2,a3,7a4 <__umoddi3+0x34>
     85c:	01800793          	li	a5,24
     860:	f45ff06f          	j	7a4 <__umoddi3+0x34>
     864:	00061663          	bnez	a2,870 <CONFIG_ISR_STACK_SIZE+0x70>
     868:	00100693          	li	a3,1
     86c:	02c6d833          	divu	a6,a3,a2
     870:	000106b7          	lui	a3,0x10
     874:	12d87663          	bgeu	a6,a3,9a0 <CONFIG_ISR_STACK_SIZE+0x1a0>
     878:	0ff00693          	li	a3,255
     87c:	0106f463          	bgeu	a3,a6,884 <CONFIG_ISR_STACK_SIZE+0x84>
     880:	00800793          	li	a5,8
     884:	00f856b3          	srl	a3,a6,a5
     888:	00d70733          	add	a4,a4,a3
     88c:	00074603          	lbu	a2,0(a4)
     890:	410305b3          	sub	a1,t1,a6
     894:	00f60633          	add	a2,a2,a5
     898:	02000793          	li	a5,32
     89c:	40c788b3          	sub	a7,a5,a2
     8a0:	08c78663          	beq	a5,a2,92c <CONFIG_ISR_STACK_SIZE+0x12c>
     8a4:	01181833          	sll	a6,a6,a7
     8a8:	00c357b3          	srl	a5,t1,a2
     8ac:	011315b3          	sll	a1,t1,a7
     8b0:	01085313          	srli	t1,a6,0x10
     8b4:	00ced633          	srl	a2,t4,a2
     8b8:	00b66633          	or	a2,a2,a1
     8bc:	01081593          	slli	a1,a6,0x10
     8c0:	0105d593          	srli	a1,a1,0x10
     8c4:	011e9533          	sll	a0,t4,a7
     8c8:	0267d6b3          	divu	a3,a5,t1
     8cc:	0267f733          	remu	a4,a5,t1
     8d0:	01065793          	srli	a5,a2,0x10
     8d4:	02d586b3          	mul	a3,a1,a3
     8d8:	01071713          	slli	a4,a4,0x10
     8dc:	00f76733          	or	a4,a4,a5
     8e0:	00d77a63          	bgeu	a4,a3,8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
     8e4:	01070733          	add	a4,a4,a6
     8e8:	01076663          	bltu	a4,a6,8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
     8ec:	00d77463          	bgeu	a4,a3,8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
     8f0:	01070733          	add	a4,a4,a6
     8f4:	40d706b3          	sub	a3,a4,a3
     8f8:	0266f733          	remu	a4,a3,t1
     8fc:	01061613          	slli	a2,a2,0x10
     900:	01065613          	srli	a2,a2,0x10
     904:	0266d6b3          	divu	a3,a3,t1
     908:	01071713          	slli	a4,a4,0x10
     90c:	02d586b3          	mul	a3,a1,a3
     910:	00c765b3          	or	a1,a4,a2
     914:	00d5fa63          	bgeu	a1,a3,928 <CONFIG_ISR_STACK_SIZE+0x128>
     918:	010585b3          	add	a1,a1,a6
     91c:	0105e663          	bltu	a1,a6,928 <CONFIG_ISR_STACK_SIZE+0x128>
     920:	00d5f463          	bgeu	a1,a3,928 <CONFIG_ISR_STACK_SIZE+0x128>
     924:	010585b3          	add	a1,a1,a6
     928:	40d585b3          	sub	a1,a1,a3
     92c:	01085693          	srli	a3,a6,0x10
     930:	02d5f733          	remu	a4,a1,a3
     934:	01081793          	slli	a5,a6,0x10
     938:	0107d793          	srli	a5,a5,0x10
     93c:	01055613          	srli	a2,a0,0x10
     940:	02d5d5b3          	divu	a1,a1,a3
     944:	01071713          	slli	a4,a4,0x10
     948:	00c76733          	or	a4,a4,a2
     94c:	02b785b3          	mul	a1,a5,a1
     950:	00b77a63          	bgeu	a4,a1,964 <CONFIG_ISR_STACK_SIZE+0x164>
     954:	01070733          	add	a4,a4,a6
     958:	01076663          	bltu	a4,a6,964 <CONFIG_ISR_STACK_SIZE+0x164>
     95c:	00b77463          	bgeu	a4,a1,964 <CONFIG_ISR_STACK_SIZE+0x164>
     960:	01070733          	add	a4,a4,a6
     964:	40b705b3          	sub	a1,a4,a1
     968:	02d5f733          	remu	a4,a1,a3
     96c:	01051513          	slli	a0,a0,0x10
     970:	01055513          	srli	a0,a0,0x10
     974:	02d5d5b3          	divu	a1,a1,a3
     978:	02b785b3          	mul	a1,a5,a1
     97c:	01071793          	slli	a5,a4,0x10
     980:	00a7e533          	or	a0,a5,a0
     984:	00b57a63          	bgeu	a0,a1,998 <CONFIG_ISR_STACK_SIZE+0x198>
     988:	01050533          	add	a0,a0,a6
     98c:	01056663          	bltu	a0,a6,998 <CONFIG_ISR_STACK_SIZE+0x198>
     990:	00b57463          	bgeu	a0,a1,998 <CONFIG_ISR_STACK_SIZE+0x198>
     994:	01050533          	add	a0,a0,a6
     998:	40b50533          	sub	a0,a0,a1
     99c:	ea9ff06f          	j	844 <CONFIG_ISR_STACK_SIZE+0x44>
     9a0:	010006b7          	lui	a3,0x1000
     9a4:	01000793          	li	a5,16
     9a8:	ecd86ee3          	bltu	a6,a3,884 <CONFIG_ISR_STACK_SIZE+0x84>
     9ac:	01800793          	li	a5,24
     9b0:	ed5ff06f          	j	884 <CONFIG_ISR_STACK_SIZE+0x84>
     9b4:	e8d5ece3          	bltu	a1,a3,84c <CONFIG_ISR_STACK_SIZE+0x4c>
     9b8:	000107b7          	lui	a5,0x10
     9bc:	04f6f863          	bgeu	a3,a5,a0c <CONFIG_ISR_STACK_SIZE+0x20c>
     9c0:	0ff00893          	li	a7,255
     9c4:	00d8b7b3          	sltu	a5,a7,a3
     9c8:	00379793          	slli	a5,a5,0x3
     9cc:	0000d737          	lui	a4,0xd
     9d0:	00f6d833          	srl	a6,a3,a5
     9d4:	92c70713          	addi	a4,a4,-1748 # c92c <__clz_tab>
     9d8:	01070733          	add	a4,a4,a6
     9dc:	00074883          	lbu	a7,0(a4)
     9e0:	00f888b3          	add	a7,a7,a5
     9e4:	02000793          	li	a5,32
     9e8:	41178833          	sub	a6,a5,a7
     9ec:	03179a63          	bne	a5,a7,a20 <CONFIG_ISR_STACK_SIZE+0x220>
     9f0:	0066e463          	bltu	a3,t1,9f8 <CONFIG_ISR_STACK_SIZE+0x1f8>
     9f4:	e4ceece3          	bltu	t4,a2,84c <CONFIG_ISR_STACK_SIZE+0x4c>
     9f8:	40ce8533          	sub	a0,t4,a2
     9fc:	40d305b3          	sub	a1,t1,a3
     a00:	00aebeb3          	sltu	t4,t4,a0
     a04:	41d585b3          	sub	a1,a1,t4
     a08:	e45ff06f          	j	84c <CONFIG_ISR_STACK_SIZE+0x4c>
     a0c:	01000737          	lui	a4,0x1000
     a10:	01000793          	li	a5,16
     a14:	fae6ece3          	bltu	a3,a4,9cc <CONFIG_ISR_STACK_SIZE+0x1cc>
     a18:	01800793          	li	a5,24
     a1c:	fb1ff06f          	j	9cc <CONFIG_ISR_STACK_SIZE+0x1cc>
     a20:	011657b3          	srl	a5,a2,a7
     a24:	010696b3          	sll	a3,a3,a6
     a28:	00d7ee33          	or	t3,a5,a3
     a2c:	01135f33          	srl	t5,t1,a7
     a30:	011ed7b3          	srl	a5,t4,a7
     a34:	010e9533          	sll	a0,t4,a6
     a38:	010e5e93          	srli	t4,t3,0x10
     a3c:	010315b3          	sll	a1,t1,a6
     a40:	03df5333          	divu	t1,t5,t4
     a44:	00b7e7b3          	or	a5,a5,a1
     a48:	010e1593          	slli	a1,t3,0x10
     a4c:	0105d593          	srli	a1,a1,0x10
     a50:	0107d713          	srli	a4,a5,0x10
     a54:	01061633          	sll	a2,a2,a6
     a58:	03df76b3          	remu	a3,t5,t4
     a5c:	02658f33          	mul	t5,a1,t1
     a60:	01069693          	slli	a3,a3,0x10
     a64:	00e6e733          	or	a4,a3,a4
     a68:	00030693          	mv	a3,t1
     a6c:	01e77e63          	bgeu	a4,t5,a88 <CONFIG_ISR_STACK_SIZE+0x288>
     a70:	01c70733          	add	a4,a4,t3
     a74:	fff30693          	addi	a3,t1,-1
     a78:	01c76863          	bltu	a4,t3,a88 <CONFIG_ISR_STACK_SIZE+0x288>
     a7c:	01e77663          	bgeu	a4,t5,a88 <CONFIG_ISR_STACK_SIZE+0x288>
     a80:	ffe30693          	addi	a3,t1,-2
     a84:	01c70733          	add	a4,a4,t3
     a88:	41e70733          	sub	a4,a4,t5
     a8c:	03d77333          	remu	t1,a4,t4
     a90:	01079793          	slli	a5,a5,0x10
     a94:	0107d793          	srli	a5,a5,0x10
     a98:	03d75733          	divu	a4,a4,t4
     a9c:	01031313          	slli	t1,t1,0x10
     aa0:	00f36333          	or	t1,t1,a5
     aa4:	02e585b3          	mul	a1,a1,a4
     aa8:	00070793          	mv	a5,a4
     aac:	00b37e63          	bgeu	t1,a1,ac8 <CONFIG_ISR_STACK_SIZE+0x2c8>
     ab0:	01c30333          	add	t1,t1,t3
     ab4:	fff70793          	addi	a5,a4,-1 # ffffff <__data_region_end+0xdec7df>
     ab8:	01c36863          	bltu	t1,t3,ac8 <CONFIG_ISR_STACK_SIZE+0x2c8>
     abc:	00b37663          	bgeu	t1,a1,ac8 <CONFIG_ISR_STACK_SIZE+0x2c8>
     ac0:	ffe70793          	addi	a5,a4,-2
     ac4:	01c30333          	add	t1,t1,t3
     ac8:	01069693          	slli	a3,a3,0x10
     acc:	00010f37          	lui	t5,0x10
     ad0:	00f6e6b3          	or	a3,a3,a5
     ad4:	40b305b3          	sub	a1,t1,a1
     ad8:	ffff0313          	addi	t1,t5,-1 # ffff <stacks+0xa5f>
     adc:	0066feb3          	and	t4,a3,t1
     ae0:	01065713          	srli	a4,a2,0x10
     ae4:	0106d693          	srli	a3,a3,0x10
     ae8:	00667333          	and	t1,a2,t1
     aec:	026e87b3          	mul	a5,t4,t1
     af0:	02668333          	mul	t1,a3,t1
     af4:	02ee8eb3          	mul	t4,t4,a4
     af8:	02e686b3          	mul	a3,a3,a4
     afc:	006e8eb3          	add	t4,t4,t1
     b00:	0107d713          	srli	a4,a5,0x10
     b04:	01d70733          	add	a4,a4,t4
     b08:	00677463          	bgeu	a4,t1,b10 <CONFIG_ISR_STACK_SIZE+0x310>
     b0c:	01e686b3          	add	a3,a3,t5
     b10:	01075313          	srli	t1,a4,0x10
     b14:	00d306b3          	add	a3,t1,a3
     b18:	00010337          	lui	t1,0x10
     b1c:	fff30313          	addi	t1,t1,-1 # ffff <stacks+0xa5f>
     b20:	00677733          	and	a4,a4,t1
     b24:	01071713          	slli	a4,a4,0x10
     b28:	0067f7b3          	and	a5,a5,t1
     b2c:	00f707b3          	add	a5,a4,a5
     b30:	00d5e663          	bltu	a1,a3,b3c <CONFIG_ISR_STACK_SIZE+0x33c>
     b34:	00d59e63          	bne	a1,a3,b50 <CONFIG_ISR_STACK_SIZE+0x350>
     b38:	00f57c63          	bgeu	a0,a5,b50 <CONFIG_ISR_STACK_SIZE+0x350>
     b3c:	40c78633          	sub	a2,a5,a2
     b40:	00c7b7b3          	sltu	a5,a5,a2
     b44:	01c787b3          	add	a5,a5,t3
     b48:	40f686b3          	sub	a3,a3,a5
     b4c:	00060793          	mv	a5,a2
     b50:	40f507b3          	sub	a5,a0,a5
     b54:	00f53533          	sltu	a0,a0,a5
     b58:	40d585b3          	sub	a1,a1,a3
     b5c:	40a585b3          	sub	a1,a1,a0
     b60:	011598b3          	sll	a7,a1,a7
     b64:	0107d533          	srl	a0,a5,a6
     b68:	00a8e533          	or	a0,a7,a0
     b6c:	0105d5b3          	srl	a1,a1,a6
     b70:	cddff06f          	j	84c <CONFIG_ISR_STACK_SIZE+0x4c>

00000b74 <__adddf3>:
     b74:	00100837          	lui	a6,0x100
     b78:	fff80813          	addi	a6,a6,-1 # fffff <digits+0x7525f>
     b7c:	fe010113          	addi	sp,sp,-32
     b80:	00b877b3          	and	a5,a6,a1
     b84:	0145d713          	srli	a4,a1,0x14
     b88:	00d87833          	and	a6,a6,a3
     b8c:	0146d313          	srli	t1,a3,0x14
     b90:	00812c23          	sw	s0,24(sp)
     b94:	00379793          	slli	a5,a5,0x3
     b98:	7ff77413          	andi	s0,a4,2047
     b9c:	01d55713          	srli	a4,a0,0x1d
     ba0:	00381813          	slli	a6,a6,0x3
     ba4:	00912a23          	sw	s1,20(sp)
     ba8:	00f767b3          	or	a5,a4,a5
     bac:	01f5d493          	srli	s1,a1,0x1f
     bb0:	01d65713          	srli	a4,a2,0x1d
     bb4:	7ff37313          	andi	t1,t1,2047
     bb8:	00112e23          	sw	ra,28(sp)
     bbc:	01212823          	sw	s2,16(sp)
     bc0:	01312623          	sw	s3,12(sp)
     bc4:	01f6d693          	srli	a3,a3,0x1f
     bc8:	01076733          	or	a4,a4,a6
     bcc:	00351593          	slli	a1,a0,0x3
     bd0:	00361613          	slli	a2,a2,0x3
     bd4:	40640833          	sub	a6,s0,t1
     bd8:	2cd49863          	bne	s1,a3,ea8 <__adddf3+0x334>
     bdc:	13005063          	blez	a6,cfc <__adddf3+0x188>
     be0:	04031063          	bnez	t1,c20 <__adddf3+0xac>
     be4:	00c766b3          	or	a3,a4,a2
     be8:	70068c63          	beqz	a3,1300 <__adddf3+0x78c>
     bec:	fff80513          	addi	a0,a6,-1
     bf0:	02051063          	bnez	a0,c10 <__adddf3+0x9c>
     bf4:	00c58633          	add	a2,a1,a2
     bf8:	00b63533          	sltu	a0,a2,a1
     bfc:	00e787b3          	add	a5,a5,a4
     c00:	00a787b3          	add	a5,a5,a0
     c04:	00060593          	mv	a1,a2
     c08:	00100413          	li	s0,1
     c0c:	0700006f          	j	c7c <__adddf3+0x108>
     c10:	7ff00693          	li	a3,2047
     c14:	02d81063          	bne	a6,a3,c34 <__adddf3+0xc0>
     c18:	7ff00413          	li	s0,2047
     c1c:	2140006f          	j	e30 <__adddf3+0x2bc>
     c20:	7ff00693          	li	a3,2047
     c24:	20d40663          	beq	s0,a3,e30 <__adddf3+0x2bc>
     c28:	008006b7          	lui	a3,0x800
     c2c:	00d76733          	or	a4,a4,a3
     c30:	00080513          	mv	a0,a6
     c34:	03800693          	li	a3,56
     c38:	0aa6cc63          	blt	a3,a0,cf0 <__adddf3+0x17c>
     c3c:	01f00693          	li	a3,31
     c40:	06a6ce63          	blt	a3,a0,cbc <__adddf3+0x148>
     c44:	02000813          	li	a6,32
     c48:	40a80833          	sub	a6,a6,a0
     c4c:	010716b3          	sll	a3,a4,a6
     c50:	00a658b3          	srl	a7,a2,a0
     c54:	01061633          	sll	a2,a2,a6
     c58:	0116e6b3          	or	a3,a3,a7
     c5c:	00c03633          	snez	a2,a2
     c60:	00c6e633          	or	a2,a3,a2
     c64:	00a75733          	srl	a4,a4,a0
     c68:	00b60633          	add	a2,a2,a1
     c6c:	00b63533          	sltu	a0,a2,a1
     c70:	00f70733          	add	a4,a4,a5
     c74:	00a707b3          	add	a5,a4,a0
     c78:	00060593          	mv	a1,a2
     c7c:	00800737          	lui	a4,0x800
     c80:	00e7f733          	and	a4,a5,a4
     c84:	1a070663          	beqz	a4,e30 <__adddf3+0x2bc>
     c88:	00140413          	addi	s0,s0,1
     c8c:	7ff00713          	li	a4,2047
     c90:	5ce40a63          	beq	s0,a4,1264 <__adddf3+0x6f0>
     c94:	ff800737          	lui	a4,0xff800
     c98:	fff70713          	addi	a4,a4,-1 # ff7fffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xff800000>
     c9c:	00e7f7b3          	and	a5,a5,a4
     ca0:	0015f513          	andi	a0,a1,1
     ca4:	0015d713          	srli	a4,a1,0x1
     ca8:	00a76533          	or	a0,a4,a0
     cac:	01f79593          	slli	a1,a5,0x1f
     cb0:	00a5e5b3          	or	a1,a1,a0
     cb4:	0017d793          	srli	a5,a5,0x1
     cb8:	1780006f          	j	e30 <__adddf3+0x2bc>
     cbc:	fe050693          	addi	a3,a0,-32
     cc0:	02000893          	li	a7,32
     cc4:	00d756b3          	srl	a3,a4,a3
     cc8:	00000813          	li	a6,0
     ccc:	01150863          	beq	a0,a7,cdc <__adddf3+0x168>
     cd0:	04000813          	li	a6,64
     cd4:	40a80533          	sub	a0,a6,a0
     cd8:	00a71833          	sll	a6,a4,a0
     cdc:	00c86633          	or	a2,a6,a2
     ce0:	00c03633          	snez	a2,a2
     ce4:	00c6e633          	or	a2,a3,a2
     ce8:	00000713          	li	a4,0
     cec:	f7dff06f          	j	c68 <__adddf3+0xf4>
     cf0:	00c76633          	or	a2,a4,a2
     cf4:	00c03633          	snez	a2,a2
     cf8:	ff1ff06f          	j	ce8 <__adddf3+0x174>
     cfc:	0e080263          	beqz	a6,de0 <__adddf3+0x26c>
     d00:	40830533          	sub	a0,t1,s0
     d04:	02041e63          	bnez	s0,d40 <__adddf3+0x1cc>
     d08:	00b7e6b3          	or	a3,a5,a1
     d0c:	52068c63          	beqz	a3,1244 <__adddf3+0x6d0>
     d10:	fff50693          	addi	a3,a0,-1
     d14:	00069c63          	bnez	a3,d2c <__adddf3+0x1b8>
     d18:	00c585b3          	add	a1,a1,a2
     d1c:	00e787b3          	add	a5,a5,a4
     d20:	00c5b633          	sltu	a2,a1,a2
     d24:	00c787b3          	add	a5,a5,a2
     d28:	ee1ff06f          	j	c08 <__adddf3+0x94>
     d2c:	7ff00813          	li	a6,2047
     d30:	03051263          	bne	a0,a6,d54 <__adddf3+0x1e0>
     d34:	00070793          	mv	a5,a4
     d38:	00060593          	mv	a1,a2
     d3c:	eddff06f          	j	c18 <__adddf3+0xa4>
     d40:	7ff00693          	li	a3,2047
     d44:	fed308e3          	beq	t1,a3,d34 <__adddf3+0x1c0>
     d48:	008006b7          	lui	a3,0x800
     d4c:	00d7e7b3          	or	a5,a5,a3
     d50:	00050693          	mv	a3,a0
     d54:	03800513          	li	a0,56
     d58:	06d54e63          	blt	a0,a3,dd4 <__adddf3+0x260>
     d5c:	01f00513          	li	a0,31
     d60:	04d54063          	blt	a0,a3,da0 <__adddf3+0x22c>
     d64:	02000813          	li	a6,32
     d68:	40d80833          	sub	a6,a6,a3
     d6c:	01079533          	sll	a0,a5,a6
     d70:	00d5d8b3          	srl	a7,a1,a3
     d74:	010595b3          	sll	a1,a1,a6
     d78:	01156533          	or	a0,a0,a7
     d7c:	00b035b3          	snez	a1,a1
     d80:	00b56533          	or	a0,a0,a1
     d84:	00d7d7b3          	srl	a5,a5,a3
     d88:	00c505b3          	add	a1,a0,a2
     d8c:	00e787b3          	add	a5,a5,a4
     d90:	00c5b633          	sltu	a2,a1,a2
     d94:	00c787b3          	add	a5,a5,a2
     d98:	00030413          	mv	s0,t1
     d9c:	ee1ff06f          	j	c7c <__adddf3+0x108>
     da0:	fe068513          	addi	a0,a3,-32 # 7fffe0 <__data_region_end+0x5ec7c0>
     da4:	02000893          	li	a7,32
     da8:	00a7d833          	srl	a6,a5,a0
     dac:	00000513          	li	a0,0
     db0:	01168863          	beq	a3,a7,dc0 <__adddf3+0x24c>
     db4:	04000513          	li	a0,64
     db8:	40d50533          	sub	a0,a0,a3
     dbc:	00a79533          	sll	a0,a5,a0
     dc0:	00b56533          	or	a0,a0,a1
     dc4:	00a03533          	snez	a0,a0
     dc8:	00a86533          	or	a0,a6,a0
     dcc:	00000793          	li	a5,0
     dd0:	fb9ff06f          	j	d88 <__adddf3+0x214>
     dd4:	00b7e533          	or	a0,a5,a1
     dd8:	00a03533          	snez	a0,a0
     ddc:	ff1ff06f          	j	dcc <__adddf3+0x258>
     de0:	00140693          	addi	a3,s0,1
     de4:	7fe6f513          	andi	a0,a3,2046
     de8:	08051863          	bnez	a0,e78 <__adddf3+0x304>
     dec:	00b7e6b3          	or	a3,a5,a1
     df0:	06041463          	bnez	s0,e58 <__adddf3+0x2e4>
     df4:	46068063          	beqz	a3,1254 <__adddf3+0x6e0>
     df8:	00c766b3          	or	a3,a4,a2
     dfc:	02068a63          	beqz	a3,e30 <__adddf3+0x2bc>
     e00:	00c58633          	add	a2,a1,a2
     e04:	00e787b3          	add	a5,a5,a4
     e08:	00b63533          	sltu	a0,a2,a1
     e0c:	00a787b3          	add	a5,a5,a0
     e10:	00800737          	lui	a4,0x800
     e14:	00e7f733          	and	a4,a5,a4
     e18:	00060593          	mv	a1,a2
     e1c:	00070a63          	beqz	a4,e30 <__adddf3+0x2bc>
     e20:	ff800737          	lui	a4,0xff800
     e24:	fff70713          	addi	a4,a4,-1 # ff7fffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xff800000>
     e28:	00e7f7b3          	and	a5,a5,a4
     e2c:	00100413          	li	s0,1
     e30:	0075f713          	andi	a4,a1,7
     e34:	42070c63          	beqz	a4,126c <__adddf3+0x6f8>
     e38:	00f5f713          	andi	a4,a1,15
     e3c:	00400693          	li	a3,4
     e40:	42d70663          	beq	a4,a3,126c <__adddf3+0x6f8>
     e44:	00458713          	addi	a4,a1,4
     e48:	00b73533          	sltu	a0,a4,a1
     e4c:	00a787b3          	add	a5,a5,a0
     e50:	00070593          	mv	a1,a4
     e54:	4180006f          	j	126c <__adddf3+0x6f8>
     e58:	ec068ee3          	beqz	a3,d34 <__adddf3+0x1c0>
     e5c:	00c76633          	or	a2,a4,a2
     e60:	da060ce3          	beqz	a2,c18 <__adddf3+0xa4>
     e64:	00000493          	li	s1,0
     e68:	004007b7          	lui	a5,0x400
     e6c:	00000593          	li	a1,0
     e70:	7ff00413          	li	s0,2047
     e74:	3f80006f          	j	126c <__adddf3+0x6f8>
     e78:	7ff00513          	li	a0,2047
     e7c:	3ea68263          	beq	a3,a0,1260 <__adddf3+0x6ec>
     e80:	00c58633          	add	a2,a1,a2
     e84:	00b63533          	sltu	a0,a2,a1
     e88:	00e787b3          	add	a5,a5,a4
     e8c:	00a787b3          	add	a5,a5,a0
     e90:	01f79513          	slli	a0,a5,0x1f
     e94:	00165613          	srli	a2,a2,0x1
     e98:	00c565b3          	or	a1,a0,a2
     e9c:	0017d793          	srli	a5,a5,0x1
     ea0:	00068413          	mv	s0,a3
     ea4:	f8dff06f          	j	e30 <__adddf3+0x2bc>
     ea8:	0f005c63          	blez	a6,fa0 <__adddf3+0x42c>
     eac:	08031e63          	bnez	t1,f48 <__adddf3+0x3d4>
     eb0:	00c766b3          	or	a3,a4,a2
     eb4:	44068663          	beqz	a3,1300 <__adddf3+0x78c>
     eb8:	fff80513          	addi	a0,a6,-1
     ebc:	02051063          	bnez	a0,edc <__adddf3+0x368>
     ec0:	40c58633          	sub	a2,a1,a2
     ec4:	00c5b533          	sltu	a0,a1,a2
     ec8:	40e787b3          	sub	a5,a5,a4
     ecc:	40a787b3          	sub	a5,a5,a0
     ed0:	00060593          	mv	a1,a2
     ed4:	00100413          	li	s0,1
     ed8:	0540006f          	j	f2c <__adddf3+0x3b8>
     edc:	7ff00693          	li	a3,2047
     ee0:	d2d80ce3          	beq	a6,a3,c18 <__adddf3+0xa4>
     ee4:	03800693          	li	a3,56
     ee8:	0aa6c663          	blt	a3,a0,f94 <__adddf3+0x420>
     eec:	01f00693          	li	a3,31
     ef0:	06a6c863          	blt	a3,a0,f60 <__adddf3+0x3ec>
     ef4:	02000813          	li	a6,32
     ef8:	40a80833          	sub	a6,a6,a0
     efc:	010716b3          	sll	a3,a4,a6
     f00:	00a658b3          	srl	a7,a2,a0
     f04:	01061633          	sll	a2,a2,a6
     f08:	0116e6b3          	or	a3,a3,a7
     f0c:	00c03633          	snez	a2,a2
     f10:	00c6e633          	or	a2,a3,a2
     f14:	00a75733          	srl	a4,a4,a0
     f18:	40c58633          	sub	a2,a1,a2
     f1c:	00c5b533          	sltu	a0,a1,a2
     f20:	40e78733          	sub	a4,a5,a4
     f24:	40a707b3          	sub	a5,a4,a0
     f28:	00060593          	mv	a1,a2
     f2c:	00800937          	lui	s2,0x800
     f30:	0127f733          	and	a4,a5,s2
     f34:	ee070ee3          	beqz	a4,e30 <__adddf3+0x2bc>
     f38:	fff90913          	addi	s2,s2,-1 # 7fffff <__data_region_end+0x5ec7df>
     f3c:	0127f933          	and	s2,a5,s2
     f40:	00058993          	mv	s3,a1
     f44:	2140006f          	j	1158 <__adddf3+0x5e4>
     f48:	7ff00693          	li	a3,2047
     f4c:	eed402e3          	beq	s0,a3,e30 <__adddf3+0x2bc>
     f50:	008006b7          	lui	a3,0x800
     f54:	00d76733          	or	a4,a4,a3
     f58:	00080513          	mv	a0,a6
     f5c:	f89ff06f          	j	ee4 <__adddf3+0x370>
     f60:	fe050693          	addi	a3,a0,-32
     f64:	02000893          	li	a7,32
     f68:	00d756b3          	srl	a3,a4,a3
     f6c:	00000813          	li	a6,0
     f70:	01150863          	beq	a0,a7,f80 <__adddf3+0x40c>
     f74:	04000813          	li	a6,64
     f78:	40a80533          	sub	a0,a6,a0
     f7c:	00a71833          	sll	a6,a4,a0
     f80:	00c86633          	or	a2,a6,a2
     f84:	00c03633          	snez	a2,a2
     f88:	00c6e633          	or	a2,a3,a2
     f8c:	00000713          	li	a4,0
     f90:	f89ff06f          	j	f18 <__adddf3+0x3a4>
     f94:	00c76633          	or	a2,a4,a2
     f98:	00c03633          	snez	a2,a2
     f9c:	ff1ff06f          	j	f8c <__adddf3+0x418>
     fa0:	0e080863          	beqz	a6,1090 <__adddf3+0x51c>
     fa4:	40830533          	sub	a0,t1,s0
     fa8:	04041263          	bnez	s0,fec <__adddf3+0x478>
     fac:	00b7e833          	or	a6,a5,a1
     fb0:	34080c63          	beqz	a6,1308 <__adddf3+0x794>
     fb4:	fff50813          	addi	a6,a0,-1
     fb8:	00081e63          	bnez	a6,fd4 <__adddf3+0x460>
     fbc:	40b605b3          	sub	a1,a2,a1
     fc0:	40f707b3          	sub	a5,a4,a5
     fc4:	00b63633          	sltu	a2,a2,a1
     fc8:	40c787b3          	sub	a5,a5,a2
     fcc:	00068493          	mv	s1,a3
     fd0:	f05ff06f          	j	ed4 <__adddf3+0x360>
     fd4:	7ff00893          	li	a7,2047
     fd8:	03151463          	bne	a0,a7,1000 <__adddf3+0x48c>
     fdc:	00070793          	mv	a5,a4
     fe0:	00060593          	mv	a1,a2
     fe4:	7ff00413          	li	s0,2047
     fe8:	0d00006f          	j	10b8 <__adddf3+0x544>
     fec:	7ff00813          	li	a6,2047
     ff0:	ff0306e3          	beq	t1,a6,fdc <__adddf3+0x468>
     ff4:	00800837          	lui	a6,0x800
     ff8:	0107e7b3          	or	a5,a5,a6
     ffc:	00050813          	mv	a6,a0
    1000:	03800513          	li	a0,56
    1004:	09054063          	blt	a0,a6,1084 <__adddf3+0x510>
    1008:	01f00513          	li	a0,31
    100c:	05054263          	blt	a0,a6,1050 <__adddf3+0x4dc>
    1010:	02000893          	li	a7,32
    1014:	410888b3          	sub	a7,a7,a6
    1018:	01179533          	sll	a0,a5,a7
    101c:	0105de33          	srl	t3,a1,a6
    1020:	011595b3          	sll	a1,a1,a7
    1024:	01c56533          	or	a0,a0,t3
    1028:	00b035b3          	snez	a1,a1
    102c:	00b56533          	or	a0,a0,a1
    1030:	0107d7b3          	srl	a5,a5,a6
    1034:	40a605b3          	sub	a1,a2,a0
    1038:	40f707b3          	sub	a5,a4,a5
    103c:	00b63633          	sltu	a2,a2,a1
    1040:	40c787b3          	sub	a5,a5,a2
    1044:	00030413          	mv	s0,t1
    1048:	00068493          	mv	s1,a3
    104c:	ee1ff06f          	j	f2c <__adddf3+0x3b8>
    1050:	fe080513          	addi	a0,a6,-32 # 7fffe0 <__data_region_end+0x5ec7c0>
    1054:	02000e13          	li	t3,32
    1058:	00a7d8b3          	srl	a7,a5,a0
    105c:	00000513          	li	a0,0
    1060:	01c80863          	beq	a6,t3,1070 <__adddf3+0x4fc>
    1064:	04000513          	li	a0,64
    1068:	41050533          	sub	a0,a0,a6
    106c:	00a79533          	sll	a0,a5,a0
    1070:	00b56533          	or	a0,a0,a1
    1074:	00a03533          	snez	a0,a0
    1078:	00a8e533          	or	a0,a7,a0
    107c:	00000793          	li	a5,0
    1080:	fb5ff06f          	j	1034 <__adddf3+0x4c0>
    1084:	00b7e533          	or	a0,a5,a1
    1088:	00a03533          	snez	a0,a0
    108c:	ff1ff06f          	j	107c <__adddf3+0x508>
    1090:	00140513          	addi	a0,s0,1
    1094:	7fe57513          	andi	a0,a0,2046
    1098:	08051863          	bnez	a0,1128 <__adddf3+0x5b4>
    109c:	00b7e833          	or	a6,a5,a1
    10a0:	00c76533          	or	a0,a4,a2
    10a4:	06041263          	bnez	s0,1108 <__adddf3+0x594>
    10a8:	00081c63          	bnez	a6,10c0 <__adddf3+0x54c>
    10ac:	26050663          	beqz	a0,1318 <__adddf3+0x7a4>
    10b0:	00070793          	mv	a5,a4
    10b4:	00060593          	mv	a1,a2
    10b8:	00068493          	mv	s1,a3
    10bc:	d75ff06f          	j	e30 <__adddf3+0x2bc>
    10c0:	d60508e3          	beqz	a0,e30 <__adddf3+0x2bc>
    10c4:	40c58833          	sub	a6,a1,a2
    10c8:	0105b8b3          	sltu	a7,a1,a6
    10cc:	40e78533          	sub	a0,a5,a4
    10d0:	41150533          	sub	a0,a0,a7
    10d4:	008008b7          	lui	a7,0x800
    10d8:	011578b3          	and	a7,a0,a7
    10dc:	00088c63          	beqz	a7,10f4 <__adddf3+0x580>
    10e0:	40b605b3          	sub	a1,a2,a1
    10e4:	40f707b3          	sub	a5,a4,a5
    10e8:	00b63633          	sltu	a2,a2,a1
    10ec:	40c787b3          	sub	a5,a5,a2
    10f0:	fc9ff06f          	j	10b8 <__adddf3+0x544>
    10f4:	00a865b3          	or	a1,a6,a0
    10f8:	22058863          	beqz	a1,1328 <__adddf3+0x7b4>
    10fc:	00050793          	mv	a5,a0
    1100:	00080593          	mv	a1,a6
    1104:	d2dff06f          	j	e30 <__adddf3+0x2bc>
    1108:	00081c63          	bnez	a6,1120 <__adddf3+0x5ac>
    110c:	22050263          	beqz	a0,1330 <__adddf3+0x7bc>
    1110:	00070793          	mv	a5,a4
    1114:	00060593          	mv	a1,a2
    1118:	00068493          	mv	s1,a3
    111c:	afdff06f          	j	c18 <__adddf3+0xa4>
    1120:	ae050ce3          	beqz	a0,c18 <__adddf3+0xa4>
    1124:	d41ff06f          	j	e64 <__adddf3+0x2f0>
    1128:	40c589b3          	sub	s3,a1,a2
    112c:	0135b533          	sltu	a0,a1,s3
    1130:	40e78933          	sub	s2,a5,a4
    1134:	40a90933          	sub	s2,s2,a0
    1138:	00800537          	lui	a0,0x800
    113c:	00a97533          	and	a0,s2,a0
    1140:	08050463          	beqz	a0,11c8 <__adddf3+0x654>
    1144:	40b609b3          	sub	s3,a2,a1
    1148:	40f707b3          	sub	a5,a4,a5
    114c:	01363633          	sltu	a2,a2,s3
    1150:	40c78933          	sub	s2,a5,a2
    1154:	00068493          	mv	s1,a3
    1158:	08090263          	beqz	s2,11dc <__adddf3+0x668>
    115c:	00090513          	mv	a0,s2
    1160:	990ff0ef          	jal	ra,2f0 <__clzsi2>
    1164:	ff850713          	addi	a4,a0,-8 # 7ffff8 <__data_region_end+0x5ec7d8>
    1168:	01f00793          	li	a5,31
    116c:	08e7c063          	blt	a5,a4,11ec <__adddf3+0x678>
    1170:	02000793          	li	a5,32
    1174:	40e787b3          	sub	a5,a5,a4
    1178:	00e91933          	sll	s2,s2,a4
    117c:	00f9d7b3          	srl	a5,s3,a5
    1180:	0127e7b3          	or	a5,a5,s2
    1184:	00e995b3          	sll	a1,s3,a4
    1188:	0a874463          	blt	a4,s0,1230 <__adddf3+0x6bc>
    118c:	40870733          	sub	a4,a4,s0
    1190:	00170693          	addi	a3,a4,1
    1194:	01f00613          	li	a2,31
    1198:	06d64263          	blt	a2,a3,11fc <__adddf3+0x688>
    119c:	02000713          	li	a4,32
    11a0:	40d70733          	sub	a4,a4,a3
    11a4:	00e79633          	sll	a2,a5,a4
    11a8:	00d5d533          	srl	a0,a1,a3
    11ac:	00e595b3          	sll	a1,a1,a4
    11b0:	00a66633          	or	a2,a2,a0
    11b4:	00b035b3          	snez	a1,a1
    11b8:	00b665b3          	or	a1,a2,a1
    11bc:	00d7d7b3          	srl	a5,a5,a3
    11c0:	00000413          	li	s0,0
    11c4:	c6dff06f          	j	e30 <__adddf3+0x2bc>
    11c8:	0129e5b3          	or	a1,s3,s2
    11cc:	f80596e3          	bnez	a1,1158 <__adddf3+0x5e4>
    11d0:	00000793          	li	a5,0
    11d4:	00000413          	li	s0,0
    11d8:	1480006f          	j	1320 <__adddf3+0x7ac>
    11dc:	00098513          	mv	a0,s3
    11e0:	910ff0ef          	jal	ra,2f0 <__clzsi2>
    11e4:	02050513          	addi	a0,a0,32
    11e8:	f7dff06f          	j	1164 <__adddf3+0x5f0>
    11ec:	fd850793          	addi	a5,a0,-40
    11f0:	00f997b3          	sll	a5,s3,a5
    11f4:	00000593          	li	a1,0
    11f8:	f91ff06f          	j	1188 <__adddf3+0x614>
    11fc:	fe170713          	addi	a4,a4,-31
    1200:	02000613          	li	a2,32
    1204:	00e7d733          	srl	a4,a5,a4
    1208:	00000513          	li	a0,0
    120c:	00c68863          	beq	a3,a2,121c <__adddf3+0x6a8>
    1210:	04000513          	li	a0,64
    1214:	40d50533          	sub	a0,a0,a3
    1218:	00a79533          	sll	a0,a5,a0
    121c:	00a5e533          	or	a0,a1,a0
    1220:	00a03533          	snez	a0,a0
    1224:	00a765b3          	or	a1,a4,a0
    1228:	00000793          	li	a5,0
    122c:	f95ff06f          	j	11c0 <__adddf3+0x64c>
    1230:	40e40433          	sub	s0,s0,a4
    1234:	ff800737          	lui	a4,0xff800
    1238:	fff70713          	addi	a4,a4,-1 # ff7fffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xff800000>
    123c:	00e7f7b3          	and	a5,a5,a4
    1240:	bf1ff06f          	j	e30 <__adddf3+0x2bc>
    1244:	00070793          	mv	a5,a4
    1248:	00060593          	mv	a1,a2
    124c:	00050413          	mv	s0,a0
    1250:	be1ff06f          	j	e30 <__adddf3+0x2bc>
    1254:	00070793          	mv	a5,a4
    1258:	00060593          	mv	a1,a2
    125c:	bd5ff06f          	j	e30 <__adddf3+0x2bc>
    1260:	7ff00413          	li	s0,2047
    1264:	00000793          	li	a5,0
    1268:	00000593          	li	a1,0
    126c:	00800737          	lui	a4,0x800
    1270:	00e7f733          	and	a4,a5,a4
    1274:	00070e63          	beqz	a4,1290 <__adddf3+0x71c>
    1278:	00140413          	addi	s0,s0,1
    127c:	7ff00713          	li	a4,2047
    1280:	0ce40063          	beq	s0,a4,1340 <__adddf3+0x7cc>
    1284:	ff800737          	lui	a4,0xff800
    1288:	fff70713          	addi	a4,a4,-1 # ff7fffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xff800000>
    128c:	00e7f7b3          	and	a5,a5,a4
    1290:	01d79713          	slli	a4,a5,0x1d
    1294:	0035d513          	srli	a0,a1,0x3
    1298:	00a76533          	or	a0,a4,a0
    129c:	7ff00713          	li	a4,2047
    12a0:	0037d793          	srli	a5,a5,0x3
    12a4:	00e41e63          	bne	s0,a4,12c0 <__adddf3+0x74c>
    12a8:	00f56533          	or	a0,a0,a5
    12ac:	00000793          	li	a5,0
    12b0:	00050863          	beqz	a0,12c0 <__adddf3+0x74c>
    12b4:	000807b7          	lui	a5,0x80
    12b8:	00000513          	li	a0,0
    12bc:	00000493          	li	s1,0
    12c0:	01441713          	slli	a4,s0,0x14
    12c4:	7ff006b7          	lui	a3,0x7ff00
    12c8:	00c79793          	slli	a5,a5,0xc
    12cc:	01c12083          	lw	ra,28(sp)
    12d0:	01812403          	lw	s0,24(sp)
    12d4:	00d77733          	and	a4,a4,a3
    12d8:	00c7d793          	srli	a5,a5,0xc
    12dc:	01f49493          	slli	s1,s1,0x1f
    12e0:	00f767b3          	or	a5,a4,a5
    12e4:	0097e733          	or	a4,a5,s1
    12e8:	01012903          	lw	s2,16(sp)
    12ec:	01412483          	lw	s1,20(sp)
    12f0:	00c12983          	lw	s3,12(sp)
    12f4:	00070593          	mv	a1,a4
    12f8:	02010113          	addi	sp,sp,32
    12fc:	00008067          	ret
    1300:	00080413          	mv	s0,a6
    1304:	b2dff06f          	j	e30 <__adddf3+0x2bc>
    1308:	00070793          	mv	a5,a4
    130c:	00060593          	mv	a1,a2
    1310:	00050413          	mv	s0,a0
    1314:	da5ff06f          	j	10b8 <__adddf3+0x544>
    1318:	00000793          	li	a5,0
    131c:	00000593          	li	a1,0
    1320:	00000493          	li	s1,0
    1324:	f49ff06f          	j	126c <__adddf3+0x6f8>
    1328:	00000793          	li	a5,0
    132c:	ff5ff06f          	j	1320 <__adddf3+0x7ac>
    1330:	00000593          	li	a1,0
    1334:	00000493          	li	s1,0
    1338:	004007b7          	lui	a5,0x400
    133c:	b35ff06f          	j	e70 <__adddf3+0x2fc>
    1340:	00000793          	li	a5,0
    1344:	00000593          	li	a1,0
    1348:	f49ff06f          	j	1290 <__adddf3+0x71c>

0000134c <__divdf3>:
    134c:	fd010113          	addi	sp,sp,-48
    1350:	03212023          	sw	s2,32(sp)
    1354:	0145d913          	srli	s2,a1,0x14
    1358:	02912223          	sw	s1,36(sp)
    135c:	01312e23          	sw	s3,28(sp)
    1360:	01412c23          	sw	s4,24(sp)
    1364:	01612823          	sw	s6,16(sp)
    1368:	01812423          	sw	s8,8(sp)
    136c:	00c59493          	slli	s1,a1,0xc
    1370:	02112623          	sw	ra,44(sp)
    1374:	02812423          	sw	s0,40(sp)
    1378:	01512a23          	sw	s5,20(sp)
    137c:	01712623          	sw	s7,12(sp)
    1380:	7ff97913          	andi	s2,s2,2047
    1384:	00050a13          	mv	s4,a0
    1388:	00060b13          	mv	s6,a2
    138c:	00068c13          	mv	s8,a3
    1390:	00c4d493          	srli	s1,s1,0xc
    1394:	01f5d993          	srli	s3,a1,0x1f
    1398:	0a090063          	beqz	s2,1438 <__divdf3+0xec>
    139c:	7ff00793          	li	a5,2047
    13a0:	0ef90e63          	beq	s2,a5,149c <__divdf3+0x150>
    13a4:	01d55a93          	srli	s5,a0,0x1d
    13a8:	00349493          	slli	s1,s1,0x3
    13ac:	009ae4b3          	or	s1,s5,s1
    13b0:	00800ab7          	lui	s5,0x800
    13b4:	0154eab3          	or	s5,s1,s5
    13b8:	00351413          	slli	s0,a0,0x3
    13bc:	c0190913          	addi	s2,s2,-1023
    13c0:	00000b93          	li	s7,0
    13c4:	00cc1513          	slli	a0,s8,0xc
    13c8:	00c55493          	srli	s1,a0,0xc
    13cc:	014c5513          	srli	a0,s8,0x14
    13d0:	7ff57593          	andi	a1,a0,2047
    13d4:	01fc5c13          	srli	s8,s8,0x1f
    13d8:	10058063          	beqz	a1,14d8 <__divdf3+0x18c>
    13dc:	7ff00793          	li	a5,2047
    13e0:	16f58263          	beq	a1,a5,1544 <__divdf3+0x1f8>
    13e4:	00349513          	slli	a0,s1,0x3
    13e8:	01db5793          	srli	a5,s6,0x1d
    13ec:	00a7e533          	or	a0,a5,a0
    13f0:	008004b7          	lui	s1,0x800
    13f4:	009564b3          	or	s1,a0,s1
    13f8:	003b1f93          	slli	t6,s6,0x3
    13fc:	c0158513          	addi	a0,a1,-1023
    1400:	00000793          	li	a5,0
    1404:	002b9713          	slli	a4,s7,0x2
    1408:	00f76733          	or	a4,a4,a5
    140c:	fff70713          	addi	a4,a4,-1
    1410:	00e00613          	li	a2,14
    1414:	0189c6b3          	xor	a3,s3,s8
    1418:	40a905b3          	sub	a1,s2,a0
    141c:	16e66063          	bltu	a2,a4,157c <__divdf3+0x230>
    1420:	0000d637          	lui	a2,0xd
    1424:	00271713          	slli	a4,a4,0x2
    1428:	a2c60613          	addi	a2,a2,-1492 # ca2c <__clz_tab+0x100>
    142c:	00c70733          	add	a4,a4,a2
    1430:	00072703          	lw	a4,0(a4)
    1434:	00070067          	jr	a4
    1438:	00a4eab3          	or	s5,s1,a0
    143c:	060a8e63          	beqz	s5,14b8 <__divdf3+0x16c>
    1440:	04048063          	beqz	s1,1480 <__divdf3+0x134>
    1444:	00048513          	mv	a0,s1
    1448:	ea9fe0ef          	jal	ra,2f0 <__clzsi2>
    144c:	ff550793          	addi	a5,a0,-11
    1450:	01c00713          	li	a4,28
    1454:	02f74c63          	blt	a4,a5,148c <__divdf3+0x140>
    1458:	01d00a93          	li	s5,29
    145c:	ff850413          	addi	s0,a0,-8
    1460:	40fa8ab3          	sub	s5,s5,a5
    1464:	008494b3          	sll	s1,s1,s0
    1468:	015a5ab3          	srl	s5,s4,s5
    146c:	009aeab3          	or	s5,s5,s1
    1470:	008a1433          	sll	s0,s4,s0
    1474:	c0d00593          	li	a1,-1011
    1478:	40a58933          	sub	s2,a1,a0
    147c:	f45ff06f          	j	13c0 <__divdf3+0x74>
    1480:	e71fe0ef          	jal	ra,2f0 <__clzsi2>
    1484:	02050513          	addi	a0,a0,32
    1488:	fc5ff06f          	j	144c <__divdf3+0x100>
    148c:	fd850493          	addi	s1,a0,-40
    1490:	009a1ab3          	sll	s5,s4,s1
    1494:	00000413          	li	s0,0
    1498:	fddff06f          	j	1474 <__divdf3+0x128>
    149c:	00a4eab3          	or	s5,s1,a0
    14a0:	020a8463          	beqz	s5,14c8 <__divdf3+0x17c>
    14a4:	00050413          	mv	s0,a0
    14a8:	00048a93          	mv	s5,s1
    14ac:	7ff00913          	li	s2,2047
    14b0:	00300b93          	li	s7,3
    14b4:	f11ff06f          	j	13c4 <__divdf3+0x78>
    14b8:	00000413          	li	s0,0
    14bc:	00000913          	li	s2,0
    14c0:	00100b93          	li	s7,1
    14c4:	f01ff06f          	j	13c4 <__divdf3+0x78>
    14c8:	00000413          	li	s0,0
    14cc:	7ff00913          	li	s2,2047
    14d0:	00200b93          	li	s7,2
    14d4:	ef1ff06f          	j	13c4 <__divdf3+0x78>
    14d8:	0164efb3          	or	t6,s1,s6
    14dc:	080f8063          	beqz	t6,155c <__divdf3+0x210>
    14e0:	04048263          	beqz	s1,1524 <__divdf3+0x1d8>
    14e4:	00048513          	mv	a0,s1
    14e8:	e09fe0ef          	jal	ra,2f0 <__clzsi2>
    14ec:	00050593          	mv	a1,a0
    14f0:	ff558793          	addi	a5,a1,-11
    14f4:	01c00713          	li	a4,28
    14f8:	02f74e63          	blt	a4,a5,1534 <__divdf3+0x1e8>
    14fc:	01d00693          	li	a3,29
    1500:	ff858f93          	addi	t6,a1,-8
    1504:	40f686b3          	sub	a3,a3,a5
    1508:	01f49533          	sll	a0,s1,t6
    150c:	00db56b3          	srl	a3,s6,a3
    1510:	00a6e4b3          	or	s1,a3,a0
    1514:	01fb1fb3          	sll	t6,s6,t6
    1518:	c0d00693          	li	a3,-1011
    151c:	40b68533          	sub	a0,a3,a1
    1520:	ee1ff06f          	j	1400 <__divdf3+0xb4>
    1524:	000b0513          	mv	a0,s6
    1528:	dc9fe0ef          	jal	ra,2f0 <__clzsi2>
    152c:	02050593          	addi	a1,a0,32
    1530:	fc1ff06f          	j	14f0 <__divdf3+0x1a4>
    1534:	fd858513          	addi	a0,a1,-40
    1538:	00ab14b3          	sll	s1,s6,a0
    153c:	00000f93          	li	t6,0
    1540:	fd9ff06f          	j	1518 <__divdf3+0x1cc>
    1544:	0164efb3          	or	t6,s1,s6
    1548:	020f8263          	beqz	t6,156c <__divdf3+0x220>
    154c:	000b0f93          	mv	t6,s6
    1550:	7ff00513          	li	a0,2047
    1554:	00300793          	li	a5,3
    1558:	eadff06f          	j	1404 <__divdf3+0xb8>
    155c:	00000493          	li	s1,0
    1560:	00000513          	li	a0,0
    1564:	00100793          	li	a5,1
    1568:	e9dff06f          	j	1404 <__divdf3+0xb8>
    156c:	00000493          	li	s1,0
    1570:	7ff00513          	li	a0,2047
    1574:	00200793          	li	a5,2
    1578:	e8dff06f          	j	1404 <__divdf3+0xb8>
    157c:	0154e663          	bltu	s1,s5,1588 <__divdf3+0x23c>
    1580:	349a9e63          	bne	s5,s1,18dc <__divdf3+0x590>
    1584:	35f46c63          	bltu	s0,t6,18dc <__divdf3+0x590>
    1588:	01fa9613          	slli	a2,s5,0x1f
    158c:	00145713          	srli	a4,s0,0x1
    1590:	01f41793          	slli	a5,s0,0x1f
    1594:	001ada93          	srli	s5,s5,0x1
    1598:	00e66433          	or	s0,a2,a4
    159c:	00849513          	slli	a0,s1,0x8
    15a0:	018fd893          	srli	a7,t6,0x18
    15a4:	00a8e8b3          	or	a7,a7,a0
    15a8:	01055513          	srli	a0,a0,0x10
    15ac:	02aade33          	divu	t3,s5,a0
    15b0:	01089e93          	slli	t4,a7,0x10
    15b4:	010ede93          	srli	t4,t4,0x10
    15b8:	01045713          	srli	a4,s0,0x10
    15bc:	008f9313          	slli	t1,t6,0x8
    15c0:	02aafab3          	remu	s5,s5,a0
    15c4:	000e0613          	mv	a2,t3
    15c8:	03ce8833          	mul	a6,t4,t3
    15cc:	010a9a93          	slli	s5,s5,0x10
    15d0:	01576733          	or	a4,a4,s5
    15d4:	01077e63          	bgeu	a4,a6,15f0 <__divdf3+0x2a4>
    15d8:	01170733          	add	a4,a4,a7
    15dc:	fffe0613          	addi	a2,t3,-1
    15e0:	01176863          	bltu	a4,a7,15f0 <__divdf3+0x2a4>
    15e4:	01077663          	bgeu	a4,a6,15f0 <__divdf3+0x2a4>
    15e8:	ffee0613          	addi	a2,t3,-2
    15ec:	01170733          	add	a4,a4,a7
    15f0:	41070733          	sub	a4,a4,a6
    15f4:	02a75e33          	divu	t3,a4,a0
    15f8:	01041413          	slli	s0,s0,0x10
    15fc:	01045413          	srli	s0,s0,0x10
    1600:	02a77733          	remu	a4,a4,a0
    1604:	000e0293          	mv	t0,t3
    1608:	03ce8833          	mul	a6,t4,t3
    160c:	01071713          	slli	a4,a4,0x10
    1610:	00e46733          	or	a4,s0,a4
    1614:	01077e63          	bgeu	a4,a6,1630 <__divdf3+0x2e4>
    1618:	01170733          	add	a4,a4,a7
    161c:	fffe0293          	addi	t0,t3,-1
    1620:	01176863          	bltu	a4,a7,1630 <__divdf3+0x2e4>
    1624:	01077663          	bgeu	a4,a6,1630 <__divdf3+0x2e4>
    1628:	ffee0293          	addi	t0,t3,-2
    162c:	01170733          	add	a4,a4,a7
    1630:	41070433          	sub	s0,a4,a6
    1634:	01061613          	slli	a2,a2,0x10
    1638:	00010837          	lui	a6,0x10
    163c:	005662b3          	or	t0,a2,t0
    1640:	fff80e13          	addi	t3,a6,-1 # ffff <stacks+0xa5f>
    1644:	0102d613          	srli	a2,t0,0x10
    1648:	01c2f733          	and	a4,t0,t3
    164c:	01035f13          	srli	t5,t1,0x10
    1650:	01c37e33          	and	t3,t1,t3
    1654:	02ee03b3          	mul	t2,t3,a4
    1658:	03c604b3          	mul	s1,a2,t3
    165c:	02ef0733          	mul	a4,t5,a4
    1660:	03e60fb3          	mul	t6,a2,t5
    1664:	00970633          	add	a2,a4,s1
    1668:	0103d713          	srli	a4,t2,0x10
    166c:	00c70733          	add	a4,a4,a2
    1670:	00977463          	bgeu	a4,s1,1678 <__divdf3+0x32c>
    1674:	010f8fb3          	add	t6,t6,a6
    1678:	01075613          	srli	a2,a4,0x10
    167c:	01f60633          	add	a2,a2,t6
    1680:	00010fb7          	lui	t6,0x10
    1684:	ffff8f93          	addi	t6,t6,-1 # ffff <stacks+0xa5f>
    1688:	01f77833          	and	a6,a4,t6
    168c:	01081813          	slli	a6,a6,0x10
    1690:	01f3f3b3          	and	t2,t2,t6
    1694:	00780833          	add	a6,a6,t2
    1698:	00c46863          	bltu	s0,a2,16a8 <__divdf3+0x35c>
    169c:	00028493          	mv	s1,t0
    16a0:	04c41463          	bne	s0,a2,16e8 <__divdf3+0x39c>
    16a4:	0507f263          	bgeu	a5,a6,16e8 <__divdf3+0x39c>
    16a8:	006787b3          	add	a5,a5,t1
    16ac:	0067b733          	sltu	a4,a5,t1
    16b0:	01170733          	add	a4,a4,a7
    16b4:	00e40433          	add	s0,s0,a4
    16b8:	fff28493          	addi	s1,t0,-1
    16bc:	0088e663          	bltu	a7,s0,16c8 <__divdf3+0x37c>
    16c0:	02889463          	bne	a7,s0,16e8 <__divdf3+0x39c>
    16c4:	0267e263          	bltu	a5,t1,16e8 <__divdf3+0x39c>
    16c8:	00c46663          	bltu	s0,a2,16d4 <__divdf3+0x388>
    16cc:	00861e63          	bne	a2,s0,16e8 <__divdf3+0x39c>
    16d0:	0107fc63          	bgeu	a5,a6,16e8 <__divdf3+0x39c>
    16d4:	006787b3          	add	a5,a5,t1
    16d8:	0067b733          	sltu	a4,a5,t1
    16dc:	01170733          	add	a4,a4,a7
    16e0:	ffe28493          	addi	s1,t0,-2
    16e4:	00e40433          	add	s0,s0,a4
    16e8:	41078833          	sub	a6,a5,a6
    16ec:	40c40433          	sub	s0,s0,a2
    16f0:	0107b7b3          	sltu	a5,a5,a6
    16f4:	40f40433          	sub	s0,s0,a5
    16f8:	fff00f93          	li	t6,-1
    16fc:	12888463          	beq	a7,s0,1824 <__divdf3+0x4d8>
    1700:	02a45fb3          	divu	t6,s0,a0
    1704:	01085713          	srli	a4,a6,0x10
    1708:	02a47433          	remu	s0,s0,a0
    170c:	000f8613          	mv	a2,t6
    1710:	03fe87b3          	mul	a5,t4,t6
    1714:	01041413          	slli	s0,s0,0x10
    1718:	00876433          	or	s0,a4,s0
    171c:	00f47e63          	bgeu	s0,a5,1738 <__divdf3+0x3ec>
    1720:	01140433          	add	s0,s0,a7
    1724:	ffff8613          	addi	a2,t6,-1
    1728:	01146863          	bltu	s0,a7,1738 <__divdf3+0x3ec>
    172c:	00f47663          	bgeu	s0,a5,1738 <__divdf3+0x3ec>
    1730:	ffef8613          	addi	a2,t6,-2
    1734:	01140433          	add	s0,s0,a7
    1738:	40f40433          	sub	s0,s0,a5
    173c:	02a45733          	divu	a4,s0,a0
    1740:	01081813          	slli	a6,a6,0x10
    1744:	01085813          	srli	a6,a6,0x10
    1748:	02a47433          	remu	s0,s0,a0
    174c:	00070793          	mv	a5,a4
    1750:	02ee8eb3          	mul	t4,t4,a4
    1754:	01041413          	slli	s0,s0,0x10
    1758:	00886433          	or	s0,a6,s0
    175c:	01d47e63          	bgeu	s0,t4,1778 <__divdf3+0x42c>
    1760:	01140433          	add	s0,s0,a7
    1764:	fff70793          	addi	a5,a4,-1
    1768:	01146863          	bltu	s0,a7,1778 <__divdf3+0x42c>
    176c:	01d47663          	bgeu	s0,t4,1778 <__divdf3+0x42c>
    1770:	ffe70793          	addi	a5,a4,-2
    1774:	01140433          	add	s0,s0,a7
    1778:	01061613          	slli	a2,a2,0x10
    177c:	00f66633          	or	a2,a2,a5
    1780:	01061793          	slli	a5,a2,0x10
    1784:	0107d793          	srli	a5,a5,0x10
    1788:	01065713          	srli	a4,a2,0x10
    178c:	02ef0833          	mul	a6,t5,a4
    1790:	41d40433          	sub	s0,s0,t4
    1794:	02ff0f33          	mul	t5,t5,a5
    1798:	03c78eb3          	mul	t4,a5,t3
    179c:	03c70e33          	mul	t3,a4,t3
    17a0:	010ed793          	srli	a5,t4,0x10
    17a4:	01cf0f33          	add	t5,t5,t3
    17a8:	01e787b3          	add	a5,a5,t5
    17ac:	01c7f663          	bgeu	a5,t3,17b8 <__divdf3+0x46c>
    17b0:	00010737          	lui	a4,0x10
    17b4:	00e80833          	add	a6,a6,a4
    17b8:	0107d713          	srli	a4,a5,0x10
    17bc:	01070733          	add	a4,a4,a6
    17c0:	00010837          	lui	a6,0x10
    17c4:	fff80813          	addi	a6,a6,-1 # ffff <stacks+0xa5f>
    17c8:	0107f533          	and	a0,a5,a6
    17cc:	01051513          	slli	a0,a0,0x10
    17d0:	010efeb3          	and	t4,t4,a6
    17d4:	01d50533          	add	a0,a0,t4
    17d8:	00e46863          	bltu	s0,a4,17e8 <__divdf3+0x49c>
    17dc:	24e41463          	bne	s0,a4,1a24 <__divdf3+0x6d8>
    17e0:	00060f93          	mv	t6,a2
    17e4:	04050063          	beqz	a0,1824 <__divdf3+0x4d8>
    17e8:	00888433          	add	s0,a7,s0
    17ec:	fff60f93          	addi	t6,a2,-1
    17f0:	03146463          	bltu	s0,a7,1818 <__divdf3+0x4cc>
    17f4:	00e46663          	bltu	s0,a4,1800 <__divdf3+0x4b4>
    17f8:	22e41463          	bne	s0,a4,1a20 <__divdf3+0x6d4>
    17fc:	02a37063          	bgeu	t1,a0,181c <__divdf3+0x4d0>
    1800:	00131793          	slli	a5,t1,0x1
    1804:	0067b333          	sltu	t1,a5,t1
    1808:	011308b3          	add	a7,t1,a7
    180c:	ffe60f93          	addi	t6,a2,-2
    1810:	01140433          	add	s0,s0,a7
    1814:	00078313          	mv	t1,a5
    1818:	00e41463          	bne	s0,a4,1820 <__divdf3+0x4d4>
    181c:	00650463          	beq	a0,t1,1824 <__divdf3+0x4d8>
    1820:	001fef93          	ori	t6,t6,1
    1824:	3ff58793          	addi	a5,a1,1023
    1828:	10f05a63          	blez	a5,193c <__divdf3+0x5f0>
    182c:	007ff713          	andi	a4,t6,7
    1830:	02070063          	beqz	a4,1850 <__divdf3+0x504>
    1834:	00fff713          	andi	a4,t6,15
    1838:	00400613          	li	a2,4
    183c:	00c70a63          	beq	a4,a2,1850 <__divdf3+0x504>
    1840:	004f8613          	addi	a2,t6,4
    1844:	01f63fb3          	sltu	t6,a2,t6
    1848:	01f484b3          	add	s1,s1,t6
    184c:	00060f93          	mv	t6,a2
    1850:	01000737          	lui	a4,0x1000
    1854:	00e4f733          	and	a4,s1,a4
    1858:	00070a63          	beqz	a4,186c <__divdf3+0x520>
    185c:	ff0007b7          	lui	a5,0xff000
    1860:	fff78793          	addi	a5,a5,-1 # feffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xff000000>
    1864:	00f4f4b3          	and	s1,s1,a5
    1868:	40058793          	addi	a5,a1,1024
    186c:	7fe00713          	li	a4,2046
    1870:	0af74063          	blt	a4,a5,1910 <__divdf3+0x5c4>
    1874:	003fdf93          	srli	t6,t6,0x3
    1878:	01d49713          	slli	a4,s1,0x1d
    187c:	01f76733          	or	a4,a4,t6
    1880:	0034d513          	srli	a0,s1,0x3
    1884:	01479793          	slli	a5,a5,0x14
    1888:	7ff00637          	lui	a2,0x7ff00
    188c:	00c51513          	slli	a0,a0,0xc
    1890:	02c12083          	lw	ra,44(sp)
    1894:	02812403          	lw	s0,40(sp)
    1898:	00c7f7b3          	and	a5,a5,a2
    189c:	00c55513          	srli	a0,a0,0xc
    18a0:	00a7e533          	or	a0,a5,a0
    18a4:	01f69693          	slli	a3,a3,0x1f
    18a8:	00d567b3          	or	a5,a0,a3
    18ac:	02412483          	lw	s1,36(sp)
    18b0:	02012903          	lw	s2,32(sp)
    18b4:	01c12983          	lw	s3,28(sp)
    18b8:	01812a03          	lw	s4,24(sp)
    18bc:	01412a83          	lw	s5,20(sp)
    18c0:	01012b03          	lw	s6,16(sp)
    18c4:	00c12b83          	lw	s7,12(sp)
    18c8:	00812c03          	lw	s8,8(sp)
    18cc:	00070513          	mv	a0,a4
    18d0:	00078593          	mv	a1,a5
    18d4:	03010113          	addi	sp,sp,48
    18d8:	00008067          	ret
    18dc:	fff58593          	addi	a1,a1,-1
    18e0:	00000793          	li	a5,0
    18e4:	cb9ff06f          	j	159c <__divdf3+0x250>
    18e8:	00098693          	mv	a3,s3
    18ec:	000a8493          	mv	s1,s5
    18f0:	00040f93          	mv	t6,s0
    18f4:	000b8793          	mv	a5,s7
    18f8:	00300713          	li	a4,3
    18fc:	0ee78a63          	beq	a5,a4,19f0 <__divdf3+0x6a4>
    1900:	00100713          	li	a4,1
    1904:	10e78063          	beq	a5,a4,1a04 <__divdf3+0x6b8>
    1908:	00200713          	li	a4,2
    190c:	f0e79ce3          	bne	a5,a4,1824 <__divdf3+0x4d8>
    1910:	00000513          	li	a0,0
    1914:	00000713          	li	a4,0
    1918:	7ff00793          	li	a5,2047
    191c:	f69ff06f          	j	1884 <__divdf3+0x538>
    1920:	000c0693          	mv	a3,s8
    1924:	fd5ff06f          	j	18f8 <__divdf3+0x5ac>
    1928:	000804b7          	lui	s1,0x80
    192c:	00000f93          	li	t6,0
    1930:	00000693          	li	a3,0
    1934:	00300793          	li	a5,3
    1938:	fc1ff06f          	j	18f8 <__divdf3+0x5ac>
    193c:	00100513          	li	a0,1
    1940:	40f50533          	sub	a0,a0,a5
    1944:	03800713          	li	a4,56
    1948:	0aa74e63          	blt	a4,a0,1a04 <__divdf3+0x6b8>
    194c:	01f00713          	li	a4,31
    1950:	06a74663          	blt	a4,a0,19bc <__divdf3+0x670>
    1954:	41e58593          	addi	a1,a1,1054
    1958:	00b497b3          	sll	a5,s1,a1
    195c:	00afd733          	srl	a4,t6,a0
    1960:	00bf95b3          	sll	a1,t6,a1
    1964:	00e7e7b3          	or	a5,a5,a4
    1968:	00b035b3          	snez	a1,a1
    196c:	00b7e7b3          	or	a5,a5,a1
    1970:	00a4d533          	srl	a0,s1,a0
    1974:	0077f713          	andi	a4,a5,7
    1978:	02070063          	beqz	a4,1998 <__divdf3+0x64c>
    197c:	00f7f713          	andi	a4,a5,15
    1980:	00400613          	li	a2,4
    1984:	00c70a63          	beq	a4,a2,1998 <__divdf3+0x64c>
    1988:	00478713          	addi	a4,a5,4
    198c:	00f737b3          	sltu	a5,a4,a5
    1990:	00f50533          	add	a0,a0,a5
    1994:	00070793          	mv	a5,a4
    1998:	00800737          	lui	a4,0x800
    199c:	00e57733          	and	a4,a0,a4
    19a0:	06071863          	bnez	a4,1a10 <__divdf3+0x6c4>
    19a4:	01d51713          	slli	a4,a0,0x1d
    19a8:	0037d793          	srli	a5,a5,0x3
    19ac:	00f76733          	or	a4,a4,a5
    19b0:	00355513          	srli	a0,a0,0x3
    19b4:	00000793          	li	a5,0
    19b8:	ecdff06f          	j	1884 <__divdf3+0x538>
    19bc:	fe100713          	li	a4,-31
    19c0:	40f707b3          	sub	a5,a4,a5
    19c4:	02000613          	li	a2,32
    19c8:	00f4d7b3          	srl	a5,s1,a5
    19cc:	00000713          	li	a4,0
    19d0:	00c50663          	beq	a0,a2,19dc <__divdf3+0x690>
    19d4:	43e58713          	addi	a4,a1,1086
    19d8:	00e49733          	sll	a4,s1,a4
    19dc:	01f76733          	or	a4,a4,t6
    19e0:	00e03733          	snez	a4,a4
    19e4:	00e7e7b3          	or	a5,a5,a4
    19e8:	00000513          	li	a0,0
    19ec:	f89ff06f          	j	1974 <__divdf3+0x628>
    19f0:	00080537          	lui	a0,0x80
    19f4:	00000713          	li	a4,0
    19f8:	7ff00793          	li	a5,2047
    19fc:	00000693          	li	a3,0
    1a00:	e85ff06f          	j	1884 <__divdf3+0x538>
    1a04:	00000513          	li	a0,0
    1a08:	00000713          	li	a4,0
    1a0c:	fa9ff06f          	j	19b4 <__divdf3+0x668>
    1a10:	00000513          	li	a0,0
    1a14:	00000713          	li	a4,0
    1a18:	00100793          	li	a5,1
    1a1c:	e69ff06f          	j	1884 <__divdf3+0x538>
    1a20:	000f8613          	mv	a2,t6
    1a24:	00060f93          	mv	t6,a2
    1a28:	df9ff06f          	j	1820 <__divdf3+0x4d4>

00001a2c <__muldf3>:
    1a2c:	fd010113          	addi	sp,sp,-48
    1a30:	01312e23          	sw	s3,28(sp)
    1a34:	0145d993          	srli	s3,a1,0x14
    1a38:	02812423          	sw	s0,40(sp)
    1a3c:	02912223          	sw	s1,36(sp)
    1a40:	01412c23          	sw	s4,24(sp)
    1a44:	01512a23          	sw	s5,20(sp)
    1a48:	01712623          	sw	s7,12(sp)
    1a4c:	00c59493          	slli	s1,a1,0xc
    1a50:	02112623          	sw	ra,44(sp)
    1a54:	03212023          	sw	s2,32(sp)
    1a58:	01612823          	sw	s6,16(sp)
    1a5c:	7ff9f993          	andi	s3,s3,2047
    1a60:	00050413          	mv	s0,a0
    1a64:	00060b93          	mv	s7,a2
    1a68:	00068a93          	mv	s5,a3
    1a6c:	00c4d493          	srli	s1,s1,0xc
    1a70:	01f5da13          	srli	s4,a1,0x1f
    1a74:	0a098263          	beqz	s3,1b18 <__muldf3+0xec>
    1a78:	7ff00793          	li	a5,2047
    1a7c:	10f98063          	beq	s3,a5,1b7c <__muldf3+0x150>
    1a80:	01d55793          	srli	a5,a0,0x1d
    1a84:	00349493          	slli	s1,s1,0x3
    1a88:	0097e4b3          	or	s1,a5,s1
    1a8c:	008007b7          	lui	a5,0x800
    1a90:	00f4e4b3          	or	s1,s1,a5
    1a94:	00351913          	slli	s2,a0,0x3
    1a98:	c0198993          	addi	s3,s3,-1023
    1a9c:	00000b13          	li	s6,0
    1aa0:	014ad513          	srli	a0,s5,0x14
    1aa4:	00ca9413          	slli	s0,s5,0xc
    1aa8:	7ff57513          	andi	a0,a0,2047
    1aac:	00c45413          	srli	s0,s0,0xc
    1ab0:	01fada93          	srli	s5,s5,0x1f
    1ab4:	10050063          	beqz	a0,1bb4 <__muldf3+0x188>
    1ab8:	7ff00793          	li	a5,2047
    1abc:	16f50063          	beq	a0,a5,1c1c <__muldf3+0x1f0>
    1ac0:	01dbd793          	srli	a5,s7,0x1d
    1ac4:	00341413          	slli	s0,s0,0x3
    1ac8:	0087e433          	or	s0,a5,s0
    1acc:	008007b7          	lui	a5,0x800
    1ad0:	00f46433          	or	s0,s0,a5
    1ad4:	c0150513          	addi	a0,a0,-1023 # 7fc01 <W1+0x5f861>
    1ad8:	003b9793          	slli	a5,s7,0x3
    1adc:	00000713          	li	a4,0
    1ae0:	002b1693          	slli	a3,s6,0x2
    1ae4:	00e6e6b3          	or	a3,a3,a4
    1ae8:	00a98533          	add	a0,s3,a0
    1aec:	fff68693          	addi	a3,a3,-1 # 7fefffff <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7cf50f7f>
    1af0:	00e00813          	li	a6,14
    1af4:	015a4633          	xor	a2,s4,s5
    1af8:	00150593          	addi	a1,a0,1
    1afc:	14d86c63          	bltu	a6,a3,1c54 <__muldf3+0x228>
    1b00:	0000d537          	lui	a0,0xd
    1b04:	00269693          	slli	a3,a3,0x2
    1b08:	a6850513          	addi	a0,a0,-1432 # ca68 <__clz_tab+0x13c>
    1b0c:	00a686b3          	add	a3,a3,a0
    1b10:	0006a683          	lw	a3,0(a3)
    1b14:	00068067          	jr	a3
    1b18:	00a4e933          	or	s2,s1,a0
    1b1c:	06090c63          	beqz	s2,1b94 <__muldf3+0x168>
    1b20:	04048063          	beqz	s1,1b60 <__muldf3+0x134>
    1b24:	00048513          	mv	a0,s1
    1b28:	fc8fe0ef          	jal	ra,2f0 <__clzsi2>
    1b2c:	ff550713          	addi	a4,a0,-11
    1b30:	01c00793          	li	a5,28
    1b34:	02e7cc63          	blt	a5,a4,1b6c <__muldf3+0x140>
    1b38:	01d00793          	li	a5,29
    1b3c:	ff850913          	addi	s2,a0,-8
    1b40:	40e787b3          	sub	a5,a5,a4
    1b44:	012494b3          	sll	s1,s1,s2
    1b48:	00f457b3          	srl	a5,s0,a5
    1b4c:	0097e4b3          	or	s1,a5,s1
    1b50:	01241933          	sll	s2,s0,s2
    1b54:	c0d00993          	li	s3,-1011
    1b58:	40a989b3          	sub	s3,s3,a0
    1b5c:	f41ff06f          	j	1a9c <__muldf3+0x70>
    1b60:	f90fe0ef          	jal	ra,2f0 <__clzsi2>
    1b64:	02050513          	addi	a0,a0,32
    1b68:	fc5ff06f          	j	1b2c <__muldf3+0x100>
    1b6c:	fd850493          	addi	s1,a0,-40
    1b70:	009414b3          	sll	s1,s0,s1
    1b74:	00000913          	li	s2,0
    1b78:	fddff06f          	j	1b54 <__muldf3+0x128>
    1b7c:	00a4e933          	or	s2,s1,a0
    1b80:	02090263          	beqz	s2,1ba4 <__muldf3+0x178>
    1b84:	00050913          	mv	s2,a0
    1b88:	7ff00993          	li	s3,2047
    1b8c:	00300b13          	li	s6,3
    1b90:	f11ff06f          	j	1aa0 <__muldf3+0x74>
    1b94:	00000493          	li	s1,0
    1b98:	00000993          	li	s3,0
    1b9c:	00100b13          	li	s6,1
    1ba0:	f01ff06f          	j	1aa0 <__muldf3+0x74>
    1ba4:	00000493          	li	s1,0
    1ba8:	7ff00993          	li	s3,2047
    1bac:	00200b13          	li	s6,2
    1bb0:	ef1ff06f          	j	1aa0 <__muldf3+0x74>
    1bb4:	017467b3          	or	a5,s0,s7
    1bb8:	06078e63          	beqz	a5,1c34 <__muldf3+0x208>
    1bbc:	04040063          	beqz	s0,1bfc <__muldf3+0x1d0>
    1bc0:	00040513          	mv	a0,s0
    1bc4:	f2cfe0ef          	jal	ra,2f0 <__clzsi2>
    1bc8:	ff550693          	addi	a3,a0,-11
    1bcc:	01c00793          	li	a5,28
    1bd0:	02d7ce63          	blt	a5,a3,1c0c <__muldf3+0x1e0>
    1bd4:	01d00713          	li	a4,29
    1bd8:	ff850793          	addi	a5,a0,-8
    1bdc:	40d70733          	sub	a4,a4,a3
    1be0:	00f41433          	sll	s0,s0,a5
    1be4:	00ebd733          	srl	a4,s7,a4
    1be8:	00876433          	or	s0,a4,s0
    1bec:	00fb97b3          	sll	a5,s7,a5
    1bf0:	c0d00713          	li	a4,-1011
    1bf4:	40a70533          	sub	a0,a4,a0
    1bf8:	ee5ff06f          	j	1adc <__muldf3+0xb0>
    1bfc:	000b8513          	mv	a0,s7
    1c00:	ef0fe0ef          	jal	ra,2f0 <__clzsi2>
    1c04:	02050513          	addi	a0,a0,32
    1c08:	fc1ff06f          	j	1bc8 <__muldf3+0x19c>
    1c0c:	fd850413          	addi	s0,a0,-40
    1c10:	008b9433          	sll	s0,s7,s0
    1c14:	00000793          	li	a5,0
    1c18:	fd9ff06f          	j	1bf0 <__muldf3+0x1c4>
    1c1c:	017467b3          	or	a5,s0,s7
    1c20:	02078263          	beqz	a5,1c44 <__muldf3+0x218>
    1c24:	000b8793          	mv	a5,s7
    1c28:	7ff00513          	li	a0,2047
    1c2c:	00300713          	li	a4,3
    1c30:	eb1ff06f          	j	1ae0 <__muldf3+0xb4>
    1c34:	00000413          	li	s0,0
    1c38:	00000513          	li	a0,0
    1c3c:	00100713          	li	a4,1
    1c40:	ea1ff06f          	j	1ae0 <__muldf3+0xb4>
    1c44:	00000413          	li	s0,0
    1c48:	7ff00513          	li	a0,2047
    1c4c:	00200713          	li	a4,2
    1c50:	e91ff06f          	j	1ae0 <__muldf3+0xb4>
    1c54:	00010f37          	lui	t5,0x10
    1c58:	ffff0e93          	addi	t4,t5,-1 # ffff <stacks+0xa5f>
    1c5c:	01095713          	srli	a4,s2,0x10
    1c60:	0107d893          	srli	a7,a5,0x10
    1c64:	01d97933          	and	s2,s2,t4
    1c68:	01d7f7b3          	and	a5,a5,t4
    1c6c:	03288833          	mul	a6,a7,s2
    1c70:	02f906b3          	mul	a3,s2,a5
    1c74:	02f70fb3          	mul	t6,a4,a5
    1c78:	01f80333          	add	t1,a6,t6
    1c7c:	0106d813          	srli	a6,a3,0x10
    1c80:	00680833          	add	a6,a6,t1
    1c84:	03170e33          	mul	t3,a4,a7
    1c88:	01f87463          	bgeu	a6,t6,1c90 <__muldf3+0x264>
    1c8c:	01ee0e33          	add	t3,t3,t5
    1c90:	01085393          	srli	t2,a6,0x10
    1c94:	01d87833          	and	a6,a6,t4
    1c98:	01d6f6b3          	and	a3,a3,t4
    1c9c:	01045f13          	srli	t5,s0,0x10
    1ca0:	01d472b3          	and	t0,s0,t4
    1ca4:	01081813          	slli	a6,a6,0x10
    1ca8:	00d80833          	add	a6,a6,a3
    1cac:	02570eb3          	mul	t4,a4,t0
    1cb0:	025906b3          	mul	a3,s2,t0
    1cb4:	032f0933          	mul	s2,t5,s2
    1cb8:	01d90333          	add	t1,s2,t4
    1cbc:	0106d913          	srli	s2,a3,0x10
    1cc0:	00690933          	add	s2,s2,t1
    1cc4:	03e70733          	mul	a4,a4,t5
    1cc8:	01d97663          	bgeu	s2,t4,1cd4 <__muldf3+0x2a8>
    1ccc:	00010337          	lui	t1,0x10
    1cd0:	00670733          	add	a4,a4,t1
    1cd4:	01095e93          	srli	t4,s2,0x10
    1cd8:	000109b7          	lui	s3,0x10
    1cdc:	00ee8eb3          	add	t4,t4,a4
    1ce0:	fff98713          	addi	a4,s3,-1 # ffff <stacks+0xa5f>
    1ce4:	00e97933          	and	s2,s2,a4
    1ce8:	00e6f6b3          	and	a3,a3,a4
    1cec:	0104d413          	srli	s0,s1,0x10
    1cf0:	01091913          	slli	s2,s2,0x10
    1cf4:	00e4f4b3          	and	s1,s1,a4
    1cf8:	02978733          	mul	a4,a5,s1
    1cfc:	00d90933          	add	s2,s2,a3
    1d00:	012383b3          	add	t2,t2,s2
    1d04:	02f40333          	mul	t1,s0,a5
    1d08:	029886b3          	mul	a3,a7,s1
    1d0c:	028887b3          	mul	a5,a7,s0
    1d10:	006688b3          	add	a7,a3,t1
    1d14:	01075693          	srli	a3,a4,0x10
    1d18:	011686b3          	add	a3,a3,a7
    1d1c:	0066f463          	bgeu	a3,t1,1d24 <__muldf3+0x2f8>
    1d20:	013787b3          	add	a5,a5,s3
    1d24:	0106d893          	srli	a7,a3,0x10
    1d28:	000109b7          	lui	s3,0x10
    1d2c:	00f88fb3          	add	t6,a7,a5
    1d30:	fff98793          	addi	a5,s3,-1 # ffff <stacks+0xa5f>
    1d34:	029288b3          	mul	a7,t0,s1
    1d38:	00f6f6b3          	and	a3,a3,a5
    1d3c:	00f77733          	and	a4,a4,a5
    1d40:	01069693          	slli	a3,a3,0x10
    1d44:	00e686b3          	add	a3,a3,a4
    1d48:	025407b3          	mul	a5,s0,t0
    1d4c:	029f04b3          	mul	s1,t5,s1
    1d50:	028f0333          	mul	t1,t5,s0
    1d54:	00f484b3          	add	s1,s1,a5
    1d58:	0108d413          	srli	s0,a7,0x10
    1d5c:	009404b3          	add	s1,s0,s1
    1d60:	00f4f463          	bgeu	s1,a5,1d68 <__muldf3+0x33c>
    1d64:	01330333          	add	t1,t1,s3
    1d68:	000107b7          	lui	a5,0x10
    1d6c:	fff78793          	addi	a5,a5,-1 # ffff <stacks+0xa5f>
    1d70:	00f4f733          	and	a4,s1,a5
    1d74:	00f8f8b3          	and	a7,a7,a5
    1d78:	01071713          	slli	a4,a4,0x10
    1d7c:	007e0e33          	add	t3,t3,t2
    1d80:	01170733          	add	a4,a4,a7
    1d84:	012e3933          	sltu	s2,t3,s2
    1d88:	01d70733          	add	a4,a4,t4
    1d8c:	01270433          	add	s0,a4,s2
    1d90:	00de0e33          	add	t3,t3,a3
    1d94:	00de36b3          	sltu	a3,t3,a3
    1d98:	01f408b3          	add	a7,s0,t6
    1d9c:	00d88f33          	add	t5,a7,a3
    1da0:	01d73733          	sltu	a4,a4,t4
    1da4:	01243433          	sltu	s0,s0,s2
    1da8:	00876433          	or	s0,a4,s0
    1dac:	0104d493          	srli	s1,s1,0x10
    1db0:	01f8b8b3          	sltu	a7,a7,t6
    1db4:	00df36b3          	sltu	a3,t5,a3
    1db8:	00940433          	add	s0,s0,s1
    1dbc:	00d8e6b3          	or	a3,a7,a3
    1dc0:	00d40433          	add	s0,s0,a3
    1dc4:	00640433          	add	s0,s0,t1
    1dc8:	017f5793          	srli	a5,t5,0x17
    1dcc:	00941413          	slli	s0,s0,0x9
    1dd0:	00f46433          	or	s0,s0,a5
    1dd4:	009e1793          	slli	a5,t3,0x9
    1dd8:	0107e7b3          	or	a5,a5,a6
    1ddc:	00f037b3          	snez	a5,a5
    1de0:	017e5e13          	srli	t3,t3,0x17
    1de4:	009f1713          	slli	a4,t5,0x9
    1de8:	01c7e7b3          	or	a5,a5,t3
    1dec:	00e7e7b3          	or	a5,a5,a4
    1df0:	01000737          	lui	a4,0x1000
    1df4:	00e47733          	and	a4,s0,a4
    1df8:	10070663          	beqz	a4,1f04 <__muldf3+0x4d8>
    1dfc:	0017d713          	srli	a4,a5,0x1
    1e00:	0017f793          	andi	a5,a5,1
    1e04:	00f767b3          	or	a5,a4,a5
    1e08:	01f41713          	slli	a4,s0,0x1f
    1e0c:	00e7e7b3          	or	a5,a5,a4
    1e10:	00145413          	srli	s0,s0,0x1
    1e14:	3ff58693          	addi	a3,a1,1023
    1e18:	0ed05a63          	blez	a3,1f0c <__muldf3+0x4e0>
    1e1c:	0077f713          	andi	a4,a5,7
    1e20:	02070063          	beqz	a4,1e40 <__muldf3+0x414>
    1e24:	00f7f713          	andi	a4,a5,15
    1e28:	00400513          	li	a0,4
    1e2c:	00a70a63          	beq	a4,a0,1e40 <__muldf3+0x414>
    1e30:	00478713          	addi	a4,a5,4
    1e34:	00f737b3          	sltu	a5,a4,a5
    1e38:	00f40433          	add	s0,s0,a5
    1e3c:	00070793          	mv	a5,a4
    1e40:	01000737          	lui	a4,0x1000
    1e44:	00e47733          	and	a4,s0,a4
    1e48:	00070a63          	beqz	a4,1e5c <__muldf3+0x430>
    1e4c:	ff000737          	lui	a4,0xff000
    1e50:	fff70713          	addi	a4,a4,-1 # feffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xff000000>
    1e54:	00e47433          	and	s0,s0,a4
    1e58:	40058693          	addi	a3,a1,1024
    1e5c:	7fe00713          	li	a4,2046
    1e60:	16d74a63          	blt	a4,a3,1fd4 <__muldf3+0x5a8>
    1e64:	0037d713          	srli	a4,a5,0x3
    1e68:	01d41793          	slli	a5,s0,0x1d
    1e6c:	00e7e7b3          	or	a5,a5,a4
    1e70:	00345413          	srli	s0,s0,0x3
    1e74:	01469713          	slli	a4,a3,0x14
    1e78:	00c41413          	slli	s0,s0,0xc
    1e7c:	7ff006b7          	lui	a3,0x7ff00
    1e80:	00d77733          	and	a4,a4,a3
    1e84:	00c45413          	srli	s0,s0,0xc
    1e88:	00876433          	or	s0,a4,s0
    1e8c:	01f61613          	slli	a2,a2,0x1f
    1e90:	02c12083          	lw	ra,44(sp)
    1e94:	00c46733          	or	a4,s0,a2
    1e98:	02812403          	lw	s0,40(sp)
    1e9c:	02412483          	lw	s1,36(sp)
    1ea0:	02012903          	lw	s2,32(sp)
    1ea4:	01c12983          	lw	s3,28(sp)
    1ea8:	01812a03          	lw	s4,24(sp)
    1eac:	01412a83          	lw	s5,20(sp)
    1eb0:	01012b03          	lw	s6,16(sp)
    1eb4:	00c12b83          	lw	s7,12(sp)
    1eb8:	00078513          	mv	a0,a5
    1ebc:	00070593          	mv	a1,a4
    1ec0:	03010113          	addi	sp,sp,48
    1ec4:	00008067          	ret
    1ec8:	000a0613          	mv	a2,s4
    1ecc:	00048413          	mv	s0,s1
    1ed0:	00090793          	mv	a5,s2
    1ed4:	000b0713          	mv	a4,s6
    1ed8:	00200693          	li	a3,2
    1edc:	0ed70c63          	beq	a4,a3,1fd4 <__muldf3+0x5a8>
    1ee0:	00300693          	li	a3,3
    1ee4:	0cd70e63          	beq	a4,a3,1fc0 <__muldf3+0x594>
    1ee8:	00100693          	li	a3,1
    1eec:	f2d714e3          	bne	a4,a3,1e14 <__muldf3+0x3e8>
    1ef0:	00000413          	li	s0,0
    1ef4:	00000793          	li	a5,0
    1ef8:	08c0006f          	j	1f84 <__muldf3+0x558>
    1efc:	000a8613          	mv	a2,s5
    1f00:	fd9ff06f          	j	1ed8 <__muldf3+0x4ac>
    1f04:	00050593          	mv	a1,a0
    1f08:	f0dff06f          	j	1e14 <__muldf3+0x3e8>
    1f0c:	00100513          	li	a0,1
    1f10:	40d50533          	sub	a0,a0,a3
    1f14:	03800713          	li	a4,56
    1f18:	fca74ce3          	blt	a4,a0,1ef0 <__muldf3+0x4c4>
    1f1c:	01f00713          	li	a4,31
    1f20:	06a74663          	blt	a4,a0,1f8c <__muldf3+0x560>
    1f24:	41e58593          	addi	a1,a1,1054
    1f28:	00b41733          	sll	a4,s0,a1
    1f2c:	00a7d6b3          	srl	a3,a5,a0
    1f30:	00b797b3          	sll	a5,a5,a1
    1f34:	00d76733          	or	a4,a4,a3
    1f38:	00f037b3          	snez	a5,a5
    1f3c:	00f767b3          	or	a5,a4,a5
    1f40:	00a45433          	srl	s0,s0,a0
    1f44:	0077f713          	andi	a4,a5,7
    1f48:	02070063          	beqz	a4,1f68 <__muldf3+0x53c>
    1f4c:	00f7f713          	andi	a4,a5,15
    1f50:	00400693          	li	a3,4
    1f54:	00d70a63          	beq	a4,a3,1f68 <__muldf3+0x53c>
    1f58:	00478713          	addi	a4,a5,4
    1f5c:	00f737b3          	sltu	a5,a4,a5
    1f60:	00f40433          	add	s0,s0,a5
    1f64:	00070793          	mv	a5,a4
    1f68:	00800737          	lui	a4,0x800
    1f6c:	00e47733          	and	a4,s0,a4
    1f70:	06071a63          	bnez	a4,1fe4 <__muldf3+0x5b8>
    1f74:	01d41713          	slli	a4,s0,0x1d
    1f78:	0037d793          	srli	a5,a5,0x3
    1f7c:	00f767b3          	or	a5,a4,a5
    1f80:	00345413          	srli	s0,s0,0x3
    1f84:	00000693          	li	a3,0
    1f88:	eedff06f          	j	1e74 <__muldf3+0x448>
    1f8c:	fe100713          	li	a4,-31
    1f90:	40d70733          	sub	a4,a4,a3
    1f94:	02000813          	li	a6,32
    1f98:	00e45733          	srl	a4,s0,a4
    1f9c:	00000693          	li	a3,0
    1fa0:	01050663          	beq	a0,a6,1fac <__muldf3+0x580>
    1fa4:	43e58593          	addi	a1,a1,1086
    1fa8:	00b416b3          	sll	a3,s0,a1
    1fac:	00f6e7b3          	or	a5,a3,a5
    1fb0:	00f037b3          	snez	a5,a5
    1fb4:	00f767b3          	or	a5,a4,a5
    1fb8:	00000413          	li	s0,0
    1fbc:	f89ff06f          	j	1f44 <__muldf3+0x518>
    1fc0:	00080437          	lui	s0,0x80
    1fc4:	00000793          	li	a5,0
    1fc8:	7ff00693          	li	a3,2047
    1fcc:	00000613          	li	a2,0
    1fd0:	ea5ff06f          	j	1e74 <__muldf3+0x448>
    1fd4:	00000413          	li	s0,0
    1fd8:	00000793          	li	a5,0
    1fdc:	7ff00693          	li	a3,2047
    1fe0:	e95ff06f          	j	1e74 <__muldf3+0x448>
    1fe4:	00000413          	li	s0,0
    1fe8:	00000793          	li	a5,0
    1fec:	00100693          	li	a3,1
    1ff0:	e85ff06f          	j	1e74 <__muldf3+0x448>

00001ff4 <__subdf3>:
    1ff4:	00100837          	lui	a6,0x100
    1ff8:	fff80813          	addi	a6,a6,-1 # fffff <digits+0x7525f>
    1ffc:	fe010113          	addi	sp,sp,-32
    2000:	00b877b3          	and	a5,a6,a1
    2004:	0145d713          	srli	a4,a1,0x14
    2008:	00d87833          	and	a6,a6,a3
    200c:	0146d313          	srli	t1,a3,0x14
    2010:	00812c23          	sw	s0,24(sp)
    2014:	00379793          	slli	a5,a5,0x3
    2018:	7ff77413          	andi	s0,a4,2047
    201c:	01d55713          	srli	a4,a0,0x1d
    2020:	00912a23          	sw	s1,20(sp)
    2024:	00f767b3          	or	a5,a4,a5
    2028:	01f5d493          	srli	s1,a1,0x1f
    202c:	01d65713          	srli	a4,a2,0x1d
    2030:	00351593          	slli	a1,a0,0x3
    2034:	00381813          	slli	a6,a6,0x3
    2038:	00112e23          	sw	ra,28(sp)
    203c:	01212823          	sw	s2,16(sp)
    2040:	01312623          	sw	s3,12(sp)
    2044:	7ff37313          	andi	t1,t1,2047
    2048:	7ff00513          	li	a0,2047
    204c:	01f6d693          	srli	a3,a3,0x1f
    2050:	01076733          	or	a4,a4,a6
    2054:	00361613          	slli	a2,a2,0x3
    2058:	00a31663          	bne	t1,a0,2064 <CONFIG_SRAM_SIZE+0x64>
    205c:	00c76533          	or	a0,a4,a2
    2060:	00051463          	bnez	a0,2068 <CONFIG_SRAM_SIZE+0x68>
    2064:	0016c693          	xori	a3,a3,1
    2068:	40640833          	sub	a6,s0,t1
    206c:	2c969863          	bne	a3,s1,233c <CONFIG_SRAM_SIZE+0x33c>
    2070:	13005063          	blez	a6,2190 <CONFIG_SRAM_SIZE+0x190>
    2074:	04031063          	bnez	t1,20b4 <CONFIG_SRAM_SIZE+0xb4>
    2078:	00c766b3          	or	a3,a4,a2
    207c:	70068c63          	beqz	a3,2794 <CONFIG_SRAM_SIZE+0x794>
    2080:	fff80513          	addi	a0,a6,-1
    2084:	02051063          	bnez	a0,20a4 <CONFIG_SRAM_SIZE+0xa4>
    2088:	00c58633          	add	a2,a1,a2
    208c:	00b63533          	sltu	a0,a2,a1
    2090:	00e787b3          	add	a5,a5,a4
    2094:	00a787b3          	add	a5,a5,a0
    2098:	00060593          	mv	a1,a2
    209c:	00100413          	li	s0,1
    20a0:	0700006f          	j	2110 <CONFIG_SRAM_SIZE+0x110>
    20a4:	7ff00693          	li	a3,2047
    20a8:	02d81063          	bne	a6,a3,20c8 <CONFIG_SRAM_SIZE+0xc8>
    20ac:	7ff00413          	li	s0,2047
    20b0:	2140006f          	j	22c4 <CONFIG_SRAM_SIZE+0x2c4>
    20b4:	7ff00693          	li	a3,2047
    20b8:	20d40663          	beq	s0,a3,22c4 <CONFIG_SRAM_SIZE+0x2c4>
    20bc:	008006b7          	lui	a3,0x800
    20c0:	00d76733          	or	a4,a4,a3
    20c4:	00080513          	mv	a0,a6
    20c8:	03800693          	li	a3,56
    20cc:	0aa6cc63          	blt	a3,a0,2184 <CONFIG_SRAM_SIZE+0x184>
    20d0:	01f00693          	li	a3,31
    20d4:	06a6ce63          	blt	a3,a0,2150 <CONFIG_SRAM_SIZE+0x150>
    20d8:	02000813          	li	a6,32
    20dc:	40a80833          	sub	a6,a6,a0
    20e0:	010716b3          	sll	a3,a4,a6
    20e4:	00a658b3          	srl	a7,a2,a0
    20e8:	01061633          	sll	a2,a2,a6
    20ec:	0116e6b3          	or	a3,a3,a7
    20f0:	00c03633          	snez	a2,a2
    20f4:	00c6e633          	or	a2,a3,a2
    20f8:	00a75733          	srl	a4,a4,a0
    20fc:	00b60633          	add	a2,a2,a1
    2100:	00b63533          	sltu	a0,a2,a1
    2104:	00f70733          	add	a4,a4,a5
    2108:	00a707b3          	add	a5,a4,a0
    210c:	00060593          	mv	a1,a2
    2110:	00800737          	lui	a4,0x800
    2114:	00e7f733          	and	a4,a5,a4
    2118:	1a070663          	beqz	a4,22c4 <CONFIG_SRAM_SIZE+0x2c4>
    211c:	00140413          	addi	s0,s0,1 # 80001 <W1+0x5fc61>
    2120:	7ff00713          	li	a4,2047
    2124:	5ce40a63          	beq	s0,a4,26f8 <CONFIG_SRAM_SIZE+0x6f8>
    2128:	ff800737          	lui	a4,0xff800
    212c:	fff70713          	addi	a4,a4,-1 # ff7fffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xff800000>
    2130:	00e7f7b3          	and	a5,a5,a4
    2134:	0015f513          	andi	a0,a1,1
    2138:	0015d713          	srli	a4,a1,0x1
    213c:	00a76533          	or	a0,a4,a0
    2140:	01f79593          	slli	a1,a5,0x1f
    2144:	00a5e5b3          	or	a1,a1,a0
    2148:	0017d793          	srli	a5,a5,0x1
    214c:	1780006f          	j	22c4 <CONFIG_SRAM_SIZE+0x2c4>
    2150:	fe050693          	addi	a3,a0,-32
    2154:	02000893          	li	a7,32
    2158:	00d756b3          	srl	a3,a4,a3
    215c:	00000813          	li	a6,0
    2160:	01150863          	beq	a0,a7,2170 <CONFIG_SRAM_SIZE+0x170>
    2164:	04000813          	li	a6,64
    2168:	40a80533          	sub	a0,a6,a0
    216c:	00a71833          	sll	a6,a4,a0
    2170:	00c86633          	or	a2,a6,a2
    2174:	00c03633          	snez	a2,a2
    2178:	00c6e633          	or	a2,a3,a2
    217c:	00000713          	li	a4,0
    2180:	f7dff06f          	j	20fc <CONFIG_SRAM_SIZE+0xfc>
    2184:	00c76633          	or	a2,a4,a2
    2188:	00c03633          	snez	a2,a2
    218c:	ff1ff06f          	j	217c <CONFIG_SRAM_SIZE+0x17c>
    2190:	0e080263          	beqz	a6,2274 <CONFIG_SRAM_SIZE+0x274>
    2194:	40830533          	sub	a0,t1,s0
    2198:	02041e63          	bnez	s0,21d4 <CONFIG_SRAM_SIZE+0x1d4>
    219c:	00b7e6b3          	or	a3,a5,a1
    21a0:	52068c63          	beqz	a3,26d8 <CONFIG_SRAM_SIZE+0x6d8>
    21a4:	fff50693          	addi	a3,a0,-1
    21a8:	00069c63          	bnez	a3,21c0 <CONFIG_SRAM_SIZE+0x1c0>
    21ac:	00c585b3          	add	a1,a1,a2
    21b0:	00e787b3          	add	a5,a5,a4
    21b4:	00c5b633          	sltu	a2,a1,a2
    21b8:	00c787b3          	add	a5,a5,a2
    21bc:	ee1ff06f          	j	209c <CONFIG_SRAM_SIZE+0x9c>
    21c0:	7ff00813          	li	a6,2047
    21c4:	03051263          	bne	a0,a6,21e8 <CONFIG_SRAM_SIZE+0x1e8>
    21c8:	00070793          	mv	a5,a4
    21cc:	00060593          	mv	a1,a2
    21d0:	eddff06f          	j	20ac <CONFIG_SRAM_SIZE+0xac>
    21d4:	7ff00693          	li	a3,2047
    21d8:	fed308e3          	beq	t1,a3,21c8 <CONFIG_SRAM_SIZE+0x1c8>
    21dc:	008006b7          	lui	a3,0x800
    21e0:	00d7e7b3          	or	a5,a5,a3
    21e4:	00050693          	mv	a3,a0
    21e8:	03800513          	li	a0,56
    21ec:	06d54e63          	blt	a0,a3,2268 <CONFIG_SRAM_SIZE+0x268>
    21f0:	01f00513          	li	a0,31
    21f4:	04d54063          	blt	a0,a3,2234 <CONFIG_SRAM_SIZE+0x234>
    21f8:	02000813          	li	a6,32
    21fc:	40d80833          	sub	a6,a6,a3
    2200:	01079533          	sll	a0,a5,a6
    2204:	00d5d8b3          	srl	a7,a1,a3
    2208:	010595b3          	sll	a1,a1,a6
    220c:	01156533          	or	a0,a0,a7
    2210:	00b035b3          	snez	a1,a1
    2214:	00b56533          	or	a0,a0,a1
    2218:	00d7d7b3          	srl	a5,a5,a3
    221c:	00c505b3          	add	a1,a0,a2
    2220:	00e787b3          	add	a5,a5,a4
    2224:	00c5b633          	sltu	a2,a1,a2
    2228:	00c787b3          	add	a5,a5,a2
    222c:	00030413          	mv	s0,t1
    2230:	ee1ff06f          	j	2110 <CONFIG_SRAM_SIZE+0x110>
    2234:	fe068513          	addi	a0,a3,-32 # 7fffe0 <__data_region_end+0x5ec7c0>
    2238:	02000893          	li	a7,32
    223c:	00a7d833          	srl	a6,a5,a0
    2240:	00000513          	li	a0,0
    2244:	01168863          	beq	a3,a7,2254 <CONFIG_SRAM_SIZE+0x254>
    2248:	04000513          	li	a0,64
    224c:	40d50533          	sub	a0,a0,a3
    2250:	00a79533          	sll	a0,a5,a0
    2254:	00b56533          	or	a0,a0,a1
    2258:	00a03533          	snez	a0,a0
    225c:	00a86533          	or	a0,a6,a0
    2260:	00000793          	li	a5,0
    2264:	fb9ff06f          	j	221c <CONFIG_SRAM_SIZE+0x21c>
    2268:	00b7e533          	or	a0,a5,a1
    226c:	00a03533          	snez	a0,a0
    2270:	ff1ff06f          	j	2260 <CONFIG_SRAM_SIZE+0x260>
    2274:	00140693          	addi	a3,s0,1
    2278:	7fe6f513          	andi	a0,a3,2046
    227c:	08051863          	bnez	a0,230c <CONFIG_SRAM_SIZE+0x30c>
    2280:	00b7e6b3          	or	a3,a5,a1
    2284:	06041463          	bnez	s0,22ec <CONFIG_SRAM_SIZE+0x2ec>
    2288:	46068063          	beqz	a3,26e8 <CONFIG_SRAM_SIZE+0x6e8>
    228c:	00c766b3          	or	a3,a4,a2
    2290:	02068a63          	beqz	a3,22c4 <CONFIG_SRAM_SIZE+0x2c4>
    2294:	00c58633          	add	a2,a1,a2
    2298:	00e787b3          	add	a5,a5,a4
    229c:	00b63533          	sltu	a0,a2,a1
    22a0:	00a787b3          	add	a5,a5,a0
    22a4:	00800737          	lui	a4,0x800
    22a8:	00e7f733          	and	a4,a5,a4
    22ac:	00060593          	mv	a1,a2
    22b0:	00070a63          	beqz	a4,22c4 <CONFIG_SRAM_SIZE+0x2c4>
    22b4:	ff800737          	lui	a4,0xff800
    22b8:	fff70713          	addi	a4,a4,-1 # ff7fffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xff800000>
    22bc:	00e7f7b3          	and	a5,a5,a4
    22c0:	00100413          	li	s0,1
    22c4:	0075f713          	andi	a4,a1,7
    22c8:	42070c63          	beqz	a4,2700 <CONFIG_SRAM_SIZE+0x700>
    22cc:	00f5f713          	andi	a4,a1,15
    22d0:	00400693          	li	a3,4
    22d4:	42d70663          	beq	a4,a3,2700 <CONFIG_SRAM_SIZE+0x700>
    22d8:	00458713          	addi	a4,a1,4
    22dc:	00b73533          	sltu	a0,a4,a1
    22e0:	00a787b3          	add	a5,a5,a0
    22e4:	00070593          	mv	a1,a4
    22e8:	4180006f          	j	2700 <CONFIG_SRAM_SIZE+0x700>
    22ec:	ec068ee3          	beqz	a3,21c8 <CONFIG_SRAM_SIZE+0x1c8>
    22f0:	00c76633          	or	a2,a4,a2
    22f4:	da060ce3          	beqz	a2,20ac <CONFIG_SRAM_SIZE+0xac>
    22f8:	00000493          	li	s1,0
    22fc:	004007b7          	lui	a5,0x400
    2300:	00000593          	li	a1,0
    2304:	7ff00413          	li	s0,2047
    2308:	3f80006f          	j	2700 <CONFIG_SRAM_SIZE+0x700>
    230c:	7ff00513          	li	a0,2047
    2310:	3ea68263          	beq	a3,a0,26f4 <CONFIG_SRAM_SIZE+0x6f4>
    2314:	00c58633          	add	a2,a1,a2
    2318:	00b63533          	sltu	a0,a2,a1
    231c:	00e787b3          	add	a5,a5,a4
    2320:	00a787b3          	add	a5,a5,a0
    2324:	01f79513          	slli	a0,a5,0x1f
    2328:	00165613          	srli	a2,a2,0x1
    232c:	00c565b3          	or	a1,a0,a2
    2330:	0017d793          	srli	a5,a5,0x1
    2334:	00068413          	mv	s0,a3
    2338:	f8dff06f          	j	22c4 <CONFIG_SRAM_SIZE+0x2c4>
    233c:	0f005c63          	blez	a6,2434 <CONFIG_SRAM_SIZE+0x434>
    2340:	08031e63          	bnez	t1,23dc <CONFIG_SRAM_SIZE+0x3dc>
    2344:	00c766b3          	or	a3,a4,a2
    2348:	44068663          	beqz	a3,2794 <CONFIG_SRAM_SIZE+0x794>
    234c:	fff80513          	addi	a0,a6,-1
    2350:	02051063          	bnez	a0,2370 <CONFIG_SRAM_SIZE+0x370>
    2354:	40c58633          	sub	a2,a1,a2
    2358:	00c5b533          	sltu	a0,a1,a2
    235c:	40e787b3          	sub	a5,a5,a4
    2360:	40a787b3          	sub	a5,a5,a0
    2364:	00060593          	mv	a1,a2
    2368:	00100413          	li	s0,1
    236c:	0540006f          	j	23c0 <CONFIG_SRAM_SIZE+0x3c0>
    2370:	7ff00693          	li	a3,2047
    2374:	d2d80ce3          	beq	a6,a3,20ac <CONFIG_SRAM_SIZE+0xac>
    2378:	03800693          	li	a3,56
    237c:	0aa6c663          	blt	a3,a0,2428 <CONFIG_SRAM_SIZE+0x428>
    2380:	01f00693          	li	a3,31
    2384:	06a6c863          	blt	a3,a0,23f4 <CONFIG_SRAM_SIZE+0x3f4>
    2388:	02000813          	li	a6,32
    238c:	40a80833          	sub	a6,a6,a0
    2390:	010716b3          	sll	a3,a4,a6
    2394:	00a658b3          	srl	a7,a2,a0
    2398:	01061633          	sll	a2,a2,a6
    239c:	0116e6b3          	or	a3,a3,a7
    23a0:	00c03633          	snez	a2,a2
    23a4:	00c6e633          	or	a2,a3,a2
    23a8:	00a75733          	srl	a4,a4,a0
    23ac:	40c58633          	sub	a2,a1,a2
    23b0:	00c5b533          	sltu	a0,a1,a2
    23b4:	40e78733          	sub	a4,a5,a4
    23b8:	40a707b3          	sub	a5,a4,a0
    23bc:	00060593          	mv	a1,a2
    23c0:	00800937          	lui	s2,0x800
    23c4:	0127f733          	and	a4,a5,s2
    23c8:	ee070ee3          	beqz	a4,22c4 <CONFIG_SRAM_SIZE+0x2c4>
    23cc:	fff90913          	addi	s2,s2,-1 # 7fffff <__data_region_end+0x5ec7df>
    23d0:	0127f933          	and	s2,a5,s2
    23d4:	00058993          	mv	s3,a1
    23d8:	2140006f          	j	25ec <CONFIG_SRAM_SIZE+0x5ec>
    23dc:	7ff00693          	li	a3,2047
    23e0:	eed402e3          	beq	s0,a3,22c4 <CONFIG_SRAM_SIZE+0x2c4>
    23e4:	008006b7          	lui	a3,0x800
    23e8:	00d76733          	or	a4,a4,a3
    23ec:	00080513          	mv	a0,a6
    23f0:	f89ff06f          	j	2378 <CONFIG_SRAM_SIZE+0x378>
    23f4:	fe050693          	addi	a3,a0,-32
    23f8:	02000893          	li	a7,32
    23fc:	00d756b3          	srl	a3,a4,a3
    2400:	00000813          	li	a6,0
    2404:	01150863          	beq	a0,a7,2414 <CONFIG_SRAM_SIZE+0x414>
    2408:	04000813          	li	a6,64
    240c:	40a80533          	sub	a0,a6,a0
    2410:	00a71833          	sll	a6,a4,a0
    2414:	00c86633          	or	a2,a6,a2
    2418:	00c03633          	snez	a2,a2
    241c:	00c6e633          	or	a2,a3,a2
    2420:	00000713          	li	a4,0
    2424:	f89ff06f          	j	23ac <CONFIG_SRAM_SIZE+0x3ac>
    2428:	00c76633          	or	a2,a4,a2
    242c:	00c03633          	snez	a2,a2
    2430:	ff1ff06f          	j	2420 <CONFIG_SRAM_SIZE+0x420>
    2434:	0e080863          	beqz	a6,2524 <CONFIG_SRAM_SIZE+0x524>
    2438:	40830533          	sub	a0,t1,s0
    243c:	04041263          	bnez	s0,2480 <CONFIG_SRAM_SIZE+0x480>
    2440:	00b7e833          	or	a6,a5,a1
    2444:	34080c63          	beqz	a6,279c <CONFIG_SRAM_SIZE+0x79c>
    2448:	fff50813          	addi	a6,a0,-1
    244c:	00081e63          	bnez	a6,2468 <CONFIG_SRAM_SIZE+0x468>
    2450:	40b605b3          	sub	a1,a2,a1
    2454:	40f707b3          	sub	a5,a4,a5
    2458:	00b63633          	sltu	a2,a2,a1
    245c:	40c787b3          	sub	a5,a5,a2
    2460:	00068493          	mv	s1,a3
    2464:	f05ff06f          	j	2368 <CONFIG_SRAM_SIZE+0x368>
    2468:	7ff00893          	li	a7,2047
    246c:	03151463          	bne	a0,a7,2494 <CONFIG_SRAM_SIZE+0x494>
    2470:	00070793          	mv	a5,a4
    2474:	00060593          	mv	a1,a2
    2478:	7ff00413          	li	s0,2047
    247c:	0d00006f          	j	254c <CONFIG_SRAM_SIZE+0x54c>
    2480:	7ff00813          	li	a6,2047
    2484:	ff0306e3          	beq	t1,a6,2470 <CONFIG_SRAM_SIZE+0x470>
    2488:	00800837          	lui	a6,0x800
    248c:	0107e7b3          	or	a5,a5,a6
    2490:	00050813          	mv	a6,a0
    2494:	03800513          	li	a0,56
    2498:	09054063          	blt	a0,a6,2518 <CONFIG_SRAM_SIZE+0x518>
    249c:	01f00513          	li	a0,31
    24a0:	05054263          	blt	a0,a6,24e4 <CONFIG_SRAM_SIZE+0x4e4>
    24a4:	02000893          	li	a7,32
    24a8:	410888b3          	sub	a7,a7,a6
    24ac:	01179533          	sll	a0,a5,a7
    24b0:	0105de33          	srl	t3,a1,a6
    24b4:	011595b3          	sll	a1,a1,a7
    24b8:	01c56533          	or	a0,a0,t3
    24bc:	00b035b3          	snez	a1,a1
    24c0:	00b56533          	or	a0,a0,a1
    24c4:	0107d7b3          	srl	a5,a5,a6
    24c8:	40a605b3          	sub	a1,a2,a0
    24cc:	40f707b3          	sub	a5,a4,a5
    24d0:	00b63633          	sltu	a2,a2,a1
    24d4:	40c787b3          	sub	a5,a5,a2
    24d8:	00030413          	mv	s0,t1
    24dc:	00068493          	mv	s1,a3
    24e0:	ee1ff06f          	j	23c0 <CONFIG_SRAM_SIZE+0x3c0>
    24e4:	fe080513          	addi	a0,a6,-32 # 7fffe0 <__data_region_end+0x5ec7c0>
    24e8:	02000e13          	li	t3,32
    24ec:	00a7d8b3          	srl	a7,a5,a0
    24f0:	00000513          	li	a0,0
    24f4:	01c80863          	beq	a6,t3,2504 <CONFIG_SRAM_SIZE+0x504>
    24f8:	04000513          	li	a0,64
    24fc:	41050533          	sub	a0,a0,a6
    2500:	00a79533          	sll	a0,a5,a0
    2504:	00b56533          	or	a0,a0,a1
    2508:	00a03533          	snez	a0,a0
    250c:	00a8e533          	or	a0,a7,a0
    2510:	00000793          	li	a5,0
    2514:	fb5ff06f          	j	24c8 <CONFIG_SRAM_SIZE+0x4c8>
    2518:	00b7e533          	or	a0,a5,a1
    251c:	00a03533          	snez	a0,a0
    2520:	ff1ff06f          	j	2510 <CONFIG_SRAM_SIZE+0x510>
    2524:	00140513          	addi	a0,s0,1
    2528:	7fe57513          	andi	a0,a0,2046
    252c:	08051863          	bnez	a0,25bc <CONFIG_SRAM_SIZE+0x5bc>
    2530:	00c76533          	or	a0,a4,a2
    2534:	00b7e833          	or	a6,a5,a1
    2538:	06041263          	bnez	s0,259c <CONFIG_SRAM_SIZE+0x59c>
    253c:	00081c63          	bnez	a6,2554 <CONFIG_SRAM_SIZE+0x554>
    2540:	26050663          	beqz	a0,27ac <CONFIG_SRAM_SIZE+0x7ac>
    2544:	00070793          	mv	a5,a4
    2548:	00060593          	mv	a1,a2
    254c:	00068493          	mv	s1,a3
    2550:	d75ff06f          	j	22c4 <CONFIG_SRAM_SIZE+0x2c4>
    2554:	d60508e3          	beqz	a0,22c4 <CONFIG_SRAM_SIZE+0x2c4>
    2558:	40c58833          	sub	a6,a1,a2
    255c:	0105b8b3          	sltu	a7,a1,a6
    2560:	40e78533          	sub	a0,a5,a4
    2564:	41150533          	sub	a0,a0,a7
    2568:	008008b7          	lui	a7,0x800
    256c:	011578b3          	and	a7,a0,a7
    2570:	00088c63          	beqz	a7,2588 <CONFIG_SRAM_SIZE+0x588>
    2574:	40b605b3          	sub	a1,a2,a1
    2578:	40f707b3          	sub	a5,a4,a5
    257c:	00b63633          	sltu	a2,a2,a1
    2580:	40c787b3          	sub	a5,a5,a2
    2584:	fc9ff06f          	j	254c <CONFIG_SRAM_SIZE+0x54c>
    2588:	00a865b3          	or	a1,a6,a0
    258c:	22058863          	beqz	a1,27bc <CONFIG_SRAM_SIZE+0x7bc>
    2590:	00050793          	mv	a5,a0
    2594:	00080593          	mv	a1,a6
    2598:	d2dff06f          	j	22c4 <CONFIG_SRAM_SIZE+0x2c4>
    259c:	00081c63          	bnez	a6,25b4 <CONFIG_SRAM_SIZE+0x5b4>
    25a0:	22050263          	beqz	a0,27c4 <CONFIG_SRAM_SIZE+0x7c4>
    25a4:	00070793          	mv	a5,a4
    25a8:	00060593          	mv	a1,a2
    25ac:	00068493          	mv	s1,a3
    25b0:	afdff06f          	j	20ac <CONFIG_SRAM_SIZE+0xac>
    25b4:	ae050ce3          	beqz	a0,20ac <CONFIG_SRAM_SIZE+0xac>
    25b8:	d41ff06f          	j	22f8 <CONFIG_SRAM_SIZE+0x2f8>
    25bc:	40c589b3          	sub	s3,a1,a2
    25c0:	0135b533          	sltu	a0,a1,s3
    25c4:	40e78933          	sub	s2,a5,a4
    25c8:	40a90933          	sub	s2,s2,a0
    25cc:	00800537          	lui	a0,0x800
    25d0:	00a97533          	and	a0,s2,a0
    25d4:	08050463          	beqz	a0,265c <CONFIG_SRAM_SIZE+0x65c>
    25d8:	40b609b3          	sub	s3,a2,a1
    25dc:	40f707b3          	sub	a5,a4,a5
    25e0:	01363633          	sltu	a2,a2,s3
    25e4:	40c78933          	sub	s2,a5,a2
    25e8:	00068493          	mv	s1,a3
    25ec:	08090263          	beqz	s2,2670 <CONFIG_SRAM_SIZE+0x670>
    25f0:	00090513          	mv	a0,s2
    25f4:	cfdfd0ef          	jal	ra,2f0 <__clzsi2>
    25f8:	ff850713          	addi	a4,a0,-8 # 7ffff8 <__data_region_end+0x5ec7d8>
    25fc:	01f00793          	li	a5,31
    2600:	08e7c063          	blt	a5,a4,2680 <CONFIG_SRAM_SIZE+0x680>
    2604:	02000793          	li	a5,32
    2608:	40e787b3          	sub	a5,a5,a4
    260c:	00e91933          	sll	s2,s2,a4
    2610:	00f9d7b3          	srl	a5,s3,a5
    2614:	0127e7b3          	or	a5,a5,s2
    2618:	00e995b3          	sll	a1,s3,a4
    261c:	0a874463          	blt	a4,s0,26c4 <CONFIG_SRAM_SIZE+0x6c4>
    2620:	40870733          	sub	a4,a4,s0
    2624:	00170693          	addi	a3,a4,1
    2628:	01f00613          	li	a2,31
    262c:	06d64263          	blt	a2,a3,2690 <CONFIG_SRAM_SIZE+0x690>
    2630:	02000713          	li	a4,32
    2634:	40d70733          	sub	a4,a4,a3
    2638:	00e79633          	sll	a2,a5,a4
    263c:	00d5d533          	srl	a0,a1,a3
    2640:	00e595b3          	sll	a1,a1,a4
    2644:	00a66633          	or	a2,a2,a0
    2648:	00b035b3          	snez	a1,a1
    264c:	00b665b3          	or	a1,a2,a1
    2650:	00d7d7b3          	srl	a5,a5,a3
    2654:	00000413          	li	s0,0
    2658:	c6dff06f          	j	22c4 <CONFIG_SRAM_SIZE+0x2c4>
    265c:	0129e5b3          	or	a1,s3,s2
    2660:	f80596e3          	bnez	a1,25ec <CONFIG_SRAM_SIZE+0x5ec>
    2664:	00000793          	li	a5,0
    2668:	00000413          	li	s0,0
    266c:	1480006f          	j	27b4 <CONFIG_SRAM_SIZE+0x7b4>
    2670:	00098513          	mv	a0,s3
    2674:	c7dfd0ef          	jal	ra,2f0 <__clzsi2>
    2678:	02050513          	addi	a0,a0,32
    267c:	f7dff06f          	j	25f8 <CONFIG_SRAM_SIZE+0x5f8>
    2680:	fd850793          	addi	a5,a0,-40
    2684:	00f997b3          	sll	a5,s3,a5
    2688:	00000593          	li	a1,0
    268c:	f91ff06f          	j	261c <CONFIG_SRAM_SIZE+0x61c>
    2690:	fe170713          	addi	a4,a4,-31
    2694:	02000613          	li	a2,32
    2698:	00e7d733          	srl	a4,a5,a4
    269c:	00000513          	li	a0,0
    26a0:	00c68863          	beq	a3,a2,26b0 <CONFIG_SRAM_SIZE+0x6b0>
    26a4:	04000513          	li	a0,64
    26a8:	40d50533          	sub	a0,a0,a3
    26ac:	00a79533          	sll	a0,a5,a0
    26b0:	00a5e533          	or	a0,a1,a0
    26b4:	00a03533          	snez	a0,a0
    26b8:	00a765b3          	or	a1,a4,a0
    26bc:	00000793          	li	a5,0
    26c0:	f95ff06f          	j	2654 <CONFIG_SRAM_SIZE+0x654>
    26c4:	40e40433          	sub	s0,s0,a4
    26c8:	ff800737          	lui	a4,0xff800
    26cc:	fff70713          	addi	a4,a4,-1 # ff7fffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xff800000>
    26d0:	00e7f7b3          	and	a5,a5,a4
    26d4:	bf1ff06f          	j	22c4 <CONFIG_SRAM_SIZE+0x2c4>
    26d8:	00070793          	mv	a5,a4
    26dc:	00060593          	mv	a1,a2
    26e0:	00050413          	mv	s0,a0
    26e4:	be1ff06f          	j	22c4 <CONFIG_SRAM_SIZE+0x2c4>
    26e8:	00070793          	mv	a5,a4
    26ec:	00060593          	mv	a1,a2
    26f0:	bd5ff06f          	j	22c4 <CONFIG_SRAM_SIZE+0x2c4>
    26f4:	7ff00413          	li	s0,2047
    26f8:	00000793          	li	a5,0
    26fc:	00000593          	li	a1,0
    2700:	00800737          	lui	a4,0x800
    2704:	00e7f733          	and	a4,a5,a4
    2708:	00070e63          	beqz	a4,2724 <CONFIG_SRAM_SIZE+0x724>
    270c:	00140413          	addi	s0,s0,1
    2710:	7ff00713          	li	a4,2047
    2714:	0ce40063          	beq	s0,a4,27d4 <CONFIG_SRAM_SIZE+0x7d4>
    2718:	ff800737          	lui	a4,0xff800
    271c:	fff70713          	addi	a4,a4,-1 # ff7fffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xff800000>
    2720:	00e7f7b3          	and	a5,a5,a4
    2724:	01d79713          	slli	a4,a5,0x1d
    2728:	0035d513          	srli	a0,a1,0x3
    272c:	00a76533          	or	a0,a4,a0
    2730:	7ff00713          	li	a4,2047
    2734:	0037d793          	srli	a5,a5,0x3
    2738:	00e41e63          	bne	s0,a4,2754 <CONFIG_SRAM_SIZE+0x754>
    273c:	00f56533          	or	a0,a0,a5
    2740:	00000793          	li	a5,0
    2744:	00050863          	beqz	a0,2754 <CONFIG_SRAM_SIZE+0x754>
    2748:	000807b7          	lui	a5,0x80
    274c:	00000513          	li	a0,0
    2750:	00000493          	li	s1,0
    2754:	01441713          	slli	a4,s0,0x14
    2758:	7ff006b7          	lui	a3,0x7ff00
    275c:	00c79793          	slli	a5,a5,0xc
    2760:	01c12083          	lw	ra,28(sp)
    2764:	01812403          	lw	s0,24(sp)
    2768:	00d77733          	and	a4,a4,a3
    276c:	00c7d793          	srli	a5,a5,0xc
    2770:	01f49493          	slli	s1,s1,0x1f
    2774:	00f767b3          	or	a5,a4,a5
    2778:	0097e733          	or	a4,a5,s1
    277c:	01012903          	lw	s2,16(sp)
    2780:	01412483          	lw	s1,20(sp)
    2784:	00c12983          	lw	s3,12(sp)
    2788:	00070593          	mv	a1,a4
    278c:	02010113          	addi	sp,sp,32
    2790:	00008067          	ret
    2794:	00080413          	mv	s0,a6
    2798:	b2dff06f          	j	22c4 <CONFIG_SRAM_SIZE+0x2c4>
    279c:	00070793          	mv	a5,a4
    27a0:	00060593          	mv	a1,a2
    27a4:	00050413          	mv	s0,a0
    27a8:	da5ff06f          	j	254c <CONFIG_SRAM_SIZE+0x54c>
    27ac:	00000793          	li	a5,0
    27b0:	00000593          	li	a1,0
    27b4:	00000493          	li	s1,0
    27b8:	f49ff06f          	j	2700 <CONFIG_SRAM_SIZE+0x700>
    27bc:	00000793          	li	a5,0
    27c0:	ff5ff06f          	j	27b4 <CONFIG_SRAM_SIZE+0x7b4>
    27c4:	00000593          	li	a1,0
    27c8:	00000493          	li	s1,0
    27cc:	004007b7          	lui	a5,0x400
    27d0:	b35ff06f          	j	2304 <CONFIG_SRAM_SIZE+0x304>
    27d4:	00000793          	li	a5,0
    27d8:	00000593          	li	a1,0
    27dc:	f49ff06f          	j	2724 <CONFIG_SRAM_SIZE+0x724>

000027e0 <__floatunsidf>:
    27e0:	ff010113          	addi	sp,sp,-16
    27e4:	00812423          	sw	s0,8(sp)
    27e8:	00112623          	sw	ra,12(sp)
    27ec:	00050413          	mv	s0,a0
    27f0:	06050263          	beqz	a0,2854 <__floatunsidf+0x74>
    27f4:	afdfd0ef          	jal	ra,2f0 <__clzsi2>
    27f8:	41e00713          	li	a4,1054
    27fc:	00a00793          	li	a5,10
    2800:	40a70733          	sub	a4,a4,a0
    2804:	04a7c063          	blt	a5,a0,2844 <__floatunsidf+0x64>
    2808:	00b00793          	li	a5,11
    280c:	40a787b3          	sub	a5,a5,a0
    2810:	01550513          	addi	a0,a0,21
    2814:	00f457b3          	srl	a5,s0,a5
    2818:	00a41433          	sll	s0,s0,a0
    281c:	00c12083          	lw	ra,12(sp)
    2820:	00040513          	mv	a0,s0
    2824:	00c79793          	slli	a5,a5,0xc
    2828:	00812403          	lw	s0,8(sp)
    282c:	01471713          	slli	a4,a4,0x14
    2830:	00c7d793          	srli	a5,a5,0xc
    2834:	00f766b3          	or	a3,a4,a5
    2838:	00068593          	mv	a1,a3
    283c:	01010113          	addi	sp,sp,16
    2840:	00008067          	ret
    2844:	ff550793          	addi	a5,a0,-11
    2848:	00f417b3          	sll	a5,s0,a5
    284c:	00000413          	li	s0,0
    2850:	fcdff06f          	j	281c <__floatunsidf+0x3c>
    2854:	00000793          	li	a5,0
    2858:	00000713          	li	a4,0
    285c:	fc1ff06f          	j	281c <__floatunsidf+0x3c>

00002860 <__gesf2>:
    2860:	01755693          	srli	a3,a0,0x17
    2864:	008007b7          	lui	a5,0x800
    2868:	fff78793          	addi	a5,a5,-1 # 7fffff <__data_region_end+0x5ec7df>
    286c:	0175d713          	srli	a4,a1,0x17
    2870:	0ff6f693          	andi	a3,a3,255
    2874:	0ff00813          	li	a6,255
    2878:	00a7f633          	and	a2,a5,a0
    287c:	0ff77713          	andi	a4,a4,255
    2880:	00b7f7b3          	and	a5,a5,a1
    2884:	01f55513          	srli	a0,a0,0x1f
    2888:	01f5d593          	srli	a1,a1,0x1f
    288c:	01069863          	bne	a3,a6,289c <__gesf2+0x3c>
    2890:	06060a63          	beqz	a2,2904 <__gesf2+0xa4>
    2894:	ffe00513          	li	a0,-2
    2898:	00008067          	ret
    289c:	01071463          	bne	a4,a6,28a4 <__gesf2+0x44>
    28a0:	fe079ae3          	bnez	a5,2894 <__gesf2+0x34>
    28a4:	06069263          	bnez	a3,2908 <__gesf2+0xa8>
    28a8:	00071463          	bnez	a4,28b0 <__gesf2+0x50>
    28ac:	04078863          	beqz	a5,28fc <__gesf2+0x9c>
    28b0:	00060c63          	beqz	a2,28c8 <__gesf2+0x68>
    28b4:	00b51463          	bne	a0,a1,28bc <__gesf2+0x5c>
    28b8:	02d75063          	bge	a4,a3,28d8 <__gesf2+0x78>
    28bc:	02050c63          	beqz	a0,28f4 <__gesf2+0x94>
    28c0:	fff00513          	li	a0,-1
    28c4:	00008067          	ret
    28c8:	fff00513          	li	a0,-1
    28cc:	00058a63          	beqz	a1,28e0 <__gesf2+0x80>
    28d0:	00058513          	mv	a0,a1
    28d4:	00008067          	ret
    28d8:	00e6d663          	bge	a3,a4,28e4 <__gesf2+0x84>
    28dc:	fe0502e3          	beqz	a0,28c0 <__gesf2+0x60>
    28e0:	00008067          	ret
    28e4:	fcc7ece3          	bltu	a5,a2,28bc <__gesf2+0x5c>
    28e8:	fef66ae3          	bltu	a2,a5,28dc <__gesf2+0x7c>
    28ec:	00000513          	li	a0,0
    28f0:	00008067          	ret
    28f4:	00100513          	li	a0,1
    28f8:	00008067          	ret
    28fc:	fe0608e3          	beqz	a2,28ec <__gesf2+0x8c>
    2900:	fbdff06f          	j	28bc <__gesf2+0x5c>
    2904:	f8d70ee3          	beq	a4,a3,28a0 <__gesf2+0x40>
    2908:	fa0716e3          	bnez	a4,28b4 <__gesf2+0x54>
    290c:	fa0788e3          	beqz	a5,28bc <__gesf2+0x5c>
    2910:	fa5ff06f          	j	28b4 <__gesf2+0x54>

00002914 <__lesf2>:
    2914:	01755693          	srli	a3,a0,0x17
    2918:	008007b7          	lui	a5,0x800
    291c:	fff78793          	addi	a5,a5,-1 # 7fffff <__data_region_end+0x5ec7df>
    2920:	0175d713          	srli	a4,a1,0x17
    2924:	0ff6f693          	andi	a3,a3,255
    2928:	0ff00813          	li	a6,255
    292c:	00a7f633          	and	a2,a5,a0
    2930:	0ff77713          	andi	a4,a4,255
    2934:	00b7f7b3          	and	a5,a5,a1
    2938:	01f55513          	srli	a0,a0,0x1f
    293c:	01f5d593          	srli	a1,a1,0x1f
    2940:	01069863          	bne	a3,a6,2950 <__lesf2+0x3c>
    2944:	06060a63          	beqz	a2,29b8 <__lesf2+0xa4>
    2948:	00200513          	li	a0,2
    294c:	00008067          	ret
    2950:	01071463          	bne	a4,a6,2958 <__lesf2+0x44>
    2954:	fe079ae3          	bnez	a5,2948 <__lesf2+0x34>
    2958:	06069263          	bnez	a3,29bc <__lesf2+0xa8>
    295c:	00071463          	bnez	a4,2964 <__lesf2+0x50>
    2960:	04078863          	beqz	a5,29b0 <__lesf2+0x9c>
    2964:	00060c63          	beqz	a2,297c <__lesf2+0x68>
    2968:	00b51463          	bne	a0,a1,2970 <__lesf2+0x5c>
    296c:	02d75063          	bge	a4,a3,298c <__lesf2+0x78>
    2970:	02050c63          	beqz	a0,29a8 <__lesf2+0x94>
    2974:	fff00513          	li	a0,-1
    2978:	00008067          	ret
    297c:	fff00513          	li	a0,-1
    2980:	00058a63          	beqz	a1,2994 <__lesf2+0x80>
    2984:	00058513          	mv	a0,a1
    2988:	00008067          	ret
    298c:	00e6d663          	bge	a3,a4,2998 <__lesf2+0x84>
    2990:	fe0502e3          	beqz	a0,2974 <__lesf2+0x60>
    2994:	00008067          	ret
    2998:	fcc7ece3          	bltu	a5,a2,2970 <__lesf2+0x5c>
    299c:	fef66ae3          	bltu	a2,a5,2990 <__lesf2+0x7c>
    29a0:	00000513          	li	a0,0
    29a4:	00008067          	ret
    29a8:	00100513          	li	a0,1
    29ac:	00008067          	ret
    29b0:	fe0608e3          	beqz	a2,29a0 <__lesf2+0x8c>
    29b4:	fbdff06f          	j	2970 <__lesf2+0x5c>
    29b8:	f8d70ee3          	beq	a4,a3,2954 <__lesf2+0x40>
    29bc:	fa0716e3          	bnez	a4,2968 <__lesf2+0x54>
    29c0:	fa0788e3          	beqz	a5,2970 <__lesf2+0x5c>
    29c4:	fa5ff06f          	j	2968 <__lesf2+0x54>

000029c8 <__mulsf3>:
    29c8:	fe010113          	addi	sp,sp,-32
    29cc:	01212823          	sw	s2,16(sp)
    29d0:	01755913          	srli	s2,a0,0x17
    29d4:	00912a23          	sw	s1,20(sp)
    29d8:	01312623          	sw	s3,12(sp)
    29dc:	01412423          	sw	s4,8(sp)
    29e0:	00951493          	slli	s1,a0,0x9
    29e4:	00112e23          	sw	ra,28(sp)
    29e8:	00812c23          	sw	s0,24(sp)
    29ec:	01512223          	sw	s5,4(sp)
    29f0:	0ff97913          	andi	s2,s2,255
    29f4:	00058a13          	mv	s4,a1
    29f8:	0094d493          	srli	s1,s1,0x9
    29fc:	01f55993          	srli	s3,a0,0x1f
    2a00:	08090663          	beqz	s2,2a8c <__mulsf3+0xc4>
    2a04:	0ff00793          	li	a5,255
    2a08:	0af90263          	beq	s2,a5,2aac <__mulsf3+0xe4>
    2a0c:	00349493          	slli	s1,s1,0x3
    2a10:	040007b7          	lui	a5,0x4000
    2a14:	00f4e4b3          	or	s1,s1,a5
    2a18:	f8190913          	addi	s2,s2,-127
    2a1c:	00000a93          	li	s5,0
    2a20:	017a5513          	srli	a0,s4,0x17
    2a24:	009a1413          	slli	s0,s4,0x9
    2a28:	0ff57513          	andi	a0,a0,255
    2a2c:	00945413          	srli	s0,s0,0x9
    2a30:	01fa5a13          	srli	s4,s4,0x1f
    2a34:	08050c63          	beqz	a0,2acc <__mulsf3+0x104>
    2a38:	0ff00793          	li	a5,255
    2a3c:	0af50863          	beq	a0,a5,2aec <__mulsf3+0x124>
    2a40:	00341413          	slli	s0,s0,0x3
    2a44:	040007b7          	lui	a5,0x4000
    2a48:	00f46433          	or	s0,s0,a5
    2a4c:	f8150513          	addi	a0,a0,-127
    2a50:	00000793          	li	a5,0
    2a54:	002a9713          	slli	a4,s5,0x2
    2a58:	00f76733          	or	a4,a4,a5
    2a5c:	00a90533          	add	a0,s2,a0
    2a60:	fff70713          	addi	a4,a4,-1
    2a64:	00e00593          	li	a1,14
    2a68:	0149c6b3          	xor	a3,s3,s4
    2a6c:	00150613          	addi	a2,a0,1
    2a70:	08e5ee63          	bltu	a1,a4,2b0c <__mulsf3+0x144>
    2a74:	0000d5b7          	lui	a1,0xd
    2a78:	00271713          	slli	a4,a4,0x2
    2a7c:	aa458593          	addi	a1,a1,-1372 # caa4 <__clz_tab+0x178>
    2a80:	00b70733          	add	a4,a4,a1
    2a84:	00072703          	lw	a4,0(a4)
    2a88:	00070067          	jr	a4
    2a8c:	02048a63          	beqz	s1,2ac0 <__mulsf3+0xf8>
    2a90:	00048513          	mv	a0,s1
    2a94:	85dfd0ef          	jal	ra,2f0 <__clzsi2>
    2a98:	ffb50793          	addi	a5,a0,-5
    2a9c:	f8a00913          	li	s2,-118
    2aa0:	00f494b3          	sll	s1,s1,a5
    2aa4:	40a90933          	sub	s2,s2,a0
    2aa8:	f75ff06f          	j	2a1c <__mulsf3+0x54>
    2aac:	0ff00913          	li	s2,255
    2ab0:	00200a93          	li	s5,2
    2ab4:	f60486e3          	beqz	s1,2a20 <__mulsf3+0x58>
    2ab8:	00300a93          	li	s5,3
    2abc:	f65ff06f          	j	2a20 <__mulsf3+0x58>
    2ac0:	00000913          	li	s2,0
    2ac4:	00100a93          	li	s5,1
    2ac8:	f59ff06f          	j	2a20 <__mulsf3+0x58>
    2acc:	02040a63          	beqz	s0,2b00 <__mulsf3+0x138>
    2ad0:	00040513          	mv	a0,s0
    2ad4:	81dfd0ef          	jal	ra,2f0 <__clzsi2>
    2ad8:	ffb50793          	addi	a5,a0,-5
    2adc:	00f41433          	sll	s0,s0,a5
    2ae0:	f8a00793          	li	a5,-118
    2ae4:	40a78533          	sub	a0,a5,a0
    2ae8:	f69ff06f          	j	2a50 <__mulsf3+0x88>
    2aec:	0ff00513          	li	a0,255
    2af0:	00200793          	li	a5,2
    2af4:	f60400e3          	beqz	s0,2a54 <__mulsf3+0x8c>
    2af8:	00300793          	li	a5,3
    2afc:	f59ff06f          	j	2a54 <__mulsf3+0x8c>
    2b00:	00000513          	li	a0,0
    2b04:	00100793          	li	a5,1
    2b08:	f4dff06f          	j	2a54 <__mulsf3+0x8c>
    2b0c:	000107b7          	lui	a5,0x10
    2b10:	fff78313          	addi	t1,a5,-1 # ffff <stacks+0xa5f>
    2b14:	0104d713          	srli	a4,s1,0x10
    2b18:	01045593          	srli	a1,s0,0x10
    2b1c:	0064f4b3          	and	s1,s1,t1
    2b20:	00647433          	and	s0,s0,t1
    2b24:	029408b3          	mul	a7,s0,s1
    2b28:	02870833          	mul	a6,a4,s0
    2b2c:	02b70433          	mul	s0,a4,a1
    2b30:	029585b3          	mul	a1,a1,s1
    2b34:	0108d493          	srli	s1,a7,0x10
    2b38:	010585b3          	add	a1,a1,a6
    2b3c:	00b484b3          	add	s1,s1,a1
    2b40:	0104f463          	bgeu	s1,a6,2b48 <__mulsf3+0x180>
    2b44:	00f40433          	add	s0,s0,a5
    2b48:	0064f7b3          	and	a5,s1,t1
    2b4c:	01079793          	slli	a5,a5,0x10
    2b50:	0068f8b3          	and	a7,a7,t1
    2b54:	011787b3          	add	a5,a5,a7
    2b58:	00679713          	slli	a4,a5,0x6
    2b5c:	0104d493          	srli	s1,s1,0x10
    2b60:	00e03733          	snez	a4,a4
    2b64:	01a7d793          	srli	a5,a5,0x1a
    2b68:	00848433          	add	s0,s1,s0
    2b6c:	00f767b3          	or	a5,a4,a5
    2b70:	00641413          	slli	s0,s0,0x6
    2b74:	00f46433          	or	s0,s0,a5
    2b78:	080007b7          	lui	a5,0x8000
    2b7c:	00f477b3          	and	a5,s0,a5
    2b80:	08078e63          	beqz	a5,2c1c <__mulsf3+0x254>
    2b84:	00145793          	srli	a5,s0,0x1
    2b88:	00147413          	andi	s0,s0,1
    2b8c:	0087e433          	or	s0,a5,s0
    2b90:	07f60713          	addi	a4,a2,127 # 7ff0007f <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7cf50fff>
    2b94:	08e05863          	blez	a4,2c24 <__mulsf3+0x25c>
    2b98:	00747793          	andi	a5,s0,7
    2b9c:	00078a63          	beqz	a5,2bb0 <__mulsf3+0x1e8>
    2ba0:	00f47793          	andi	a5,s0,15
    2ba4:	00400593          	li	a1,4
    2ba8:	00b78463          	beq	a5,a1,2bb0 <__mulsf3+0x1e8>
    2bac:	00440413          	addi	s0,s0,4
    2bb0:	080007b7          	lui	a5,0x8000
    2bb4:	00f477b3          	and	a5,s0,a5
    2bb8:	00078a63          	beqz	a5,2bcc <__mulsf3+0x204>
    2bbc:	f80007b7          	lui	a5,0xf8000
    2bc0:	fff78793          	addi	a5,a5,-1 # f7ffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xf8000000>
    2bc4:	00f47433          	and	s0,s0,a5
    2bc8:	08060713          	addi	a4,a2,128
    2bcc:	0fe00793          	li	a5,254
    2bd0:	00345413          	srli	s0,s0,0x3
    2bd4:	0ae7da63          	bge	a5,a4,2c88 <__mulsf3+0x2c0>
    2bd8:	00000413          	li	s0,0
    2bdc:	0ff00713          	li	a4,255
    2be0:	0a80006f          	j	2c88 <__mulsf3+0x2c0>
    2be4:	00098693          	mv	a3,s3
    2be8:	00048413          	mv	s0,s1
    2bec:	000a8793          	mv	a5,s5
    2bf0:	00200713          	li	a4,2
    2bf4:	fee782e3          	beq	a5,a4,2bd8 <__mulsf3+0x210>
    2bf8:	00300713          	li	a4,3
    2bfc:	08e78063          	beq	a5,a4,2c7c <__mulsf3+0x2b4>
    2c00:	00100713          	li	a4,1
    2c04:	f8e796e3          	bne	a5,a4,2b90 <__mulsf3+0x1c8>
    2c08:	00000413          	li	s0,0
    2c0c:	00000713          	li	a4,0
    2c10:	0780006f          	j	2c88 <__mulsf3+0x2c0>
    2c14:	000a0693          	mv	a3,s4
    2c18:	fd9ff06f          	j	2bf0 <__mulsf3+0x228>
    2c1c:	00050613          	mv	a2,a0
    2c20:	f71ff06f          	j	2b90 <__mulsf3+0x1c8>
    2c24:	00100793          	li	a5,1
    2c28:	40e787b3          	sub	a5,a5,a4
    2c2c:	01b00713          	li	a4,27
    2c30:	fcf74ce3          	blt	a4,a5,2c08 <__mulsf3+0x240>
    2c34:	09e60613          	addi	a2,a2,158
    2c38:	00f457b3          	srl	a5,s0,a5
    2c3c:	00c41433          	sll	s0,s0,a2
    2c40:	00803433          	snez	s0,s0
    2c44:	0087e433          	or	s0,a5,s0
    2c48:	00747793          	andi	a5,s0,7
    2c4c:	00078a63          	beqz	a5,2c60 <__mulsf3+0x298>
    2c50:	00f47793          	andi	a5,s0,15
    2c54:	00400713          	li	a4,4
    2c58:	00e78463          	beq	a5,a4,2c60 <__mulsf3+0x298>
    2c5c:	00440413          	addi	s0,s0,4
    2c60:	040007b7          	lui	a5,0x4000
    2c64:	00f477b3          	and	a5,s0,a5
    2c68:	00345413          	srli	s0,s0,0x3
    2c6c:	fa0780e3          	beqz	a5,2c0c <__mulsf3+0x244>
    2c70:	00000413          	li	s0,0
    2c74:	00100713          	li	a4,1
    2c78:	0100006f          	j	2c88 <__mulsf3+0x2c0>
    2c7c:	00400437          	lui	s0,0x400
    2c80:	0ff00713          	li	a4,255
    2c84:	00000693          	li	a3,0
    2c88:	01771793          	slli	a5,a4,0x17
    2c8c:	00941413          	slli	s0,s0,0x9
    2c90:	7f800737          	lui	a4,0x7f800
    2c94:	00e7f7b3          	and	a5,a5,a4
    2c98:	00945413          	srli	s0,s0,0x9
    2c9c:	0087e433          	or	s0,a5,s0
    2ca0:	01f69513          	slli	a0,a3,0x1f
    2ca4:	01c12083          	lw	ra,28(sp)
    2ca8:	00a46533          	or	a0,s0,a0
    2cac:	01812403          	lw	s0,24(sp)
    2cb0:	01412483          	lw	s1,20(sp)
    2cb4:	01012903          	lw	s2,16(sp)
    2cb8:	00c12983          	lw	s3,12(sp)
    2cbc:	00812a03          	lw	s4,8(sp)
    2cc0:	00412a83          	lw	s5,4(sp)
    2cc4:	02010113          	addi	sp,sp,32
    2cc8:	00008067          	ret

00002ccc <__subsf3>:
    2ccc:	00800737          	lui	a4,0x800
    2cd0:	ff010113          	addi	sp,sp,-16
    2cd4:	fff70713          	addi	a4,a4,-1 # 7fffff <__data_region_end+0x5ec7df>
    2cd8:	0175d613          	srli	a2,a1,0x17
    2cdc:	00a777b3          	and	a5,a4,a0
    2ce0:	00812423          	sw	s0,8(sp)
    2ce4:	00b77733          	and	a4,a4,a1
    2ce8:	00912223          	sw	s1,4(sp)
    2cec:	01755413          	srli	s0,a0,0x17
    2cf0:	00112623          	sw	ra,12(sp)
    2cf4:	01212023          	sw	s2,0(sp)
    2cf8:	0ff67613          	andi	a2,a2,255
    2cfc:	0ff00693          	li	a3,255
    2d00:	0ff47413          	andi	s0,s0,255
    2d04:	01f55493          	srli	s1,a0,0x1f
    2d08:	00379793          	slli	a5,a5,0x3
    2d0c:	01f5d593          	srli	a1,a1,0x1f
    2d10:	00371713          	slli	a4,a4,0x3
    2d14:	00d61463          	bne	a2,a3,2d1c <__subsf3+0x50>
    2d18:	00071463          	bnez	a4,2d20 <__subsf3+0x54>
    2d1c:	0015c593          	xori	a1,a1,1
    2d20:	40c406b3          	sub	a3,s0,a2
    2d24:	18959a63          	bne	a1,s1,2eb8 <__subsf3+0x1ec>
    2d28:	0ad05063          	blez	a3,2dc8 <__subsf3+0xfc>
    2d2c:	02061663          	bnez	a2,2d58 <__subsf3+0x8c>
    2d30:	18070063          	beqz	a4,2eb0 <__subsf3+0x1e4>
    2d34:	fff68613          	addi	a2,a3,-1 # 7fefffff <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7cf50f7f>
    2d38:	00061863          	bnez	a2,2d48 <__subsf3+0x7c>
    2d3c:	00e787b3          	add	a5,a5,a4
    2d40:	00100413          	li	s0,1
    2d44:	0500006f          	j	2d94 <__subsf3+0xc8>
    2d48:	0ff00593          	li	a1,255
    2d4c:	02b69063          	bne	a3,a1,2d6c <__subsf3+0xa0>
    2d50:	0ff00413          	li	s0,255
    2d54:	1180006f          	j	2e6c <__subsf3+0x1a0>
    2d58:	0ff00613          	li	a2,255
    2d5c:	10c40863          	beq	s0,a2,2e6c <__subsf3+0x1a0>
    2d60:	04000637          	lui	a2,0x4000
    2d64:	00c76733          	or	a4,a4,a2
    2d68:	00068613          	mv	a2,a3
    2d6c:	01b00593          	li	a1,27
    2d70:	00100693          	li	a3,1
    2d74:	00c5ce63          	blt	a1,a2,2d90 <__subsf3+0xc4>
    2d78:	02000693          	li	a3,32
    2d7c:	40c686b3          	sub	a3,a3,a2
    2d80:	00c755b3          	srl	a1,a4,a2
    2d84:	00d71733          	sll	a4,a4,a3
    2d88:	00e03733          	snez	a4,a4
    2d8c:	00e5e6b3          	or	a3,a1,a4
    2d90:	00d787b3          	add	a5,a5,a3
    2d94:	04000737          	lui	a4,0x4000
    2d98:	00e7f733          	and	a4,a5,a4
    2d9c:	0c070863          	beqz	a4,2e6c <__subsf3+0x1a0>
    2da0:	00140413          	addi	s0,s0,1 # 400001 <__data_region_end+0x1ec7e1>
    2da4:	0ff00713          	li	a4,255
    2da8:	30e40263          	beq	s0,a4,30ac <__subsf3+0x3e0>
    2dac:	7e000737          	lui	a4,0x7e000
    2db0:	0017f693          	andi	a3,a5,1
    2db4:	fff70713          	addi	a4,a4,-1 # 7dffffff <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7b050f7f>
    2db8:	0017d793          	srli	a5,a5,0x1
    2dbc:	00e7f7b3          	and	a5,a5,a4
    2dc0:	00d7e7b3          	or	a5,a5,a3
    2dc4:	0a80006f          	j	2e6c <__subsf3+0x1a0>
    2dc8:	06068663          	beqz	a3,2e34 <__subsf3+0x168>
    2dcc:	408606b3          	sub	a3,a2,s0
    2dd0:	02041063          	bnez	s0,2df0 <__subsf3+0x124>
    2dd4:	2c078263          	beqz	a5,3098 <__subsf3+0x3cc>
    2dd8:	fff68593          	addi	a1,a3,-1
    2ddc:	f60580e3          	beqz	a1,2d3c <__subsf3+0x70>
    2de0:	0ff00513          	li	a0,255
    2de4:	02a69063          	bne	a3,a0,2e04 <__subsf3+0x138>
    2de8:	00070793          	mv	a5,a4
    2dec:	f65ff06f          	j	2d50 <__subsf3+0x84>
    2df0:	0ff00593          	li	a1,255
    2df4:	feb60ae3          	beq	a2,a1,2de8 <__subsf3+0x11c>
    2df8:	040005b7          	lui	a1,0x4000
    2dfc:	00b7e7b3          	or	a5,a5,a1
    2e00:	00068593          	mv	a1,a3
    2e04:	01b00513          	li	a0,27
    2e08:	00100693          	li	a3,1
    2e0c:	00b54e63          	blt	a0,a1,2e28 <__subsf3+0x15c>
    2e10:	02000693          	li	a3,32
    2e14:	40b686b3          	sub	a3,a3,a1
    2e18:	00b7d533          	srl	a0,a5,a1
    2e1c:	00d797b3          	sll	a5,a5,a3
    2e20:	00f037b3          	snez	a5,a5
    2e24:	00f566b3          	or	a3,a0,a5
    2e28:	00e687b3          	add	a5,a3,a4
    2e2c:	00060413          	mv	s0,a2
    2e30:	f65ff06f          	j	2d94 <__subsf3+0xc8>
    2e34:	00140693          	addi	a3,s0,1
    2e38:	0fe6f613          	andi	a2,a3,254
    2e3c:	06061263          	bnez	a2,2ea0 <__subsf3+0x1d4>
    2e40:	04041463          	bnez	s0,2e88 <__subsf3+0x1bc>
    2e44:	24078e63          	beqz	a5,30a0 <__subsf3+0x3d4>
    2e48:	02070263          	beqz	a4,2e6c <__subsf3+0x1a0>
    2e4c:	00e787b3          	add	a5,a5,a4
    2e50:	04000737          	lui	a4,0x4000
    2e54:	00e7f733          	and	a4,a5,a4
    2e58:	00070a63          	beqz	a4,2e6c <__subsf3+0x1a0>
    2e5c:	fc000737          	lui	a4,0xfc000
    2e60:	fff70713          	addi	a4,a4,-1 # fbffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfc000000>
    2e64:	00e7f7b3          	and	a5,a5,a4
    2e68:	00100413          	li	s0,1
    2e6c:	0077f713          	andi	a4,a5,7
    2e70:	24070063          	beqz	a4,30b0 <__subsf3+0x3e4>
    2e74:	00f7f713          	andi	a4,a5,15
    2e78:	00400693          	li	a3,4
    2e7c:	22d70a63          	beq	a4,a3,30b0 <__subsf3+0x3e4>
    2e80:	00478793          	addi	a5,a5,4 # 4000004 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1050f84>
    2e84:	22c0006f          	j	30b0 <__subsf3+0x3e4>
    2e88:	f60780e3          	beqz	a5,2de8 <__subsf3+0x11c>
    2e8c:	ec0702e3          	beqz	a4,2d50 <__subsf3+0x84>
    2e90:	00000493          	li	s1,0
    2e94:	020007b7          	lui	a5,0x2000
    2e98:	0ff00413          	li	s0,255
    2e9c:	2140006f          	j	30b0 <__subsf3+0x3e4>
    2ea0:	0ff00613          	li	a2,255
    2ea4:	20c68263          	beq	a3,a2,30a8 <__subsf3+0x3dc>
    2ea8:	00e787b3          	add	a5,a5,a4
    2eac:	0017d793          	srli	a5,a5,0x1
    2eb0:	00068413          	mv	s0,a3
    2eb4:	fb9ff06f          	j	2e6c <__subsf3+0x1a0>
    2eb8:	08d05063          	blez	a3,2f38 <__subsf3+0x26c>
    2ebc:	06061263          	bnez	a2,2f20 <__subsf3+0x254>
    2ec0:	fe0708e3          	beqz	a4,2eb0 <__subsf3+0x1e4>
    2ec4:	fff68613          	addi	a2,a3,-1
    2ec8:	00061863          	bnez	a2,2ed8 <__subsf3+0x20c>
    2ecc:	40e787b3          	sub	a5,a5,a4
    2ed0:	00100413          	li	s0,1
    2ed4:	0340006f          	j	2f08 <__subsf3+0x23c>
    2ed8:	0ff00593          	li	a1,255
    2edc:	e6b68ae3          	beq	a3,a1,2d50 <__subsf3+0x84>
    2ee0:	01b00593          	li	a1,27
    2ee4:	00100693          	li	a3,1
    2ee8:	00c5ce63          	blt	a1,a2,2f04 <__subsf3+0x238>
    2eec:	02000693          	li	a3,32
    2ef0:	40c686b3          	sub	a3,a3,a2
    2ef4:	00c755b3          	srl	a1,a4,a2
    2ef8:	00d71733          	sll	a4,a4,a3
    2efc:	00e03733          	snez	a4,a4
    2f00:	00e5e6b3          	or	a3,a1,a4
    2f04:	40d787b3          	sub	a5,a5,a3
    2f08:	04000937          	lui	s2,0x4000
    2f0c:	0127f733          	and	a4,a5,s2
    2f10:	f4070ee3          	beqz	a4,2e6c <__subsf3+0x1a0>
    2f14:	fff90913          	addi	s2,s2,-1 # 3ffffff <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1050f7f>
    2f18:	0127f933          	and	s2,a5,s2
    2f1c:	1180006f          	j	3034 <__subsf3+0x368>
    2f20:	0ff00613          	li	a2,255
    2f24:	f4c404e3          	beq	s0,a2,2e6c <__subsf3+0x1a0>
    2f28:	04000637          	lui	a2,0x4000
    2f2c:	00c76733          	or	a4,a4,a2
    2f30:	00068613          	mv	a2,a3
    2f34:	fadff06f          	j	2ee0 <__subsf3+0x214>
    2f38:	08068063          	beqz	a3,2fb8 <__subsf3+0x2ec>
    2f3c:	408606b3          	sub	a3,a2,s0
    2f40:	02041863          	bnez	s0,2f70 <__subsf3+0x2a4>
    2f44:	1e078063          	beqz	a5,3124 <__subsf3+0x458>
    2f48:	fff68513          	addi	a0,a3,-1
    2f4c:	00051863          	bnez	a0,2f5c <__subsf3+0x290>
    2f50:	40f707b3          	sub	a5,a4,a5
    2f54:	00058493          	mv	s1,a1
    2f58:	f79ff06f          	j	2ed0 <__subsf3+0x204>
    2f5c:	0ff00813          	li	a6,255
    2f60:	03069263          	bne	a3,a6,2f84 <__subsf3+0x2b8>
    2f64:	00070793          	mv	a5,a4
    2f68:	0ff00413          	li	s0,255
    2f6c:	06c0006f          	j	2fd8 <__subsf3+0x30c>
    2f70:	0ff00513          	li	a0,255
    2f74:	fea608e3          	beq	a2,a0,2f64 <__subsf3+0x298>
    2f78:	04000537          	lui	a0,0x4000
    2f7c:	00a7e7b3          	or	a5,a5,a0
    2f80:	00068513          	mv	a0,a3
    2f84:	01b00813          	li	a6,27
    2f88:	00100693          	li	a3,1
    2f8c:	00a84e63          	blt	a6,a0,2fa8 <__subsf3+0x2dc>
    2f90:	02000693          	li	a3,32
    2f94:	40a686b3          	sub	a3,a3,a0
    2f98:	00a7d833          	srl	a6,a5,a0
    2f9c:	00d797b3          	sll	a5,a5,a3
    2fa0:	00f037b3          	snez	a5,a5
    2fa4:	00f866b3          	or	a3,a6,a5
    2fa8:	40d707b3          	sub	a5,a4,a3
    2fac:	00060413          	mv	s0,a2
    2fb0:	00058493          	mv	s1,a1
    2fb4:	f55ff06f          	j	2f08 <__subsf3+0x23c>
    2fb8:	00140693          	addi	a3,s0,1
    2fbc:	0fe6f693          	andi	a3,a3,254
    2fc0:	04069e63          	bnez	a3,301c <__subsf3+0x350>
    2fc4:	04041263          	bnez	s0,3008 <__subsf3+0x33c>
    2fc8:	00079c63          	bnez	a5,2fe0 <__subsf3+0x314>
    2fcc:	00000493          	li	s1,0
    2fd0:	0e070063          	beqz	a4,30b0 <__subsf3+0x3e4>
    2fd4:	00070793          	mv	a5,a4
    2fd8:	00058493          	mv	s1,a1
    2fdc:	e91ff06f          	j	2e6c <__subsf3+0x1a0>
    2fe0:	e80706e3          	beqz	a4,2e6c <__subsf3+0x1a0>
    2fe4:	40e786b3          	sub	a3,a5,a4
    2fe8:	04000637          	lui	a2,0x4000
    2fec:	00c6f633          	and	a2,a3,a2
    2ff0:	40f707b3          	sub	a5,a4,a5
    2ff4:	fe0612e3          	bnez	a2,2fd8 <__subsf3+0x30c>
    2ff8:	00000793          	li	a5,0
    2ffc:	08068063          	beqz	a3,307c <__subsf3+0x3b0>
    3000:	00068793          	mv	a5,a3
    3004:	e69ff06f          	j	2e6c <__subsf3+0x1a0>
    3008:	e80792e3          	bnez	a5,2e8c <__subsf3+0x1c0>
    300c:	e80702e3          	beqz	a4,2e90 <__subsf3+0x1c4>
    3010:	00070793          	mv	a5,a4
    3014:	00058493          	mv	s1,a1
    3018:	d39ff06f          	j	2d50 <__subsf3+0x84>
    301c:	40e78933          	sub	s2,a5,a4
    3020:	040006b7          	lui	a3,0x4000
    3024:	00d976b3          	and	a3,s2,a3
    3028:	04068463          	beqz	a3,3070 <__subsf3+0x3a4>
    302c:	40f70933          	sub	s2,a4,a5
    3030:	00058493          	mv	s1,a1
    3034:	00090513          	mv	a0,s2
    3038:	ab8fd0ef          	jal	ra,2f0 <__clzsi2>
    303c:	ffb50513          	addi	a0,a0,-5 # 3fffffb <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1050f7b>
    3040:	00a91933          	sll	s2,s2,a0
    3044:	04854063          	blt	a0,s0,3084 <__subsf3+0x3b8>
    3048:	40850533          	sub	a0,a0,s0
    304c:	00150513          	addi	a0,a0,1
    3050:	02000413          	li	s0,32
    3054:	00a957b3          	srl	a5,s2,a0
    3058:	40a40533          	sub	a0,s0,a0
    305c:	00a91933          	sll	s2,s2,a0
    3060:	01203933          	snez	s2,s2
    3064:	0127e7b3          	or	a5,a5,s2
    3068:	00000413          	li	s0,0
    306c:	e01ff06f          	j	2e6c <__subsf3+0x1a0>
    3070:	fc0912e3          	bnez	s2,3034 <__subsf3+0x368>
    3074:	00000793          	li	a5,0
    3078:	00000413          	li	s0,0
    307c:	00000493          	li	s1,0
    3080:	0300006f          	j	30b0 <__subsf3+0x3e4>
    3084:	fc0007b7          	lui	a5,0xfc000
    3088:	fff78793          	addi	a5,a5,-1 # fbffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfc000000>
    308c:	40a40433          	sub	s0,s0,a0
    3090:	00f977b3          	and	a5,s2,a5
    3094:	dd9ff06f          	j	2e6c <__subsf3+0x1a0>
    3098:	00070793          	mv	a5,a4
    309c:	e15ff06f          	j	2eb0 <__subsf3+0x1e4>
    30a0:	00070793          	mv	a5,a4
    30a4:	dc9ff06f          	j	2e6c <__subsf3+0x1a0>
    30a8:	0ff00413          	li	s0,255
    30ac:	00000793          	li	a5,0
    30b0:	04000737          	lui	a4,0x4000
    30b4:	00e7f733          	and	a4,a5,a4
    30b8:	00070e63          	beqz	a4,30d4 <__subsf3+0x408>
    30bc:	00140413          	addi	s0,s0,1
    30c0:	0ff00713          	li	a4,255
    30c4:	06e40663          	beq	s0,a4,3130 <__subsf3+0x464>
    30c8:	fc000737          	lui	a4,0xfc000
    30cc:	fff70713          	addi	a4,a4,-1 # fbffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfc000000>
    30d0:	00e7f7b3          	and	a5,a5,a4
    30d4:	0ff00713          	li	a4,255
    30d8:	0037d793          	srli	a5,a5,0x3
    30dc:	00e41863          	bne	s0,a4,30ec <__subsf3+0x420>
    30e0:	00078663          	beqz	a5,30ec <__subsf3+0x420>
    30e4:	004007b7          	lui	a5,0x400
    30e8:	00000493          	li	s1,0
    30ec:	7f800537          	lui	a0,0x7f800
    30f0:	01741413          	slli	s0,s0,0x17
    30f4:	00979793          	slli	a5,a5,0x9
    30f8:	00a47433          	and	s0,s0,a0
    30fc:	0097d793          	srli	a5,a5,0x9
    3100:	00c12083          	lw	ra,12(sp)
    3104:	00f467b3          	or	a5,s0,a5
    3108:	00812403          	lw	s0,8(sp)
    310c:	01f49513          	slli	a0,s1,0x1f
    3110:	00012903          	lw	s2,0(sp)
    3114:	00412483          	lw	s1,4(sp)
    3118:	00a7e533          	or	a0,a5,a0
    311c:	01010113          	addi	sp,sp,16
    3120:	00008067          	ret
    3124:	00070793          	mv	a5,a4
    3128:	00068413          	mv	s0,a3
    312c:	eadff06f          	j	2fd8 <__subsf3+0x30c>
    3130:	00000793          	li	a5,0
    3134:	fa1ff06f          	j	30d4 <__subsf3+0x408>

00003138 <__floatsisf>:
    3138:	ff010113          	addi	sp,sp,-16
    313c:	00112623          	sw	ra,12(sp)
    3140:	00812423          	sw	s0,8(sp)
    3144:	00912223          	sw	s1,4(sp)
    3148:	0e050663          	beqz	a0,3234 <__floatsisf+0xfc>
    314c:	41f55793          	srai	a5,a0,0x1f
    3150:	00a7c433          	xor	s0,a5,a0
    3154:	40f40433          	sub	s0,s0,a5
    3158:	01f55493          	srli	s1,a0,0x1f
    315c:	00040513          	mv	a0,s0
    3160:	990fd0ef          	jal	ra,2f0 <__clzsi2>
    3164:	09e00793          	li	a5,158
    3168:	00050713          	mv	a4,a0
    316c:	40a78533          	sub	a0,a5,a0
    3170:	09600793          	li	a5,150
    3174:	04a7c063          	blt	a5,a0,31b4 <__floatsisf+0x7c>
    3178:	00800793          	li	a5,8
    317c:	00e7d663          	bge	a5,a4,3188 <__floatsisf+0x50>
    3180:	ff870713          	addi	a4,a4,-8
    3184:	00e41433          	sll	s0,s0,a4
    3188:	00941413          	slli	s0,s0,0x9
    318c:	01751513          	slli	a0,a0,0x17
    3190:	00945413          	srli	s0,s0,0x9
    3194:	00856433          	or	s0,a0,s0
    3198:	01f49513          	slli	a0,s1,0x1f
    319c:	00c12083          	lw	ra,12(sp)
    31a0:	00a46533          	or	a0,s0,a0
    31a4:	00812403          	lw	s0,8(sp)
    31a8:	00412483          	lw	s1,4(sp)
    31ac:	01010113          	addi	sp,sp,16
    31b0:	00008067          	ret
    31b4:	09900793          	li	a5,153
    31b8:	02a7d063          	bge	a5,a0,31d8 <__floatsisf+0xa0>
    31bc:	00500793          	li	a5,5
    31c0:	40e787b3          	sub	a5,a5,a4
    31c4:	01b70693          	addi	a3,a4,27
    31c8:	00f457b3          	srl	a5,s0,a5
    31cc:	00d41433          	sll	s0,s0,a3
    31d0:	00803433          	snez	s0,s0
    31d4:	0087e433          	or	s0,a5,s0
    31d8:	00500793          	li	a5,5
    31dc:	00e7d663          	bge	a5,a4,31e8 <__floatsisf+0xb0>
    31e0:	ffb70793          	addi	a5,a4,-5
    31e4:	00f41433          	sll	s0,s0,a5
    31e8:	fc0006b7          	lui	a3,0xfc000
    31ec:	fff68693          	addi	a3,a3,-1 # fbffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfc000000>
    31f0:	00747793          	andi	a5,s0,7
    31f4:	00d476b3          	and	a3,s0,a3
    31f8:	00078a63          	beqz	a5,320c <__floatsisf+0xd4>
    31fc:	00f47413          	andi	s0,s0,15
    3200:	00400793          	li	a5,4
    3204:	00f40463          	beq	s0,a5,320c <__floatsisf+0xd4>
    3208:	00468693          	addi	a3,a3,4
    320c:	040007b7          	lui	a5,0x4000
    3210:	00f6f7b3          	and	a5,a3,a5
    3214:	00078c63          	beqz	a5,322c <__floatsisf+0xf4>
    3218:	fc0007b7          	lui	a5,0xfc000
    321c:	fff78793          	addi	a5,a5,-1 # fbffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfc000000>
    3220:	00f6f6b3          	and	a3,a3,a5
    3224:	09f00793          	li	a5,159
    3228:	40e78533          	sub	a0,a5,a4
    322c:	0036d413          	srli	s0,a3,0x3
    3230:	f59ff06f          	j	3188 <__floatsisf+0x50>
    3234:	00000493          	li	s1,0
    3238:	00000413          	li	s0,0
    323c:	f4dff06f          	j	3188 <__floatsisf+0x50>

00003240 <__extendsfdf2>:
    3240:	01755713          	srli	a4,a0,0x17
    3244:	0ff77713          	andi	a4,a4,255
    3248:	ff010113          	addi	sp,sp,-16
    324c:	00170793          	addi	a5,a4,1
    3250:	00812423          	sw	s0,8(sp)
    3254:	00912223          	sw	s1,4(sp)
    3258:	00951413          	slli	s0,a0,0x9
    325c:	00112623          	sw	ra,12(sp)
    3260:	0fe7f793          	andi	a5,a5,254
    3264:	00945413          	srli	s0,s0,0x9
    3268:	01f55493          	srli	s1,a0,0x1f
    326c:	04078263          	beqz	a5,32b0 <__extendsfdf2+0x70>
    3270:	00345793          	srli	a5,s0,0x3
    3274:	38070713          	addi	a4,a4,896
    3278:	01d41413          	slli	s0,s0,0x1d
    327c:	00c79793          	slli	a5,a5,0xc
    3280:	01471713          	slli	a4,a4,0x14
    3284:	00c7d793          	srli	a5,a5,0xc
    3288:	01f49513          	slli	a0,s1,0x1f
    328c:	00f767b3          	or	a5,a4,a5
    3290:	00c12083          	lw	ra,12(sp)
    3294:	00a7e733          	or	a4,a5,a0
    3298:	00040513          	mv	a0,s0
    329c:	00812403          	lw	s0,8(sp)
    32a0:	00412483          	lw	s1,4(sp)
    32a4:	00070593          	mv	a1,a4
    32a8:	01010113          	addi	sp,sp,16
    32ac:	00008067          	ret
    32b0:	04071663          	bnez	a4,32fc <__extendsfdf2+0xbc>
    32b4:	00000793          	li	a5,0
    32b8:	fc0402e3          	beqz	s0,327c <__extendsfdf2+0x3c>
    32bc:	00040513          	mv	a0,s0
    32c0:	830fd0ef          	jal	ra,2f0 <__clzsi2>
    32c4:	00a00793          	li	a5,10
    32c8:	02a7c263          	blt	a5,a0,32ec <__extendsfdf2+0xac>
    32cc:	00b00793          	li	a5,11
    32d0:	40a787b3          	sub	a5,a5,a0
    32d4:	01550713          	addi	a4,a0,21 # 7f800015 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7c850f95>
    32d8:	00f457b3          	srl	a5,s0,a5
    32dc:	00e41433          	sll	s0,s0,a4
    32e0:	38900713          	li	a4,905
    32e4:	40a70733          	sub	a4,a4,a0
    32e8:	f95ff06f          	j	327c <__extendsfdf2+0x3c>
    32ec:	ff550793          	addi	a5,a0,-11
    32f0:	00f417b3          	sll	a5,s0,a5
    32f4:	00000413          	li	s0,0
    32f8:	fe9ff06f          	j	32e0 <__extendsfdf2+0xa0>
    32fc:	00000793          	li	a5,0
    3300:	00040a63          	beqz	s0,3314 <__extendsfdf2+0xd4>
    3304:	00345793          	srli	a5,s0,0x3
    3308:	00080737          	lui	a4,0x80
    330c:	01d41413          	slli	s0,s0,0x1d
    3310:	00e7e7b3          	or	a5,a5,a4
    3314:	7ff00713          	li	a4,2047
    3318:	f65ff06f          	j	327c <__extendsfdf2+0x3c>

0000331c <__truncdfsf2>:
    331c:	0145d613          	srli	a2,a1,0x14
    3320:	7ff67613          	andi	a2,a2,2047
    3324:	00c59693          	slli	a3,a1,0xc
    3328:	00160713          	addi	a4,a2,1 # 4000001 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1050f81>
    332c:	0096d793          	srli	a5,a3,0x9
    3330:	7fe77713          	andi	a4,a4,2046
    3334:	01d55693          	srli	a3,a0,0x1d
    3338:	00f6e6b3          	or	a3,a3,a5
    333c:	01f5d593          	srli	a1,a1,0x1f
    3340:	00351793          	slli	a5,a0,0x3
    3344:	0a070663          	beqz	a4,33f0 <__truncdfsf2+0xd4>
    3348:	c8060713          	addi	a4,a2,-896
    334c:	0fe00813          	li	a6,254
    3350:	0ce84263          	blt	a6,a4,3414 <__truncdfsf2+0xf8>
    3354:	08e04063          	bgtz	a4,33d4 <__truncdfsf2+0xb8>
    3358:	fe900513          	li	a0,-23
    335c:	12a74063          	blt	a4,a0,347c <__truncdfsf2+0x160>
    3360:	00800537          	lui	a0,0x800
    3364:	00a6e6b3          	or	a3,a3,a0
    3368:	01e00513          	li	a0,30
    336c:	40e50533          	sub	a0,a0,a4
    3370:	01f00813          	li	a6,31
    3374:	02a84863          	blt	a6,a0,33a4 <__truncdfsf2+0x88>
    3378:	c8260613          	addi	a2,a2,-894
    337c:	00a7d533          	srl	a0,a5,a0
    3380:	00c797b3          	sll	a5,a5,a2
    3384:	00f037b3          	snez	a5,a5
    3388:	00c696b3          	sll	a3,a3,a2
    338c:	00d7e7b3          	or	a5,a5,a3
    3390:	00f567b3          	or	a5,a0,a5
    3394:	00000713          	li	a4,0
    3398:	0077f693          	andi	a3,a5,7
    339c:	08068063          	beqz	a3,341c <__truncdfsf2+0x100>
    33a0:	0e40006f          	j	3484 <__truncdfsf2+0x168>
    33a4:	ffe00813          	li	a6,-2
    33a8:	40e80733          	sub	a4,a6,a4
    33ac:	02000893          	li	a7,32
    33b0:	00e6d733          	srl	a4,a3,a4
    33b4:	00000813          	li	a6,0
    33b8:	01150663          	beq	a0,a7,33c4 <__truncdfsf2+0xa8>
    33bc:	ca260613          	addi	a2,a2,-862
    33c0:	00c69833          	sll	a6,a3,a2
    33c4:	00f867b3          	or	a5,a6,a5
    33c8:	00f037b3          	snez	a5,a5
    33cc:	00f767b3          	or	a5,a4,a5
    33d0:	fc5ff06f          	j	3394 <__truncdfsf2+0x78>
    33d4:	00651513          	slli	a0,a0,0x6
    33d8:	00a03533          	snez	a0,a0
    33dc:	00369693          	slli	a3,a3,0x3
    33e0:	01d7d793          	srli	a5,a5,0x1d
    33e4:	00d566b3          	or	a3,a0,a3
    33e8:	00f6e7b3          	or	a5,a3,a5
    33ec:	fadff06f          	j	3398 <__truncdfsf2+0x7c>
    33f0:	00f6e7b3          	or	a5,a3,a5
    33f4:	00061663          	bnez	a2,3400 <__truncdfsf2+0xe4>
    33f8:	00f037b3          	snez	a5,a5
    33fc:	f99ff06f          	j	3394 <__truncdfsf2+0x78>
    3400:	0ff00713          	li	a4,255
    3404:	00078c63          	beqz	a5,341c <__truncdfsf2+0x100>
    3408:	00369693          	slli	a3,a3,0x3
    340c:	020007b7          	lui	a5,0x2000
    3410:	fd9ff06f          	j	33e8 <__truncdfsf2+0xcc>
    3414:	00000793          	li	a5,0
    3418:	0ff00713          	li	a4,255
    341c:	040006b7          	lui	a3,0x4000
    3420:	00d7f6b3          	and	a3,a5,a3
    3424:	00068e63          	beqz	a3,3440 <__truncdfsf2+0x124>
    3428:	00170713          	addi	a4,a4,1 # 80001 <W1+0x5fc61>
    342c:	0ff00693          	li	a3,255
    3430:	06d70463          	beq	a4,a3,3498 <__truncdfsf2+0x17c>
    3434:	fc0006b7          	lui	a3,0xfc000
    3438:	fff68693          	addi	a3,a3,-1 # fbffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfc000000>
    343c:	00d7f7b3          	and	a5,a5,a3
    3440:	0ff00693          	li	a3,255
    3444:	0037d793          	srli	a5,a5,0x3
    3448:	00d71863          	bne	a4,a3,3458 <__truncdfsf2+0x13c>
    344c:	00078663          	beqz	a5,3458 <__truncdfsf2+0x13c>
    3450:	004007b7          	lui	a5,0x400
    3454:	00000593          	li	a1,0
    3458:	7f800537          	lui	a0,0x7f800
    345c:	01771713          	slli	a4,a4,0x17
    3460:	00979793          	slli	a5,a5,0x9
    3464:	00a77733          	and	a4,a4,a0
    3468:	0097d793          	srli	a5,a5,0x9
    346c:	00f767b3          	or	a5,a4,a5
    3470:	01f59513          	slli	a0,a1,0x1f
    3474:	00a7e533          	or	a0,a5,a0
    3478:	00008067          	ret
    347c:	00100793          	li	a5,1
    3480:	00000713          	li	a4,0
    3484:	00f7f693          	andi	a3,a5,15
    3488:	00400613          	li	a2,4
    348c:	f8c688e3          	beq	a3,a2,341c <__truncdfsf2+0x100>
    3490:	00478793          	addi	a5,a5,4 # 400004 <__data_region_end+0x1ec7e4>
    3494:	f89ff06f          	j	341c <__truncdfsf2+0x100>
    3498:	00000793          	li	a5,0
    349c:	fa5ff06f          	j	3440 <__truncdfsf2+0x124>

000034a0 <memcpy>:
    34a0:	00050313          	mv	t1,a0
    34a4:	00060e63          	beqz	a2,34c0 <memcpy+0x20>
    34a8:	00058383          	lb	t2,0(a1) # 4000000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1050f80>
    34ac:	00730023          	sb	t2,0(t1) # 10000 <stacks+0xa60>
    34b0:	fff60613          	addi	a2,a2,-1
    34b4:	00130313          	addi	t1,t1,1
    34b8:	00158593          	addi	a1,a1,1
    34bc:	fe0616e3          	bnez	a2,34a8 <memcpy+0x8>
    34c0:	00008067          	ret

000034c4 <memset>:
    34c4:	00050313          	mv	t1,a0
    34c8:	00060a63          	beqz	a2,34dc <memset+0x18>
    34cc:	00b30023          	sb	a1,0(t1)
    34d0:	fff60613          	addi	a2,a2,-1
    34d4:	00130313          	addi	t1,t1,1
    34d8:	fe061ae3          	bnez	a2,34cc <memset+0x8>
    34dc:	00008067          	ret

000034e0 <__eqdf2>:
    34e0:	0145d713          	srli	a4,a1,0x14
    34e4:	001007b7          	lui	a5,0x100
    34e8:	fff78793          	addi	a5,a5,-1 # fffff <digits+0x7525f>
    34ec:	0146d813          	srli	a6,a3,0x14
    34f0:	00050313          	mv	t1,a0
    34f4:	00050e93          	mv	t4,a0
    34f8:	7ff77713          	andi	a4,a4,2047
    34fc:	7ff00513          	li	a0,2047
    3500:	00b7f8b3          	and	a7,a5,a1
    3504:	00060f13          	mv	t5,a2
    3508:	00d7f7b3          	and	a5,a5,a3
    350c:	01f5d593          	srli	a1,a1,0x1f
    3510:	7ff87813          	andi	a6,a6,2047
    3514:	01f6d693          	srli	a3,a3,0x1f
    3518:	00a71c63          	bne	a4,a0,3530 <__eqdf2+0x50>
    351c:	0068ee33          	or	t3,a7,t1
    3520:	00100513          	li	a0,1
    3524:	000e1463          	bnez	t3,352c <__eqdf2+0x4c>
    3528:	00e80663          	beq	a6,a4,3534 <__eqdf2+0x54>
    352c:	00008067          	ret
    3530:	00a81863          	bne	a6,a0,3540 <__eqdf2+0x60>
    3534:	00c7e633          	or	a2,a5,a2
    3538:	00100513          	li	a0,1
    353c:	fe0618e3          	bnez	a2,352c <__eqdf2+0x4c>
    3540:	00100513          	li	a0,1
    3544:	ff0714e3          	bne	a4,a6,352c <__eqdf2+0x4c>
    3548:	fef892e3          	bne	a7,a5,352c <__eqdf2+0x4c>
    354c:	ffee90e3          	bne	t4,t5,352c <__eqdf2+0x4c>
    3550:	00d58a63          	beq	a1,a3,3564 <__eqdf2+0x84>
    3554:	fc071ce3          	bnez	a4,352c <__eqdf2+0x4c>
    3558:	0068e533          	or	a0,a7,t1
    355c:	00a03533          	snez	a0,a0
    3560:	00008067          	ret
    3564:	00000513          	li	a0,0
    3568:	00008067          	ret

0000356c <__gedf2>:
    356c:	00100737          	lui	a4,0x100
    3570:	fff70713          	addi	a4,a4,-1 # fffff <digits+0x7525f>
    3574:	0145d813          	srli	a6,a1,0x14
    3578:	00b778b3          	and	a7,a4,a1
    357c:	00050793          	mv	a5,a0
    3580:	00050313          	mv	t1,a0
    3584:	7ff87813          	andi	a6,a6,2047
    3588:	01f5d513          	srli	a0,a1,0x1f
    358c:	7ff00e93          	li	t4,2047
    3590:	0146d593          	srli	a1,a3,0x14
    3594:	00d77733          	and	a4,a4,a3
    3598:	00060e13          	mv	t3,a2
    359c:	7ff5f593          	andi	a1,a1,2047
    35a0:	01f6d693          	srli	a3,a3,0x1f
    35a4:	01d81a63          	bne	a6,t4,35b8 <__gedf2+0x4c>
    35a8:	00f8eeb3          	or	t4,a7,a5
    35ac:	080e8a63          	beqz	t4,3640 <__gedf2+0xd4>
    35b0:	ffe00513          	li	a0,-2
    35b4:	00008067          	ret
    35b8:	01d59663          	bne	a1,t4,35c4 <__gedf2+0x58>
    35bc:	00c76eb3          	or	t4,a4,a2
    35c0:	fe0e98e3          	bnez	t4,35b0 <__gedf2+0x44>
    35c4:	08081063          	bnez	a6,3644 <__gedf2+0xd8>
    35c8:	00f8e7b3          	or	a5,a7,a5
    35cc:	0017b793          	seqz	a5,a5
    35d0:	00059663          	bnez	a1,35dc <__gedf2+0x70>
    35d4:	00c76633          	or	a2,a4,a2
    35d8:	04060c63          	beqz	a2,3630 <__gedf2+0xc4>
    35dc:	00079c63          	bnez	a5,35f4 <__gedf2+0x88>
    35e0:	00d51463          	bne	a0,a3,35e8 <__gedf2+0x7c>
    35e4:	0305d063          	bge	a1,a6,3604 <__gedf2+0x98>
    35e8:	04050063          	beqz	a0,3628 <__gedf2+0xbc>
    35ec:	fff00513          	li	a0,-1
    35f0:	00008067          	ret
    35f4:	fff00513          	li	a0,-1
    35f8:	00068a63          	beqz	a3,360c <__gedf2+0xa0>
    35fc:	00068513          	mv	a0,a3
    3600:	00008067          	ret
    3604:	00b85663          	bge	a6,a1,3610 <__gedf2+0xa4>
    3608:	fe0502e3          	beqz	a0,35ec <__gedf2+0x80>
    360c:	00008067          	ret
    3610:	fd176ce3          	bltu	a4,a7,35e8 <__gedf2+0x7c>
    3614:	02e89263          	bne	a7,a4,3638 <__gedf2+0xcc>
    3618:	fc6e68e3          	bltu	t3,t1,35e8 <__gedf2+0x7c>
    361c:	ffc366e3          	bltu	t1,t3,3608 <__gedf2+0x9c>
    3620:	00000513          	li	a0,0
    3624:	00008067          	ret
    3628:	00100513          	li	a0,1
    362c:	00008067          	ret
    3630:	fe0798e3          	bnez	a5,3620 <__gedf2+0xb4>
    3634:	fb5ff06f          	j	35e8 <__gedf2+0x7c>
    3638:	fce8e8e3          	bltu	a7,a4,3608 <__gedf2+0x9c>
    363c:	fe5ff06f          	j	3620 <__gedf2+0xb4>
    3640:	f7058ee3          	beq	a1,a6,35bc <__gedf2+0x50>
    3644:	f8059ee3          	bnez	a1,35e0 <__gedf2+0x74>
    3648:	00000793          	li	a5,0
    364c:	f89ff06f          	j	35d4 <__gedf2+0x68>

00003650 <__ledf2>:
    3650:	00100737          	lui	a4,0x100
    3654:	fff70713          	addi	a4,a4,-1 # fffff <digits+0x7525f>
    3658:	0145d813          	srli	a6,a1,0x14
    365c:	00b778b3          	and	a7,a4,a1
    3660:	00050793          	mv	a5,a0
    3664:	00050313          	mv	t1,a0
    3668:	7ff87813          	andi	a6,a6,2047
    366c:	01f5d513          	srli	a0,a1,0x1f
    3670:	7ff00e93          	li	t4,2047
    3674:	0146d593          	srli	a1,a3,0x14
    3678:	00d77733          	and	a4,a4,a3
    367c:	00060e13          	mv	t3,a2
    3680:	7ff5f593          	andi	a1,a1,2047
    3684:	01f6d693          	srli	a3,a3,0x1f
    3688:	01d81a63          	bne	a6,t4,369c <__ledf2+0x4c>
    368c:	00f8eeb3          	or	t4,a7,a5
    3690:	080e8a63          	beqz	t4,3724 <__ledf2+0xd4>
    3694:	00200513          	li	a0,2
    3698:	00008067          	ret
    369c:	01d59663          	bne	a1,t4,36a8 <__ledf2+0x58>
    36a0:	00c76eb3          	or	t4,a4,a2
    36a4:	fe0e98e3          	bnez	t4,3694 <__ledf2+0x44>
    36a8:	08081063          	bnez	a6,3728 <__ledf2+0xd8>
    36ac:	00f8e7b3          	or	a5,a7,a5
    36b0:	0017b793          	seqz	a5,a5
    36b4:	00059663          	bnez	a1,36c0 <__ledf2+0x70>
    36b8:	00c76633          	or	a2,a4,a2
    36bc:	04060c63          	beqz	a2,3714 <__ledf2+0xc4>
    36c0:	00079c63          	bnez	a5,36d8 <__ledf2+0x88>
    36c4:	00d51463          	bne	a0,a3,36cc <__ledf2+0x7c>
    36c8:	0305d063          	bge	a1,a6,36e8 <__ledf2+0x98>
    36cc:	04050063          	beqz	a0,370c <__ledf2+0xbc>
    36d0:	fff00513          	li	a0,-1
    36d4:	00008067          	ret
    36d8:	fff00513          	li	a0,-1
    36dc:	00068a63          	beqz	a3,36f0 <__ledf2+0xa0>
    36e0:	00068513          	mv	a0,a3
    36e4:	00008067          	ret
    36e8:	00b85663          	bge	a6,a1,36f4 <__ledf2+0xa4>
    36ec:	fe0502e3          	beqz	a0,36d0 <__ledf2+0x80>
    36f0:	00008067          	ret
    36f4:	fd176ce3          	bltu	a4,a7,36cc <__ledf2+0x7c>
    36f8:	02e89263          	bne	a7,a4,371c <__ledf2+0xcc>
    36fc:	fc6e68e3          	bltu	t3,t1,36cc <__ledf2+0x7c>
    3700:	ffc366e3          	bltu	t1,t3,36ec <__ledf2+0x9c>
    3704:	00000513          	li	a0,0
    3708:	00008067          	ret
    370c:	00100513          	li	a0,1
    3710:	00008067          	ret
    3714:	fe0798e3          	bnez	a5,3704 <__ledf2+0xb4>
    3718:	fb5ff06f          	j	36cc <__ledf2+0x7c>
    371c:	fce8e8e3          	bltu	a7,a4,36ec <__ledf2+0x9c>
    3720:	fe5ff06f          	j	3704 <__ledf2+0xb4>
    3724:	f7058ee3          	beq	a1,a6,36a0 <__ledf2+0x50>
    3728:	f8059ee3          	bnez	a1,36c4 <__ledf2+0x74>
    372c:	00000793          	li	a5,0
    3730:	f89ff06f          	j	36b8 <__ledf2+0x68>

00003734 <__unorddf2>:
    3734:	00100737          	lui	a4,0x100
    3738:	fff70793          	addi	a5,a4,-1 # fffff <digits+0x7525f>
    373c:	00b7f733          	and	a4,a5,a1
    3740:	0145d593          	srli	a1,a1,0x14
    3744:	00d7f7b3          	and	a5,a5,a3
    3748:	7ff5f593          	andi	a1,a1,2047
    374c:	0146d693          	srli	a3,a3,0x14
    3750:	7ff00813          	li	a6,2047
    3754:	7ff6f693          	andi	a3,a3,2047
    3758:	01059863          	bne	a1,a6,3768 <__unorddf2+0x34>
    375c:	00a76733          	or	a4,a4,a0
    3760:	00100513          	li	a0,1
    3764:	00071c63          	bnez	a4,377c <__unorddf2+0x48>
    3768:	7ff00713          	li	a4,2047
    376c:	00000513          	li	a0,0
    3770:	00e69663          	bne	a3,a4,377c <__unorddf2+0x48>
    3774:	00c7e7b3          	or	a5,a5,a2
    3778:	00f03533          	snez	a0,a5
    377c:	00008067          	ret

00003780 <__fixdfsi>:
    3780:	0145d713          	srli	a4,a1,0x14
    3784:	001006b7          	lui	a3,0x100
    3788:	fff68793          	addi	a5,a3,-1 # fffff <digits+0x7525f>
    378c:	7ff77713          	andi	a4,a4,2047
    3790:	3fe00613          	li	a2,1022
    3794:	00b7f7b3          	and	a5,a5,a1
    3798:	01f5d593          	srli	a1,a1,0x1f
    379c:	04e65e63          	bge	a2,a4,37f8 <__fixdfsi+0x78>
    37a0:	41d00613          	li	a2,1053
    37a4:	00e65a63          	bge	a2,a4,37b8 <__fixdfsi+0x38>
    37a8:	80000537          	lui	a0,0x80000
    37ac:	fff54513          	not	a0,a0
    37b0:	00a58533          	add	a0,a1,a0
    37b4:	00008067          	ret
    37b8:	00d7e7b3          	or	a5,a5,a3
    37bc:	43300693          	li	a3,1075
    37c0:	40e686b3          	sub	a3,a3,a4
    37c4:	01f00613          	li	a2,31
    37c8:	02d64063          	blt	a2,a3,37e8 <__fixdfsi+0x68>
    37cc:	bed70713          	addi	a4,a4,-1043
    37d0:	00e797b3          	sll	a5,a5,a4
    37d4:	00d55533          	srl	a0,a0,a3
    37d8:	00a7e533          	or	a0,a5,a0
    37dc:	02058063          	beqz	a1,37fc <__fixdfsi+0x7c>
    37e0:	40a00533          	neg	a0,a0
    37e4:	00008067          	ret
    37e8:	41300513          	li	a0,1043
    37ec:	40e50533          	sub	a0,a0,a4
    37f0:	00a7d533          	srl	a0,a5,a0
    37f4:	fe9ff06f          	j	37dc <__fixdfsi+0x5c>
    37f8:	00000513          	li	a0,0
    37fc:	00008067          	ret

00003800 <__floatsidf>:
    3800:	ff010113          	addi	sp,sp,-16
    3804:	00112623          	sw	ra,12(sp)
    3808:	00812423          	sw	s0,8(sp)
    380c:	00912223          	sw	s1,4(sp)
    3810:	08050663          	beqz	a0,389c <__floatsidf+0x9c>
    3814:	41f55793          	srai	a5,a0,0x1f
    3818:	00a7c433          	xor	s0,a5,a0
    381c:	40f40433          	sub	s0,s0,a5
    3820:	01f55493          	srli	s1,a0,0x1f
    3824:	00040513          	mv	a0,s0
    3828:	ac9fc0ef          	jal	ra,2f0 <__clzsi2>
    382c:	41e00713          	li	a4,1054
    3830:	00a00793          	li	a5,10
    3834:	40a70733          	sub	a4,a4,a0
    3838:	04a7c863          	blt	a5,a0,3888 <__floatsidf+0x88>
    383c:	00b00793          	li	a5,11
    3840:	40a787b3          	sub	a5,a5,a0
    3844:	01550513          	addi	a0,a0,21 # 80000015 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000016>
    3848:	00f457b3          	srl	a5,s0,a5
    384c:	00a41433          	sll	s0,s0,a0
    3850:	00048513          	mv	a0,s1
    3854:	00c79793          	slli	a5,a5,0xc
    3858:	01471713          	slli	a4,a4,0x14
    385c:	00c7d793          	srli	a5,a5,0xc
    3860:	01f51513          	slli	a0,a0,0x1f
    3864:	00f767b3          	or	a5,a4,a5
    3868:	00c12083          	lw	ra,12(sp)
    386c:	00a7e733          	or	a4,a5,a0
    3870:	00040513          	mv	a0,s0
    3874:	00812403          	lw	s0,8(sp)
    3878:	00412483          	lw	s1,4(sp)
    387c:	00070593          	mv	a1,a4
    3880:	01010113          	addi	sp,sp,16
    3884:	00008067          	ret
    3888:	ff550513          	addi	a0,a0,-11
    388c:	00a417b3          	sll	a5,s0,a0
    3890:	00048513          	mv	a0,s1
    3894:	00000413          	li	s0,0
    3898:	fbdff06f          	j	3854 <__floatsidf+0x54>
    389c:	00000713          	li	a4,0
    38a0:	00000793          	li	a5,0
    38a4:	ff1ff06f          	j	3894 <__floatsidf+0x94>

000038a8 <__trunctfdf2>:
    38a8:	fd010113          	addi	sp,sp,-48
    38ac:	00852783          	lw	a5,8(a0)
    38b0:	02812423          	sw	s0,40(sp)
    38b4:	00c52403          	lw	s0,12(a0)
    38b8:	00452703          	lw	a4,4(a0)
    38bc:	00052683          	lw	a3,0(a0)
    38c0:	00f12423          	sw	a5,8(sp)
    38c4:	00f12c23          	sw	a5,24(sp)
    38c8:	01041793          	slli	a5,s0,0x10
    38cc:	00e12223          	sw	a4,4(sp)
    38d0:	00e12a23          	sw	a4,20(sp)
    38d4:	0107d793          	srli	a5,a5,0x10
    38d8:	00141713          	slli	a4,s0,0x1
    38dc:	00812623          	sw	s0,12(sp)
    38e0:	02112623          	sw	ra,44(sp)
    38e4:	02912223          	sw	s1,36(sp)
    38e8:	00d12023          	sw	a3,0(sp)
    38ec:	00d12823          	sw	a3,16(sp)
    38f0:	00f12e23          	sw	a5,28(sp)
    38f4:	01175713          	srli	a4,a4,0x11
    38f8:	01f45413          	srli	s0,s0,0x1f
    38fc:	01010513          	addi	a0,sp,16
    3900:	01c10613          	addi	a2,sp,28
    3904:	00062783          	lw	a5,0(a2)
    3908:	ffc62683          	lw	a3,-4(a2)
    390c:	ffc60613          	addi	a2,a2,-4
    3910:	00379793          	slli	a5,a5,0x3
    3914:	01d6d693          	srli	a3,a3,0x1d
    3918:	00d7e7b3          	or	a5,a5,a3
    391c:	00f62223          	sw	a5,4(a2)
    3920:	fec512e3          	bne	a0,a2,3904 <__trunctfdf2+0x5c>
    3924:	01012683          	lw	a3,16(sp)
    3928:	00170793          	addi	a5,a4,1
    392c:	00369593          	slli	a1,a3,0x3
    3930:	000086b7          	lui	a3,0x8
    3934:	ffe68693          	addi	a3,a3,-2 # 7ffe <__cvt+0x16>
    3938:	00b12823          	sw	a1,16(sp)
    393c:	00d7f7b3          	and	a5,a5,a3
    3940:	1c078063          	beqz	a5,3b00 <__trunctfdf2+0x258>
    3944:	ffffc7b7          	lui	a5,0xffffc
    3948:	40078793          	addi	a5,a5,1024 # ffffc400 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffffc401>
    394c:	00f70733          	add	a4,a4,a5
    3950:	7fe00793          	li	a5,2046
    3954:	20e7c263          	blt	a5,a4,3b58 <__trunctfdf2+0x2b0>
    3958:	06e05863          	blez	a4,39c8 <__trunctfdf2+0x120>
    395c:	01812503          	lw	a0,24(sp)
    3960:	01c12603          	lw	a2,28(sp)
    3964:	01412783          	lw	a5,20(sp)
    3968:	01c55693          	srli	a3,a0,0x1c
    396c:	00461613          	slli	a2,a2,0x4
    3970:	00d66633          	or	a2,a2,a3
    3974:	00479693          	slli	a3,a5,0x4
    3978:	00b6e6b3          	or	a3,a3,a1
    397c:	01c7d793          	srli	a5,a5,0x1c
    3980:	00451513          	slli	a0,a0,0x4
    3984:	00d036b3          	snez	a3,a3
    3988:	00a7e7b3          	or	a5,a5,a0
    398c:	00f6e6b3          	or	a3,a3,a5
    3990:	00c12a23          	sw	a2,20(sp)
    3994:	00d12823          	sw	a3,16(sp)
    3998:	01012683          	lw	a3,16(sp)
    399c:	01412783          	lw	a5,20(sp)
    39a0:	0076f613          	andi	a2,a3,7
    39a4:	1c060063          	beqz	a2,3b64 <__trunctfdf2+0x2bc>
    39a8:	00f6f613          	andi	a2,a3,15
    39ac:	00400593          	li	a1,4
    39b0:	1ab60a63          	beq	a2,a1,3b64 <__trunctfdf2+0x2bc>
    39b4:	00468613          	addi	a2,a3,4
    39b8:	00d636b3          	sltu	a3,a2,a3
    39bc:	00d787b3          	add	a5,a5,a3
    39c0:	00060693          	mv	a3,a2
    39c4:	1a00006f          	j	3b64 <__trunctfdf2+0x2bc>
    39c8:	fcc00793          	li	a5,-52
    39cc:	00f75c63          	bge	a4,a5,39e4 <__trunctfdf2+0x13c>
    39d0:	00012a23          	sw	zero,20(sp)
    39d4:	00100793          	li	a5,1
    39d8:	00f12823          	sw	a5,16(sp)
    39dc:	00000713          	li	a4,0
    39e0:	fb9ff06f          	j	3998 <__trunctfdf2+0xf0>
    39e4:	01c12783          	lw	a5,28(sp)
    39e8:	000808b7          	lui	a7,0x80
    39ec:	00050593          	mv	a1,a0
    39f0:	00f8e8b3          	or	a7,a7,a5
    39f4:	03d00793          	li	a5,61
    39f8:	40e78733          	sub	a4,a5,a4
    39fc:	01112e23          	sw	a7,28(sp)
    3a00:	40575793          	srai	a5,a4,0x5
    3a04:	00000693          	li	a3,0
    3a08:	00000493          	li	s1,0
    3a0c:	0005a803          	lw	a6,0(a1)
    3a10:	00168693          	addi	a3,a3,1
    3a14:	00458593          	addi	a1,a1,4
    3a18:	0104e4b3          	or	s1,s1,a6
    3a1c:	fed798e3          	bne	a5,a3,3a0c <__trunctfdf2+0x164>
    3a20:	01f77713          	andi	a4,a4,31
    3a24:	00279693          	slli	a3,a5,0x2
    3a28:	02071863          	bnez	a4,3a58 <__trunctfdf2+0x1b0>
    3a2c:	00300593          	li	a1,3
    3a30:	40f585b3          	sub	a1,a1,a5
    3a34:	00d60833          	add	a6,a2,a3
    3a38:	00082803          	lw	a6,0(a6)
    3a3c:	00170713          	addi	a4,a4,1
    3a40:	00460613          	addi	a2,a2,4
    3a44:	ff062e23          	sw	a6,-4(a2)
    3a48:	fee5d6e3          	bge	a1,a4,3a34 <__trunctfdf2+0x18c>
    3a4c:	00400713          	li	a4,4
    3a50:	40f707b3          	sub	a5,a4,a5
    3a54:	0580006f          	j	3aac <__trunctfdf2+0x204>
    3a58:	ffc00e13          	li	t3,-4
    3a5c:	03c78e33          	mul	t3,a5,t3
    3a60:	02010613          	addi	a2,sp,32
    3a64:	00d60633          	add	a2,a2,a3
    3a68:	ff062603          	lw	a2,-16(a2)
    3a6c:	02000813          	li	a6,32
    3a70:	40e80833          	sub	a6,a6,a4
    3a74:	01061633          	sll	a2,a2,a6
    3a78:	00c4e4b3          	or	s1,s1,a2
    3a7c:	00300613          	li	a2,3
    3a80:	00d506b3          	add	a3,a0,a3
    3a84:	00000313          	li	t1,0
    3a88:	40f60633          	sub	a2,a2,a5
    3a8c:	04c34663          	blt	t1,a2,3ad8 <__trunctfdf2+0x230>
    3a90:	00400693          	li	a3,4
    3a94:	40f687b3          	sub	a5,a3,a5
    3a98:	00261613          	slli	a2,a2,0x2
    3a9c:	02010693          	addi	a3,sp,32
    3aa0:	00c68633          	add	a2,a3,a2
    3aa4:	00e8d733          	srl	a4,a7,a4
    3aa8:	fee62823          	sw	a4,-16(a2)
    3aac:	00400613          	li	a2,4
    3ab0:	40f60633          	sub	a2,a2,a5
    3ab4:	00279793          	slli	a5,a5,0x2
    3ab8:	00f50533          	add	a0,a0,a5
    3abc:	00261613          	slli	a2,a2,0x2
    3ac0:	00000593          	li	a1,0
    3ac4:	a01ff0ef          	jal	ra,34c4 <memset>
    3ac8:	01012703          	lw	a4,16(sp)
    3acc:	009037b3          	snez	a5,s1
    3ad0:	00f767b3          	or	a5,a4,a5
    3ad4:	f05ff06f          	j	39d8 <__trunctfdf2+0x130>
    3ad8:	0006a583          	lw	a1,0(a3)
    3adc:	0046ae83          	lw	t4,4(a3)
    3ae0:	01c68f33          	add	t5,a3,t3
    3ae4:	00e5d5b3          	srl	a1,a1,a4
    3ae8:	010e9eb3          	sll	t4,t4,a6
    3aec:	01d5e5b3          	or	a1,a1,t4
    3af0:	00bf2023          	sw	a1,0(t5)
    3af4:	00130313          	addi	t1,t1,1
    3af8:	00468693          	addi	a3,a3,4
    3afc:	f91ff06f          	j	3a8c <__trunctfdf2+0x1e4>
    3b00:	01412603          	lw	a2,20(sp)
    3b04:	01812783          	lw	a5,24(sp)
    3b08:	01c12503          	lw	a0,28(sp)
    3b0c:	00c7e6b3          	or	a3,a5,a2
    3b10:	00a6e6b3          	or	a3,a3,a0
    3b14:	00b6e6b3          	or	a3,a3,a1
    3b18:	00071863          	bnez	a4,3b28 <__trunctfdf2+0x280>
    3b1c:	00d036b3          	snez	a3,a3
    3b20:	00000793          	li	a5,0
    3b24:	e7dff06f          	j	39a0 <__trunctfdf2+0xf8>
    3b28:	0c068663          	beqz	a3,3bf4 <__trunctfdf2+0x34c>
    3b2c:	01c65693          	srli	a3,a2,0x1c
    3b30:	00451513          	slli	a0,a0,0x4
    3b34:	00479613          	slli	a2,a5,0x4
    3b38:	01c7d793          	srli	a5,a5,0x1c
    3b3c:	00400737          	lui	a4,0x400
    3b40:	00c6e6b3          	or	a3,a3,a2
    3b44:	00a7e7b3          	or	a5,a5,a0
    3b48:	00e7e7b3          	or	a5,a5,a4
    3b4c:	ff86f693          	andi	a3,a3,-8
    3b50:	7ff00713          	li	a4,2047
    3b54:	e4dff06f          	j	39a0 <__trunctfdf2+0xf8>
    3b58:	00000793          	li	a5,0
    3b5c:	00000693          	li	a3,0
    3b60:	7ff00713          	li	a4,2047
    3b64:	00800637          	lui	a2,0x800
    3b68:	00c7f633          	and	a2,a5,a2
    3b6c:	00060e63          	beqz	a2,3b88 <__trunctfdf2+0x2e0>
    3b70:	00170713          	addi	a4,a4,1 # 400001 <__data_region_end+0x1ec7e1>
    3b74:	7ff00613          	li	a2,2047
    3b78:	08c70263          	beq	a4,a2,3bfc <__trunctfdf2+0x354>
    3b7c:	ff800637          	lui	a2,0xff800
    3b80:	fff60613          	addi	a2,a2,-1 # ff7fffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xff800000>
    3b84:	00c7f7b3          	and	a5,a5,a2
    3b88:	01d79613          	slli	a2,a5,0x1d
    3b8c:	0036d693          	srli	a3,a3,0x3
    3b90:	00d666b3          	or	a3,a2,a3
    3b94:	7ff00613          	li	a2,2047
    3b98:	0037d793          	srli	a5,a5,0x3
    3b9c:	00c71e63          	bne	a4,a2,3bb8 <__trunctfdf2+0x310>
    3ba0:	00f6e6b3          	or	a3,a3,a5
    3ba4:	00000793          	li	a5,0
    3ba8:	00068863          	beqz	a3,3bb8 <__trunctfdf2+0x310>
    3bac:	000807b7          	lui	a5,0x80
    3bb0:	00000693          	li	a3,0
    3bb4:	00000413          	li	s0,0
    3bb8:	01471713          	slli	a4,a4,0x14
    3bbc:	7ff00637          	lui	a2,0x7ff00
    3bc0:	00c79793          	slli	a5,a5,0xc
    3bc4:	00c77733          	and	a4,a4,a2
    3bc8:	00c7d793          	srli	a5,a5,0xc
    3bcc:	01f41413          	slli	s0,s0,0x1f
    3bd0:	00f767b3          	or	a5,a4,a5
    3bd4:	02c12083          	lw	ra,44(sp)
    3bd8:	0087e733          	or	a4,a5,s0
    3bdc:	02812403          	lw	s0,40(sp)
    3be0:	02412483          	lw	s1,36(sp)
    3be4:	00068513          	mv	a0,a3
    3be8:	00070593          	mv	a1,a4
    3bec:	03010113          	addi	sp,sp,48
    3bf0:	00008067          	ret
    3bf4:	00000793          	li	a5,0
    3bf8:	f69ff06f          	j	3b60 <__trunctfdf2+0x2b8>
    3bfc:	00000793          	li	a5,0
    3c00:	00000693          	li	a3,0
    3c04:	f85ff06f          	j	3b88 <__trunctfdf2+0x2e0>

00003c08 <_OffsetAbsSyms>:
 * point regs
 */
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF,
		 STACK_ROUND_UP(sizeof(struct k_thread)));

GEN_ABS_SYM_END
    3c08:	00008067          	ret

00003c0c <my_isr>:
 * @brief gives the semaphore for accelerator thread to procede
 * 
 * @param arg 
 */
void my_isr(const void *arg) {
    *acceleratorIP_ISR = 0x1;
    3c0c:	002137b7          	lui	a5,0x213
    3c10:	7747a783          	lw	a5,1908(a5) # 213774 <acceleratorIP_ISR>
void my_isr(const void *arg) {
    3c14:	ff010113          	addi	sp,sp,-16
    3c18:	00112623          	sw	ra,12(sp)
    *acceleratorIP_ISR = 0x1;
    3c1c:	00100713          	li	a4,1
    3c20:	00e7a023          	sw	a4,0(a5)
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    3c24:	00214537          	lui	a0,0x214
    3c28:	81050513          	addi	a0,a0,-2032 # 213810 <thread_sem>
    3c2c:	1d5020ef          	jal	ra,6600 <z_impl_k_sem_give>
    
    k_sem_give(&thread_sem);
    k_sem_give(&accel_sem);
}
    3c30:	00c12083          	lw	ra,12(sp)
    3c34:	00214537          	lui	a0,0x214
    3c38:	80050513          	addi	a0,a0,-2048 # 213800 <accel_sem>
    3c3c:	01010113          	addi	sp,sp,16
    3c40:	1c10206f          	j	6600 <z_impl_k_sem_give>

00003c44 <dot>:
{
    3c44:	fc010113          	addi	sp,sp,-64
    3c48:	02812c23          	sw	s0,56(sp)
    3c4c:	00070413          	mv	s0,a4
    if(cols1*cols2 > MAX_MATRIX_SIZE) {
    3c50:	02f70733          	mul	a4,a4,a5
{
    3c54:	02912a23          	sw	s1,52(sp)
    3c58:	03212823          	sw	s2,48(sp)
    3c5c:	03312623          	sw	s3,44(sp)
    3c60:	03412423          	sw	s4,40(sp)
    3c64:	03512223          	sw	s5,36(sp)
    3c68:	00078493          	mv	s1,a5
    3c6c:	02112e23          	sw	ra,60(sp)
    3c70:	03612023          	sw	s6,32(sp)
    3c74:	01712e23          	sw	s7,28(sp)
    3c78:	01812c23          	sw	s8,24(sp)
    3c7c:	01912a23          	sw	s9,20(sp)
    3c80:	01a12823          	sw	s10,16(sp)
    3c84:	01b12623          	sw	s11,12(sp)
    if(cols1*cols2 > MAX_MATRIX_SIZE) {
    3c88:	40000793          	li	a5,1024
{
    3c8c:	00050913          	mv	s2,a0
    3c90:	00058993          	mv	s3,a1
    3c94:	00060a13          	mv	s4,a2
    3c98:	00068a93          	mv	s5,a3
    if(cols1*cols2 > MAX_MATRIX_SIZE) {
    3c9c:	08e7da63          	bge	a5,a4,3d30 <dot+0xec>
    float *column = (float *)COLUMN_BASE_ADDRESS+myId*MAX_MATRIX_SIZE*sizeof(float);
    3ca0:	00e81813          	slli	a6,a6,0xe
    3ca4:	05000bb7          	lui	s7,0x5000
    3ca8:	010b8bb3          	add	s7,s7,a6
    3cac:	00249d13          	slli	s10,s1,0x2
        for(int i=0; i<cols2; i++) {
    3cb0:	00000b13          	li	s6,0
	return z_impl_k_sem_take(sem, timeout);
    3cb4:	00214db7          	lui	s11,0x214
    3cb8:	00214c37          	lui	s8,0x214
    3cbc:	0e9b5863          	bge	s6,s1,3dac <dot+0x168>
    3cc0:	002b1c93          	slli	s9,s6,0x2
    3cc4:	01998733          	add	a4,s3,s9
            for(int j=0; j<cols1; j++)
    3cc8:	00000793          	li	a5,0
    3ccc:	01c0006f          	j	3ce8 <dot+0xa4>
                column[j] = mat2[j*cols2+i];
    3cd0:	00072603          	lw	a2,0(a4)
    3cd4:	00279693          	slli	a3,a5,0x2
    3cd8:	00db86b3          	add	a3,s7,a3
    3cdc:	00c6a023          	sw	a2,0(a3)
            for(int j=0; j<cols1; j++)
    3ce0:	00178793          	addi	a5,a5,1
    3ce4:	01a70733          	add	a4,a4,s10
    3ce8:	fe87c4e3          	blt	a5,s0,3cd0 <dot+0x8c>
    3cec:	fff00593          	li	a1,-1
    3cf0:	fff00613          	li	a2,-1
    3cf4:	810d8513          	addi	a0,s11,-2032 # 213810 <thread_sem>
    3cf8:	175020ef          	jal	ra,666c <z_impl_k_sem_take>
            multiply_mat_hw(mat1Address, (int)column, resultAddress+i*sizeof(float), rows1, cols1, 1);
    3cfc:	00100793          	li	a5,1
    3d00:	00040713          	mv	a4,s0
    3d04:	000a8693          	mv	a3,s5
    3d08:	019a0633          	add	a2,s4,s9
    3d0c:	000b8593          	mv	a1,s7
    3d10:	00090513          	mv	a0,s2
    3d14:	73c000ef          	jal	ra,4450 <multiply_mat_hw>
    3d18:	fff00593          	li	a1,-1
    3d1c:	fff00613          	li	a2,-1
    3d20:	800c0513          	addi	a0,s8,-2048 # 213800 <accel_sem>
    3d24:	149020ef          	jal	ra,666c <z_impl_k_sem_take>
        for(int i=0; i<cols2; i++) {
    3d28:	001b0b13          	addi	s6,s6,1
    3d2c:	f91ff06f          	j	3cbc <dot+0x78>
    3d30:	00214537          	lui	a0,0x214
    3d34:	fff00593          	li	a1,-1
    3d38:	fff00613          	li	a2,-1
    3d3c:	81050513          	addi	a0,a0,-2032 # 213810 <thread_sem>
    3d40:	12d020ef          	jal	ra,666c <z_impl_k_sem_take>
        multiply_mat_hw(mat1Address, mat2Address, resultAddress, rows1, cols1, cols2);
    3d44:	00048793          	mv	a5,s1
    3d48:	00040713          	mv	a4,s0
    3d4c:	000a8693          	mv	a3,s5
    3d50:	000a0613          	mv	a2,s4
    3d54:	00098593          	mv	a1,s3
    3d58:	00090513          	mv	a0,s2
    3d5c:	6f4000ef          	jal	ra,4450 <multiply_mat_hw>
}
    3d60:	03812403          	lw	s0,56(sp)
    3d64:	03c12083          	lw	ra,60(sp)
    3d68:	03412483          	lw	s1,52(sp)
    3d6c:	03012903          	lw	s2,48(sp)
    3d70:	02c12983          	lw	s3,44(sp)
    3d74:	02812a03          	lw	s4,40(sp)
    3d78:	02412a83          	lw	s5,36(sp)
    3d7c:	02012b03          	lw	s6,32(sp)
    3d80:	01c12b83          	lw	s7,28(sp)
    3d84:	01812c03          	lw	s8,24(sp)
    3d88:	01412c83          	lw	s9,20(sp)
    3d8c:	01012d03          	lw	s10,16(sp)
    3d90:	00c12d83          	lw	s11,12(sp)
    3d94:	00214537          	lui	a0,0x214
    3d98:	fff00593          	li	a1,-1
    3d9c:	fff00613          	li	a2,-1
    3da0:	80050513          	addi	a0,a0,-2048 # 213800 <accel_sem>
    3da4:	04010113          	addi	sp,sp,64
    3da8:	0c50206f          	j	666c <z_impl_k_sem_take>
    3dac:	03c12083          	lw	ra,60(sp)
    3db0:	03812403          	lw	s0,56(sp)
    3db4:	03412483          	lw	s1,52(sp)
    3db8:	03012903          	lw	s2,48(sp)
    3dbc:	02c12983          	lw	s3,44(sp)
    3dc0:	02812a03          	lw	s4,40(sp)
    3dc4:	02412a83          	lw	s5,36(sp)
    3dc8:	02012b03          	lw	s6,32(sp)
    3dcc:	01c12b83          	lw	s7,28(sp)
    3dd0:	01812c03          	lw	s8,24(sp)
    3dd4:	01412c83          	lw	s9,20(sp)
    3dd8:	01012d03          	lw	s10,16(sp)
    3ddc:	00c12d83          	lw	s11,12(sp)
    3de0:	04010113          	addi	sp,sp,64
    3de4:	00008067          	ret

00003de8 <thread_accelerator>:
 * @param mainIdPtr 
 * @param unused1 
 * @param unused2 
 */
void thread_accelerator(void *mainIdPtr, void *myIdPtr, void *unused)
{
    3de8:	fb010113          	addi	sp,sp,-80
    3dec:	04812423          	sw	s0,72(sp)
    3df0:	00001437          	lui	s0,0x1
    3df4:	c4040413          	addi	s0,s0,-960 # c40 <__adddf3+0xcc>
    3df8:	02858433          	mul	s0,a1,s0
    k_tid_t mainId = (k_tid_t) mainIdPtr;
    int myId = POINTER_TO_INT(myIdPtr);
	ARG_UNUSED(unused);

    int totalCompleted = 0;
    completed[myId] = 0;
    3dfc:	0000f7b7          	lui	a5,0xf
{
    3e00:	03912223          	sw	s9,36(sp)
    completed[myId] = 0;
    3e04:	37878713          	addi	a4,a5,888 # f378 <completed>
    3e08:	00259c93          	slli	s9,a1,0x2
{
    3e0c:	04912223          	sw	s1,68(sp)
    3e10:	05212023          	sw	s2,64(sp)
    3e14:	03312e23          	sw	s3,60(sp)
    3e18:	03412c23          	sw	s4,56(sp)
    3e1c:	03512a23          	sw	s5,52(sp)
    3e20:	03612823          	sw	s6,48(sp)
    3e24:	03712623          	sw	s7,44(sp)
    3e28:	03812423          	sw	s8,40(sp)
    3e2c:	03a12023          	sw	s10,32(sp)
    3e30:	01b12e23          	sw	s11,28(sp)
    completed[myId] = 0;
    3e34:	01970733          	add	a4,a4,s9
{
    3e38:	04112623          	sw	ra,76(sp)

    int my_a1_address = A1_BASE_ADDRESS+myId*0x1000;
    3e3c:	00004937          	lui	s2,0x4
    completed[myId] = 0;
    3e40:	00072023          	sw	zero,0(a4)
    int my_a1_address = A1_BASE_ADDRESS+myId*0x1000;
    3e44:	01258933          	add	s2,a1,s2
    3e48:	00213ab7          	lui	s5,0x213
    3e4c:	0008b737          	lui	a4,0x8b
    3e50:	00c91913          	slli	s2,s2,0xc
    3e54:	da0a8a93          	addi	s5,s5,-608 # 212da0 <digitsy>
    3e58:	da070713          	addi	a4,a4,-608 # 8ada0 <digits>
{
    3e5c:	00050a13          	mv	s4,a0
    3e60:	00058993          	mv	s3,a1
    int my_a2_address = A2_BASE_ADDRESS+myId*0x1000;
    3e64:	20090b93          	addi	s7,s2,512 # 4200 <main+0x198>
    int my_yhat_address = YHAT_BASE_ADDRESS+myId*0x1000;
    3e68:	30090c13          	addi	s8,s2,768

    float *a1 = (float *) (my_a1_address);
    float *a2 = (float *) (my_a2_address);
    float *yhat = (float *) (my_yhat_address);

    for(int i=0; i<DIGITS/NUM_THREADS; i++) {
    3e6c:	015c8ab3          	add	s5,s9,s5
    3e70:	00e40433          	add	s0,s0,a4
    3e74:	00000893          	li	a7,0
    3e78:	00078493          	mv	s1,a5
    3e7c:	37878b13          	addi	s6,a5,888
        digity = get_digit(myId+i*NUM_THREADS, &digit);

        dot((int)digit, (int)&W1, my_a1_address, 1, DIGIT_SIZE, W1_COLS, myId);
    3e80:	00020eb7          	lui	t4,0x20
        relu(a1, W1_COLS);

        dot(my_a1_address, (int)&W2, my_a2_address, 1, W1_COLS, W2_COLS, myId);
    3e84:	00082d37          	lui	s10,0x82
        relu(a2, W2_COLS);

        dot(my_a2_address, (int)&W3, my_yhat_address, 1, W2_COLS, W3_COLS, myId);
    3e88:	0008adb7          	lui	s11,0x8a
    return digitsy[num];
    3e8c:	000aaf83          	lw	t6,0(s5)
        dot((int)digit, (int)&W1, my_a1_address, 1, DIGIT_SIZE, W1_COLS, myId);
    3e90:	3a0e8593          	addi	a1,t4,928 # 203a0 <W1>
    3e94:	00098813          	mv	a6,s3
    3e98:	08000793          	li	a5,128
    3e9c:	31000713          	li	a4,784
    3ea0:	00100693          	li	a3,1
    3ea4:	00090613          	mv	a2,s2
    3ea8:	00040513          	mv	a0,s0
    3eac:	01112623          	sw	a7,12(sp)
    return digitsy[num];
    3eb0:	01f12423          	sw	t6,8(sp)
        dot((int)digit, (int)&W1, my_a1_address, 1, DIGIT_SIZE, W1_COLS, myId);
    3eb4:	d91ff0ef          	jal	ra,3c44 <dot>
        relu(a1, W1_COLS);
    3eb8:	08000593          	li	a1,128
    3ebc:	00090513          	mv	a0,s2
    3ec0:	374000ef          	jal	ra,4234 <relu>
        dot(my_a1_address, (int)&W2, my_a2_address, 1, W1_COLS, W2_COLS, myId);
    3ec4:	00098813          	mv	a6,s3
    3ec8:	04000793          	li	a5,64
    3ecc:	08000713          	li	a4,128
    3ed0:	00100693          	li	a3,1
    3ed4:	000b8613          	mv	a2,s7
    3ed8:	3a0d0593          	addi	a1,s10,928 # 823a0 <W2>
    3edc:	00090513          	mv	a0,s2
    3ee0:	d65ff0ef          	jal	ra,3c44 <dot>
        relu(a2, W2_COLS);
    3ee4:	04000593          	li	a1,64
    3ee8:	000b8513          	mv	a0,s7
    3eec:	348000ef          	jal	ra,4234 <relu>
        dot(my_a2_address, (int)&W3, my_yhat_address, 1, W2_COLS, W3_COLS, myId);
    3ef0:	00098813          	mv	a6,s3
    3ef4:	00a00793          	li	a5,10
    3ef8:	04000713          	li	a4,64
    3efc:	00100693          	li	a3,1
    3f00:	000c0613          	mv	a2,s8
    3f04:	3a0d8593          	addi	a1,s11,928 # 8a3a0 <W3>
    3f08:	000b8513          	mv	a0,s7
    3f0c:	d39ff0ef          	jal	ra,3c44 <dot>
        softmax(yhat, W3_COLS);
    3f10:	00a00593          	li	a1,10
    3f14:	000c0513          	mv	a0,s8
    3f18:	37c000ef          	jal	ra,4294 <softmax>

        prediction = get_prediction(yhat, 10);
    3f1c:	00a00593          	li	a1,10
    3f20:	000c0513          	mv	a0,s8
    3f24:	4a0000ef          	jal	ra,43c4 <get_prediction>

        if(prediction == digity) accuracy_hw++;
    3f28:	00812f83          	lw	t6,8(sp)
    3f2c:	00c12883          	lw	a7,12(sp)
    3f30:	00020eb7          	lui	t4,0x20
    3f34:	00031e37          	lui	t3,0x31
    3f38:	00400313          	li	t1,4
    3f3c:	0000df37          	lui	t5,0xd
    3f40:	01f51a63          	bne	a0,t6,3f54 <thread_accelerator+0x16c>
    3f44:	240f0713          	addi	a4,t5,576 # d240 <accuracy_hw>
    3f48:	00072783          	lw	a5,0(a4)
    3f4c:	00178793          	addi	a5,a5,1
    3f50:	00f72023          	sw	a5,0(a4)
    for(int i=0; i<DIGITS/NUM_THREADS; i++) {
    3f54:	00188893          	addi	a7,a7,1 # 80001 <W1+0x5fc61>
    3f58:	100a8a93          	addi	s5,s5,256
    3f5c:	01c40433          	add	s0,s0,t3
    3f60:	f26896e3          	bne	a7,t1,3e8c <thread_accelerator+0xa4>
	return z_impl_k_mutex_lock(mutex, timeout);
    3f64:	00213437          	lui	s0,0x213
    3f68:	fff00593          	li	a1,-1
    3f6c:	fff00613          	li	a2,-1
    3f70:	7ec40513          	addi	a0,s0,2028 # 2137ec <completed_mutex>
    3f74:	464020ef          	jal	ra,63d8 <z_impl_k_mutex_lock>
    }

    k_mutex_lock(&completed_mutex, K_FOREVER);
    completed[myId] = 1;
    3f78:	019b07b3          	add	a5,s6,s9
    3f7c:	00100713          	li	a4,1
    3f80:	00e7a023          	sw	a4,0(a5)
	return z_impl_k_mutex_unlock(mutex);
    3f84:	7ec40513          	addi	a0,s0,2028
    3f88:	5b0020ef          	jal	ra,6538 <z_impl_k_mutex_unlock>
	return z_impl_k_mutex_lock(mutex, timeout);
    3f8c:	fff00593          	li	a1,-1
    3f90:	fff00613          	li	a2,-1
    3f94:	7ec40513          	addi	a0,s0,2028
    3f98:	440020ef          	jal	ra,63d8 <z_impl_k_mutex_lock>
    k_mutex_unlock(&completed_mutex);

    k_mutex_lock(&completed_mutex, K_FOREVER);
    for(int i=0; i<NUM_THREADS; i++)
    3f9c:	37848793          	addi	a5,s1,888 # 80378 <W1+0x5ffd8>
    3fa0:	100b0b13          	addi	s6,s6,256
    int totalCompleted = 0;
    3fa4:	00000493          	li	s1,0
        totalCompleted += completed[i];
    3fa8:	0007a703          	lw	a4,0(a5)
    for(int i=0; i<NUM_THREADS; i++)
    3fac:	00478793          	addi	a5,a5,4
        totalCompleted += completed[i];
    3fb0:	00e484b3          	add	s1,s1,a4
    for(int i=0; i<NUM_THREADS; i++)
    3fb4:	fefb1ae3          	bne	s6,a5,3fa8 <thread_accelerator+0x1c0>
	return z_impl_k_mutex_unlock(mutex);
    3fb8:	7ec40513          	addi	a0,s0,2028
    3fbc:	57c020ef          	jal	ra,6538 <z_impl_k_mutex_unlock>
    k_mutex_unlock(&completed_mutex);

    if(totalCompleted == NUM_THREADS)
    3fc0:	04000793          	li	a5,64
    3fc4:	04f49263          	bne	s1,a5,4008 <thread_accelerator+0x220>
        k_thread_resume(mainId);
    3fc8:	04812403          	lw	s0,72(sp)
    3fcc:	04c12083          	lw	ra,76(sp)
    3fd0:	04412483          	lw	s1,68(sp)
    3fd4:	04012903          	lw	s2,64(sp)
    3fd8:	03c12983          	lw	s3,60(sp)
    3fdc:	03412a83          	lw	s5,52(sp)
    3fe0:	03012b03          	lw	s6,48(sp)
    3fe4:	02c12b83          	lw	s7,44(sp)
    3fe8:	02812c03          	lw	s8,40(sp)
    3fec:	02412c83          	lw	s9,36(sp)
    3ff0:	02012d03          	lw	s10,32(sp)
    3ff4:	01c12d83          	lw	s11,28(sp)
	z_impl_k_thread_resume(thread);
    3ff8:	000a0513          	mv	a0,s4
    3ffc:	03812a03          	lw	s4,56(sp)
    4000:	05010113          	addi	sp,sp,80
    4004:	3850206f          	j	6b88 <z_impl_k_thread_resume>
    4008:	04c12083          	lw	ra,76(sp)
    400c:	04812403          	lw	s0,72(sp)
    4010:	04412483          	lw	s1,68(sp)
    4014:	04012903          	lw	s2,64(sp)
    4018:	03c12983          	lw	s3,60(sp)
    401c:	03812a03          	lw	s4,56(sp)
    4020:	03412a83          	lw	s5,52(sp)
    4024:	03012b03          	lw	s6,48(sp)
    4028:	02c12b83          	lw	s7,44(sp)
    402c:	02812c03          	lw	s8,40(sp)
    4030:	02412c83          	lw	s9,36(sp)
    4034:	02012d03          	lw	s10,32(sp)
    4038:	01c12d83          	lw	s11,28(sp)
    403c:	05010113          	addi	sp,sp,80
    4040:	00008067          	ret

00004044 <my_isr_installer>:
    *acceleratorGIER = 0x1;
    4044:	002137b7          	lui	a5,0x213
    4048:	76c7a703          	lw	a4,1900(a5) # 21376c <acceleratorGIER>
    404c:	00100793          	li	a5,1
    arch_irq_enable(ACCEL_IRQ);
    4050:	00f00513          	li	a0,15
    *acceleratorGIER = 0x1;
    4054:	00f72023          	sw	a5,0(a4)
    *acceleratorIP_IER = 0x1;
    4058:	00213737          	lui	a4,0x213
    405c:	77072703          	lw	a4,1904(a4) # 213770 <acceleratorIP_IER>
    4060:	00f72023          	sw	a5,0(a4)
    arch_irq_enable(ACCEL_IRQ);
    4064:	6e00106f          	j	5744 <arch_irq_enable>

00004068 <main>:
    printf("*** Starting NN UC 2 with %d threads ***\n", NUM_THREADS);
    4068:	0000d537          	lui	a0,0xd
{
    406c:	f5010113          	addi	sp,sp,-176
    printf("*** Starting NN UC 2 with %d threads ***\n", NUM_THREADS);
    4070:	04000593          	li	a1,64
    4074:	c0050513          	addi	a0,a0,-1024 # cc00 <__mprec_tens+0xc8>
{
    4078:	0a112623          	sw	ra,172(sp)
    407c:	0a812423          	sw	s0,168(sp)
    4080:	0a912223          	sw	s1,164(sp)
    4084:	0b212023          	sw	s2,160(sp)
    4088:	09312e23          	sw	s3,156(sp)
    408c:	09412c23          	sw	s4,152(sp)
    4090:	09512a23          	sw	s5,148(sp)
    4094:	09612823          	sw	s6,144(sp)
    4098:	09712623          	sw	s7,140(sp)
    409c:	09812423          	sw	s8,136(sp)
    40a0:	09912223          	sw	s9,132(sp)
    40a4:	09a12023          	sw	s10,128(sp)
    printf("*** Starting NN UC 2 with %d threads ***\n", NUM_THREADS);
    40a8:	63d040ef          	jal	ra,8ee4 <iprintf>
    printf("\nInstalling ISR...\n");
    40ac:	0000d537          	lui	a0,0xd
    40b0:	c2c50513          	addi	a0,a0,-980 # cc2c <__mprec_tens+0xf4>
    40b4:	0000d437          	lui	s0,0xd
    40b8:	62d040ef          	jal	ra,8ee4 <iprintf>
    my_isr_installer();
    40bc:	0000fa37          	lui	s4,0xf
    40c0:	0000f9b7          	lui	s3,0xf
    40c4:	27840493          	addi	s1,s0,632 # d278 <threads>
    40c8:	f7dff0ef          	jal	ra,4044 <my_isr_installer>
    for(int i=0; i<NUM_THREADS; i++) {
    40cc:	5a0a0a13          	addi	s4,s4,1440 # f5a0 <stacks>
    40d0:	47898993          	addi	s3,s3,1144 # f478 <thread_ids>
    my_isr_installer();
    40d4:	27840413          	addi	s0,s0,632
    for(int i=0; i<NUM_THREADS; i++) {
    40d8:	00000913          	li	s2,0
    40dc:	fff00b13          	li	s6,-1
    40e0:	fff00b93          	li	s7,-1
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    40e4:	00400c93          	li	s9,4
    40e8:	00004c37          	lui	s8,0x4
        snprintk(tname, CONFIG_THREAD_MAX_NAME_LEN, "thread %d", i);
    40ec:	0000dab7          	lui	s5,0xd
    for(int i=0; i<NUM_THREADS; i++) {
    40f0:	04000d13          	li	s10,64
	return z_impl_z_current_get();
    40f4:	14c030ef          	jal	ra,7240 <z_impl_z_current_get>
    40f8:	00050713          	mv	a4,a0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    40fc:	00a00893          	li	a7,10
    4100:	00000813          	li	a6,0
    4104:	00090793          	mv	a5,s2
    4108:	de8c0693          	addi	a3,s8,-536 # 3de8 <thread_accelerator>
    410c:	000a0593          	mv	a1,s4
    4110:	01612423          	sw	s6,8(sp)
    4114:	01712623          	sw	s7,12(sp)
    4118:	01912023          	sw	s9,0(sp)
    411c:	40000613          	li	a2,1024
    4120:	00040513          	mv	a0,s0
    4124:	0d0020ef          	jal	ra,61f4 <z_impl_k_thread_create>
        thread_ids[i] = k_thread_create(&threads[i], &stacks[i][0], STACKSIZE,
    4128:	00a9a023          	sw	a0,0(s3)
        snprintk(tname, CONFIG_THREAD_MAX_NAME_LEN, "thread %d", i);
    412c:	00090693          	mv	a3,s2
    4130:	c40a8613          	addi	a2,s5,-960 # cc40 <__mprec_tens+0x108>
    4134:	06400593          	li	a1,100
    4138:	01c10513          	addi	a0,sp,28
    413c:	464000ef          	jal	ra,45a0 <snprintk>
	return z_impl_k_thread_name_set(thread, str);
    4140:	00040513          	mv	a0,s0
    4144:	01c10593          	addi	a1,sp,28
    for(int i=0; i<NUM_THREADS; i++) {
    4148:	00190913          	addi	s2,s2,1
    414c:	018020ef          	jal	ra,6164 <z_impl_k_thread_name_set>
    4150:	08040413          	addi	s0,s0,128
    4154:	400a0a13          	addi	s4,s4,1024
    4158:	00498993          	addi	s3,s3,4
    415c:	f9a91ce3          	bne	s2,s10,40f4 <main+0x8c>
    printf("\nPerforming feed forward neural network using the hardware accelerator\n");
    4160:	0000d537          	lui	a0,0xd
    4164:	c4c50513          	addi	a0,a0,-948 # cc4c <__mprec_tens+0x114>
    4168:	57d040ef          	jal	ra,8ee4 <iprintf>
	return z_impl_k_sleep(timeout);
    416c:	3e800513          	li	a0,1000
    4170:	00000593          	li	a1,0
    4174:	00002437          	lui	s0,0x2
    4178:	088030ef          	jal	ra,7200 <z_impl_k_sleep>
    for(int i=0; i<NUM_THREADS; i++)
    417c:	00848433          	add	s0,s1,s0
	z_impl_k_thread_start(thread);
    4180:	00048513          	mv	a0,s1
    4184:	08048493          	addi	s1,s1,128
    4188:	7e5010ef          	jal	ra,616c <z_impl_k_thread_start>
    418c:	fe941ae3          	bne	s0,s1,4180 <main+0x118>
	return z_impl_k_uptime_ticks();
    4190:	698030ef          	jal	ra,7828 <z_impl_k_uptime_ticks>
    4194:	00050413          	mv	s0,a0
	return z_impl_z_current_get();
    4198:	0a8030ef          	jal	ra,7240 <z_impl_z_current_get>
	z_impl_k_thread_suspend(thread);
    419c:	531020ef          	jal	ra,6ecc <z_impl_k_thread_suspend>
	return z_impl_k_uptime_ticks();
    41a0:	688030ef          	jal	ra,7828 <z_impl_k_uptime_ticks>
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
    41a4:	40850533          	sub	a0,a0,s0
    printf("Execution time: %d ms\n", time_hw);
    41a8:	00a00593          	li	a1,10
    41ac:	02b505b3          	mul	a1,a0,a1
    41b0:	0000d537          	lui	a0,0xd
    41b4:	c9450513          	addi	a0,a0,-876 # cc94 <__mprec_tens+0x15c>
    41b8:	52d040ef          	jal	ra,8ee4 <iprintf>
    printf("Accuracy: %f\n", (float)accuracy_hw/DIGITS);
    41bc:	0000d7b7          	lui	a5,0xd
    41c0:	2407a503          	lw	a0,576(a5) # d240 <accuracy_hw>
    41c4:	f75fe0ef          	jal	ra,3138 <__floatsisf>
    41c8:	0000d7b7          	lui	a5,0xd
    41cc:	9187a583          	lw	a1,-1768(a5) # c918 <__device_handles_end+0xc0>
    41d0:	ff8fe0ef          	jal	ra,29c8 <__mulsf3>
    41d4:	86cff0ef          	jal	ra,3240 <__extendsfdf2>
    41d8:	00050613          	mv	a2,a0
    41dc:	0000d537          	lui	a0,0xd
    41e0:	00058693          	mv	a3,a1
    41e4:	cac50513          	addi	a0,a0,-852 # ccac <__mprec_tens+0x174>
    41e8:	4fd040ef          	jal	ra,8ee4 <iprintf>
    printf("\n*** Exiting NN UC 2 ***\n");
    41ec:	0000d537          	lui	a0,0xd
    41f0:	cbc50513          	addi	a0,a0,-836 # ccbc <__mprec_tens+0x184>
    41f4:	4f1040ef          	jal	ra,8ee4 <iprintf>
}
    41f8:	0ac12083          	lw	ra,172(sp)
    41fc:	0a812403          	lw	s0,168(sp)
    4200:	0a412483          	lw	s1,164(sp)
    4204:	0a012903          	lw	s2,160(sp)
    4208:	09c12983          	lw	s3,156(sp)
    420c:	09812a03          	lw	s4,152(sp)
    4210:	09412a83          	lw	s5,148(sp)
    4214:	09012b03          	lw	s6,144(sp)
    4218:	08c12b83          	lw	s7,140(sp)
    421c:	08812c03          	lw	s8,136(sp)
    4220:	08412c83          	lw	s9,132(sp)
    4224:	08012d03          	lw	s10,128(sp)
    4228:	00000513          	li	a0,0
    422c:	0b010113          	addi	sp,sp,176
    4230:	00008067          	ret

00004234 <relu>:
#include "nn.h"

void relu(float *m, int size)
{
    4234:	ff010113          	addi	sp,sp,-16
    4238:	00812423          	sw	s0,8(sp)
    423c:	00912223          	sw	s1,4(sp)
    4240:	01212023          	sw	s2,0(sp)
    4244:	00112623          	sw	ra,12(sp)
    4248:	00058493          	mv	s1,a1
    424c:	00050413          	mv	s0,a0
    for (int i=0; i<size; i++) {
    4250:	00000913          	li	s2,0
    4254:	00994e63          	blt	s2,s1,4270 <relu+0x3c>
        if (m[i] < 0) {
            m[i] = 0;
        }
    }
}
    4258:	00c12083          	lw	ra,12(sp)
    425c:	00812403          	lw	s0,8(sp)
    4260:	00412483          	lw	s1,4(sp)
    4264:	00012903          	lw	s2,0(sp)
    4268:	01010113          	addi	sp,sp,16
    426c:	00008067          	ret
        if (m[i] < 0) {
    4270:	00042503          	lw	a0,0(s0) # 2000 <CONFIG_SRAM_SIZE>
    4274:	00000593          	li	a1,0
    4278:	e9cfe0ef          	jal	ra,2914 <__lesf2>
    427c:	00055663          	bgez	a0,4288 <relu+0x54>
            m[i] = 0;
    4280:	00000793          	li	a5,0
    4284:	00f42023          	sw	a5,0(s0)
    for (int i=0; i<size; i++) {
    4288:	00190913          	addi	s2,s2,1
    428c:	00440413          	addi	s0,s0,4
    4290:	fc5ff06f          	j	4254 <relu+0x20>

00004294 <softmax>:

void softmax(float *m, int size)
{
    4294:	fe010113          	addi	sp,sp,-32
    4298:	00812c23          	sw	s0,24(sp)
    429c:	00912a23          	sw	s1,20(sp)
    42a0:	01212823          	sw	s2,16(sp)
    42a4:	01312623          	sw	s3,12(sp)
    42a8:	00112e23          	sw	ra,28(sp)
    42ac:	01412423          	sw	s4,8(sp)
    42b0:	01512223          	sw	s5,4(sp)
    42b4:	01612023          	sw	s6,0(sp)
    42b8:	00050413          	mv	s0,a0
    42bc:	00058493          	mv	s1,a1
    float max = 0;
    for (int i = 0; i<size; i++) {
    42c0:	00000913          	li	s2,0
    float max = 0;
    42c4:	00000993          	li	s3,0
    for (int i = 0; i<size; i++) {
    42c8:	04994063          	blt	s2,s1,4308 <softmax+0x74>
            max = m[i];
        }
    }

    float sum = 0;
    for (int i=0; i<size; i++) {
    42cc:	00000a13          	li	s4,0
    float sum = 0;
    42d0:	00000913          	li	s2,0
    for (int i=0; i<size; i++) {
    42d4:	049a4e63          	blt	s4,s1,4330 <softmax+0x9c>
        sum += exp(m[i]-max);
    }

    for (int i=0; i<size; i++) {
    42d8:	00000a13          	li	s4,0
    42dc:	089a4e63          	blt	s4,s1,4378 <softmax+0xe4>
        m[i] = exp(m[i]-max)/sum;
    }
}
    42e0:	01c12083          	lw	ra,28(sp)
    42e4:	01812403          	lw	s0,24(sp)
    42e8:	01412483          	lw	s1,20(sp)
    42ec:	01012903          	lw	s2,16(sp)
    42f0:	00c12983          	lw	s3,12(sp)
    42f4:	00812a03          	lw	s4,8(sp)
    42f8:	00412a83          	lw	s5,4(sp)
    42fc:	00012b03          	lw	s6,0(sp)
    4300:	02010113          	addi	sp,sp,32
    4304:	00008067          	ret
        if (m[i] > max) {
    4308:	00291793          	slli	a5,s2,0x2
    430c:	00f407b3          	add	a5,s0,a5
    4310:	0007aa03          	lw	s4,0(a5)
    4314:	00098593          	mv	a1,s3
    4318:	000a0513          	mv	a0,s4
    431c:	d44fe0ef          	jal	ra,2860 <__gesf2>
    4320:	00a05463          	blez	a0,4328 <softmax+0x94>
            max = m[i];
    4324:	000a0993          	mv	s3,s4
    for (int i = 0; i<size; i++) {
    4328:	00190913          	addi	s2,s2,1
    432c:	f9dff06f          	j	42c8 <softmax+0x34>
        sum += exp(m[i]-max);
    4330:	002a1793          	slli	a5,s4,0x2
    4334:	00f407b3          	add	a5,s0,a5
    4338:	0007a503          	lw	a0,0(a5)
    433c:	00098593          	mv	a1,s3
    for (int i=0; i<size; i++) {
    4340:	001a0a13          	addi	s4,s4,1
        sum += exp(m[i]-max);
    4344:	989fe0ef          	jal	ra,2ccc <__subsf3>
    4348:	ef9fe0ef          	jal	ra,3240 <__extendsfdf2>
    434c:	4fc030ef          	jal	ra,7848 <exp>
    4350:	00050b13          	mv	s6,a0
    4354:	00090513          	mv	a0,s2
    4358:	00058a93          	mv	s5,a1
    435c:	ee5fe0ef          	jal	ra,3240 <__extendsfdf2>
    4360:	000b0613          	mv	a2,s6
    4364:	000a8693          	mv	a3,s5
    4368:	80dfc0ef          	jal	ra,b74 <__adddf3>
    436c:	fb1fe0ef          	jal	ra,331c <__truncdfsf2>
    4370:	00050913          	mv	s2,a0
    for (int i=0; i<size; i++) {
    4374:	f61ff06f          	j	42d4 <softmax+0x40>
        m[i] = exp(m[i]-max)/sum;
    4378:	00042503          	lw	a0,0(s0)
    437c:	00098593          	mv	a1,s3
    for (int i=0; i<size; i++) {
    4380:	001a0a13          	addi	s4,s4,1
        m[i] = exp(m[i]-max)/sum;
    4384:	949fe0ef          	jal	ra,2ccc <__subsf3>
    4388:	eb9fe0ef          	jal	ra,3240 <__extendsfdf2>
    438c:	4bc030ef          	jal	ra,7848 <exp>
    4390:	00050b13          	mv	s6,a0
    4394:	00090513          	mv	a0,s2
    4398:	00058a93          	mv	s5,a1
    439c:	ea5fe0ef          	jal	ra,3240 <__extendsfdf2>
    43a0:	00050613          	mv	a2,a0
    43a4:	00058693          	mv	a3,a1
    43a8:	000b0513          	mv	a0,s6
    43ac:	000a8593          	mv	a1,s5
    43b0:	f9dfc0ef          	jal	ra,134c <__divdf3>
    43b4:	f69fe0ef          	jal	ra,331c <__truncdfsf2>
    43b8:	00a42023          	sw	a0,0(s0)
    for (int i=0; i<size; i++) {
    43bc:	00440413          	addi	s0,s0,4
    43c0:	f1dff06f          	j	42dc <softmax+0x48>

000043c4 <get_prediction>:

int get_prediction(float yhat[DIGITS], int size)
{
    43c4:	fe010113          	addi	sp,sp,-32
    43c8:	00812c23          	sw	s0,24(sp)
    43cc:	00912a23          	sw	s1,20(sp)
    43d0:	01212823          	sw	s2,16(sp)
    43d4:	01312623          	sw	s3,12(sp)
    43d8:	01412423          	sw	s4,8(sp)
    43dc:	00112e23          	sw	ra,28(sp)
    43e0:	01512223          	sw	s5,4(sp)
    43e4:	00050913          	mv	s2,a0
    43e8:	00058493          	mv	s1,a1
    int prediction = 0;
    float max = 0;
    for (int i=0; i<size; i++) {
    43ec:	00000413          	li	s0,0
    float max = 0;
    43f0:	00000a13          	li	s4,0
    int prediction = 0;
    43f4:	00000993          	li	s3,0
    for (int i=0; i<size; i++) {
    43f8:	02944663          	blt	s0,s1,4424 <get_prediction+0x60>
            prediction = i;
        }
    }

    return prediction;
    43fc:	01c12083          	lw	ra,28(sp)
    4400:	01812403          	lw	s0,24(sp)
    4404:	01412483          	lw	s1,20(sp)
    4408:	01012903          	lw	s2,16(sp)
    440c:	00812a03          	lw	s4,8(sp)
    4410:	00412a83          	lw	s5,4(sp)
    4414:	00098513          	mv	a0,s3
    4418:	00c12983          	lw	s3,12(sp)
    441c:	02010113          	addi	sp,sp,32
    4420:	00008067          	ret
        if (yhat[i] > max) {
    4424:	00241793          	slli	a5,s0,0x2
    4428:	00f907b3          	add	a5,s2,a5
    442c:	0007aa83          	lw	s5,0(a5)
    4430:	000a0593          	mv	a1,s4
    4434:	000a8513          	mv	a0,s5
    4438:	c28fe0ef          	jal	ra,2860 <__gesf2>
    443c:	00a05663          	blez	a0,4448 <get_prediction+0x84>
            max = yhat[i];
    4440:	000a8a13          	mv	s4,s5
        if (yhat[i] > max) {
    4444:	00040993          	mv	s3,s0
    for (int i=0; i<size; i++) {
    4448:	00140413          	addi	s0,s0,1
    444c:	fadff06f          	j	43f8 <get_prediction+0x34>

00004450 <multiply_mat_hw>:
	volatile int *c = (int *)(ACCELERATOR_BASE_ADDRESS + 0x20);
	volatile int *rowsA = (int *)(ACCELERATOR_BASE_ADDRESS + 0x28);
	volatile int *colsA = (int *)(ACCELERATOR_BASE_ADDRESS + 0x30);
	volatile int *colsB = (int *)(ACCELERATOR_BASE_ADDRESS + 0x38);

    *a = mat1Address;
    4450:	90000837          	lui	a6,0x90000
    4454:	00a82823          	sw	a0,16(a6) # 90000010 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x90000011>
    *b = mat2Address;
    4458:	00b82c23          	sw	a1,24(a6)
    *c = resultAddress;
    445c:	02c82023          	sw	a2,32(a6)
    *rowsA = rows1;
    4460:	02d82423          	sw	a3,40(a6)
    *colsA = cols1;
    4464:	02e82823          	sw	a4,48(a6)
    *colsB = cols2;
    4468:	02f82c23          	sw	a5,56(a6)

    *do_matp_mem = 1;
    446c:	00100793          	li	a5,1
    4470:	00f82023          	sw	a5,0(a6)
    4474:	00008067          	ret

00004478 <arch_printk_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    4478:	00000513          	li	a0,0
    447c:	00008067          	ret

00004480 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    4480:	0005a783          	lw	a5,0(a1)
    4484:	00178793          	addi	a5,a5,1
    4488:	00f5a023          	sw	a5,0(a1)
	return _char_out(c);
    448c:	002137b7          	lui	a5,0x213
    4490:	7787a783          	lw	a5,1912(a5) # 213778 <_char_out>
    4494:	00078067          	jr	a5

00004498 <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    4498:	0085a703          	lw	a4,8(a1)
    449c:	0005a783          	lw	a5,0(a1)
		ctx->count++;
		return c;
	}

	if (ctx->count == ctx->max - 1) {
		ctx->str[ctx->count++] = '\0';
    44a0:	00170613          	addi	a2,a4,1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    44a4:	00078663          	beqz	a5,44b0 <str_out+0x18>
    44a8:	0045a683          	lw	a3,4(a1)
    44ac:	00d74663          	blt	a4,a3,44b8 <str_out+0x20>
		ctx->count++;
    44b0:	00c5a423          	sw	a2,8(a1)
		return c;
    44b4:	00008067          	ret
	if (ctx->count == ctx->max - 1) {
    44b8:	fff68693          	addi	a3,a3,-1
		ctx->str[ctx->count++] = '\0';
    44bc:	00c5a423          	sw	a2,8(a1)
    44c0:	00e787b3          	add	a5,a5,a4
	if (ctx->count == ctx->max - 1) {
    44c4:	00e69663          	bne	a3,a4,44d0 <str_out+0x38>
		ctx->str[ctx->count++] = '\0';
    44c8:	00078023          	sb	zero,0(a5)
    44cc:	00008067          	ret
	} else {
		ctx->str[ctx->count++] = c;
    44d0:	00a78023          	sb	a0,0(a5)
	}

	return c;
}
    44d4:	00008067          	ret

000044d8 <__printk_hook_install>:
	_char_out = fn;
    44d8:	002137b7          	lui	a5,0x213
    44dc:	76a7ac23          	sw	a0,1912(a5) # 213778 <_char_out>
}
    44e0:	00008067          	ret

000044e4 <vprintk>:
{
    44e4:	fe010113          	addi	sp,sp,-32
    44e8:	00050613          	mv	a2,a0
		cbvprintf(char_out, &ctx, fmt, ap);
    44ec:	00004537          	lui	a0,0x4
{
    44f0:	00058693          	mv	a3,a1
		cbvprintf(char_out, &ctx, fmt, ap);
    44f4:	48050513          	addi	a0,a0,1152 # 4480 <char_out>
    44f8:	00c10593          	addi	a1,sp,12
{
    44fc:	00112e23          	sw	ra,28(sp)
		struct out_context ctx = { 0 };
    4500:	00012623          	sw	zero,12(sp)
		cbvprintf(char_out, &ctx, fmt, ap);
    4504:	320000ef          	jal	ra,4824 <cbvprintf>
}
    4508:	01c12083          	lw	ra,28(sp)
    450c:	02010113          	addi	sp,sp,32
    4510:	00008067          	ret

00004514 <printk>:
{
    4514:	fc010113          	addi	sp,sp,-64
    4518:	02b12223          	sw	a1,36(sp)
	va_start(ap, fmt);
    451c:	02410593          	addi	a1,sp,36
{
    4520:	00112e23          	sw	ra,28(sp)
    4524:	02c12423          	sw	a2,40(sp)
    4528:	02d12623          	sw	a3,44(sp)
    452c:	02e12823          	sw	a4,48(sp)
    4530:	02f12a23          	sw	a5,52(sp)
    4534:	03012c23          	sw	a6,56(sp)
    4538:	03112e23          	sw	a7,60(sp)
	va_start(ap, fmt);
    453c:	00b12623          	sw	a1,12(sp)
	vprintk(fmt, ap);
    4540:	fa5ff0ef          	jal	ra,44e4 <vprintk>
}
    4544:	01c12083          	lw	ra,28(sp)
    4548:	04010113          	addi	sp,sp,64
    454c:	00008067          	ret

00004550 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    4550:	fe010113          	addi	sp,sp,-32
    4554:	00812c23          	sw	s0,24(sp)
	struct str_context ctx = { str, size, 0 };
    4558:	00a12223          	sw	a0,4(sp)
{
    455c:	00050413          	mv	s0,a0

	cbvprintf(str_out, &ctx, fmt, ap);
    4560:	00004537          	lui	a0,0x4
	struct str_context ctx = { str, size, 0 };
    4564:	00b12423          	sw	a1,8(sp)
	cbvprintf(str_out, &ctx, fmt, ap);
    4568:	49850513          	addi	a0,a0,1176 # 4498 <str_out>
    456c:	00410593          	addi	a1,sp,4
{
    4570:	00112e23          	sw	ra,28(sp)
	struct str_context ctx = { str, size, 0 };
    4574:	00012623          	sw	zero,12(sp)
	cbvprintf(str_out, &ctx, fmt, ap);
    4578:	2ac000ef          	jal	ra,4824 <cbvprintf>

	if (ctx.count < ctx.max) {
    457c:	00c12503          	lw	a0,12(sp)
    4580:	00812783          	lw	a5,8(sp)
    4584:	00f55663          	bge	a0,a5,4590 <vsnprintk+0x40>
		str[ctx.count] = '\0';
    4588:	00a40433          	add	s0,s0,a0
    458c:	00040023          	sb	zero,0(s0)
	}

	return ctx.count;
}
    4590:	01c12083          	lw	ra,28(sp)
    4594:	01812403          	lw	s0,24(sp)
    4598:	02010113          	addi	sp,sp,32
    459c:	00008067          	ret

000045a0 <snprintk>:
{
    45a0:	fc010113          	addi	sp,sp,-64
    45a4:	02d12623          	sw	a3,44(sp)
	va_start(ap, fmt);
    45a8:	02c10693          	addi	a3,sp,44
{
    45ac:	00112e23          	sw	ra,28(sp)
    45b0:	02e12823          	sw	a4,48(sp)
    45b4:	02f12a23          	sw	a5,52(sp)
    45b8:	03012c23          	sw	a6,56(sp)
    45bc:	03112e23          	sw	a7,60(sp)
	va_start(ap, fmt);
    45c0:	00d12623          	sw	a3,12(sp)
	ret = vsnprintk(str, size, fmt, ap);
    45c4:	f8dff0ef          	jal	ra,4550 <vsnprintk>
}
    45c8:	01c12083          	lw	ra,28(sp)
    45cc:	04010113          	addi	sp,sp,64
    45d0:	00008067          	ret

000045d4 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    45d4:	ff010113          	addi	sp,sp,-16
    45d8:	00050793          	mv	a5,a0
    45dc:	00058513          	mv	a0,a1
    45e0:	00060593          	mv	a1,a2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    45e4:	00068613          	mv	a2,a3
{
    45e8:	00112623          	sw	ra,12(sp)
	entry(p1, p2, p3);
    45ec:	000780e7          	jalr	a5
	return z_impl_z_current_get();
    45f0:	451020ef          	jal	ra,7240 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    45f4:	54d020ef          	jal	ra,7340 <z_impl_k_thread_abort>

000045f8 <extract_decimal>:
static size_t extract_decimal(const char **str)
{
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
    45f8:	0000d637          	lui	a2,0xd
	const char *sp = *str;
    45fc:	00052683          	lw	a3,0(a0)
{
    4600:	00050713          	mv	a4,a0
	while (isdigit((int)(unsigned char)*sp)) {
    4604:	ec960613          	addi	a2,a2,-311 # cec9 <_ctype_+0x1>
	size_t val = 0;
    4608:	00000513          	li	a0,0
		val = 10U * val + *sp++ - '0';
    460c:	00a00813          	li	a6,10
	while (isdigit((int)(unsigned char)*sp)) {
    4610:	0006c583          	lbu	a1,0(a3)
    4614:	00c587b3          	add	a5,a1,a2
    4618:	0007c783          	lbu	a5,0(a5)
    461c:	0047f793          	andi	a5,a5,4
    4620:	00079663          	bnez	a5,462c <extract_decimal+0x34>
	}
	*str = sp;
    4624:	00d72023          	sw	a3,0(a4)
	return val;
}
    4628:	00008067          	ret
		val = 10U * val + *sp++ - '0';
    462c:	03050533          	mul	a0,a0,a6
    4630:	00168693          	addi	a3,a3,1
    4634:	fd050793          	addi	a5,a0,-48
    4638:	00b78533          	add	a0,a5,a1
    463c:	fd5ff06f          	j	4610 <extract_decimal+0x18>

00004640 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    4640:	fd010113          	addi	sp,sp,-48
    4644:	02812423          	sw	s0,40(sp)
    4648:	02912223          	sw	s1,36(sp)
    464c:	03212023          	sw	s2,32(sp)
    4650:	01712623          	sw	s7,12(sp)
    4654:	01812423          	sw	s8,8(sp)
    4658:	01912223          	sw	s9,4(sp)
    465c:	02112623          	sw	ra,44(sp)
    4660:	01312e23          	sw	s3,28(sp)
    4664:	01412c23          	sw	s4,24(sp)
    4668:	01512a23          	sw	s5,20(sp)
    466c:	01612823          	sw	s6,16(sp)
	bool upcase = isupper((int)conv->specifier);
    4670:	00364783          	lbu	a5,3(a2)
{
    4674:	00068913          	mv	s2,a3
	bool upcase = isupper((int)conv->specifier);
    4678:	0000d6b7          	lui	a3,0xd
    467c:	ec968693          	addi	a3,a3,-311 # cec9 <_ctype_+0x1>
    4680:	00d786b3          	add	a3,a5,a3
    4684:	0006c983          	lbu	s3,0(a3)
{
    4688:	00070413          	mv	s0,a4
	switch (specifier) {
    468c:	06f00713          	li	a4,111
{
    4690:	00050c13          	mv	s8,a0
    4694:	00058c93          	mv	s9,a1
    4698:	00060b93          	mv	s7,a2
    469c:	0039f993          	andi	s3,s3,3
	switch (specifier) {
    46a0:	00800493          	li	s1,8
    46a4:	00e78c63          	beq	a5,a4,46bc <encode_uint+0x7c>
    46a8:	0cf76263          	bltu	a4,a5,476c <encode_uint+0x12c>
    46ac:	05800713          	li	a4,88
		return 10;
    46b0:	00a00493          	li	s1,10
	switch (specifier) {
    46b4:	00e79463          	bne	a5,a4,46bc <encode_uint+0x7c>
		return 16;
    46b8:	01000493          	li	s1,16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    46bc:	00000a93          	li	s5,0

		*--bp = (lsv <= 9) ? ('0' + lsv)
    46c0:	00900a13          	li	s4,9
    46c4:	00100b13          	li	s6,1
		unsigned int lsv = (unsigned int)(value % radix);
    46c8:	00048613          	mv	a2,s1
    46cc:	00000693          	li	a3,0
    46d0:	000c0513          	mv	a0,s8
    46d4:	000c8593          	mv	a1,s9
    46d8:	898fc0ef          	jal	ra,770 <__umoddi3>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    46dc:	0ff57793          	andi	a5,a0,255
    46e0:	0aaa6263          	bltu	s4,a0,4784 <encode_uint+0x144>
    46e4:	03078793          	addi	a5,a5,48
    46e8:	0ff7f793          	andi	a5,a5,255
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
    46ec:	00048613          	mv	a2,s1
    46f0:	00000693          	li	a3,0
    46f4:	000c0513          	mv	a0,s8
    46f8:	000c8593          	mv	a1,s9
		*--bp = (lsv <= 9) ? ('0' + lsv)
    46fc:	fef40fa3          	sb	a5,-1(s0)
    4700:	fff40413          	addi	s0,s0,-1
		value /= radix;
    4704:	c39fb0ef          	jal	ra,33c <__udivdi3>
	} while ((value != 0) && (bps < bp));
    4708:	019a9463          	bne	s5,s9,4710 <encode_uint+0xd0>
    470c:	009c6463          	bltu	s8,s1,4714 <encode_uint+0xd4>
    4710:	06896463          	bltu	s2,s0,4778 <encode_uint+0x138>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    4714:	000bd783          	lhu	a5,0(s7) # 5000000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2050f80>
    4718:	0207f793          	andi	a5,a5,32
    471c:	00078c63          	beqz	a5,4734 <encode_uint+0xf4>
		if (radix == 8) {
    4720:	00800793          	li	a5,8
    4724:	06f49a63          	bne	s1,a5,4798 <encode_uint+0x158>
			conv->altform_0 = true;
    4728:	002bc783          	lbu	a5,2(s7)
    472c:	0087e793          	ori	a5,a5,8
		} else if (radix == 16) {
			conv->altform_0c = true;
    4730:	00fb8123          	sb	a5,2(s7)
			;
		}
	}

	return bp;
}
    4734:	02c12083          	lw	ra,44(sp)
    4738:	00040513          	mv	a0,s0
    473c:	02812403          	lw	s0,40(sp)
    4740:	02412483          	lw	s1,36(sp)
    4744:	02012903          	lw	s2,32(sp)
    4748:	01c12983          	lw	s3,28(sp)
    474c:	01812a03          	lw	s4,24(sp)
    4750:	01412a83          	lw	s5,20(sp)
    4754:	01012b03          	lw	s6,16(sp)
    4758:	00c12b83          	lw	s7,12(sp)
    475c:	00812c03          	lw	s8,8(sp)
    4760:	00412c83          	lw	s9,4(sp)
    4764:	03010113          	addi	sp,sp,48
    4768:	00008067          	ret
	switch (specifier) {
    476c:	0f77f793          	andi	a5,a5,247
    4770:	07000713          	li	a4,112
    4774:	f3dff06f          	j	46b0 <encode_uint+0x70>
		value /= radix;
    4778:	00050c13          	mv	s8,a0
    477c:	00058c93          	mv	s9,a1
    4780:	f49ff06f          	j	46c8 <encode_uint+0x88>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4784:	01699663          	bne	s3,s6,4790 <encode_uint+0x150>
    4788:	03778793          	addi	a5,a5,55
    478c:	f5dff06f          	j	46e8 <encode_uint+0xa8>
    4790:	05778793          	addi	a5,a5,87
    4794:	f55ff06f          	j	46e8 <encode_uint+0xa8>
		} else if (radix == 16) {
    4798:	01000793          	li	a5,16
    479c:	f8f49ce3          	bne	s1,a5,4734 <encode_uint+0xf4>
			conv->altform_0c = true;
    47a0:	002bc783          	lbu	a5,2(s7)
    47a4:	0107e793          	ori	a5,a5,16
    47a8:	f89ff06f          	j	4730 <encode_uint+0xf0>

000047ac <outs>:
/* Outline function to emit all characters in [sp, ep). */
static int outs(cbprintf_cb out,
		void *ctx,
		const char *sp,
		const char *ep)
{
    47ac:	fe010113          	addi	sp,sp,-32
    47b0:	00812c23          	sw	s0,24(sp)
    47b4:	00912a23          	sw	s1,20(sp)
    47b8:	01212823          	sw	s2,16(sp)
    47bc:	01312623          	sw	s3,12(sp)
    47c0:	01412423          	sw	s4,8(sp)
    47c4:	00112e23          	sw	ra,28(sp)
    47c8:	00050993          	mv	s3,a0
    47cc:	00058a13          	mv	s4,a1
    47d0:	00060493          	mv	s1,a2
    47d4:	00068913          	mv	s2,a3
	size_t count = 0;

	while ((sp < ep) || ((ep == NULL) && *sp)) {
    47d8:	00060413          	mv	s0,a2
    47dc:	40940533          	sub	a0,s0,s1
    47e0:	01246863          	bltu	s0,s2,47f0 <outs+0x44>
    47e4:	02091063          	bnez	s2,4804 <outs+0x58>
    47e8:	00044783          	lbu	a5,0(s0)
    47ec:	00078c63          	beqz	a5,4804 <outs+0x58>
		int rc = out((int)*sp++, ctx);
    47f0:	00044503          	lbu	a0,0(s0)
    47f4:	000a0593          	mv	a1,s4
    47f8:	00140413          	addi	s0,s0,1
    47fc:	000980e7          	jalr	s3

		if (rc < 0) {
    4800:	fc055ee3          	bgez	a0,47dc <outs+0x30>
		}
		++count;
	}

	return (int)count;
}
    4804:	01c12083          	lw	ra,28(sp)
    4808:	01812403          	lw	s0,24(sp)
    480c:	01412483          	lw	s1,20(sp)
    4810:	01012903          	lw	s2,16(sp)
    4814:	00c12983          	lw	s3,12(sp)
    4818:	00812a03          	lw	s4,8(sp)
    481c:	02010113          	addi	sp,sp,32
    4820:	00008067          	ret

00004824 <cbvprintf>:

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    4824:	f7010113          	addi	sp,sp,-144
    4828:	07512a23          	sw	s5,116(sp)
	switch (conv->specifier) {
    482c:	0000dab7          	lui	s5,0xd
    4830:	ce0a8793          	addi	a5,s5,-800 # cce0 <__mprec_tens+0x1a8>
{
    4834:	07612823          	sw	s6,112(sp)
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    4838:	0000db37          	lui	s6,0xd
{
    483c:	07712623          	sw	s7,108(sp)
    4840:	07812423          	sw	s8,104(sp)
	switch (conv->specifier) {
    4844:	00f12223          	sw	a5,4(sp)
	switch ((enum length_mod_enum)conv->length_mod) {
    4848:	0000dbb7          	lui	s7,0xd
		switch (conv->specifier) {
    484c:	d64b0793          	addi	a5,s6,-668 # cd64 <__mprec_tens+0x22c>

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    4850:	0000dc37          	lui	s8,0xd
{
    4854:	08812423          	sw	s0,136(sp)
    4858:	09212023          	sw	s2,128(sp)
    485c:	07312e23          	sw	s3,124(sp)
    4860:	07912223          	sw	s9,100(sp)
    4864:	05b12e23          	sw	s11,92(sp)
    4868:	08112623          	sw	ra,140(sp)
    486c:	08912223          	sw	s1,132(sp)
    4870:	07412c23          	sw	s4,120(sp)
    4874:	07a12023          	sw	s10,96(sp)
    4878:	00050913          	mv	s2,a0
    487c:	00058993          	mv	s3,a1
    4880:	00060c93          	mv	s9,a2
    4884:	00068413          	mv	s0,a3
	size_t count = 0;
    4888:	00000d93          	li	s11,0
		switch (conv->specifier) {
    488c:	00f12423          	sw	a5,8(sp)
	switch ((enum length_mod_enum)conv->length_mod) {
    4890:	dbcb8b93          	addi	s7,s7,-580 # cdbc <__mprec_tens+0x284>
			bpe = bps + 5;
    4894:	cddc0c13          	addi	s8,s8,-803 # ccdd <__mprec_tens+0x1a5>
	while (*fp != 0) {
    4898:	000cc483          	lbu	s1,0(s9)
    489c:	00049663          	bnez	s1,48a8 <cbvprintf+0x84>
			OUTC(' ');
			--width;
		}
	}

	return count;
    48a0:	000d8513          	mv	a0,s11
    48a4:	1990006f          	j	523c <cbvprintf+0xa18>
		if (*fp != '%') {
    48a8:	02500793          	li	a5,37
			OUTC(*fp++);
    48ac:	001c8a13          	addi	s4,s9,1
		if (*fp != '%') {
    48b0:	00f48e63          	beq	s1,a5,48cc <cbvprintf+0xa8>
			OUTC(*fp++);
    48b4:	00098593          	mv	a1,s3
    48b8:	00048513          	mv	a0,s1
			OUTC('%');
    48bc:	000900e7          	jalr	s2
    48c0:	16054ee3          	bltz	a0,523c <cbvprintf+0xa18>
    48c4:	001d8d93          	addi	s11,s11,1
			break;
    48c8:	5200006f          	j	4de8 <cbvprintf+0x5c4>
		} state = {
    48cc:	02000613          	li	a2,32
    48d0:	00000593          	li	a1,0
    48d4:	03010513          	addi	a0,sp,48
    48d8:	bedfe0ef          	jal	ra,34c4 <memset>
	if (*sp == '%') {
    48dc:	001cc783          	lbu	a5,1(s9)
    48e0:	10978263          	beq	a5,s1,49e4 <cbvprintf+0x1c0>
		switch (*sp) {
    48e4:	02b00693          	li	a3,43
    48e8:	02d00613          	li	a2,45
    48ec:	03000593          	li	a1,48
    48f0:	02000513          	li	a0,32
    48f4:	02300813          	li	a6,35
    48f8:	000a4703          	lbu	a4,0(s4)
    48fc:	04015783          	lhu	a5,64(sp)
    4900:	14d70c63          	beq	a4,a3,4a58 <cbvprintf+0x234>
    4904:	12e6ea63          	bltu	a3,a4,4a38 <cbvprintf+0x214>
    4908:	14a70c63          	beq	a4,a0,4a60 <cbvprintf+0x23c>
    490c:	15070e63          	beq	a4,a6,4a68 <cbvprintf+0x244>
	if (conv->flag_zero && conv->flag_dash) {
    4910:	04012703          	lw	a4,64(sp)
    4914:	04400693          	li	a3,68
    4918:	04477713          	andi	a4,a4,68
    491c:	00d71663          	bne	a4,a3,4928 <cbvprintf+0x104>
		conv->flag_zero = false;
    4920:	fbf7f793          	andi	a5,a5,-65
    4924:	04f11023          	sh	a5,64(sp)
	conv->width_present = true;
    4928:	04015783          	lhu	a5,64(sp)
    492c:	01412a23          	sw	s4,20(sp)
    4930:	0807e713          	ori	a4,a5,128
    4934:	04e11023          	sh	a4,64(sp)
	if (*sp == '*') {
    4938:	000a4683          	lbu	a3,0(s4)
    493c:	02a00713          	li	a4,42
    4940:	12e69863          	bne	a3,a4,4a70 <cbvprintf+0x24c>
		conv->width_star = true;
    4944:	1807e793          	ori	a5,a5,384
    4948:	04f11023          	sh	a5,64(sp)
		return ++sp;
    494c:	001a0793          	addi	a5,s4,1
	sp = extract_prec(conv, sp);
    4950:	00f12a23          	sw	a5,20(sp)
	conv->prec_present = (*sp == '.');
    4954:	0007c603          	lbu	a2,0(a5)
    4958:	fd260713          	addi	a4,a2,-46
    495c:	00173713          	seqz	a4,a4
    4960:	00971693          	slli	a3,a4,0x9
    4964:	04015703          	lhu	a4,64(sp)
    4968:	dff77713          	andi	a4,a4,-513
    496c:	00d76733          	or	a4,a4,a3
    4970:	04e11023          	sh	a4,64(sp)
	if (!conv->prec_present) {
    4974:	02e00693          	li	a3,46
    4978:	02d61263          	bne	a2,a3,499c <cbvprintf+0x178>
	++sp;
    497c:	00178693          	addi	a3,a5,1
    4980:	00d12a23          	sw	a3,20(sp)
	if (*sp == '*') {
    4984:	0017c603          	lbu	a2,1(a5)
    4988:	02a00693          	li	a3,42
    498c:	12d61463          	bne	a2,a3,4ab4 <cbvprintf+0x290>
		conv->prec_star = true;
    4990:	40076713          	ori	a4,a4,1024
    4994:	04e11023          	sh	a4,64(sp)
		return ++sp;
    4998:	00278793          	addi	a5,a5,2
	switch (*sp) {
    499c:	0007c603          	lbu	a2,0(a5)
    49a0:	06c00713          	li	a4,108
		if (*++sp == 'h') {
    49a4:	00178593          	addi	a1,a5,1
	switch (*sp) {
    49a8:	22e60263          	beq	a2,a4,4bcc <cbvprintf+0x3a8>
    49ac:	14c76263          	bltu	a4,a2,4af0 <cbvprintf+0x2cc>
    49b0:	06800713          	li	a4,104
    49b4:	16e60663          	beq	a2,a4,4b20 <cbvprintf+0x2fc>
    49b8:	06a00713          	li	a4,106
    49bc:	22e60e63          	beq	a2,a4,4bf8 <cbvprintf+0x3d4>
    49c0:	04c00713          	li	a4,76
    49c4:	26e60263          	beq	a2,a4,4c28 <cbvprintf+0x404>
		conv->length_mod = LENGTH_NONE;
    49c8:	04015703          	lhu	a4,64(sp)
    49cc:	ffff86b7          	lui	a3,0xffff8
    49d0:	7ff68693          	addi	a3,a3,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
    49d4:	00d77733          	and	a4,a4,a3
    49d8:	04e11023          	sh	a4,64(sp)
		break;
    49dc:	00078593          	mv	a1,a5
    49e0:	16c0006f          	j	4b4c <cbvprintf+0x328>
		conv->specifier = *sp++;
    49e4:	002c8a13          	addi	s4,s9,2
    49e8:	04f101a3          	sb	a5,67(sp)
		if (conv->width_star) {
    49ec:	04015783          	lhu	a5,64(sp)
    49f0:	1007f713          	andi	a4,a5,256
    49f4:	32070c63          	beqz	a4,4d2c <cbvprintf+0x508>
			width = va_arg(ap, int);
    49f8:	00042483          	lw	s1,0(s0)
    49fc:	00440693          	addi	a3,s0,4
			if (width < 0) {
    4a00:	0004d863          	bgez	s1,4a10 <cbvprintf+0x1ec>
				conv->flag_dash = true;
    4a04:	0047e793          	ori	a5,a5,4
    4a08:	04f11023          	sh	a5,64(sp)
				width = -width;
    4a0c:	409004b3          	neg	s1,s1
		if (conv->prec_star) {
    4a10:	04015703          	lhu	a4,64(sp)
    4a14:	40077793          	andi	a5,a4,1024
    4a18:	32078a63          	beqz	a5,4d4c <cbvprintf+0x528>
			int arg = va_arg(ap, int);
    4a1c:	0006aa83          	lw	s5,0(a3)
    4a20:	00468413          	addi	s0,a3,4
			if (arg < 0) {
    4a24:	320adc63          	bgez	s5,4d5c <cbvprintf+0x538>
				conv->prec_present = false;
    4a28:	dff77713          	andi	a4,a4,-513
    4a2c:	04e11023          	sh	a4,64(sp)
		int precision = -1;
    4a30:	fff00a93          	li	s5,-1
    4a34:	3280006f          	j	4d5c <cbvprintf+0x538>
		switch (*sp) {
    4a38:	00c70863          	beq	a4,a2,4a48 <cbvprintf+0x224>
    4a3c:	ecb71ae3          	bne	a4,a1,4910 <cbvprintf+0xec>
			conv->flag_zero = true;
    4a40:	0407e793          	ori	a5,a5,64
    4a44:	0080006f          	j	4a4c <cbvprintf+0x228>
			conv->flag_dash = true;
    4a48:	0047e793          	ori	a5,a5,4
			conv->flag_zero = true;
    4a4c:	04f11023          	sh	a5,64(sp)
			++sp;
    4a50:	001a0a13          	addi	s4,s4,1
	} while (loop);
    4a54:	ea5ff06f          	j	48f8 <cbvprintf+0xd4>
			conv->flag_plus = true;
    4a58:	0087e793          	ori	a5,a5,8
    4a5c:	ff1ff06f          	j	4a4c <cbvprintf+0x228>
			conv->flag_space = true;
    4a60:	0107e793          	ori	a5,a5,16
    4a64:	fe9ff06f          	j	4a4c <cbvprintf+0x228>
			conv->flag_hash = true;
    4a68:	0207e793          	ori	a5,a5,32
    4a6c:	fe1ff06f          	j	4a4c <cbvprintf+0x228>
	size_t width = extract_decimal(&sp);
    4a70:	01410513          	addi	a0,sp,20
    4a74:	b85ff0ef          	jal	ra,45f8 <extract_decimal>
	if (sp != wp) {
    4a78:	01412783          	lw	a5,20(sp)
    4a7c:	ed478ae3          	beq	a5,s4,4950 <cbvprintf+0x12c>
		conv->unsupported |= ((conv->width_value < 0)
    4a80:	04012703          	lw	a4,64(sp)
    4a84:	04014683          	lbu	a3,64(sp)
		conv->width_value = width;
    4a88:	04a12223          	sw	a0,68(sp)
		conv->unsupported |= ((conv->width_value < 0)
    4a8c:	00175713          	srli	a4,a4,0x1
    4a90:	00177713          	andi	a4,a4,1
				      || (width != (size_t)conv->width_value));
    4a94:	01f55513          	srli	a0,a0,0x1f
		conv->unsupported |= ((conv->width_value < 0)
    4a98:	00a76733          	or	a4,a4,a0
    4a9c:	00171713          	slli	a4,a4,0x1
    4aa0:	f8076713          	ori	a4,a4,-128
    4aa4:	07d6f693          	andi	a3,a3,125
    4aa8:	00d76733          	or	a4,a4,a3
    4aac:	04e10023          	sb	a4,64(sp)
    4ab0:	ea1ff06f          	j	4950 <cbvprintf+0x12c>
	size_t prec = extract_decimal(&sp);
    4ab4:	01410513          	addi	a0,sp,20
    4ab8:	b41ff0ef          	jal	ra,45f8 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    4abc:	04012783          	lw	a5,64(sp)
    4ac0:	04015703          	lhu	a4,64(sp)
	conv->prec_value = prec;
    4ac4:	04a12423          	sw	a0,72(sp)
	conv->unsupported |= ((conv->prec_value < 0)
    4ac8:	0017d793          	srli	a5,a5,0x1
    4acc:	0017f793          	andi	a5,a5,1
			      || (prec != (size_t)conv->prec_value));
    4ad0:	01f55513          	srli	a0,a0,0x1f
	conv->unsupported |= ((conv->prec_value < 0)
    4ad4:	00a7e7b3          	or	a5,a5,a0
    4ad8:	00179793          	slli	a5,a5,0x1
    4adc:	ffd77713          	andi	a4,a4,-3
    4ae0:	00f767b3          	or	a5,a4,a5
    4ae4:	04f11023          	sh	a5,64(sp)
	return sp;
    4ae8:	01412783          	lw	a5,20(sp)
    4aec:	eb1ff06f          	j	499c <cbvprintf+0x178>
	switch (*sp) {
    4af0:	07400693          	li	a3,116
    4af4:	04015703          	lhu	a4,64(sp)
    4af8:	10d60e63          	beq	a2,a3,4c14 <cbvprintf+0x3f0>
    4afc:	07a00693          	li	a3,122
    4b00:	ecd614e3          	bne	a2,a3,49c8 <cbvprintf+0x1a4>
		conv->length_mod = LENGTH_Z;
    4b04:	ffff87b7          	lui	a5,0xffff8
    4b08:	7ff78793          	addi	a5,a5,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
    4b0c:	00e7f7b3          	and	a5,a5,a4
    4b10:	00003737          	lui	a4,0x3
		conv->unsupported = true;
    4b14:	00e7e7b3          	or	a5,a5,a4
    4b18:	04f11023          	sh	a5,64(sp)
		break;
    4b1c:	0300006f          	j	4b4c <cbvprintf+0x328>
		if (*++sp == 'h') {
    4b20:	04015503          	lhu	a0,64(sp)
    4b24:	0017c803          	lbu	a6,1(a5)
    4b28:	ffff86b7          	lui	a3,0xffff8
    4b2c:	7ff68713          	addi	a4,a3,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
			conv->length_mod = LENGTH_HH;
    4b30:	00a77733          	and	a4,a4,a0
		if (*++sp == 'h') {
    4b34:	08c81463          	bne	a6,a2,4bbc <cbvprintf+0x398>
			conv->length_mod = LENGTH_HH;
    4b38:	000016b7          	lui	a3,0x1
    4b3c:	80068693          	addi	a3,a3,-2048 # 800 <CONFIG_ISR_STACK_SIZE>
			conv->length_mod = LENGTH_LL;
    4b40:	00d76733          	or	a4,a4,a3
    4b44:	04e11023          	sh	a4,64(sp)
			++sp;
    4b48:	00278593          	addi	a1,a5,2
	conv->specifier = *sp++;
    4b4c:	0005c703          	lbu	a4,0(a1)
	switch (conv->specifier) {
    4b50:	07800793          	li	a5,120
	conv->specifier = *sp++;
    4b54:	00158a13          	addi	s4,a1,1
    4b58:	04e101a3          	sb	a4,67(sp)
	switch (conv->specifier) {
    4b5c:	1ae7ee63          	bltu	a5,a4,4d18 <cbvprintf+0x4f4>
    4b60:	05700793          	li	a5,87
    4b64:	0ee7e063          	bltu	a5,a4,4c44 <cbvprintf+0x420>
    4b68:	04100793          	li	a5,65
    4b6c:	00f70a63          	beq	a4,a5,4b80 <cbvprintf+0x35c>
    4b70:	fbb70713          	addi	a4,a4,-69 # 2fbb <__subsf3+0x2ef>
    4b74:	0ff77713          	andi	a4,a4,255
    4b78:	00200793          	li	a5,2
    4b7c:	18e7ee63          	bltu	a5,a4,4d18 <cbvprintf+0x4f4>
		conv->specifier_cat = SPECIFIER_FP;
    4b80:	04214783          	lbu	a5,66(sp)
    4b84:	ff87f793          	andi	a5,a5,-8
    4b88:	0047e793          	ori	a5,a5,4
    4b8c:	04f10123          	sb	a5,66(sp)
			unsupported = true;
    4b90:	00100793          	li	a5,1
	conv->unsupported |= unsupported;
    4b94:	04012703          	lw	a4,64(sp)
    4b98:	00175713          	srli	a4,a4,0x1
    4b9c:	00177713          	andi	a4,a4,1
    4ba0:	00e7e7b3          	or	a5,a5,a4
    4ba4:	04015703          	lhu	a4,64(sp)
    4ba8:	00179793          	slli	a5,a5,0x1
    4bac:	ffd77713          	andi	a4,a4,-3
    4bb0:	00f767b3          	or	a5,a4,a5
    4bb4:	04f11023          	sh	a5,64(sp)
	return sp;
    4bb8:	e35ff06f          	j	49ec <cbvprintf+0x1c8>
			conv->length_mod = LENGTH_H;
    4bbc:	000017b7          	lui	a5,0x1
			conv->length_mod = LENGTH_L;
    4bc0:	00f76733          	or	a4,a4,a5
    4bc4:	04e11023          	sh	a4,64(sp)
    4bc8:	f85ff06f          	j	4b4c <cbvprintf+0x328>
		if (*++sp == 'l') {
    4bcc:	04015503          	lhu	a0,64(sp)
    4bd0:	0017c803          	lbu	a6,1(a5) # 1001 <__adddf3+0x48d>
    4bd4:	ffff86b7          	lui	a3,0xffff8
    4bd8:	7ff68713          	addi	a4,a3,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
			conv->length_mod = LENGTH_LL;
    4bdc:	00a77733          	and	a4,a4,a0
		if (*++sp == 'l') {
    4be0:	00c81663          	bne	a6,a2,4bec <cbvprintf+0x3c8>
			conv->length_mod = LENGTH_LL;
    4be4:	000026b7          	lui	a3,0x2
    4be8:	f59ff06f          	j	4b40 <cbvprintf+0x31c>
			conv->length_mod = LENGTH_L;
    4bec:	000027b7          	lui	a5,0x2
    4bf0:	80078793          	addi	a5,a5,-2048 # 1800 <__divdf3+0x4b4>
    4bf4:	fcdff06f          	j	4bc0 <cbvprintf+0x39c>
		conv->length_mod = LENGTH_J;
    4bf8:	04015783          	lhu	a5,64(sp)
    4bfc:	ffff8737          	lui	a4,0xffff8
    4c00:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
    4c04:	00e7f7b3          	and	a5,a5,a4
    4c08:	00003737          	lui	a4,0x3
		conv->length_mod = LENGTH_T;
    4c0c:	80070713          	addi	a4,a4,-2048 # 2800 <__floatunsidf+0x20>
    4c10:	f05ff06f          	j	4b14 <cbvprintf+0x2f0>
    4c14:	ffff87b7          	lui	a5,0xffff8
    4c18:	7ff78793          	addi	a5,a5,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
    4c1c:	00e7f7b3          	and	a5,a5,a4
    4c20:	00004737          	lui	a4,0x4
    4c24:	fe9ff06f          	j	4c0c <cbvprintf+0x3e8>
		conv->unsupported = true;
    4c28:	04015783          	lhu	a5,64(sp)
    4c2c:	ffff8737          	lui	a4,0xffff8
    4c30:	7fd70713          	addi	a4,a4,2045 # ffff87fd <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff87fe>
    4c34:	00e7f7b3          	and	a5,a5,a4
    4c38:	00004737          	lui	a4,0x4
    4c3c:	00270713          	addi	a4,a4,2 # 4002 <thread_accelerator+0x21a>
    4c40:	ed5ff06f          	j	4b14 <cbvprintf+0x2f0>
	switch (conv->specifier) {
    4c44:	fa870793          	addi	a5,a4,-88
    4c48:	0ff7f793          	andi	a5,a5,255
    4c4c:	02000693          	li	a3,32
    4c50:	0cf6e463          	bltu	a3,a5,4d18 <cbvprintf+0x4f4>
    4c54:	00412683          	lw	a3,4(sp)
    4c58:	00279793          	slli	a5,a5,0x2
    4c5c:	00d787b3          	add	a5,a5,a3
    4c60:	0007a783          	lw	a5,0(a5)
    4c64:	00078067          	jr	a5
		conv->specifier_cat = SPECIFIER_SINT;
    4c68:	04214783          	lbu	a5,66(sp)
    4c6c:	ff87f793          	andi	a5,a5,-8
    4c70:	0017e793          	ori	a5,a5,1
		if (conv->length_mod == LENGTH_UPPER_L) {
    4c74:	04015683          	lhu	a3,64(sp)
		conv->specifier_cat = SPECIFIER_UINT;
    4c78:	04f10123          	sb	a5,66(sp)
		if (conv->length_mod == LENGTH_UPPER_L) {
    4c7c:	000087b7          	lui	a5,0x8
    4c80:	80078793          	addi	a5,a5,-2048 # 7800 <sys_clock_tick_get+0x34>
    4c84:	00f6f7b3          	and	a5,a3,a5
    4c88:	01079793          	slli	a5,a5,0x10
    4c8c:	0107d793          	srli	a5,a5,0x10
    4c90:	00004637          	lui	a2,0x4
    4c94:	00c79663          	bne	a5,a2,4ca0 <cbvprintf+0x47c>
			conv->invalid = true;
    4c98:	0016e693          	ori	a3,a3,1
    4c9c:	04d11023          	sh	a3,64(sp)
		if (conv->specifier == 'c') {
    4ca0:	06300693          	li	a3,99
	bool unsupported = false;
    4ca4:	00000793          	li	a5,0
		if (conv->specifier == 'c') {
    4ca8:	eed716e3          	bne	a4,a3,4b94 <cbvprintf+0x370>
		if (conv->length_mod != LENGTH_NONE) {
    4cac:	04015703          	lhu	a4,64(sp)
    4cb0:	000087b7          	lui	a5,0x8
    4cb4:	80078793          	addi	a5,a5,-2048 # 7800 <sys_clock_tick_get+0x34>
    4cb8:	00e7f7b3          	and	a5,a5,a4
    4cbc:	00f037b3          	snez	a5,a5
    4cc0:	ed5ff06f          	j	4b94 <cbvprintf+0x370>
		conv->specifier_cat = SPECIFIER_UINT;
    4cc4:	04214783          	lbu	a5,66(sp)
    4cc8:	ff87f793          	andi	a5,a5,-8
    4ccc:	0027e793          	ori	a5,a5,2
    4cd0:	fa5ff06f          	j	4c74 <cbvprintf+0x450>
		conv->specifier_cat = SPECIFIER_PTR;
    4cd4:	04214783          	lbu	a5,66(sp)
		if (conv->length_mod == LENGTH_UPPER_L) {
    4cd8:	04015703          	lhu	a4,64(sp)
		conv->specifier_cat = SPECIFIER_PTR;
    4cdc:	ff87f793          	andi	a5,a5,-8
    4ce0:	0037e793          	ori	a5,a5,3
    4ce4:	04f10123          	sb	a5,66(sp)
		if (conv->length_mod == LENGTH_UPPER_L) {
    4ce8:	000087b7          	lui	a5,0x8
    4cec:	80078793          	addi	a5,a5,-2048 # 7800 <sys_clock_tick_get+0x34>
    4cf0:	00e7f7b3          	and	a5,a5,a4
    4cf4:	ffffc737          	lui	a4,0xffffc
    4cf8:	00e787b3          	add	a5,a5,a4
    4cfc:	0017b793          	seqz	a5,a5
    4d00:	e95ff06f          	j	4b94 <cbvprintf+0x370>
		conv->specifier_cat = SPECIFIER_PTR;
    4d04:	04214783          	lbu	a5,66(sp)
    4d08:	ff87f793          	andi	a5,a5,-8
    4d0c:	0037e793          	ori	a5,a5,3
    4d10:	04f10123          	sb	a5,66(sp)
    4d14:	f99ff06f          	j	4cac <cbvprintf+0x488>
		conv->invalid = true;
    4d18:	04015783          	lhu	a5,64(sp)
    4d1c:	0017e793          	ori	a5,a5,1
    4d20:	04f11023          	sh	a5,64(sp)
	bool unsupported = false;
    4d24:	00000793          	li	a5,0
		break;
    4d28:	e6dff06f          	j	4b94 <cbvprintf+0x370>
		} else if (conv->width_present) {
    4d2c:	0807f793          	andi	a5,a5,128
    4d30:	00078863          	beqz	a5,4d40 <cbvprintf+0x51c>
			width = conv->width_value;
    4d34:	04412483          	lw	s1,68(sp)
    4d38:	00040693          	mv	a3,s0
    4d3c:	cd5ff06f          	j	4a10 <cbvprintf+0x1ec>
    4d40:	00040693          	mv	a3,s0
		int width = -1;
    4d44:	fff00493          	li	s1,-1
    4d48:	cc9ff06f          	j	4a10 <cbvprintf+0x1ec>
		} else if (conv->prec_present) {
    4d4c:	20077713          	andi	a4,a4,512
    4d50:	0a070063          	beqz	a4,4df0 <cbvprintf+0x5cc>
			precision = conv->prec_value;
    4d54:	04812a83          	lw	s5,72(sp)
    4d58:	00068413          	mv	s0,a3
			= (enum specifier_cat_enum)conv->specifier_cat;
    4d5c:	04012583          	lw	a1,64(sp)
		conv->pad0_value = 0;
    4d60:	04012223          	sw	zero,68(sp)
		conv->pad0_pre_exp = 0;
    4d64:	04012423          	sw	zero,72(sp)
			= (enum specifier_cat_enum)conv->specifier_cat;
    4d68:	0105d693          	srli	a3,a1,0x10
			= (enum length_mod_enum)conv->length_mod;
    4d6c:	00b5d713          	srli	a4,a1,0xb
		enum specifier_cat_enum specifier_cat
    4d70:	0076f693          	andi	a3,a3,7
		if (specifier_cat == SPECIFIER_SINT) {
    4d74:	00100613          	li	a2,1
			= (enum length_mod_enum)conv->length_mod;
    4d78:	00f77713          	andi	a4,a4,15
		if (specifier_cat == SPECIFIER_SINT) {
    4d7c:	0cc69863          	bne	a3,a2,4e4c <cbvprintf+0x628>
			switch (length_mod) {
    4d80:	00500613          	li	a2,5
    4d84:	08c70863          	beq	a4,a2,4e14 <cbvprintf+0x5f0>
    4d88:	00e66a63          	bltu	a2,a4,4d9c <cbvprintf+0x578>
    4d8c:	00300693          	li	a3,3
    4d90:	06d70463          	beq	a4,a3,4df8 <cbvprintf+0x5d4>
    4d94:	00400693          	li	a3,4
    4d98:	06d70e63          	beq	a4,a3,4e14 <cbvprintf+0x5f0>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    4d9c:	00042683          	lw	a3,0(s0)
    4da0:	00440413          	addi	s0,s0,4
    4da4:	02d12823          	sw	a3,48(sp)
    4da8:	41f6d693          	srai	a3,a3,0x1f
    4dac:	02d12a23          	sw	a3,52(sp)
			if (length_mod == LENGTH_HH) {
    4db0:	00100693          	li	a3,1
    4db4:	06d71e63          	bne	a4,a3,4e30 <cbvprintf+0x60c>
				value->uint = (unsigned char)value->uint;
    4db8:	03014683          	lbu	a3,48(sp)
				value->uint = (unsigned short)value->uint;
    4dbc:	02d12823          	sw	a3,48(sp)
    4dc0:	02012a23          	sw	zero,52(sp)
		if (conv->invalid || conv->unsupported) {
    4dc4:	0035f593          	andi	a1,a1,3
    4dc8:	14058863          	beqz	a1,4f18 <cbvprintf+0x6f4>
			OUTS(sp, fp);
    4dcc:	000a0693          	mv	a3,s4
    4dd0:	000c8613          	mv	a2,s9
    4dd4:	00098593          	mv	a1,s3
    4dd8:	00090513          	mv	a0,s2
    4ddc:	9d1ff0ef          	jal	ra,47ac <outs>
    4de0:	44054e63          	bltz	a0,523c <cbvprintf+0xa18>
    4de4:	00ad8db3          	add	s11,s11,a0
			OUTS(bps, bpe);
    4de8:	000a0c93          	mv	s9,s4
    4dec:	aadff06f          	j	4898 <cbvprintf+0x74>
    4df0:	00068413          	mv	s0,a3
    4df4:	c3dff06f          	j	4a30 <cbvprintf+0x20c>
					value->sint = va_arg(ap, long);
    4df8:	00042683          	lw	a3,0(s0)
				value->sint = va_arg(ap, int);
    4dfc:	00440513          	addi	a0,s0,4
					value->sint = va_arg(ap, long);
    4e00:	02d12823          	sw	a3,48(sp)
    4e04:	41f6d693          	srai	a3,a3,0x1f
				value->sint =
    4e08:	02d12a23          	sw	a3,52(sp)
					(uint_value_type)va_arg(ap, size_t);
    4e0c:	00050413          	mv	s0,a0
    4e10:	fb5ff06f          	j	4dc4 <cbvprintf+0x5a0>
					(sint_value_type)va_arg(ap, long long);
    4e14:	00740413          	addi	s0,s0,7
    4e18:	ff847413          	andi	s0,s0,-8
				value->sint =
    4e1c:	00042603          	lw	a2,0(s0)
    4e20:	00442683          	lw	a3,4(s0)
					(sint_value_type)va_arg(ap, long long);
    4e24:	00840513          	addi	a0,s0,8
				value->sint =
    4e28:	02c12823          	sw	a2,48(sp)
    4e2c:	fddff06f          	j	4e08 <cbvprintf+0x5e4>
			} else if (length_mod == LENGTH_H) {
    4e30:	00200693          	li	a3,2
    4e34:	f8d718e3          	bne	a4,a3,4dc4 <cbvprintf+0x5a0>
				value->sint = (short)value->sint;
    4e38:	03011683          	lh	a3,48(sp)
    4e3c:	02d12823          	sw	a3,48(sp)
    4e40:	41f6d693          	srai	a3,a3,0x1f
				value->dbl = va_arg(ap, double);
    4e44:	02d12a23          	sw	a3,52(sp)
    4e48:	f7dff06f          	j	4dc4 <cbvprintf+0x5a0>
		} else if (specifier_cat == SPECIFIER_UINT) {
    4e4c:	00200513          	li	a0,2
    4e50:	04a69e63          	bne	a3,a0,4eac <cbvprintf+0x688>
			switch (length_mod) {
    4e54:	00500693          	li	a3,5
    4e58:	fad70ee3          	beq	a4,a3,4e14 <cbvprintf+0x5f0>
    4e5c:	00e6ea63          	bltu	a3,a4,4e70 <cbvprintf+0x64c>
    4e60:	00300693          	li	a3,3
    4e64:	02d70a63          	beq	a4,a3,4e98 <cbvprintf+0x674>
    4e68:	00400693          	li	a3,4
    4e6c:	fad704e3          	beq	a4,a3,4e14 <cbvprintf+0x5f0>
					(uint_value_type)va_arg(ap, size_t);
    4e70:	00042683          	lw	a3,0(s0)
    4e74:	02012a23          	sw	zero,52(sp)
    4e78:	00440413          	addi	s0,s0,4
    4e7c:	02d12823          	sw	a3,48(sp)
			if (length_mod == LENGTH_HH) {
    4e80:	00100693          	li	a3,1
    4e84:	f2d70ae3          	beq	a4,a3,4db8 <cbvprintf+0x594>
			} else if (length_mod == LENGTH_H) {
    4e88:	00200693          	li	a3,2
    4e8c:	f2d71ce3          	bne	a4,a3,4dc4 <cbvprintf+0x5a0>
				value->uint = (unsigned short)value->uint;
    4e90:	03015683          	lhu	a3,48(sp)
    4e94:	f29ff06f          	j	4dbc <cbvprintf+0x598>
					value->uint = va_arg(ap, unsigned long);
    4e98:	00042683          	lw	a3,0(s0)
    4e9c:	00440513          	addi	a0,s0,4
    4ea0:	02012a23          	sw	zero,52(sp)
    4ea4:	02d12823          	sw	a3,48(sp)
				break;
    4ea8:	f65ff06f          	j	4e0c <cbvprintf+0x5e8>
		} else if (specifier_cat == SPECIFIER_FP) {
    4eac:	00400613          	li	a2,4
    4eb0:	04c69a63          	bne	a3,a2,4f04 <cbvprintf+0x6e0>
			if (length_mod == LENGTH_UPPER_L) {
    4eb4:	00800693          	li	a3,8
    4eb8:	02d71863          	bne	a4,a3,4ee8 <cbvprintf+0x6c4>
				value->ldbl = va_arg(ap, long double);
    4ebc:	00042683          	lw	a3,0(s0)
    4ec0:	0006a803          	lw	a6,0(a3) # 2000 <CONFIG_SRAM_SIZE>
    4ec4:	0046a503          	lw	a0,4(a3)
    4ec8:	0086a603          	lw	a2,8(a3)
    4ecc:	00c6a683          	lw	a3,12(a3)
    4ed0:	03012823          	sw	a6,48(sp)
    4ed4:	02a12a23          	sw	a0,52(sp)
    4ed8:	02c12c23          	sw	a2,56(sp)
    4edc:	02d12e23          	sw	a3,60(sp)
			value->ptr = va_arg(ap, void *);
    4ee0:	00440413          	addi	s0,s0,4
    4ee4:	ee1ff06f          	j	4dc4 <cbvprintf+0x5a0>
				value->dbl = va_arg(ap, double);
    4ee8:	00740693          	addi	a3,s0,7
    4eec:	ff86f693          	andi	a3,a3,-8
    4ef0:	0006a603          	lw	a2,0(a3)
    4ef4:	00868413          	addi	s0,a3,8
    4ef8:	0046a683          	lw	a3,4(a3)
    4efc:	02c12823          	sw	a2,48(sp)
    4f00:	f45ff06f          	j	4e44 <cbvprintf+0x620>
		} else if (specifier_cat == SPECIFIER_PTR) {
    4f04:	00300613          	li	a2,3
    4f08:	eac69ee3          	bne	a3,a2,4dc4 <cbvprintf+0x5a0>
			value->ptr = va_arg(ap, void *);
    4f0c:	00042683          	lw	a3,0(s0)
    4f10:	02d12823          	sw	a3,48(sp)
    4f14:	fcdff06f          	j	4ee0 <cbvprintf+0x6bc>
		switch (conv->specifier) {
    4f18:	04314683          	lbu	a3,67(sp)
    4f1c:	07800613          	li	a2,120
    4f20:	ecd664e3          	bltu	a2,a3,4de8 <cbvprintf+0x5c4>
    4f24:	06200613          	li	a2,98
    4f28:	00d66e63          	bltu	a2,a3,4f44 <cbvprintf+0x720>
    4f2c:	02500713          	li	a4,37
    4f30:	02e68c63          	beq	a3,a4,4f68 <cbvprintf+0x744>
    4f34:	05800713          	li	a4,88
    4f38:	eae698e3          	bne	a3,a4,4de8 <cbvprintf+0x5c4>
    4f3c:	00000b13          	li	s6,0
    4f40:	1fc0006f          	j	513c <cbvprintf+0x918>
    4f44:	f9d68693          	addi	a3,a3,-99
    4f48:	0ff6f693          	andi	a3,a3,255
    4f4c:	01500613          	li	a2,21
    4f50:	e8d66ce3          	bltu	a2,a3,4de8 <cbvprintf+0x5c4>
    4f54:	00812783          	lw	a5,8(sp)
    4f58:	00269693          	slli	a3,a3,0x2
    4f5c:	00f686b3          	add	a3,a3,a5
    4f60:	0006a683          	lw	a3,0(a3)
    4f64:	00068067          	jr	a3
			OUTC('%');
    4f68:	00098593          	mv	a1,s3
    4f6c:	02500513          	li	a0,37
    4f70:	94dff06f          	j	48bc <cbvprintf+0x98>
			bps = (const char *)value->ptr;
    4f74:	03012c83          	lw	s9,48(sp)
			if (precision >= 0) {
    4f78:	160ac063          	bltz	s5,50d8 <cbvprintf+0x8b4>
				len = strnlen(bps, precision);
    4f7c:	000a8593          	mv	a1,s5
    4f80:	000c8513          	mv	a0,s9
    4f84:	038040ef          	jal	ra,8fbc <strnlen>
			bpe = bps + len;
    4f88:	00ac8d33          	add	s10,s9,a0
		char sign = 0;
    4f8c:	00000b13          	li	s6,0
		if (bps == NULL) {
    4f90:	e40c8ce3          	beqz	s9,4de8 <cbvprintf+0x5c4>
		size_t nj_len = (bpe - bps);
    4f94:	419d07b3          	sub	a5,s10,s9
		if (sign != 0) {
    4f98:	000b0463          	beqz	s6,4fa0 <cbvprintf+0x77c>
			nj_len += 1U;
    4f9c:	00178793          	addi	a5,a5,1
		if (conv->altform_0c) {
    4fa0:	04214703          	lbu	a4,66(sp)
    4fa4:	01077693          	andi	a3,a4,16
    4fa8:	26068663          	beqz	a3,5214 <cbvprintf+0x9f0>
			nj_len += 2U;
    4fac:	00278793          	addi	a5,a5,2
		nj_len += conv->pad0_value;
    4fb0:	04412683          	lw	a3,68(sp)
		if (conv->pad_fp) {
    4fb4:	04077713          	andi	a4,a4,64
		nj_len += conv->pad0_value;
    4fb8:	00d787b3          	add	a5,a5,a3
		if (conv->pad_fp) {
    4fbc:	00070663          	beqz	a4,4fc8 <cbvprintf+0x7a4>
			nj_len += conv->pad0_pre_exp;
    4fc0:	04812703          	lw	a4,72(sp)
    4fc4:	00e787b3          	add	a5,a5,a4
		if (width > 0) {
    4fc8:	04905c63          	blez	s1,5020 <cbvprintf+0x7fc>
			width -= (int)nj_len;
    4fcc:	40f484b3          	sub	s1,s1,a5
			if (!conv->flag_dash) {
    4fd0:	04012783          	lw	a5,64(sp)
    4fd4:	0027d793          	srli	a5,a5,0x2
    4fd8:	0017f793          	andi	a5,a5,1
    4fdc:	04079263          	bnez	a5,5020 <cbvprintf+0x7fc>
				if (conv->flag_zero) {
    4fe0:	04015783          	lhu	a5,64(sp)
    4fe4:	0407f793          	andi	a5,a5,64
    4fe8:	28078863          	beqz	a5,5278 <cbvprintf+0xa54>
					if (sign != 0) {
    4fec:	280b0a63          	beqz	s6,5280 <cbvprintf+0xa5c>
						OUTC(sign);
    4ff0:	00098593          	mv	a1,s3
    4ff4:	000b0513          	mv	a0,s6
    4ff8:	000900e7          	jalr	s2
    4ffc:	24054063          	bltz	a0,523c <cbvprintf+0xa18>
    5000:	001d8d93          	addi	s11,s11,1
					pad = '0';
    5004:	03000793          	li	a5,48
						sign = 0;
    5008:	00000b13          	li	s6,0
    500c:	01b48ab3          	add	s5,s1,s11
    5010:	00048713          	mv	a4,s1
    5014:	409a8db3          	sub	s11,s5,s1
				while (width-- > 0) {
    5018:	fff48493          	addi	s1,s1,-1
    501c:	20e04463          	bgtz	a4,5224 <cbvprintf+0xa00>
		if (sign != 0) {
    5020:	000b0c63          	beqz	s6,5038 <cbvprintf+0x814>
			OUTC(sign);
    5024:	00098593          	mv	a1,s3
    5028:	000b0513          	mv	a0,s6
    502c:	000900e7          	jalr	s2
    5030:	20054663          	bltz	a0,523c <cbvprintf+0xa18>
    5034:	001d8d93          	addi	s11,s11,1
			if (conv->altform_0c | conv->altform_0) {
    5038:	04012783          	lw	a5,64(sp)
    503c:	0147d713          	srli	a4,a5,0x14
    5040:	00177713          	andi	a4,a4,1
    5044:	00071863          	bnez	a4,5054 <cbvprintf+0x830>
    5048:	0137d793          	srli	a5,a5,0x13
    504c:	0017f793          	andi	a5,a5,1
    5050:	00078c63          	beqz	a5,5068 <cbvprintf+0x844>
				OUTC('0');
    5054:	00098593          	mv	a1,s3
    5058:	03000513          	li	a0,48
    505c:	000900e7          	jalr	s2
    5060:	1c054e63          	bltz	a0,523c <cbvprintf+0xa18>
    5064:	001d8d93          	addi	s11,s11,1
			if (conv->altform_0c) {
    5068:	04214783          	lbu	a5,66(sp)
    506c:	0107f793          	andi	a5,a5,16
    5070:	00078c63          	beqz	a5,5088 <cbvprintf+0x864>
				OUTC(conv->specifier);
    5074:	04314503          	lbu	a0,67(sp)
    5078:	00098593          	mv	a1,s3
    507c:	000900e7          	jalr	s2
    5080:	1a054e63          	bltz	a0,523c <cbvprintf+0xa18>
    5084:	001d8d93          	addi	s11,s11,1
			while (pad_len-- > 0) {
    5088:	04412783          	lw	a5,68(sp)
    508c:	01b78ab3          	add	s5,a5,s11
    5090:	41ba8733          	sub	a4,s5,s11
    5094:	1ee04a63          	bgtz	a4,5288 <cbvprintf+0xa64>
			OUTS(bps, bpe);
    5098:	000d0693          	mv	a3,s10
    509c:	000c8613          	mv	a2,s9
    50a0:	00098593          	mv	a1,s3
    50a4:	00090513          	mv	a0,s2
    50a8:	f04ff0ef          	jal	ra,47ac <outs>
    50ac:	18054863          	bltz	a0,523c <cbvprintf+0xa18>
    50b0:	01b50db3          	add	s11,a0,s11
		while (width > 0) {
    50b4:	01b484b3          	add	s1,s1,s11
    50b8:	41b487b3          	sub	a5,s1,s11
    50bc:	d2f056e3          	blez	a5,4de8 <cbvprintf+0x5c4>
			OUTC(' ');
    50c0:	00098593          	mv	a1,s3
    50c4:	02000513          	li	a0,32
    50c8:	000900e7          	jalr	s2
    50cc:	16054863          	bltz	a0,523c <cbvprintf+0xa18>
    50d0:	001d8d93          	addi	s11,s11,1
			--width;
    50d4:	fe5ff06f          	j	50b8 <cbvprintf+0x894>
				len = strlen(bps);
    50d8:	000c8513          	mv	a0,s9
    50dc:	6c5030ef          	jal	ra,8fa0 <strlen>
    50e0:	ea9ff06f          	j	4f88 <cbvprintf+0x764>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    50e4:	03012783          	lw	a5,48(sp)
			bpe = buf + 1;
    50e8:	01910d13          	addi	s10,sp,25
			bps = buf;
    50ec:	01810c93          	addi	s9,sp,24
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    50f0:	00f10c23          	sb	a5,24(sp)
			break;
    50f4:	00000b13          	li	s6,0
    50f8:	e9dff06f          	j	4f94 <cbvprintf+0x770>
			if (conv->flag_plus) {
    50fc:	04015703          	lhu	a4,64(sp)
				sign = '+';
    5100:	02b00b13          	li	s6,43
			if (conv->flag_plus) {
    5104:	00877693          	andi	a3,a4,8
    5108:	00069663          	bnez	a3,5114 <cbvprintf+0x8f0>
				sign = ' ';
    510c:	00171b13          	slli	s6,a4,0x1
    5110:	020b7b13          	andi	s6,s6,32
			sint = value->sint;
    5114:	03412703          	lw	a4,52(sp)
    5118:	03012683          	lw	a3,48(sp)
			if (sint < 0) {
    511c:	02075063          	bgez	a4,513c <cbvprintf+0x918>
				value->uint = (uint_value_type)-sint;
    5120:	40d00633          	neg	a2,a3
    5124:	40e00733          	neg	a4,a4
    5128:	00d036b3          	snez	a3,a3
    512c:	40d70733          	sub	a4,a4,a3
    5130:	02c12823          	sw	a2,48(sp)
    5134:	02e12a23          	sw	a4,52(sp)
				sign = '-';
    5138:	02d00b13          	li	s6,45
			bps = encode_uint(value->uint, conv, buf, bpe);
    513c:	03012503          	lw	a0,48(sp)
    5140:	03412583          	lw	a1,52(sp)
    5144:	02e10713          	addi	a4,sp,46
    5148:	01810693          	addi	a3,sp,24
    514c:	04010613          	addi	a2,sp,64
    5150:	cf0ff0ef          	jal	ra,4640 <encode_uint>
    5154:	00050c93          	mv	s9,a0
			if (precision >= 0) {
    5158:	02e10d13          	addi	s10,sp,46
    515c:	e20acae3          	bltz	s5,4f90 <cbvprintf+0x76c>
				conv->flag_zero = false;
    5160:	04015683          	lhu	a3,64(sp)
				size_t len = bpe - bps;
    5164:	419d0733          	sub	a4,s10,s9
				conv->flag_zero = false;
    5168:	fbf6f693          	andi	a3,a3,-65
    516c:	04d11023          	sh	a3,64(sp)
				if (len < (size_t)precision) {
    5170:	e35770e3          	bgeu	a4,s5,4f90 <cbvprintf+0x76c>
					conv->pad0_value = precision - (int)len;
    5174:	40ea87b3          	sub	a5,s5,a4
    5178:	04f12223          	sw	a5,68(sp)
    517c:	e15ff06f          	j	4f90 <cbvprintf+0x76c>
			if (value->ptr != NULL) {
    5180:	03012503          	lw	a0,48(sp)
    5184:	08050063          	beqz	a0,5204 <cbvprintf+0x9e0>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    5188:	02e10713          	addi	a4,sp,46
    518c:	01810693          	addi	a3,sp,24
    5190:	04010613          	addi	a2,sp,64
    5194:	00000593          	li	a1,0
    5198:	ca8ff0ef          	jal	ra,4640 <encode_uint>
				conv->altform_0c = true;
    519c:	04215703          	lhu	a4,66(sp)
    51a0:	000086b7          	lui	a3,0x8
    51a4:	81068693          	addi	a3,a3,-2032 # 7810 <sys_clock_tick_get+0x44>
    51a8:	0ef77713          	andi	a4,a4,239
    51ac:	00d76733          	or	a4,a4,a3
				bps = encode_uint((uintptr_t)value->ptr, conv,
    51b0:	00050c93          	mv	s9,a0
				conv->altform_0c = true;
    51b4:	04e11123          	sh	a4,66(sp)
		char sign = 0;
    51b8:	00000b13          	li	s6,0
				goto prec_int_pad0;
    51bc:	f9dff06f          	j	5158 <cbvprintf+0x934>
	switch ((enum length_mod_enum)conv->length_mod) {
    51c0:	00700693          	li	a3,7
				store_count(conv, value->ptr, count);
    51c4:	03012783          	lw	a5,48(sp)
	switch ((enum length_mod_enum)conv->length_mod) {
    51c8:	c2e6e0e3          	bltu	a3,a4,4de8 <cbvprintf+0x5c4>
    51cc:	00271713          	slli	a4,a4,0x2
    51d0:	01770733          	add	a4,a4,s7
    51d4:	00072703          	lw	a4,0(a4) # ffffc000 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffffc001>
    51d8:	00070067          	jr	a4
		*(signed char *)dp = (signed char)count;
    51dc:	01b78023          	sb	s11,0(a5)
		break;
    51e0:	c09ff06f          	j	4de8 <cbvprintf+0x5c4>
		*(short *)dp = (short)count;
    51e4:	01b79023          	sh	s11,0(a5)
		break;
    51e8:	c01ff06f          	j	4de8 <cbvprintf+0x5c4>
		*(intmax_t *)dp = (intmax_t)count;
    51ec:	41fdd713          	srai	a4,s11,0x1f
    51f0:	01b7a023          	sw	s11,0(a5)
    51f4:	00e7a223          	sw	a4,4(a5)
		break;
    51f8:	bf1ff06f          	j	4de8 <cbvprintf+0x5c4>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    51fc:	01b7a023          	sw	s11,0(a5)
		break;
    5200:	be9ff06f          	j	4de8 <cbvprintf+0x5c4>
			bps = "(nil)";
    5204:	0000dcb7          	lui	s9,0xd
			bpe = bps + 5;
    5208:	000c0d13          	mv	s10,s8
			bps = "(nil)";
    520c:	cd8c8c93          	addi	s9,s9,-808 # ccd8 <__mprec_tens+0x1a0>
    5210:	ee5ff06f          	j	50f4 <cbvprintf+0x8d0>
		} else if (conv->altform_0) {
    5214:	00877693          	andi	a3,a4,8
    5218:	d8068ce3          	beqz	a3,4fb0 <cbvprintf+0x78c>
			nj_len += 1U;
    521c:	00178793          	addi	a5,a5,1
    5220:	d91ff06f          	j	4fb0 <cbvprintf+0x78c>
					OUTC(pad);
    5224:	00078513          	mv	a0,a5
    5228:	00098593          	mv	a1,s3
    522c:	00f12623          	sw	a5,12(sp)
    5230:	000900e7          	jalr	s2
    5234:	00c12783          	lw	a5,12(sp)
    5238:	dc055ce3          	bgez	a0,5010 <cbvprintf+0x7ec>
#undef OUTS
#undef OUTC
}
    523c:	08c12083          	lw	ra,140(sp)
    5240:	08812403          	lw	s0,136(sp)
    5244:	08412483          	lw	s1,132(sp)
    5248:	08012903          	lw	s2,128(sp)
    524c:	07c12983          	lw	s3,124(sp)
    5250:	07812a03          	lw	s4,120(sp)
    5254:	07412a83          	lw	s5,116(sp)
    5258:	07012b03          	lw	s6,112(sp)
    525c:	06c12b83          	lw	s7,108(sp)
    5260:	06812c03          	lw	s8,104(sp)
    5264:	06412c83          	lw	s9,100(sp)
    5268:	06012d03          	lw	s10,96(sp)
    526c:	05c12d83          	lw	s11,92(sp)
    5270:	09010113          	addi	sp,sp,144
    5274:	00008067          	ret
				char pad = ' ';
    5278:	02000793          	li	a5,32
    527c:	d91ff06f          	j	500c <cbvprintf+0x7e8>
					pad = '0';
    5280:	03000793          	li	a5,48
    5284:	d89ff06f          	j	500c <cbvprintf+0x7e8>
				OUTC('0');
    5288:	00098593          	mv	a1,s3
    528c:	03000513          	li	a0,48
    5290:	000900e7          	jalr	s2
    5294:	fa0544e3          	bltz	a0,523c <cbvprintf+0xa18>
    5298:	001d8d93          	addi	s11,s11,1
    529c:	df5ff06f          	j	5090 <cbvprintf+0x86c>

000052a0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    52a0:	00008067          	ret

000052a4 <soc_interrupt_init>:
static ALWAYS_INLINE unsigned int arch_irq_lock(void)
{
	unsigned int key;
	ulong_t mstatus;

	__asm__ volatile ("csrrc %0, mstatus, %1"
    52a4:	00800793          	li	a5,8
    52a8:	3007b7f3          	csrrc	a5,mstatus,a5
void soc_interrupt_init(void)
{
	/* ensure that all interrupts are disabled */
	(void)irq_lock();

	__asm__ volatile ("csrwi mie, 0\n"
    52ac:	30405073          	csrwi	mie,0
    52b0:	34405073          	csrwi	mip,0
			  "csrwi mip, 0\n");
}
    52b4:	00008067          	ret

000052b8 <fix_baud_rate>:
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
    52b8:	800017b7          	lui	a5,0x80001
    52bc:	03c7a783          	lw	a5,60(a5) # 8000103c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000103d>

	/*
	 * calculate baud rate divisor. a variant of
	 * (uint32_t)(dev_cfg->sys_clk_freq / (16.0 * baud_rate) + 0.5)
	 */
	divisor = ((sys_clk_freq + (baud_rate << 3))
    52c0:	000e1737          	lui	a4,0xe1
	return *(volatile uint8_t *)addr;
    52c4:	800026b7          	lui	a3,0x80002
    52c8:	00e787b3          	add	a5,a5,a4
		   / baud_rate) >> 4;
    52cc:	0001c737          	lui	a4,0x1c
    52d0:	20070713          	addi	a4,a4,512 # 1c200 <stacks+0xcc60>
    52d4:	02e7d7b3          	divu	a5,a5,a4
    52d8:	00c6c703          	lbu	a4,12(a3) # 8000200c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000200d>
	sys_write8((divisor >> 8) & 0xff, REG_BRDH);

	sys_write8(lcr_cache, REG_LCR);

	return 0;
}
    52dc:	00000513          	li	a0,0
    52e0:	0ff77613          	andi	a2,a4,255
	sys_write8(lcr_cache | LCR_DLAB, REG_LCR);
    52e4:	f8076713          	ori	a4,a4,-128
    52e8:	0ff77713          	andi	a4,a4,255
	*(volatile uint8_t *)addr = data;
    52ec:	00e68623          	sb	a4,12(a3)
	divisor = ((sys_clk_freq + (baud_rate << 3))
    52f0:	0047d713          	srli	a4,a5,0x4
	sys_write8( divisor       & 0xff, REG_BRDL);
    52f4:	0ff77713          	andi	a4,a4,255
	sys_write8((divisor >> 8) & 0xff, REG_BRDH);
    52f8:	00c7d793          	srli	a5,a5,0xc
    52fc:	00e68023          	sb	a4,0(a3)
    5300:	0ff7f793          	andi	a5,a5,255
    5304:	00f68223          	sb	a5,4(a3)
    5308:	00c68623          	sb	a2,12(a3)
}
    530c:	00008067          	ret

00005310 <arch_cpu_idle>:
 */
static ALWAYS_INLINE void arch_irq_unlock(unsigned int key)
{
	ulong_t mstatus;

	__asm__ volatile ("csrrs %0, mstatus, %1"
    5310:	00800793          	li	a5,8
    5314:	3007a7f3          	csrrs	a5,mstatus,a5
 */

void __weak arch_cpu_idle(void)
{
	irq_unlock(MSTATUS_IEN);
}
    5318:	00008067          	ret

0000531c <z_riscv_fatal_error>:
 #define NO_REG "                "
#endif

FUNC_NORETURN void z_riscv_fatal_error(unsigned int reason,
				       const z_arch_esf_t *esf)
{
    531c:	ff010113          	addi	sp,sp,-16
    5320:	00112623          	sw	ra,12(sp)
		LOG_ERR("   mepc: " PR_REG, esf->mepc);
		LOG_ERR("mstatus: " PR_REG, esf->mstatus);
		LOG_ERR("");
	}

	z_fatal_error(reason, esf);
    5324:	415000ef          	jal	ra,5f38 <z_fatal_error>

00005328 <_Fault>:
		return "unknown";
	}
}

void _Fault(z_arch_esf_t *esf)
{
    5328:	ff010113          	addi	sp,sp,-16
    532c:	00112623          	sw	ra,12(sp)
    5330:	00050593          	mv	a1,a0
		}
	}
#endif /* CONFIG_USERSPACE */
	ulong_t mcause;

	__asm__ volatile("csrr %0, mcause" : "=r" (mcause));
    5334:	342027f3          	csrr	a5,mcause

#ifndef CONFIG_SOC_OPENISA_RV32M1_RISCV32
	ulong_t mtval;
	__asm__ volatile("csrr %0, mtval" : "=r" (mtval));
    5338:	343027f3          	csrr	a5,mtval
	z_fatal_error(reason, esf);
    533c:	00000513          	li	a0,0
    5340:	3f9000ef          	jal	ra,5f38 <z_fatal_error>

00005344 <z_irq_spurious>:
#include <kernel_internal.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_irq_spurious(const void *unused)
{
    5344:	ff010113          	addi	sp,sp,-16
    5348:	00112623          	sw	ra,12(sp)
	ulong_t mcause;

	ARG_UNUSED(unused);

	__asm__ volatile("csrr %0, mcause" : "=r" (mcause));
    534c:	342027f3          	csrr	a5,mcause
	if (mcause == RISCV_MACHINE_EXT_IRQ) {
		LOG_ERR("PLIC interrupt line causing the IRQ: %d",
			riscv_plic_get_irq());
	}
#endif
	z_riscv_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    5350:	00000593          	li	a1,0
    5354:	00100513          	li	a0,1
    5358:	fc5ff0ef          	jal	ra,531c <z_riscv_fatal_error>

0000535c <_PrepC>:
 *
 * @return N/A
 */

void _PrepC(void)
{
    535c:	ff010113          	addi	sp,sp,-16
    5360:	00112623          	sw	ra,12(sp)
	z_bss_zero();
    5364:	509000ef          	jal	ra,606c <z_bss_zero>
#ifdef CONFIG_XIP
	z_data_copy();
#endif
#if defined(CONFIG_RISCV_SOC_INTERRUPT_INIT)
	soc_interrupt_init();
    5368:	f3dff0ef          	jal	ra,52a4 <soc_interrupt_init>
#endif
#ifdef CONFIG_PMP_STACK_GUARD
	z_riscv_configure_interrupt_stack_guard();
#endif
	z_cstart();
    536c:	521000ef          	jal	ra,608c <z_cstart>

00005370 <__initialize>:
SECTION_FUNC(TEXT, __initialize)
	/*
	 * This will boot master core, just halt other cores.
	 * Note: need to be updated for complete SMP support
	 */
	csrr a0, mhartid
    5370:	f1402573          	csrr	a0,mhartid
	beqz a0, boot_master_core
    5374:	00050663          	beqz	a0,5380 <boot_master_core>

00005378 <loop_slave_core>:

loop_slave_core:
	wfi
    5378:	10500073          	wfi
	j loop_slave_core
    537c:	ffdff06f          	j	5378 <loop_slave_core>

00005380 <boot_master_core>:

	/*
	 * Initially, setup stack pointer to
	 * z_interrupt_stacks + CONFIG_ISR_STACK_SIZE
	 */
	la sp, z_interrupt_stacks
    5380:	0001b117          	auipc	sp,0x1b
    5384:	82010113          	addi	sp,sp,-2016 # 1fba0 <z_interrupt_stacks>
	li t0, CONFIG_ISR_STACK_SIZE
    5388:	000012b7          	lui	t0,0x1
    538c:	80028293          	addi	t0,t0,-2048 # 800 <CONFIG_ISR_STACK_SIZE>
	add sp, sp, t0
    5390:	00510133          	add	sp,sp,t0

	csrw mscratch, sp
    5394:	34011073          	csrw	mscratch,sp

	/*
	 * Jump into C domain. _PrepC zeroes BSS, copies rw data into RAM,
	 * and then enters kernel z_cstart
	 */
	call _PrepC
    5398:	fc5ff0ef          	jal	ra,535c <_PrepC>

0000539c <z_thread_entry_wrapper>:
	 * in registers a0, a1, a2 and a3. These registers are used as arguments
	 * to function z_thread_entry. Hence, just call z_thread_entry with
	 * return address set to 0 to indicate a non-returning function call.
	 */

	jal x0, z_thread_entry
    539c:	a38ff06f          	j	45d4 <z_thread_entry>

000053a0 <arch_new_thread>:
#ifdef CONFIG_RISCV_SOC_CONTEXT_SAVE
	const struct soc_esf soc_esf_init = {SOC_ESF_INIT};
#endif

	/* Initial stack frame for thread */
	stack_init = (struct __esf *)Z_STACK_PTR_ALIGN(
    53a0:	fb460613          	addi	a2,a2,-76 # 3fb4 <thread_accelerator+0x1cc>
 * @param ptr Proposed stack pointer address
 * @return Properly aligned stack pointer address
 */
static inline char *z_stack_ptr_align(char *ptr)
{
	return (char *)ROUND_DOWN(ptr, ARCH_STACK_PTR_ALIGN);
    53a4:	ff067613          	andi	a2,a2,-16
				);

	/* Setup the initial stack frame */
	stack_init->a0 = (ulong_t)entry;
	stack_init->a1 = (ulong_t)p1;
	stack_init->a2 = (ulong_t)p2;
    53a8:	02f62623          	sw	a5,44(a2)
	 *    restored following the MSTATUS value set within the thread stack;
	 * 2) the core will jump to z_thread_entry_wrapper, as the program
	 *    counter will be restored following the MEPC value set within the
	 *    thread stack.
	 */
	stack_init->mstatus = MSTATUS_DEF_RESTORE;
    53ac:	000027b7          	lui	a5,0x2
    53b0:	88078793          	addi	a5,a5,-1920 # 1880 <__divdf3+0x534>
    53b4:	04f62423          	sw	a5,72(a2)
#elif defined(CONFIG_FPU)
	/* Unshared FP mode: enable FPU of each thread. */
	stack_init->mstatus |= MSTATUS_FS_INIT;
#endif

	stack_init->mepc = (ulong_t)z_thread_entry_wrapper;
    53b8:	000057b7          	lui	a5,0x5
    53bc:	39c78793          	addi	a5,a5,924 # 539c <z_thread_entry_wrapper>
	stack_init->a0 = (ulong_t)entry;
    53c0:	02d62223          	sw	a3,36(a2)
	stack_init->a1 = (ulong_t)p1;
    53c4:	02e62423          	sw	a4,40(a2)
	stack_init->a3 = (ulong_t)p3;
    53c8:	03062823          	sw	a6,48(a2)
	stack_init->mepc = (ulong_t)z_thread_entry_wrapper;
    53cc:	04f62223          	sw	a5,68(a2)

#ifdef CONFIG_RISCV_SOC_CONTEXT_SAVE
	stack_init->soc_context = soc_esf_init;
#endif

	thread->callee_saved.sp = (ulong_t)stack_init;
    53d0:	02c52823          	sw	a2,48(a0)
}
    53d4:	00008067          	ret

000053d8 <malloc_prepare>:
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
    53d8:	00000513          	li	a0,0
    53dc:	00008067          	ret

000053e0 <_stdout_hook_default>:
static int _stdout_hook_default(int c)
{
	(void)(c);  /* Prevent warning about unused argument */

	return EOF;
}
    53e0:	fff00513          	li	a0,-1
    53e4:	00008067          	ret

000053e8 <_stdin_hook_default>:
}

static unsigned char _stdin_hook_default(void)
{
	return 0;
}
    53e8:	00000513          	li	a0,0
    53ec:	00008067          	ret

000053f0 <__stdout_hook_install>:
	_stdout_hook = hook;
    53f0:	002137b7          	lui	a5,0x213
    53f4:	78a7a023          	sw	a0,1920(a5) # 213780 <_stdout_hook>
}
    53f8:	00008067          	ret

000053fc <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    53fc:	fe010113          	addi	sp,sp,-32
    5400:	00812c23          	sw	s0,24(sp)
    5404:	00912a23          	sw	s1,20(sp)
    5408:	01212823          	sw	s2,16(sp)
    540c:	01312623          	sw	s3,12(sp)
    5410:	01412423          	sw	s4,8(sp)
    5414:	01512223          	sw	s5,4(sp)
    5418:	00112e23          	sw	ra,28(sp)
    541c:	00050913          	mv	s2,a0
    5420:	00058493          	mv	s1,a1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
    5424:	00000413          	li	s0,0
		*(buf + i) = _stdin_hook();
    5428:	002139b7          	lui	s3,0x213
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    542c:	00a00a13          	li	s4,10
    5430:	00d00a93          	li	s5,13
	for (i = 0; i < nbytes; i++) {
    5434:	02945063          	bge	s0,s1,5454 <z_impl_zephyr_read_stdin+0x58>
		*(buf + i) = _stdin_hook();
    5438:	77c9a783          	lw	a5,1916(s3) # 21377c <_stdin_hook>
    543c:	000780e7          	jalr	a5
    5440:	008907b3          	add	a5,s2,s0
    5444:	00a78023          	sb	a0,0(a5)
	for (i = 0; i < nbytes; i++) {
    5448:	00140413          	addi	s0,s0,1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    544c:	01450463          	beq	a0,s4,5454 <z_impl_zephyr_read_stdin+0x58>
    5450:	ff5512e3          	bne	a0,s5,5434 <z_impl_zephyr_read_stdin+0x38>
			i++;
			break;
		}
	}
	return i;
}
    5454:	01c12083          	lw	ra,28(sp)
    5458:	00040513          	mv	a0,s0
    545c:	01812403          	lw	s0,24(sp)
    5460:	01412483          	lw	s1,20(sp)
    5464:	01012903          	lw	s2,16(sp)
    5468:	00c12983          	lw	s3,12(sp)
    546c:	00812a03          	lw	s4,8(sp)
    5470:	00412a83          	lw	s5,4(sp)
    5474:	02010113          	addi	sp,sp,32
    5478:	00008067          	ret

0000547c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    547c:	fe010113          	addi	sp,sp,-32
    5480:	00812c23          	sw	s0,24(sp)
    5484:	00912a23          	sw	s1,20(sp)
    5488:	01212823          	sw	s2,16(sp)
    548c:	01512223          	sw	s5,4(sp)
    5490:	01612023          	sw	s6,0(sp)
    5494:	00112e23          	sw	ra,28(sp)
    5498:	01312623          	sw	s3,12(sp)
    549c:	01412423          	sw	s4,8(sp)
    54a0:	00050913          	mv	s2,a0
    54a4:	00058413          	mv	s0,a1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    54a8:	00000493          	li	s1,0
		if (*(buf + i) == '\n') {
    54ac:	00a00a93          	li	s5,10
    54b0:	00213b37          	lui	s6,0x213
	for (i = 0; i < nbytes; i++) {
    54b4:	0284c863          	blt	s1,s0,54e4 <z_impl_zephyr_write_stdout+0x68>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    54b8:	01c12083          	lw	ra,28(sp)
    54bc:	00040513          	mv	a0,s0
    54c0:	01812403          	lw	s0,24(sp)
    54c4:	01412483          	lw	s1,20(sp)
    54c8:	01012903          	lw	s2,16(sp)
    54cc:	00c12983          	lw	s3,12(sp)
    54d0:	00812a03          	lw	s4,8(sp)
    54d4:	00412a83          	lw	s5,4(sp)
    54d8:	00012b03          	lw	s6,0(sp)
    54dc:	02010113          	addi	sp,sp,32
    54e0:	00008067          	ret
		if (*(buf + i) == '\n') {
    54e4:	009909b3          	add	s3,s2,s1
    54e8:	0009c783          	lbu	a5,0(s3)
    54ec:	780b0a13          	addi	s4,s6,1920 # 213780 <_stdout_hook>
    54f0:	01579863          	bne	a5,s5,5500 <z_impl_zephyr_write_stdout+0x84>
			_stdout_hook('\r');
    54f4:	000a2783          	lw	a5,0(s4)
    54f8:	00d00513          	li	a0,13
    54fc:	000780e7          	jalr	a5
		_stdout_hook(*(buf + i));
    5500:	000a2783          	lw	a5,0(s4)
    5504:	0009c503          	lbu	a0,0(s3)
	for (i = 0; i < nbytes; i++) {
    5508:	00148493          	addi	s1,s1,1
		_stdout_hook(*(buf + i));
    550c:	000780e7          	jalr	a5
	for (i = 0; i < nbytes; i++) {
    5510:	fa5ff06f          	j	54b4 <z_impl_zephyr_write_stdout+0x38>

00005514 <_read>:
#include <syscalls/zephyr_write_stdout_mrsh.c>
#endif

#ifndef CONFIG_POSIX_API
int _read(int fd, char *buf, int nbytes)
{
    5514:	00058513          	mv	a0,a1
    5518:	00060593          	mv	a1,a2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
    551c:	ee1ff06f          	j	53fc <z_impl_zephyr_read_stdin>

00005520 <_write>:
	return zephyr_read_stdin(buf, nbytes);
}
__weak FUNC_ALIAS(_read, read, int);

int _write(int fd, const void *buf, int nbytes)
{
    5520:	00058513          	mv	a0,a1
    5524:	00060593          	mv	a1,a2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
    5528:	f55ff06f          	j	547c <z_impl_zephyr_write_stdout>

0000552c <_close>:
    552c:	fff00513          	li	a0,-1
    5530:	00008067          	ret

00005534 <_lseek>:
__weak FUNC_ALIAS(_close, close, int);

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    5534:	00000513          	li	a0,0
    5538:	00008067          	ret

0000553c <_isatty>:
#endif

int _isatty(int file)
{
	return file <= 2;
}
    553c:	00352513          	slti	a0,a0,3
    5540:	00008067          	ret

00005544 <_kill>:
__weak FUNC_ALIAS(_isatty, isatty, int);

int _kill(int i, int j)
{
	return 0;
}
    5544:	00000513          	li	a0,0
    5548:	00008067          	ret

0000554c <_getpid>:
__weak FUNC_ALIAS(_kill, kill, int);

int _getpid(void)
{
	return 0;
}
    554c:	00000513          	li	a0,0
    5550:	00008067          	ret

00005554 <_fstat>:
__weak FUNC_ALIAS(_getpid, getpid, int);

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    5554:	000027b7          	lui	a5,0x2
    5558:	00f5a223          	sw	a5,4(a1)
	return 0;
}
    555c:	00000513          	li	a0,0
    5560:	00008067          	ret

00005564 <_exit>:
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    5564:	ff010113          	addi	sp,sp,-16
    5568:	00112623          	sw	ra,12(sp)
    556c:	0000d537          	lui	a0,0xd
    5570:	00500593          	li	a1,5
    5574:	df050513          	addi	a0,a0,-528 # cdf0 <dts_ord_9_cfg+0xc>
    5578:	f05ff0ef          	jal	ra,547c <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
    557c:	0000006f          	j	557c <_exit+0x18>

00005580 <_sbrk>:

void *_sbrk(intptr_t count)
{
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    5580:	0000d737          	lui	a4,0xd
    5584:	24c70713          	addi	a4,a4,588 # d24c <heap_sz>
    5588:	00072783          	lw	a5,0(a4)

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    558c:	00800637          	lui	a2,0x800
    5590:	00f506b3          	add	a3,a0,a5
    5594:	00214537          	lui	a0,0x214
    5598:	82050513          	addi	a0,a0,-2016 # 213820 <__data_region_end>
    559c:	40a60633          	sub	a2,a2,a0
    55a0:	00c6f863          	bgeu	a3,a2,55b0 <_sbrk+0x30>
	ptr = ((char *)HEAP_BASE) + heap_sz;
    55a4:	00a78533          	add	a0,a5,a0
		heap_sz += count;
    55a8:	00d72023          	sw	a3,0(a4)
		ret = ptr;
    55ac:	00008067          	ret
	} else {
		ret = (void *)-1;
    55b0:	fff00513          	li	a0,-1
	}

	return ret;
}
    55b4:	00008067          	ret

000055b8 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
    55b8:	ff010113          	addi	sp,sp,-16
    55bc:	00812423          	sw	s0,8(sp)
    55c0:	00050413          	mv	s0,a0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
    55c4:	01400513          	li	a0,20
{
    55c8:	00112623          	sw	ra,12(sp)
	*lock = malloc(sizeof(struct k_mutex));
    55cc:	7b0020ef          	jal	ra,7d7c <malloc>
    55d0:	00a42023          	sw	a0,0(s0)
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
    55d4:	00812403          	lw	s0,8(sp)
    55d8:	00c12083          	lw	ra,12(sp)
    55dc:	01010113          	addi	sp,sp,16
	return z_impl_k_mutex_init(mutex);
    55e0:	5e10006f          	j	63c0 <z_impl_k_mutex_init>

000055e4 <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
    55e4:	fff00593          	li	a1,-1
    55e8:	fff00613          	li	a2,-1
    55ec:	5ed0006f          	j	63d8 <z_impl_k_mutex_lock>

000055f0 <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
    55f0:	7490006f          	j	6538 <z_impl_k_mutex_unlock>

000055f4 <__errno>:
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    55f4:	11d0006f          	j	5f10 <z_impl_z_errno>

000055f8 <swerv_pic_init>:
	return *(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg);
}

static void swerv_pic_write(uint32_t reg, uint32_t val)
{
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    55f8:	f00c37b7          	lui	a5,0xf00c3
    55fc:	0007a023          	sw	zero,0(a5) # f00c3000 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xf00c3001>
    5600:	f00c27b7          	lui	a5,0xf00c2
    5604:	00478713          	addi	a4,a5,4 # f00c2004 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xf00c2005>

	/* Init priority order to 0, 0=lowest to 15=highest */
	swerv_pic_write(SWERV_PIC_mpiccfg, 0);

	/* Ensure that all interrupts are disabled initially */
	for (i = 1; i < SWERV_PIC_MAX_ID; i++) {
    5608:	12c78793          	addi	a5,a5,300
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    560c:	00072023          	sw	zero,0(a4)
	for (i = 1; i < SWERV_PIC_MAX_ID; i++) {
    5610:	00470713          	addi	a4,a4,4
    5614:	fef71ce3          	bne	a4,a5,560c <swerv_pic_init+0x14>
    5618:	f00c07b7          	lui	a5,0xf00c0
    561c:	00478713          	addi	a4,a5,4 # f00c0004 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xf00c0005>
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    5620:	00f00693          	li	a3,15
		swerv_pic_write(SWERV_PIC_meie(i), 0);
	}

	/* Set priority of each interrupt line to 0 initially */
	for (i = 1; i < SWERV_PIC_MAX_ID; i++) {
    5624:	12c78793          	addi	a5,a5,300
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    5628:	00d72023          	sw	a3,0(a4)
	for (i = 1; i < SWERV_PIC_MAX_ID; i++) {
    562c:	00470713          	addi	a4,a4,4
    5630:	fef71ce3          	bne	a4,a5,5628 <swerv_pic_init+0x30>
    5634:	f00c47b7          	lui	a5,0xf00c4
    5638:	00478713          	addi	a4,a5,4 # f00c4004 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xf00c4005>
		swerv_pic_write(SWERV_PIC_meipl(i), 15);
	}

	/* Set property of each interrupt line to level-triggered/high */
	for (i = 1; i < SWERV_PIC_MAX_ID; i++) {
    563c:	12c78793          	addi	a5,a5,300
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    5640:	00072023          	sw	zero,0(a4)
	for (i = 1; i < SWERV_PIC_MAX_ID; i++) {
    5644:	00470713          	addi	a4,a4,4
    5648:	fef71ce3          	bne	a4,a5,5640 <swerv_pic_init+0x48>
    564c:	f00c57b7          	lui	a5,0xf00c5
    5650:	00478713          	addi	a4,a5,4 # f00c5004 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xf00c5005>
		swerv_pic_write(SWERV_PIC_meigwctrl(i), (0<<1)|(0<<0));
	}

	/* clear pending of each interrupt line */
	for (i = 1; i < SWERV_PIC_MAX_ID; i++) {
    5654:	12c78793          	addi	a5,a5,300
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    5658:	00072023          	sw	zero,0(a4)
	for (i = 1; i < SWERV_PIC_MAX_ID; i++) {
    565c:	00470713          	addi	a4,a4,4
    5660:	fef71ce3          	bne	a4,a5,5658 <swerv_pic_init+0x60>
		swerv_pic_write(SWERV_PIC_meigwclr(i), 0);
	}

	/* No interrupts masked */
	__asm__ swerv_pic_writecsr(meipt, 0);
    5664:	bc905073          	csrwi	0xbc9,0
	__asm__ swerv_pic_writecsr(meicidpl, 0);
    5668:	bcb05073          	csrwi	0xbcb,0
	__asm__ swerv_pic_writecsr(meicurpl, 0);
    566c:	bcc05073          	csrwi	0xbcc,0

	/*
	 * CSR mie register is updated using atomic instruction csrrs
	 * (atomic read and set bits in CSR register)
	 */
	__asm__ volatile ("csrrs %0, mie, %1\n"
    5670:	000017b7          	lui	a5,0x1
    5674:	80078793          	addi	a5,a5,-2048 # 800 <CONFIG_ISR_STACK_SIZE>
    5678:	3047a7f3          	csrrs	a5,mie,a5
}
    567c:	00000513          	li	a0,0
    5680:	00008067          	ret

00005684 <swerv_pic_irq_handler>:
{
    5684:	ff010113          	addi	sp,sp,-16
    5688:	00112623          	sw	ra,12(sp)
    568c:	00812423          	sw	s0,8(sp)
	__asm__ swerv_pic_writecsr(meicpct, 0);
    5690:	bca05073          	csrwi	0xbca,0
	__asm__ swerv_pic_readcsr(meihap, tmp);
    5694:	fc802473          	csrr	s0,0xfc8
	irq = (tmp >> 2) & 0xff;
    5698:	00245413          	srli	s0,s0,0x2
    569c:	0ff47413          	andi	s0,s0,255
	save_irq = irq;
    56a0:	0000d7b7          	lui	a5,0xd
    56a4:	2487a823          	sw	s0,592(a5) # d250 <save_irq>
	if (irq == 0U || irq >= 64) {
    56a8:	fff40713          	addi	a4,s0,-1
    56ac:	03e00793          	li	a5,62
    56b0:	00e7f663          	bgeu	a5,a4,56bc <swerv_pic_irq_handler+0x38>
		z_irq_spurious(NULL);
    56b4:	00000513          	li	a0,0
    56b8:	c8dff0ef          	jal	ra,5344 <z_irq_spurious>
	irq += RISCV_MAX_GENERIC_IRQ;
    56bc:	00b40713          	addi	a4,s0,11
	if (ite->isr)
    56c0:	0000c7b7          	lui	a5,0xc
    56c4:	00371713          	slli	a4,a4,0x3
    56c8:	64078793          	addi	a5,a5,1600 # c640 <_sw_isr_table>
    56cc:	00e787b3          	add	a5,a5,a4
    56d0:	0047a703          	lw	a4,4(a5)
    56d4:	00070663          	beqz	a4,56e0 <swerv_pic_irq_handler+0x5c>
		ite->isr(ite->arg);
    56d8:	0007a503          	lw	a0,0(a5)
    56dc:	000700e7          	jalr	a4
	swerv_pic_write(SWERV_PIC_meigwclr(irq), 0);
    56e0:	000017b7          	lui	a5,0x1
    56e4:	40b78793          	addi	a5,a5,1035 # 140b <__divdf3+0xbf>
    56e8:	00f40433          	add	s0,s0,a5
    56ec:	00241413          	slli	s0,s0,0x2
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    56f0:	f00c07b7          	lui	a5,0xf00c0
    56f4:	00f40433          	add	s0,s0,a5
}
    56f8:	00c12083          	lw	ra,12(sp)
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    56fc:	00042023          	sw	zero,0(s0)
}
    5700:	00812403          	lw	s0,8(sp)
    5704:	01010113          	addi	sp,sp,16
    5708:	00008067          	ret

0000570c <swerv_pic_irq_enable>:
	if ((irq >= SWERV_PIC_MAX_ID) || (irq < RISCV_MAX_GENERIC_IRQ)) {
    570c:	ff550713          	addi	a4,a0,-11
    5710:	03f00793          	li	a5,63
    5714:	02e7e663          	bltu	a5,a4,5740 <swerv_pic_irq_enable+0x34>
	__asm__ volatile ("csrrc %0, mstatus, %1"
    5718:	00800793          	li	a5,8
    571c:	3007b7f3          	csrrc	a5,mstatus,a5
	swerv_pic_write(SWERV_PIC_meie(irq - RISCV_MAX_GENERIC_IRQ), 1);
    5720:	7f550513          	addi	a0,a0,2037
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    5724:	f00c0737          	lui	a4,0xf00c0
	swerv_pic_write(SWERV_PIC_meie(irq - RISCV_MAX_GENERIC_IRQ), 1);
    5728:	00251513          	slli	a0,a0,0x2
	*(volatile uint32_t *)(DT_INST_REG_ADDR(0) + reg) = val;
    572c:	00e50533          	add	a0,a0,a4
    5730:	00100713          	li	a4,1
    5734:	00e52023          	sw	a4,0(a0)
	key = (mstatus & MSTATUS_IEN);
    5738:	0087f793          	andi	a5,a5,8
	__asm__ volatile ("csrrs %0, mstatus, %1"
    573c:	3007a7f3          	csrrs	a5,mstatus,a5
}
    5740:	00008067          	ret

00005744 <arch_irq_enable>:
	if (irq > RISCV_MAX_GENERIC_IRQ) {
    5744:	00b00793          	li	a5,11
    5748:	00a7f463          	bgeu	a5,a0,5750 <arch_irq_enable+0xc>
		swerv_pic_irq_enable(irq);
    574c:	fc1ff06f          	j	570c <swerv_pic_irq_enable>
			  : "=r" (mie)
			  : "r" (1 << irq));
    5750:	00100793          	li	a5,1
    5754:	00a79533          	sll	a0,a5,a0
	__asm__ volatile ("csrrs %0, mie, %1\n"
    5758:	30452573          	csrrs	a0,mie,a0
}
    575c:	00008067          	ret

00005760 <uart_console_init>:
{

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    5760:	0000c537          	lui	a0,0xc
{
    5764:	ff010113          	addi	sp,sp,-16
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    5768:	5f850713          	addi	a4,a0,1528 # c5f8 <__device_dts_ord_11>
    576c:	0000d7b7          	lui	a5,0xd
{
    5770:	00112623          	sw	ra,12(sp)
    5774:	00812423          	sw	s0,8(sp)
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    5778:	24e7aa23          	sw	a4,596(a5) # d254 <uart_console_dev>
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    577c:	5f850513          	addi	a0,a0,1528
    5780:	76c000ef          	jal	ra,5eec <z_device_ready>
    5784:	fed00793          	li	a5,-19
    5788:	00050e63          	beqz	a0,57a4 <uart_console_init+0x44>
	__stdout_hook_install(console_out);
    578c:	00005437          	lui	s0,0x5
    5790:	7b840513          	addi	a0,s0,1976 # 57b8 <console_out>
    5794:	c5dff0ef          	jal	ra,53f0 <__stdout_hook_install>
	__printk_hook_install(console_out);
    5798:	7b840513          	addi	a0,s0,1976
    579c:	d3dfe0ef          	jal	ra,44d8 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    57a0:	00000793          	li	a5,0
}
    57a4:	00c12083          	lw	ra,12(sp)
    57a8:	00812403          	lw	s0,8(sp)
    57ac:	00078513          	mv	a0,a5
    57b0:	01010113          	addi	sp,sp,16
    57b4:	00008067          	ret

000057b8 <console_out>:
{
    57b8:	ff010113          	addi	sp,sp,-16
    57bc:	00812423          	sw	s0,8(sp)
    57c0:	00912223          	sw	s1,4(sp)
    57c4:	00112623          	sw	ra,12(sp)
    57c8:	0000d4b7          	lui	s1,0xd
	if ('\n' == c) {
    57cc:	00a00793          	li	a5,10
{
    57d0:	00050413          	mv	s0,a0
    57d4:	25448493          	addi	s1,s1,596 # d254 <uart_console_dev>
	if ('\n' == c) {
    57d8:	00f51c63          	bne	a0,a5,57f0 <console_out+0x38>
		uart_poll_out(uart_console_dev, '\r');
    57dc:	0004a503          	lw	a0,0(s1)
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    57e0:	00852783          	lw	a5,8(a0)
    57e4:	00d00593          	li	a1,13
    57e8:	0047a783          	lw	a5,4(a5)
    57ec:	000780e7          	jalr	a5
	uart_poll_out(uart_console_dev, c);
    57f0:	0004a503          	lw	a0,0(s1)
    57f4:	00852783          	lw	a5,8(a0)
    57f8:	0ff47593          	andi	a1,s0,255
    57fc:	0047a783          	lw	a5,4(a5)
    5800:	000780e7          	jalr	a5
}
    5804:	00c12083          	lw	ra,12(sp)
    5808:	00040513          	mv	a0,s0
    580c:	00812403          	lw	s0,8(sp)
    5810:	00412483          	lw	s1,4(sp)
    5814:	01010113          	addi	sp,sp,16
    5818:	00008067          	ret

0000581c <gpio_mmio32_config>:

static int gpio_mmio32_config(const struct device *dev,
			      gpio_pin_t pin, gpio_flags_t flags)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = context->config;
    581c:	01052783          	lw	a5,16(a0)
    5820:	0047a683          	lw	a3,4(a5)

	if ((config->mask & (1 << pin)) == 0) {
    5824:	00100793          	li	a5,1
    5828:	00b795b3          	sll	a1,a5,a1
    582c:	0086a783          	lw	a5,8(a3)
    5830:	00f5f7b3          	and	a5,a1,a5
    5834:	06078c63          	beqz	a5,58ac <gpio_mmio32_config+0x90>
		return -EINVAL; /* Pin not in our validity mask */
	}

	if (flags & ~(GPIO_INPUT | GPIO_OUTPUT |
    5838:	fffff7b7          	lui	a5,0xfffff
    583c:	0fe78793          	addi	a5,a5,254 # fffff0fe <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfffff0ff>
    5840:	00f677b3          	and	a5,a2,a5
		      GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH |
		      GPIO_ACTIVE_LOW)) {
		/* We ignore direction and fake polarity, rest is unsupported */
		return -ENOTSUP;
    5844:	f7a00513          	li	a0,-134
	if (flags & ~(GPIO_INPUT | GPIO_OUTPUT |
    5848:	06079463          	bnez	a5,58b0 <gpio_mmio32_config+0x94>
	}

	if ((flags & GPIO_OUTPUT) != 0) {
    584c:	20067793          	andi	a5,a2,512
			*reg = (*reg & (config->mask & ~(1 << pin)));
		}
		irq_unlock(key);
	}

	return 0;
    5850:	00000513          	li	a0,0
	if ((flags & GPIO_OUTPUT) != 0) {
    5854:	04078e63          	beqz	a5,58b0 <gpio_mmio32_config+0x94>
		volatile uint32_t *reg = config->reg;
    5858:	0046a703          	lw	a4,4(a3)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    585c:	00800793          	li	a5,8
    5860:	3007b7f3          	csrrc	a5,mstatus,a5
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    5864:	00b65513          	srli	a0,a2,0xb
    5868:	00157513          	andi	a0,a0,1
	key = (mstatus & MSTATUS_IEN);
    586c:	0087f793          	andi	a5,a5,8
    5870:	00050e63          	beqz	a0,588c <gpio_mmio32_config+0x70>
			*reg = (*reg | (1 << pin));
    5874:	00072683          	lw	a3,0(a4) # f00c0000 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xf00c0001>
    5878:	00d5e5b3          	or	a1,a1,a3
			*reg = (*reg & (config->mask & ~(1 << pin)));
    587c:	00b72023          	sw	a1,0(a4)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    5880:	3007a7f3          	csrrs	a5,mstatus,a5
	return 0;
    5884:	00000513          	li	a0,0
			  : "=r" (mstatus)
			  : "r" (key & MSTATUS_IEN)
			  : "memory");
}
    5888:	00008067          	ret
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    588c:	40067613          	andi	a2,a2,1024
    5890:	fe0608e3          	beqz	a2,5880 <gpio_mmio32_config+0x64>
			*reg = (*reg & (config->mask & ~(1 << pin)));
    5894:	0086a683          	lw	a3,8(a3)
    5898:	00072603          	lw	a2,0(a4)
    589c:	fff5c593          	not	a1,a1
    58a0:	00d5f5b3          	and	a1,a1,a3
    58a4:	00c5f5b3          	and	a1,a1,a2
    58a8:	fd5ff06f          	j	587c <gpio_mmio32_config+0x60>
		return -EINVAL; /* Pin not in our validity mask */
    58ac:	fea00513          	li	a0,-22
}
    58b0:	00008067          	ret

000058b4 <gpio_mmio32_port_get_raw>:

static int gpio_mmio32_port_get_raw(const struct device *dev, uint32_t *value)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = context->config;
    58b4:	01052783          	lw	a5,16(a0)

	*value = *config->reg & config->mask;

	return 0;
}
    58b8:	00000513          	li	a0,0
	const struct gpio_mmio32_config *config = context->config;
    58bc:	0047a703          	lw	a4,4(a5)
	*value = *config->reg & config->mask;
    58c0:	00472783          	lw	a5,4(a4)
    58c4:	0007a683          	lw	a3,0(a5)
    58c8:	00872783          	lw	a5,8(a4)
    58cc:	00d7f7b3          	and	a5,a5,a3
    58d0:	00f5a023          	sw	a5,0(a1)
}
    58d4:	00008067          	ret

000058d8 <gpio_mmio32_port_set_masked_raw>:
static int gpio_mmio32_port_set_masked_raw(const struct device *dev,
					   uint32_t mask,
					   uint32_t value)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = context->config;
    58d8:	01052783          	lw	a5,16(a0)
    58dc:	0047a783          	lw	a5,4(a5)
	volatile uint32_t *reg = config->reg;
    58e0:	0047a703          	lw	a4,4(a5)
	unsigned int key;

	mask &= config->mask;
    58e4:	0087a783          	lw	a5,8(a5)
    58e8:	00f5f5b3          	and	a1,a1,a5
	__asm__ volatile ("csrrc %0, mstatus, %1"
    58ec:	00800793          	li	a5,8
    58f0:	3007b7f3          	csrrc	a5,mstatus,a5
	value &= mask;

	/* Update pin state atomically */
	key = irq_lock();
	*reg = (*reg & ~mask) | value;
    58f4:	00072683          	lw	a3,0(a4)
	key = (mstatus & MSTATUS_IEN);
    58f8:	0087f793          	andi	a5,a5,8
    58fc:	00c6c633          	xor	a2,a3,a2
    5900:	00b67633          	and	a2,a2,a1
    5904:	00d64633          	xor	a2,a2,a3
    5908:	00c72023          	sw	a2,0(a4)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    590c:	3007a7f3          	csrrs	a5,mstatus,a5
	irq_unlock(key);

	return 0;
}
    5910:	00000513          	li	a0,0
    5914:	00008067          	ret

00005918 <gpio_mmio32_port_set_bits_raw>:

static int gpio_mmio32_port_set_bits_raw(const struct device *dev,
					 uint32_t mask)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = context->config;
    5918:	01052783          	lw	a5,16(a0)
    591c:	0047a783          	lw	a5,4(a5)
	volatile uint32_t *reg = config->reg;
	unsigned int key;

	mask &= config->mask;
    5920:	0087a703          	lw	a4,8(a5)
	volatile uint32_t *reg = config->reg;
    5924:	0047a683          	lw	a3,4(a5)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    5928:	00800793          	li	a5,8
	mask &= config->mask;
    592c:	00e5f733          	and	a4,a1,a4
    5930:	3007b7f3          	csrrc	a5,mstatus,a5

	/* Update pin state atomically */
	key = irq_lock();
	*reg = (*reg | mask);
    5934:	0006a583          	lw	a1,0(a3)
	key = (mstatus & MSTATUS_IEN);
    5938:	0087f793          	andi	a5,a5,8
    593c:	00e5e5b3          	or	a1,a1,a4
    5940:	00b6a023          	sw	a1,0(a3)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    5944:	3007a7f3          	csrrs	a5,mstatus,a5
	irq_unlock(key);

	return 0;
}
    5948:	00000513          	li	a0,0
    594c:	00008067          	ret

00005950 <gpio_mmio32_port_clear_bits_raw>:

static int gpio_mmio32_port_clear_bits_raw(const struct device *dev,
					   uint32_t mask)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = context->config;
    5950:	01052783          	lw	a5,16(a0)
    5954:	0047a783          	lw	a5,4(a5)
	volatile uint32_t *reg = config->reg;
    5958:	0047a703          	lw	a4,4(a5)
	unsigned int key;

	mask &= config->mask;
    595c:	0087a783          	lw	a5,8(a5)
    5960:	00f5f5b3          	and	a1,a1,a5
	__asm__ volatile ("csrrc %0, mstatus, %1"
    5964:	00800793          	li	a5,8
    5968:	3007b7f3          	csrrc	a5,mstatus,a5

	/* Update pin state atomically */
	key = irq_lock();
	*reg = (*reg & ~mask);
    596c:	00072683          	lw	a3,0(a4)
    5970:	fff5c593          	not	a1,a1
	key = (mstatus & MSTATUS_IEN);
    5974:	0087f793          	andi	a5,a5,8
    5978:	00d5f5b3          	and	a1,a1,a3
    597c:	00b72023          	sw	a1,0(a4)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    5980:	3007a7f3          	csrrs	a5,mstatus,a5
	irq_unlock(key);

	return 0;
}
    5984:	00000513          	li	a0,0
    5988:	00008067          	ret

0000598c <gpio_mmio32_port_toggle_bits>:

static int gpio_mmio32_port_toggle_bits(const struct device *dev,
					uint32_t mask)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = context->config;
    598c:	01052783          	lw	a5,16(a0)
    5990:	0047a783          	lw	a5,4(a5)
	volatile uint32_t *reg = config->reg;
	unsigned int key;

	mask &= config->mask;
    5994:	0087a703          	lw	a4,8(a5)
	volatile uint32_t *reg = config->reg;
    5998:	0047a683          	lw	a3,4(a5)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    599c:	00800793          	li	a5,8
	mask &= config->mask;
    59a0:	00e5f733          	and	a4,a1,a4
    59a4:	3007b7f3          	csrrc	a5,mstatus,a5

	/* Update pin state atomically */
	key = irq_lock();
	*reg = (*reg ^ mask);
    59a8:	0006a583          	lw	a1,0(a3)
	key = (mstatus & MSTATUS_IEN);
    59ac:	0087f793          	andi	a5,a5,8
    59b0:	00e5c5b3          	xor	a1,a1,a4
    59b4:	00b6a023          	sw	a1,0(a3)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    59b8:	3007a7f3          	csrrs	a5,mstatus,a5
	irq_unlock(key);

	return 0;
}
    59bc:	00000513          	li	a0,0
    59c0:	00008067          	ret

000059c4 <gpio_mmio32_pin_interrupt_configure>:
static int gpio_mmio32_pin_interrupt_configure(const struct device *dev,
					       gpio_pin_t pin,
					       enum gpio_int_mode mode,
					       enum gpio_int_trig trig)
{
	if (mode != GPIO_INT_MODE_DISABLED) {
    59c4:	000027b7          	lui	a5,0x2
		return -ENOTSUP;
	}

	return 0;
    59c8:	00000513          	li	a0,0
	if (mode != GPIO_INT_MODE_DISABLED) {
    59cc:	00f60463          	beq	a2,a5,59d4 <gpio_mmio32_pin_interrupt_configure+0x10>
		return -ENOTSUP;
    59d0:	f7a00513          	li	a0,-134
}
    59d4:	00008067          	ret

000059d8 <gpio_mmio32_init>:
int gpio_mmio32_init(const struct device *dev)
{
	struct gpio_mmio32_context *context = dev->data;
	const struct gpio_mmio32_config *config = dev->config;

	context->config = config;
    59d8:	01052783          	lw	a5,16(a0)
    59dc:	00452703          	lw	a4,4(a0)

	return 0;
}
    59e0:	00000513          	li	a0,0
	context->config = config;
    59e4:	00e7a223          	sw	a4,4(a5) # 2004 <CONFIG_SRAM_SIZE+0x4>
}
    59e8:	00008067          	ret

000059ec <gpio_veerwolf_init>:
/* Driver functions */

static int gpio_veerwolf_init(const struct device *dev)
{
	return 0;
}
    59ec:	00000513          	li	a0,0
    59f0:	00008067          	ret

000059f4 <gpio_veerwolf_configure>:

static int gpio_veerwolf_configure(const struct device *dev,
				gpio_pin_t pin, gpio_flags_t flags)
{
	return 0;
}
    59f4:	00000513          	li	a0,0
    59f8:	00008067          	ret

000059fc <gpio_veerwolf_port_get_raw>:

static int gpio_veerwolf_port_get_raw(const struct device *dev,
				   gpio_port_value_t *value)
{
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    59fc:	00452783          	lw	a5,4(a0)

	*value = sys_read32(addr);
	return 0;
}
    5a00:	00000513          	li	a0,0
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    5a04:	0007a783          	lw	a5,0(a5)
	return *(volatile uint32_t *)addr;
    5a08:	0007a783          	lw	a5,0(a5)
	*value = sys_read32(addr);
    5a0c:	00f5a023          	sw	a5,0(a1)
}
    5a10:	00008067          	ret

00005a14 <gpio_veerwolf_port_set_masked_raw>:

static int gpio_veerwolf_port_set_masked_raw(const struct device *dev,
					  gpio_port_pins_t mask,
					  gpio_port_value_t value)
{
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    5a14:	00452783          	lw	a5,4(a0)
	port_val = sys_read32(addr);
	port_val = (port_val & ~mask) | (value & mask);
	sys_write32(port_val, addr);

	return 0;
}
    5a18:	00000513          	li	a0,0
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    5a1c:	0007a783          	lw	a5,0(a5)
    5a20:	0007a703          	lw	a4,0(a5)
	port_val = (port_val & ~mask) | (value & mask);
    5a24:	00e64633          	xor	a2,a2,a4
    5a28:	00b67633          	and	a2,a2,a1
    5a2c:	00e64633          	xor	a2,a2,a4
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
    5a30:	00c7a023          	sw	a2,0(a5)
}
    5a34:	00008067          	ret

00005a38 <gpio_veerwolf_port_set_bits_raw>:

static int gpio_veerwolf_port_set_bits_raw(const struct device *dev,
					gpio_port_pins_t pins)
{
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    5a38:	00452783          	lw	a5,4(a0)

	port_val = sys_read32(addr) | pins;
	sys_write32(port_val, addr);

	return 0;
}
    5a3c:	00000513          	li	a0,0
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    5a40:	0007a783          	lw	a5,0(a5)
	return *(volatile uint32_t *)addr;
    5a44:	0007a703          	lw	a4,0(a5)
	port_val = sys_read32(addr) | pins;
    5a48:	00e5e5b3          	or	a1,a1,a4
	*(volatile uint32_t *)addr = data;
    5a4c:	00b7a023          	sw	a1,0(a5)
}
    5a50:	00008067          	ret

00005a54 <gpio_veerwolf_port_clear_bits_raw>:

static int gpio_veerwolf_port_clear_bits_raw(const struct device *dev,
					  gpio_port_pins_t pins)
{
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    5a54:	00452783          	lw	a5,4(a0)
	uint32_t port_val;

	port_val = sys_read32(addr) & ~pins;
    5a58:	fff5c593          	not	a1,a1
	sys_write32(port_val, addr);

	return 0;
}
    5a5c:	00000513          	li	a0,0
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    5a60:	0007a783          	lw	a5,0(a5)
	return *(volatile uint32_t *)addr;
    5a64:	0007a703          	lw	a4,0(a5)
	port_val = sys_read32(addr) & ~pins;
    5a68:	00e5f5b3          	and	a1,a1,a4
	*(volatile uint32_t *)addr = data;
    5a6c:	00b7a023          	sw	a1,0(a5)
}
    5a70:	00008067          	ret

00005a74 <gpio_veerwolf_port_toggle_bits>:

static int gpio_veerwolf_port_toggle_bits(const struct device *dev,
				       gpio_port_pins_t pins)
{
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    5a74:	00452783          	lw	a5,4(a0)

	port_val = sys_read32(addr) ^ pins;
	sys_write32(port_val, addr);

	return 0;
}
    5a78:	00000513          	li	a0,0
	mem_addr_t addr = DEV_GPIO_ADDR(dev);
    5a7c:	0007a783          	lw	a5,0(a5)
	return *(volatile uint32_t *)addr;
    5a80:	0007a703          	lw	a4,0(a5)
	port_val = sys_read32(addr) ^ pins;
    5a84:	00e5c5b3          	xor	a1,a1,a4
	*(volatile uint32_t *)addr = data;
    5a88:	00b7a023          	sw	a1,0(a5)
}
    5a8c:	00008067          	ret

00005a90 <gpio_veerwolf_pin_interrupt_configure>:
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
	int ret = 0;

	if (mode != GPIO_INT_MODE_DISABLED) {
    5a90:	000027b7          	lui	a5,0x2
	int ret = 0;
    5a94:	00000513          	li	a0,0
	if (mode != GPIO_INT_MODE_DISABLED) {
    5a98:	00f60463          	beq	a2,a5,5aa0 <gpio_veerwolf_pin_interrupt_configure+0x10>
		ret = -ENOTSUP;
    5a9c:	f7a00513          	li	a0,-134
	}
	return ret;
}
    5aa0:	00008067          	ret

00005aa4 <uart_ns16550_configure>:
}

static int uart_ns16550_configure(const struct device *dev,
				  const struct uart_config *cfg)
{
	struct uart_ns16550_dev_data * const dev_data = DEV_DATA(dev);
    5aa4:	01052883          	lw	a7,16(a0)
{
    5aa8:	00050793          	mv	a5,a0
	__asm__ volatile ("csrrc %0, mstatus, %1"
    5aac:	00800693          	li	a3,8
    5ab0:	3006b6f3          	csrrc	a3,mstatus,a3
		OUTWORD(PCP(dev), pcp & ~PCP_UPDATE);
		OUTWORD(PCP(dev), pcp | PCP_UPDATE);
	}
#endif

	set_baud_rate(dev, cfg->baudrate);
    5ab4:	0005a503          	lw	a0,0(a1)
	key = (mstatus & MSTATUS_IEN);
    5ab8:	0086f693          	andi	a3,a3,8
	if ((baud_rate != 0U) && (dev_cfg->sys_clk_freq != 0U)) {
    5abc:	06050863          	beqz	a0,5b2c <uart_ns16550_configure+0x88>
	const struct uart_ns16550_device_config * const dev_cfg = DEV_CFG(dev);
    5ac0:	0047a603          	lw	a2,4(a5) # 2004 <CONFIG_SRAM_SIZE+0x4>
	if ((baud_rate != 0U) && (dev_cfg->sys_clk_freq != 0U)) {
    5ac4:	00462803          	lw	a6,4(a2) # 800004 <__data_region_end+0x5ec7e4>
    5ac8:	06080263          	beqz	a6,5b2c <uart_ns16550_configure+0x88>
		divisor = ((dev_cfg->sys_clk_freq + (baud_rate << 3))
    5acc:	00351713          	slli	a4,a0,0x3
    5ad0:	01070733          	add	a4,a4,a6
					/ baud_rate) >> 4;
    5ad4:	02a75733          	divu	a4,a4,a0
		lcr_cache = INBYTE(LCR(dev));
    5ad8:	00062803          	lw	a6,0(a2)
	struct uart_ns16550_dev_data * const dev_data = DEV_DATA(dev);
    5adc:	0107a303          	lw	t1,16(a5)
	return *(volatile uint8_t *)addr;
    5ae0:	00c84603          	lbu	a2,12(a6)
    5ae4:	0ff67e13          	andi	t3,a2,255
		OUTBYTE(LCR(dev), LCR_DLAB | lcr_cache);
    5ae8:	f8066613          	ori	a2,a2,-128
    5aec:	0ff67613          	andi	a2,a2,255
	*(volatile uint8_t *)addr = data;
    5af0:	00c80623          	sb	a2,12(a6)
	return DEVICE_MMIO_GET(dev);
    5af4:	0047a803          	lw	a6,4(a5)
    5af8:	00082803          	lw	a6,0(a6)
		divisor = ((dev_cfg->sys_clk_freq + (baud_rate << 3))
    5afc:	00475613          	srli	a2,a4,0x4
		OUTBYTE(BRDL(dev), (unsigned char)(divisor & 0xff));
    5b00:	0ff67613          	andi	a2,a2,255
    5b04:	00c80023          	sb	a2,0(a6)
	return DEVICE_MMIO_GET(dev);
    5b08:	0047a603          	lw	a2,4(a5)
		OUTBYTE(BRDH(dev), (unsigned char)((divisor >> 8) & 0xff));
    5b0c:	00c75713          	srli	a4,a4,0xc
    5b10:	0ff77713          	andi	a4,a4,255
    5b14:	00062603          	lw	a2,0(a2)
    5b18:	00e60223          	sb	a4,4(a2)
	return DEVICE_MMIO_GET(dev);
    5b1c:	0047a703          	lw	a4,4(a5)
		OUTBYTE(LCR(dev), lcr_cache);
    5b20:	00072703          	lw	a4,0(a4)
    5b24:	01c70623          	sb	t3,12(a4)
		dev_data->uart_config.baudrate = baud_rate;
    5b28:	00a32023          	sw	a0,0(t1)

	/* Local structure to hold temporary values to pass to OUTBYTE() */
	struct uart_config uart_cfg;

	switch (cfg->data_bits) {
    5b2c:	0065c603          	lbu	a2,6(a1)
    5b30:	00300713          	li	a4,3
		break;
	case UART_CFG_DATA_BITS_8:
		uart_cfg.data_bits = LCR_CS8;
		break;
	default:
		ret = -ENOTSUP;
    5b34:	f7a00513          	li	a0,-134
    5b38:	08c76663          	bltu	a4,a2,5bc4 <uart_ns16550_configure+0x120>
		goto out;
	}

	switch (cfg->stop_bits) {
    5b3c:	0055c803          	lbu	a6,5(a1)
    5b40:	00100513          	li	a0,1
    5b44:	08a80463          	beq	a6,a0,5bcc <uart_ns16550_configure+0x128>
    5b48:	f7a00513          	li	a0,-134
    5b4c:	06e81c63          	bne	a6,a4,5bc4 <uart_ns16550_configure+0x120>
    5b50:	00400813          	li	a6,4
	default:
		ret = -ENOTSUP;
		goto out;
	}

	switch (cfg->parity) {
    5b54:	0045c703          	lbu	a4,4(a1)
    5b58:	00070a63          	beqz	a4,5b6c <uart_ns16550_configure+0xc8>
    5b5c:	00200313          	li	t1,2
    5b60:	f7a00513          	li	a0,-134
    5b64:	06671063          	bne	a4,t1,5bc4 <uart_ns16550_configure+0x120>
    5b68:	01000713          	li	a4,16
	default:
		ret = -ENOTSUP;
		goto out;
	}

	dev_data->uart_config = *cfg;
    5b6c:	0005a503          	lw	a0,0(a1)

	/* data bits, stop bits, parity, clear DLAB */
	OUTBYTE(LCR(dev),
    5b70:	01066633          	or	a2,a2,a6
    5b74:	00c76733          	or	a4,a4,a2
	return DEVICE_MMIO_GET(dev);
    5b78:	0047a603          	lw	a2,4(a5)
	dev_data->uart_config = *cfg;
    5b7c:	00a8a023          	sw	a0,0(a7)
    5b80:	0045a583          	lw	a1,4(a1)
	OUTBYTE(LCR(dev),
    5b84:	00062603          	lw	a2,0(a2)
	int ret = 0;
    5b88:	00000513          	li	a0,0
	dev_data->uart_config = *cfg;
    5b8c:	00b8a223          	sw	a1,4(a7)
    5b90:	00e60623          	sb	a4,12(a2)
	return DEVICE_MMIO_GET(dev);
    5b94:	0047a703          	lw	a4,4(a5)
    5b98:	00b00613          	li	a2,11
	if (cfg->flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS) {
		mdc |= MCR_AFCE;
	}
#endif

	OUTBYTE(MDC(dev), mdc);
    5b9c:	00072703          	lw	a4,0(a4)
    5ba0:	00c70823          	sb	a2,16(a4)
	return DEVICE_MMIO_GET(dev);
    5ba4:	0047a703          	lw	a4,4(a5)
    5ba8:	f8700613          	li	a2,-121
	/*
	 * Program FIFO: enabled, mode 0 (set for compatibility with quark),
	 * generate the interrupt at 8th byte
	 * Clear TX and RX FIFO
	 */
	OUTBYTE(FCR(dev),
    5bac:	00072703          	lw	a4,0(a4)
    5bb0:	00c70423          	sb	a2,8(a4)
	return DEVICE_MMIO_GET(dev);
    5bb4:	0047a783          	lw	a5,4(a5)
    5bb8:	0007a783          	lw	a5,0(a5)
	return *(volatile uint8_t *)addr;
    5bbc:	0007c703          	lbu	a4,0(a5)
	*(volatile uint8_t *)addr = data;
    5bc0:	00078223          	sb	zero,4(a5)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    5bc4:	3006a6f3          	csrrs	a3,mstatus,a3
	OUTBYTE(IER(dev), 0x00);

out:
	k_spin_unlock(&dev_data->lock, key);
	return ret;
};
    5bc8:	00008067          	ret
		uart_cfg.stop_bits = LCR_1_STB;
    5bcc:	00000813          	li	a6,0
    5bd0:	f85ff06f          	j	5b54 <uart_ns16550_configure+0xb0>

00005bd4 <uart_ns16550_config_get>:

#ifdef CONFIG_UART_USE_RUNTIME_CONFIGURE
static int uart_ns16550_config_get(const struct device *dev,
				   struct uart_config *cfg)
{
	struct uart_ns16550_dev_data *data = DEV_DATA(dev);
    5bd4:	01052783          	lw	a5,16(a0)
	cfg->stop_bits = data->uart_config.stop_bits;
	cfg->data_bits = data->uart_config.data_bits;
	cfg->flow_ctrl = data->uart_config.flow_ctrl;

	return 0;
}
    5bd8:	00000513          	li	a0,0
	cfg->baudrate = data->uart_config.baudrate;
    5bdc:	0007a703          	lw	a4,0(a5)
    5be0:	00e5a023          	sw	a4,0(a1)
	cfg->parity = data->uart_config.parity;
    5be4:	0047c703          	lbu	a4,4(a5)
    5be8:	00e58223          	sb	a4,4(a1)
	cfg->stop_bits = data->uart_config.stop_bits;
    5bec:	0057c703          	lbu	a4,5(a5)
    5bf0:	00e582a3          	sb	a4,5(a1)
	cfg->data_bits = data->uart_config.data_bits;
    5bf4:	0067c703          	lbu	a4,6(a5)
    5bf8:	00e58323          	sb	a4,6(a1)
	cfg->flow_ctrl = data->uart_config.flow_ctrl;
    5bfc:	0077c783          	lbu	a5,7(a5)
    5c00:	00f583a3          	sb	a5,7(a1)
}
    5c04:	00008067          	ret

00005c08 <uart_ns16550_init>:
 */
static int uart_ns16550_init(const struct device *dev)
{
	int ret;

	ret = uart_ns16550_configure(dev, &DEV_DATA(dev)->uart_config);
    5c08:	01052583          	lw	a1,16(a0)
    5c0c:	e99ff06f          	j	5aa4 <uart_ns16550_configure>

00005c10 <uart_ns16550_poll_in>:
	__asm__ volatile ("csrrc %0, mstatus, %1"
    5c10:	00800793          	li	a5,8
    5c14:	3007b7f3          	csrrc	a5,mstatus,a5
	return DEVICE_MMIO_GET(dev);
    5c18:	00452703          	lw	a4,4(a0)
	key = (mstatus & MSTATUS_IEN);
    5c1c:	0087f793          	andi	a5,a5,8
 *
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */
static int uart_ns16550_poll_in(const struct device *dev, unsigned char *c)
{
	int ret = -1;
    5c20:	fff00513          	li	a0,-1
	return DEVICE_MMIO_GET(dev);
    5c24:	00072683          	lw	a3,0(a4)
	return *(volatile uint8_t *)addr;
    5c28:	0146c703          	lbu	a4,20(a3)
	k_spinlock_key_t key = k_spin_lock(&DEV_DATA(dev)->lock);

	if ((INBYTE(LSR(dev)) & LSR_RXRDY) != 0) {
    5c2c:	00177713          	andi	a4,a4,1
    5c30:	00070863          	beqz	a4,5c40 <uart_ns16550_poll_in+0x30>
    5c34:	0006c703          	lbu	a4,0(a3)
		/* got a character */
		*c = INBYTE(RDR(dev));
		ret = 0;
    5c38:	00000513          	li	a0,0
		*c = INBYTE(RDR(dev));
    5c3c:	00e58023          	sb	a4,0(a1)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    5c40:	3007a7f3          	csrrs	a5,mstatus,a5
	}

	k_spin_unlock(&DEV_DATA(dev)->lock, key);

	return ret;
}
    5c44:	00008067          	ret

00005c48 <uart_ns16550_poll_out>:
	__asm__ volatile ("csrrc %0, mstatus, %1"
    5c48:	00800793          	li	a5,8
    5c4c:	3007b7f3          	csrrc	a5,mstatus,a5
	return DEVICE_MMIO_GET(dev);
    5c50:	00452703          	lw	a4,4(a0)
	key = (mstatus & MSTATUS_IEN);
    5c54:	0087f793          	andi	a5,a5,8
    5c58:	00072683          	lw	a3,0(a4)
static void uart_ns16550_poll_out(const struct device *dev,
					   unsigned char c)
{
	k_spinlock_key_t key = k_spin_lock(&DEV_DATA(dev)->lock);

	while ((INBYTE(LSR(dev)) & LSR_THRE) == 0) {
    5c5c:	01468613          	addi	a2,a3,20
    5c60:	00064703          	lbu	a4,0(a2)
    5c64:	02077713          	andi	a4,a4,32
    5c68:	fe070ce3          	beqz	a4,5c60 <uart_ns16550_poll_out+0x18>
	*(volatile uint8_t *)addr = data;
    5c6c:	00b68023          	sb	a1,0(a3)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    5c70:	3007a7f3          	csrrs	a5,mstatus,a5
	}

	OUTBYTE(THR(dev), c);

	k_spin_unlock(&DEV_DATA(dev)->lock, key);
}
    5c74:	00008067          	ret

00005c78 <uart_ns16550_err_check>:
	__asm__ volatile ("csrrc %0, mstatus, %1"
    5c78:	00800793          	li	a5,8
    5c7c:	3007b7f3          	csrrc	a5,mstatus,a5
	return DEVICE_MMIO_GET(dev);
    5c80:	00452703          	lw	a4,4(a0)
	key = (mstatus & MSTATUS_IEN);
    5c84:	0087f793          	andi	a5,a5,8
 * UART_BREAK if an error was detected, 0 otherwise.
 */
static int uart_ns16550_err_check(const struct device *dev)
{
	k_spinlock_key_t key = k_spin_lock(&DEV_DATA(dev)->lock);
	int check = (INBYTE(LSR(dev)) & LSR_EOB_MASK);
    5c88:	00072703          	lw	a4,0(a4)
	return *(volatile uint8_t *)addr;
    5c8c:	01474503          	lbu	a0,20(a4)
    5c90:	0ff57513          	andi	a0,a0,255
	__asm__ volatile ("csrrs %0, mstatus, %1"
    5c94:	3007a7f3          	csrrs	a5,mstatus,a5
    5c98:	01e57513          	andi	a0,a0,30

	k_spin_unlock(&DEV_DATA(dev)->lock, key);

	return check >> 1;
}
    5c9c:	00155513          	srli	a0,a0,0x1
    5ca0:	00008067          	ret

00005ca4 <mtime>:
	volatile uint32_t *r = (uint32_t *)RISCV_MTIME_BASE;
	uint32_t lo, hi;

	/* Likewise, must guard against rollover when reading */
	do {
		hi = r[1];
    5ca4:	800017b7          	lui	a5,0x80001
    5ca8:	0247a703          	lw	a4,36(a5) # 80001024 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80001025>
		lo = r[0];
    5cac:	0207a503          	lw	a0,32(a5)
	} while (r[1] != hi);
    5cb0:	0247a583          	lw	a1,36(a5)
    5cb4:	fee59ae3          	bne	a1,a4,5ca8 <mtime+0x4>

	return (((uint64_t)hi) << 32) | lo;
#endif
}
    5cb8:	00008067          	ret

00005cbc <timer_isr>:

static void timer_isr(const void *arg)
{
    5cbc:	fe010113          	addi	sp,sp,-32
    5cc0:	01312623          	sw	s3,12(sp)
    5cc4:	00112e23          	sw	ra,28(sp)
    5cc8:	00812c23          	sw	s0,24(sp)
    5ccc:	00912a23          	sw	s1,20(sp)
    5cd0:	01212823          	sw	s2,16(sp)
    5cd4:	01412423          	sw	s4,8(sp)
    5cd8:	01512223          	sw	s5,4(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    5cdc:	00800993          	li	s3,8
    5ce0:	3009b9f3          	csrrc	s3,mstatus,s3
	ARG_UNUSED(arg);

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint64_t now = mtime();
    5ce4:	fc1ff0ef          	jal	ra,5ca4 <mtime>
	key = (mstatus & MSTATUS_IEN);
    5ce8:	0089f993          	andi	s3,s3,8
    5cec:	00050a13          	mv	s4,a0
    5cf0:	00058913          	mv	s2,a1
	uint32_t dticks = (uint32_t)((now - last_count) / CYC_PER_TICK);

	last_count = now;
    5cf4:	0000d437          	lui	s0,0xd
    5cf8:	23040413          	addi	s0,s0,560 # d230 <last_count>
    5cfc:	00a42023          	sw	a0,0(s0)
    5d00:	00b42223          	sw	a1,4(s0)
	return z_clock_hw_cycles_per_sec;
    5d04:	00213ab7          	lui	s5,0x213

	if (!TICKLESS) {
		uint64_t next = last_count + CYC_PER_TICK;
    5d08:	794aa503          	lw	a0,1940(s5) # 213794 <z_clock_hw_cycles_per_sec>
    5d0c:	00000693          	li	a3,0
    5d10:	06400613          	li	a2,100
    5d14:	41f55593          	srai	a1,a0,0x1f
    5d18:	e24fa0ef          	jal	ra,33c <__udivdi3>
    5d1c:	00042483          	lw	s1,0(s0)
    5d20:	00442783          	lw	a5,4(s0)
    5d24:	009504b3          	add	s1,a0,s1
    5d28:	00a4b433          	sltu	s0,s1,a0
    5d2c:	00f40433          	add	s0,s0,a5

		if ((int64_t)(next - now) < MIN_DELAY) {
    5d30:	41448a33          	sub	s4,s1,s4
    5d34:	0144b5b3          	sltu	a1,s1,s4
    5d38:	41240933          	sub	s2,s0,s2
    5d3c:	40b90933          	sub	s2,s2,a1
		uint64_t next = last_count + CYC_PER_TICK;
    5d40:	00048793          	mv	a5,s1
    5d44:	00040693          	mv	a3,s0
		if ((int64_t)(next - now) < MIN_DELAY) {
    5d48:	03204863          	bgtz	s2,5d78 <timer_isr+0xbc>
    5d4c:	00091663          	bnez	s2,5d58 <timer_isr+0x9c>
    5d50:	3e700713          	li	a4,999
    5d54:	03476263          	bltu	a4,s4,5d78 <timer_isr+0xbc>
			next += CYC_PER_TICK;
    5d58:	794aa503          	lw	a0,1940(s5)
    5d5c:	00000693          	li	a3,0
    5d60:	06400613          	li	a2,100
    5d64:	41f55593          	srai	a1,a0,0x1f
    5d68:	dd4fa0ef          	jal	ra,33c <__udivdi3>
    5d6c:	00a487b3          	add	a5,s1,a0
    5d70:	0097b4b3          	sltu	s1,a5,s1
    5d74:	008486b3          	add	a3,s1,s0
	r[1] = 0xffffffff;
    5d78:	80001737          	lui	a4,0x80001
    5d7c:	fff00613          	li	a2,-1
    5d80:	02c72623          	sw	a2,44(a4) # 8000102c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000102d>
	r[0] = (uint32_t)time;
    5d84:	02f72423          	sw	a5,40(a4)
	r[1] = (uint32_t)(time >> 32);
    5d88:	02d72623          	sw	a3,44(a4)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    5d8c:	3009a9f3          	csrrs	s3,mstatus,s3
		set_mtimecmp(next);
	}

	k_spin_unlock(&lock, key);
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
}
    5d90:	01812403          	lw	s0,24(sp)
    5d94:	01c12083          	lw	ra,28(sp)
    5d98:	01412483          	lw	s1,20(sp)
    5d9c:	01012903          	lw	s2,16(sp)
    5da0:	00c12983          	lw	s3,12(sp)
    5da4:	00812a03          	lw	s4,8(sp)
    5da8:	00412a83          	lw	s5,4(sp)
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    5dac:	00100513          	li	a0,1
}
    5db0:	02010113          	addi	sp,sp,32
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    5db4:	0dd0106f          	j	7690 <sys_clock_announce>

00005db8 <sys_clock_driver_init>:

int sys_clock_driver_init(const struct device *dev)
{
    5db8:	ff010113          	addi	sp,sp,-16
    5dbc:	00812423          	sw	s0,8(sp)
	ARG_UNUSED(dev);

	IRQ_CONNECT(RISCV_MACHINE_TIMER_IRQ, 0, timer_isr, NULL, 0);
	last_count = mtime();
    5dc0:	0000d437          	lui	s0,0xd
{
    5dc4:	00112623          	sw	ra,12(sp)
	last_count = mtime();
    5dc8:	23040413          	addi	s0,s0,560 # d230 <last_count>
    5dcc:	ed9ff0ef          	jal	ra,5ca4 <mtime>
    5dd0:	00a42023          	sw	a0,0(s0)
    5dd4:	00b42223          	sw	a1,4(s0)
    5dd8:	002137b7          	lui	a5,0x213
	set_mtimecmp(last_count + CYC_PER_TICK);
    5ddc:	7947a503          	lw	a0,1940(a5) # 213794 <z_clock_hw_cycles_per_sec>
    5de0:	06400613          	li	a2,100
    5de4:	00000693          	li	a3,0
    5de8:	41f55593          	srai	a1,a0,0x1f
    5dec:	d50fa0ef          	jal	ra,33c <__udivdi3>
    5df0:	00042783          	lw	a5,0(s0)
    5df4:	00442703          	lw	a4,4(s0)
	r[1] = 0xffffffff;
    5df8:	fff00693          	li	a3,-1
	set_mtimecmp(last_count + CYC_PER_TICK);
    5dfc:	00f507b3          	add	a5,a0,a5
    5e00:	00a7b533          	sltu	a0,a5,a0
    5e04:	00e50533          	add	a0,a0,a4
	r[1] = 0xffffffff;
    5e08:	80001737          	lui	a4,0x80001
    5e0c:	02d72623          	sw	a3,44(a4) # 8000102c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000102d>
	r[0] = (uint32_t)time;
    5e10:	02f72423          	sw	a5,40(a4)
	r[1] = (uint32_t)(time >> 32);
    5e14:	02a72623          	sw	a0,44(a4)
	irq_enable(RISCV_MACHINE_TIMER_IRQ);
    5e18:	00700513          	li	a0,7
    5e1c:	929ff0ef          	jal	ra,5744 <arch_irq_enable>
	return 0;
}
    5e20:	00c12083          	lw	ra,12(sp)
    5e24:	00812403          	lw	s0,8(sp)
    5e28:	00000513          	li	a0,0
    5e2c:	01010113          	addi	sp,sp,16
    5e30:	00008067          	ret

00005e34 <sys_clock_set_timeout>:
	}

	set_mtimecmp(cyc + last_count);
	k_spin_unlock(&lock, key);
#endif
}
    5e34:	00008067          	ret

00005e38 <sys_clock_elapsed>:
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = ((uint32_t)mtime() - (uint32_t)last_count) / CYC_PER_TICK;

	k_spin_unlock(&lock, key);
	return ret;
}
    5e38:	00000513          	li	a0,0
    5e3c:	00008067          	ret

00005e40 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    5e40:	00008067          	ret

00005e44 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5e44:	00251713          	slli	a4,a0,0x2
    5e48:	0000d7b7          	lui	a5,0xd
    5e4c:	00150513          	addi	a0,a0,1
    5e50:	e7c78793          	addi	a5,a5,-388 # ce7c <levels.0>
    5e54:	00251513          	slli	a0,a0,0x2
{
    5e58:	fe010113          	addi	sp,sp,-32
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5e5c:	00e78733          	add	a4,a5,a4
    5e60:	00a78533          	add	a0,a5,a0
{
    5e64:	00812c23          	sw	s0,24(sp)
    5e68:	01212823          	sw	s2,16(sp)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5e6c:	00072403          	lw	s0,0(a4)
    5e70:	00052903          	lw	s2,0(a0)
{
    5e74:	01312623          	sw	s3,12(sp)
    5e78:	00112e23          	sw	ra,28(sp)
    5e7c:	00912a23          	sw	s1,20(sp)
					rc = -rc;
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    5e80:	0ff00993          	li	s3,255
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5e84:	03246063          	bltu	s0,s2,5ea4 <z_sys_init_run_level+0x60>
			}
			dev->state->initialized = true;
		}
	}
}
    5e88:	01c12083          	lw	ra,28(sp)
    5e8c:	01812403          	lw	s0,24(sp)
    5e90:	01412483          	lw	s1,20(sp)
    5e94:	01012903          	lw	s2,16(sp)
    5e98:	00c12983          	lw	s3,12(sp)
    5e9c:	02010113          	addi	sp,sp,32
    5ea0:	00008067          	ret
		const struct device *dev = entry->dev;
    5ea4:	00442483          	lw	s1,4(s0)
		int rc = entry->init(dev);
    5ea8:	00042783          	lw	a5,0(s0)
    5eac:	00048513          	mv	a0,s1
    5eb0:	000780e7          	jalr	a5
		if (dev != NULL) {
    5eb4:	02048863          	beqz	s1,5ee4 <z_sys_init_run_level+0xa0>
				dev->state->init_res = rc;
    5eb8:	00c4a783          	lw	a5,12(s1)
			if (rc != 0) {
    5ebc:	00050e63          	beqz	a0,5ed8 <z_sys_init_run_level+0x94>
				if (rc < 0) {
    5ec0:	41f55713          	srai	a4,a0,0x1f
    5ec4:	00a74533          	xor	a0,a4,a0
    5ec8:	40e50533          	sub	a0,a0,a4
				dev->state->init_res = rc;
    5ecc:	00a9d463          	bge	s3,a0,5ed4 <z_sys_init_run_level+0x90>
    5ed0:	0ff00513          	li	a0,255
    5ed4:	00a78023          	sb	a0,0(a5)
			dev->state->initialized = true;
    5ed8:	0007d703          	lhu	a4,0(a5)
    5edc:	10076713          	ori	a4,a4,256
    5ee0:	00e79023          	sh	a4,0(a5)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5ee4:	00840413          	addi	s0,s0,8
    5ee8:	f9dff06f          	j	5e84 <z_sys_init_run_level+0x40>

00005eec <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    5eec:	00050e63          	beqz	a0,5f08 <z_device_ready+0x1c>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    5ef0:	00c52783          	lw	a5,12(a0)
    5ef4:	0007a503          	lw	a0,0(a5)
    5ef8:	1ff57513          	andi	a0,a0,511
    5efc:	f0050513          	addi	a0,a0,-256
    5f00:	00153513          	seqz	a0,a0
    5f04:	00008067          	ret
		return false;
    5f08:	00000513          	li	a0,0
}
    5f0c:	00008067          	ret

00005f10 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    5f10:	0000f7b7          	lui	a5,0xf
    5f14:	5807a503          	lw	a0,1408(a5) # f580 <_kernel+0x8>
}
    5f18:	07050513          	addi	a0,a0,112
    5f1c:	00008067          	ret

00005f20 <arch_system_halt>:
	__asm__ volatile ("csrrc %0, mstatus, %1"
    5f20:	00800793          	li	a5,8
    5f24:	3007b7f3          	csrrc	a5,mstatus,a5
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
    5f28:	0000006f          	j	5f28 <arch_system_halt+0x8>

00005f2c <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    5f2c:	ff010113          	addi	sp,sp,-16
    5f30:	00112623          	sw	ra,12(sp)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    5f34:	fedff0ef          	jal	ra,5f20 <arch_system_halt>

00005f38 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5f38:	fe010113          	addi	sp,sp,-32
    5f3c:	00812c23          	sw	s0,24(sp)
    5f40:	01212823          	sw	s2,16(sp)
    5f44:	00112e23          	sw	ra,28(sp)
    5f48:	00912a23          	sw	s1,20(sp)
    5f4c:	00050913          	mv	s2,a0
    5f50:	00b12623          	sw	a1,12(sp)
    5f54:	00800413          	li	s0,8
    5f58:	30043473          	csrrc	s0,mstatus,s0
	return z_impl_z_current_get();
    5f5c:	2e4010ef          	jal	ra,7240 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    5f60:	00c12583          	lw	a1,12(sp)
    5f64:	00050493          	mv	s1,a0
    5f68:	00090513          	mv	a0,s2
    5f6c:	fc1ff0ef          	jal	ra,5f2c <k_sys_fatal_error_handler>
	key = (mstatus & MSTATUS_IEN);
    5f70:	00847413          	andi	s0,s0,8
	__asm__ volatile ("csrrs %0, mstatus, %1"
    5f74:	30042473          	csrrs	s0,mstatus,s0
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    5f78:	01812403          	lw	s0,24(sp)
    5f7c:	01c12083          	lw	ra,28(sp)
    5f80:	01012903          	lw	s2,16(sp)
	z_impl_k_thread_abort(thread);
    5f84:	00048513          	mv	a0,s1
    5f88:	01412483          	lw	s1,20(sp)
    5f8c:	02010113          	addi	sp,sp,32
    5f90:	3b00106f          	j	7340 <z_impl_k_thread_abort>

00005f94 <init_idle_thread>:
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    5f94:	01800693          	li	a3,24
    5f98:	02d506b3          	mul	a3,a0,a3
{
    5f9c:	fe010113          	addi	sp,sp,-32
    5fa0:	00812c23          	sw	s0,24(sp)
	z_setup_new_thread(thread, stack,
    5fa4:	0000f737          	lui	a4,0xf
	struct k_thread *thread = &z_idle_threads[i];
    5fa8:	0000f437          	lui	s0,0xf
	k_thread_stack_t *stack = z_idle_stacks[i];
    5fac:	00951313          	slli	t1,a0,0x9
	struct k_thread *thread = &z_idle_threads[i];
    5fb0:	27840413          	addi	s0,s0,632 # f278 <z_idle_threads>
    5fb4:	00751513          	slli	a0,a0,0x7
	z_setup_new_thread(thread, stack,
    5fb8:	57870713          	addi	a4,a4,1400 # f578 <_kernel>
    5fbc:	000205b7          	lui	a1,0x20
	struct k_thread *thread = &z_idle_threads[i];
    5fc0:	00a40433          	add	s0,s0,a0
	z_setup_new_thread(thread, stack,
    5fc4:	00100793          	li	a5,1
    5fc8:	00d70733          	add	a4,a4,a3
    5fcc:	9a058593          	addi	a1,a1,-1632 # 1f9a0 <z_idle_stacks>
    5fd0:	000066b7          	lui	a3,0x6
    5fd4:	00f12023          	sw	a5,0(sp)
    5fd8:	00012223          	sw	zero,4(sp)
    5fdc:	00000793          	li	a5,0
    5fe0:	00040513          	mv	a0,s0
    5fe4:	00f00893          	li	a7,15
    5fe8:	00000813          	li	a6,0
    5fec:	39068693          	addi	a3,a3,912 # 6390 <idle>
    5ff0:	20000613          	li	a2,512
    5ff4:	006585b3          	add	a1,a1,t1
{
    5ff8:	00112e23          	sw	ra,28(sp)
	z_setup_new_thread(thread, stack,
    5ffc:	174000ef          	jal	ra,6170 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6000:	00d44783          	lbu	a5,13(s0)
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    6004:	01c12083          	lw	ra,28(sp)
    6008:	ffb7f793          	andi	a5,a5,-5
    600c:	00f406a3          	sb	a5,13(s0)
    6010:	01812403          	lw	s0,24(sp)
    6014:	02010113          	addi	sp,sp,32
    6018:	00008067          	ret

0000601c <bg_thread_main>:
{
    601c:	ff010113          	addi	sp,sp,-16
	z_sys_post_kernel = true;
    6020:	0000d7b7          	lui	a5,0xd
    6024:	00100713          	li	a4,1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    6028:	00200513          	li	a0,2
{
    602c:	00112623          	sw	ra,12(sp)
	z_sys_post_kernel = true;
    6030:	26e78a23          	sb	a4,628(a5) # d274 <z_sys_post_kernel>
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    6034:	e11ff0ef          	jal	ra,5e44 <z_sys_init_run_level>
	boot_banner();
    6038:	7f4010ef          	jal	ra,782c <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    603c:	00300513          	li	a0,3
    6040:	e05ff0ef          	jal	ra,5e44 <z_sys_init_run_level>
	z_init_static_threads();
    6044:	234000ef          	jal	ra,6278 <z_init_static_threads>
	main();
    6048:	820fe0ef          	jal	ra,4068 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    604c:	0000f7b7          	lui	a5,0xf
    6050:	2f878793          	addi	a5,a5,760 # f2f8 <z_main_thread>
    6054:	00c7c703          	lbu	a4,12(a5)
    6058:	ffe77713          	andi	a4,a4,-2
    605c:	00e78623          	sb	a4,12(a5)
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    6060:	00c12083          	lw	ra,12(sp)
    6064:	01010113          	addi	sp,sp,16
    6068:	00008067          	ret

0000606c <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    606c:	0000d537          	lui	a0,0xd

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    6070:	0000f7b7          	lui	a5,0xf
    6074:	23050613          	addi	a2,a0,560 # d230 <last_count>
    6078:	59c78793          	addi	a5,a5,1436 # f59c <sched_spinlock>
    607c:	40c78633          	sub	a2,a5,a2
    6080:	00000593          	li	a1,0
    6084:	23050513          	addi	a0,a0,560
    6088:	c3cfd06f          	j	34c4 <memset>

0000608c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    608c:	f6010113          	addi	sp,sp,-160
    6090:	08812c23          	sw	s0,152(sp)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    6094:	10100793          	li	a5,257
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    6098:	0000f437          	lui	s0,0xf
    609c:	57840413          	addi	s0,s0,1400 # f578 <_kernel>
	dummy_thread->base.user_options = K_ESSENTIAL;
    60a0:	00f11e23          	sh	a5,28(sp)
	_current_cpu->current = dummy_thread;
    60a4:	01010793          	addi	a5,sp,16
    60a8:	08112e23          	sw	ra,156(sp)
    60ac:	00f42423          	sw	a5,8(s0)
    60b0:	08912a23          	sw	s1,148(sp)
    60b4:	09212823          	sw	s2,144(sp)
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    60b8:	d89ff0ef          	jal	ra,5e40 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    60bc:	00000513          	li	a0,0
    60c0:	d85ff0ef          	jal	ra,5e44 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    60c4:	00100513          	li	a0,1
    60c8:	d7dff0ef          	jal	ra,5e44 <z_sys_init_run_level>
	z_sched_init();
    60cc:	745000ef          	jal	ra,7010 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    60d0:	0000d7b7          	lui	a5,0xd
    60d4:	e9078793          	addi	a5,a5,-368 # ce90 <levels.0+0x14>
	_kernel.ready_q.cache = &z_main_thread;
    60d8:	0000f4b7          	lui	s1,0xf
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    60dc:	00f12223          	sw	a5,4(sp)
    60e0:	000066b7          	lui	a3,0x6
    60e4:	00100793          	li	a5,1
    60e8:	0001f5b7          	lui	a1,0x1f
	_kernel.ready_q.cache = &z_main_thread;
    60ec:	2f848913          	addi	s2,s1,760 # f2f8 <z_main_thread>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    60f0:	00000893          	li	a7,0
    60f4:	00000813          	li	a6,0
    60f8:	00000713          	li	a4,0
    60fc:	01c68693          	addi	a3,a3,28 # 601c <bg_thread_main>
    6100:	40000613          	li	a2,1024
    6104:	5a058593          	addi	a1,a1,1440 # 1f5a0 <z_main_stack>
    6108:	00f12023          	sw	a5,0(sp)
    610c:	2f848513          	addi	a0,s1,760
    6110:	00000793          	li	a5,0
	_kernel.ready_q.cache = &z_main_thread;
    6114:	01242c23          	sw	s2,24(s0)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    6118:	058000ef          	jal	ra,6170 <z_setup_new_thread>
    611c:	00d94783          	lbu	a5,13(s2)
	z_ready_thread(&z_main_thread);
    6120:	2f848513          	addi	a0,s1,760
    6124:	ffb7f793          	andi	a5,a5,-5
    6128:	00f906a3          	sb	a5,13(s2)
    612c:	1dd000ef          	jal	ra,6b08 <z_ready_thread>
		init_idle_thread(i);
    6130:	00000513          	li	a0,0
    6134:	e61ff0ef          	jal	ra,5f94 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    6138:	0000f7b7          	lui	a5,0xf
    613c:	27878793          	addi	a5,a5,632 # f278 <z_idle_threads>
    6140:	00f42623          	sw	a5,12(s0)
		_kernel.cpus[i].irq_stack =
    6144:	000207b7          	lui	a5,0x20
    6148:	3a078793          	addi	a5,a5,928 # 203a0 <W1>
		_kernel.cpus[i].id = i;
    614c:	00040a23          	sb	zero,20(s0)
		_kernel.cpus[i].irq_stack =
    6150:	00f42223          	sw	a5,4(s0)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    6154:	00800513          	li	a0,8
    6158:	30053573          	csrrc	a0,mstatus,a0
	ret = arch_swap(key);
    615c:	00857513          	andi	a0,a0,8
    6160:	96cfa0ef          	jal	ra,2cc <arch_swap>

00006164 <z_impl_k_thread_name_set>:

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    6164:	fa800513          	li	a0,-88
    6168:	00008067          	ret

0000616c <z_impl_k_thread_start>:

void z_impl_k_thread_start(struct k_thread *thread)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_thread, start, thread);

	z_sched_start(thread);
    616c:	1cd0006f          	j	6b38 <z_sched_start>

00006170 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    6170:	ff010113          	addi	sp,sp,-16
    6174:	00812423          	sw	s0,8(sp)
    6178:	00912223          	sw	s1,4(sp)
    617c:	00112623          	sw	ra,12(sp)
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    6180:	06850313          	addi	t1,a0,104
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    6184:	06652423          	sw	t1,104(a0)
	list->tail = (sys_dnode_t *)list;
    6188:	06652623          	sw	t1,108(a0)
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    618c:	01012303          	lw	t1,16(sp)
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6190:	00f60613          	addi	a2,a2,15
    6194:	ff067613          	andi	a2,a2,-16
	stack_ptr = (char *)stack + stack_obj_size;
    6198:	00c584b3          	add	s1,a1,a2
	thread_base->user_options = (uint8_t)options;
    619c:	00650623          	sb	t1,12(a0)
	thread_base->thread_state = (uint8_t)initial_state;
    61a0:	00400313          	li	t1,4
	thread_base->pended_on = NULL;
    61a4:	00052423          	sw	zero,8(a0)
	thread_base->thread_state = (uint8_t)initial_state;
    61a8:	006506a3          	sb	t1,13(a0)

	thread_base->prio = priority;
    61ac:	01150723          	sb	a7,14(a0)

	thread_base->sched_locked = 0U;
    61b0:	000507a3          	sb	zero,15(a0)
 * @return N/A
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
    61b4:	00052c23          	sw	zero,24(a0)
	node->prev = NULL;
    61b8:	00052e23          	sw	zero,28(a0)
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    61bc:	00048613          	mv	a2,s1
{
    61c0:	00050413          	mv	s0,a0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    61c4:	9dcff0ef          	jal	ra,53a0 <arch_new_thread>
	new_thread->resource_pool = _current->resource_pool;
    61c8:	0000f7b7          	lui	a5,0xf
    61cc:	5807a783          	lw	a5,1408(a5) # f580 <_kernel+0x8>
}
    61d0:	00c12083          	lw	ra,12(sp)
	new_thread->init_data = NULL;
    61d4:	06042223          	sw	zero,100(s0)
	new_thread->resource_pool = _current->resource_pool;
    61d8:	0747a783          	lw	a5,116(a5)
}
    61dc:	00048513          	mv	a0,s1
    61e0:	00412483          	lw	s1,4(sp)
	new_thread->resource_pool = _current->resource_pool;
    61e4:	06f42a23          	sw	a5,116(s0)
}
    61e8:	00812403          	lw	s0,8(sp)
    61ec:	01010113          	addi	sp,sp,16
    61f0:	00008067          	ret

000061f4 <z_impl_k_thread_create>:
{
    61f4:	fe010113          	addi	sp,sp,-32
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    61f8:	02012303          	lw	t1,32(sp)
{
    61fc:	01212823          	sw	s2,16(sp)
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    6200:	00012223          	sw	zero,4(sp)
{
    6204:	02812903          	lw	s2,40(sp)
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    6208:	00612023          	sw	t1,0(sp)
{
    620c:	00812c23          	sw	s0,24(sp)
    6210:	00912a23          	sw	s1,20(sp)
    6214:	00112e23          	sw	ra,28(sp)
    6218:	02c12483          	lw	s1,44(sp)
    621c:	00050413          	mv	s0,a0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    6220:	f51ff0ef          	jal	ra,6170 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    6224:	fff00693          	li	a3,-1
    6228:	00d91463          	bne	s2,a3,6230 <z_impl_k_thread_create+0x3c>
    622c:	01248a63          	beq	s1,s2,6240 <z_impl_k_thread_create+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    6230:	0124e7b3          	or	a5,s1,s2
    6234:	02079463          	bnez	a5,625c <z_impl_k_thread_create+0x68>
	z_sched_start(thread);
    6238:	00040513          	mv	a0,s0
    623c:	0fd000ef          	jal	ra,6b38 <z_sched_start>
}
    6240:	01c12083          	lw	ra,28(sp)
    6244:	00040513          	mv	a0,s0
    6248:	01812403          	lw	s0,24(sp)
    624c:	01412483          	lw	s1,20(sp)
    6250:	01012903          	lw	s2,16(sp)
    6254:	02010113          	addi	sp,sp,32
    6258:	00008067          	ret

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    625c:	000075b7          	lui	a1,0x7
    6260:	00090613          	mv	a2,s2
    6264:	00048693          	mv	a3,s1
    6268:	bd858593          	addi	a1,a1,-1064 # 6bd8 <z_thread_timeout>
    626c:	01840513          	addi	a0,s0,24
    6270:	1d4010ef          	jal	ra,7444 <z_add_timeout>
    6274:	fcdff06f          	j	6240 <z_impl_k_thread_create+0x4c>

00006278 <z_init_static_threads>:
{
    6278:	fd010113          	addi	sp,sp,-48
	_FOREACH_STATIC_THREAD(thread_data) {
    627c:	002137b7          	lui	a5,0x213
{
    6280:	03212023          	sw	s2,32(sp)
	_FOREACH_STATIC_THREAD(thread_data) {
    6284:	00213937          	lui	s2,0x213
{
    6288:	02812423          	sw	s0,40(sp)
    628c:	02912223          	sw	s1,36(sp)
    6290:	02112623          	sw	ra,44(sp)
    6294:	01312e23          	sw	s3,28(sp)
    6298:	01412c23          	sw	s4,24(sp)
    629c:	01512a23          	sw	s5,20(sp)
	_FOREACH_STATIC_THREAD(thread_data) {
    62a0:	7b078413          	addi	s0,a5,1968 # 2137b0 <__lock___malloc_recursive_mutex>
    62a4:	7b078493          	addi	s1,a5,1968
    62a8:	7b090913          	addi	s2,s2,1968 # 2137b0 <__lock___malloc_recursive_mutex>
    62ac:	05246063          	bltu	s0,s2,62ec <z_init_static_threads+0x74>
	k_sched_lock();
    62b0:	598000ef          	jal	ra,6848 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    62b4:	00048413          	mv	s0,s1
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    62b8:	fff00993          	li	s3,-1
		t += off;
    62bc:	00900a13          	li	s4,9
    62c0:	00007ab7          	lui	s5,0x7
	_FOREACH_STATIC_THREAD(thread_data) {
    62c4:	07246663          	bltu	s0,s2,6330 <z_init_static_threads+0xb8>
}
    62c8:	02812403          	lw	s0,40(sp)
    62cc:	02c12083          	lw	ra,44(sp)
    62d0:	02412483          	lw	s1,36(sp)
    62d4:	02012903          	lw	s2,32(sp)
    62d8:	01c12983          	lw	s3,28(sp)
    62dc:	01812a03          	lw	s4,24(sp)
    62e0:	01412a83          	lw	s5,20(sp)
    62e4:	03010113          	addi	sp,sp,48
	k_sched_unlock();
    62e8:	4910006f          	j	6f78 <k_sched_unlock>
		z_setup_new_thread(
    62ec:	02c42783          	lw	a5,44(s0)
    62f0:	00f12223          	sw	a5,4(sp)
    62f4:	02042783          	lw	a5,32(s0)
    62f8:	00f12023          	sw	a5,0(sp)
    62fc:	01442783          	lw	a5,20(s0)
    6300:	01c42883          	lw	a7,28(s0)
    6304:	01842803          	lw	a6,24(s0)
    6308:	01042703          	lw	a4,16(s0)
    630c:	00c42683          	lw	a3,12(s0)
    6310:	00842603          	lw	a2,8(s0)
    6314:	00442583          	lw	a1,4(s0)
    6318:	00042503          	lw	a0,0(s0)
    631c:	e55ff0ef          	jal	ra,6170 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    6320:	00042783          	lw	a5,0(s0)
    6324:	0687a223          	sw	s0,100(a5)
	_FOREACH_STATIC_THREAD(thread_data) {
    6328:	03040413          	addi	s0,s0,48
    632c:	f81ff06f          	j	62ac <z_init_static_threads+0x34>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    6330:	02442783          	lw	a5,36(s0)
    6334:	03378863          	beq	a5,s3,6364 <z_init_static_threads+0xec>
			schedule_new_thread(thread_data->init_thread,
    6338:	00042483          	lw	s1,0(s0)
					    K_MSEC(thread_data->init_delay));
    633c:	0007d463          	bgez	a5,6344 <z_init_static_threads+0xcc>
    6340:	00000793          	li	a5,0
    6344:	00978513          	addi	a0,a5,9
    6348:	41f7d593          	srai	a1,a5,0x1f
    634c:	00f537b3          	sltu	a5,a0,a5
    6350:	00b785b3          	add	a1,a5,a1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    6354:	01451c63          	bne	a0,s4,636c <z_init_static_threads+0xf4>
    6358:	00059a63          	bnez	a1,636c <z_init_static_threads+0xf4>
	z_sched_start(thread);
    635c:	00048513          	mv	a0,s1
    6360:	7d8000ef          	jal	ra,6b38 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    6364:	03040413          	addi	s0,s0,48
    6368:	f5dff06f          	j	62c4 <z_init_static_threads+0x4c>
			return t / ((uint64_t)from_hz / to_hz);
    636c:	00a00613          	li	a2,10
    6370:	00000693          	li	a3,0
    6374:	fc9f90ef          	jal	ra,33c <__udivdi3>
    6378:	00050613          	mv	a2,a0
    637c:	00058693          	mv	a3,a1
    6380:	01848513          	addi	a0,s1,24
    6384:	bd8a8593          	addi	a1,s5,-1064 # 6bd8 <z_thread_timeout>
    6388:	0bc010ef          	jal	ra,7444 <z_add_timeout>
    638c:	fd9ff06f          	j	6364 <z_init_static_threads+0xec>

00006390 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    6390:	ff010113          	addi	sp,sp,-16
    6394:	00812423          	sw	s0,8(sp)
    6398:	00112623          	sw	ra,12(sp)
    639c:	00800413          	li	s0,8
    63a0:	300437f3          	csrrc	a5,mstatus,s0
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    63a4:	f6dfe0ef          	jal	ra,5310 <arch_cpu_idle>
    63a8:	ff9ff06f          	j	63a0 <idle+0x10>

000063ac <adjust_owner_prio.isra.0>:
	return new_prio;
}

static bool adjust_owner_prio(struct k_mutex *mutex, int32_t new_prio)
{
	if (mutex->owner->base.prio != new_prio) {
    63ac:	00e50783          	lb	a5,14(a0)
    63b0:	00b78463          	beq	a5,a1,63b8 <adjust_owner_prio.isra.0+0xc>
		LOG_DBG("%p (ready (y/n): %c) prio changed to %d (was %d)",
			mutex->owner, z_is_thread_ready(mutex->owner) ?
			'y' : 'n',
			new_prio, mutex->owner->base.prio);

		return z_set_prio(mutex->owner, new_prio);
    63b4:	21d0006f          	j	6dd0 <z_set_prio>
	}
	return false;
}
    63b8:	00000513          	li	a0,0
    63bc:	00008067          	ret

000063c0 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
    63c0:	00052423          	sw	zero,8(a0)
	mutex->lock_count = 0U;
    63c4:	00052623          	sw	zero,12(a0)
	list->head = (sys_dnode_t *)list;
    63c8:	00a52023          	sw	a0,0(a0)
	list->tail = (sys_dnode_t *)list;
    63cc:	00a52223          	sw	a0,4(a0)
}
    63d0:	00000513          	li	a0,0
    63d4:	00008067          	ret

000063d8 <z_impl_k_mutex_lock>:

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    63d8:	fd010113          	addi	sp,sp,-48
    63dc:	02812423          	sw	s0,40(sp)
    63e0:	02912223          	sw	s1,36(sp)
    63e4:	02112623          	sw	ra,44(sp)
    63e8:	03212023          	sw	s2,32(sp)
    63ec:	01312e23          	sw	s3,28(sp)
    63f0:	00050413          	mv	s0,a0
    63f4:	00060713          	mv	a4,a2
    63f8:	00800493          	li	s1,8
    63fc:	3004b4f3          	csrrc	s1,mstatus,s1

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    6400:	00c52603          	lw	a2,12(a0)
    6404:	0000f7b7          	lui	a5,0xf
	key = (mstatus & MSTATUS_IEN);
    6408:	0084f493          	andi	s1,s1,8
    640c:	57878793          	addi	a5,a5,1400 # f578 <_kernel>
    6410:	02060463          	beqz	a2,6438 <z_impl_k_mutex_lock+0x60>
    6414:	00058693          	mv	a3,a1
    6418:	00852503          	lw	a0,8(a0)
    641c:	0087a583          	lw	a1,8(a5)
    6420:	04b50c63          	beq	a0,a1,6478 <z_impl_k_mutex_lock+0xa0>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    6424:	00e6e7b3          	or	a5,a3,a4
    6428:	04079c63          	bnez	a5,6480 <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    642c:	3004a4f3          	csrrs	s1,mstatus,s1
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    6430:	ff000513          	li	a0,-16
    6434:	0280006f          	j	645c <z_impl_k_mutex_lock+0x84>
					_current->base.prio :
    6438:	0087a703          	lw	a4,8(a5)
    643c:	00e70703          	lb	a4,14(a4)
		mutex->owner = _current;
    6440:	0087a783          	lw	a5,8(a5)
		mutex->lock_count++;
    6444:	00160613          	addi	a2,a2,1
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    6448:	00e42823          	sw	a4,16(s0)
		mutex->lock_count++;
    644c:	00c42623          	sw	a2,12(s0)
		mutex->owner = _current;
    6450:	00f42423          	sw	a5,8(s0)
    6454:	3004a4f3          	csrrs	s1,mstatus,s1
		return 0;
    6458:	00000513          	li	a0,0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    645c:	02c12083          	lw	ra,44(sp)
    6460:	02812403          	lw	s0,40(sp)
    6464:	02412483          	lw	s1,36(sp)
    6468:	02012903          	lw	s2,32(sp)
    646c:	01c12983          	lw	s3,28(sp)
    6470:	03010113          	addi	sp,sp,48
    6474:	00008067          	ret
					_current->base.prio :
    6478:	01042703          	lw	a4,16(s0)
    647c:	fc5ff06f          	j	6440 <z_impl_k_mutex_lock+0x68>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    6480:	00e50783          	lb	a5,14(a0)
    6484:	00e58583          	lb	a1,14(a1)
    6488:	00b7d463          	bge	a5,a1,6490 <z_impl_k_mutex_lock+0xb8>
    648c:	00078593          	mv	a1,a5
    6490:	f8100613          	li	a2,-127
    6494:	00c5d463          	bge	a1,a2,649c <z_impl_k_mutex_lock+0xc4>
    6498:	f8100593          	li	a1,-127
	bool resched = false;
    649c:	00000993          	li	s3,0
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    64a0:	00f5de63          	bge	a1,a5,64bc <z_impl_k_mutex_lock+0xe4>
    64a4:	00e12623          	sw	a4,12(sp)
    64a8:	00d12423          	sw	a3,8(sp)
		resched = adjust_owner_prio(mutex, new_prio);
    64ac:	f01ff0ef          	jal	ra,63ac <adjust_owner_prio.isra.0>
    64b0:	00c12703          	lw	a4,12(sp)
    64b4:	00812683          	lw	a3,8(sp)
    64b8:	00050993          	mv	s3,a0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    64bc:	0000f937          	lui	s2,0xf
    64c0:	00040613          	mv	a2,s0
    64c4:	00048593          	mv	a1,s1
    64c8:	59c90513          	addi	a0,s2,1436 # f59c <sched_spinlock>
    64cc:	0c1000ef          	jal	ra,6d8c <z_pend_curr>
	if (got_mutex == 0) {
    64d0:	f80506e3          	beqz	a0,645c <z_impl_k_mutex_lock+0x84>
	__asm__ volatile ("csrrc %0, mstatus, %1"
    64d4:	00800493          	li	s1,8
    64d8:	3004b4f3          	csrrc	s1,mstatus,s1
	if (likely(mutex->owner != NULL)) {
    64dc:	00842503          	lw	a0,8(s0)
	key = (mstatus & MSTATUS_IEN);
    64e0:	0084f493          	andi	s1,s1,8
    64e4:	02050a63          	beqz	a0,6518 <z_impl_k_mutex_lock+0x140>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    64e8:	00042783          	lw	a5,0(s0)
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    64ec:	01042583          	lw	a1,16(s0)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    64f0:	02f40063          	beq	s0,a5,6510 <z_impl_k_mutex_lock+0x138>
    64f4:	00078e63          	beqz	a5,6510 <z_impl_k_mutex_lock+0x138>
    64f8:	00e78783          	lb	a5,14(a5)
    64fc:	00b7d463          	bge	a5,a1,6504 <z_impl_k_mutex_lock+0x12c>
    6500:	00078593          	mv	a1,a5
    6504:	f8100793          	li	a5,-127
    6508:	00f5d463          	bge	a1,a5,6510 <z_impl_k_mutex_lock+0x138>
    650c:	f8100593          	li	a1,-127
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    6510:	e9dff0ef          	jal	ra,63ac <adjust_owner_prio.isra.0>
    6514:	00051463          	bnez	a0,651c <z_impl_k_mutex_lock+0x144>
	if (resched) {
    6518:	00098c63          	beqz	s3,6530 <z_impl_k_mutex_lock+0x158>
		z_reschedule(&lock, key);
    651c:	00048593          	mv	a1,s1
    6520:	59c90513          	addi	a0,s2,1436
    6524:	2c0000ef          	jal	ra,67e4 <z_reschedule>
	return -EAGAIN;
    6528:	ff500513          	li	a0,-11
    652c:	f31ff06f          	j	645c <z_impl_k_mutex_lock+0x84>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    6530:	3004a4f3          	csrrs	s1,mstatus,s1
    6534:	ff5ff06f          	j	6528 <z_impl_k_mutex_lock+0x150>

00006538 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    6538:	00852783          	lw	a5,8(a0)
    653c:	0a078e63          	beqz	a5,65f8 <z_impl_k_mutex_unlock+0xc0>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    6540:	0000f737          	lui	a4,0xf
    6544:	58072703          	lw	a4,1408(a4) # f580 <_kernel+0x8>
{
    6548:	ff010113          	addi	sp,sp,-16
    654c:	00812423          	sw	s0,8(sp)
    6550:	00112623          	sw	ra,12(sp)
    6554:	00912223          	sw	s1,4(sp)
    6558:	00050413          	mv	s0,a0
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, -EPERM);

		return -EPERM;
    655c:	fff00513          	li	a0,-1
	CHECKIF(mutex->owner != _current) {
    6560:	02e79663          	bne	a5,a4,658c <z_impl_k_mutex_unlock+0x54>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    6564:	00f7c703          	lbu	a4,15(a5)
    6568:	fff70713          	addi	a4,a4,-1
    656c:	00e787a3          	sb	a4,15(a5)

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    6570:	00c42783          	lw	a5,12(s0)
    6574:	00100713          	li	a4,1
    6578:	02f77463          	bgeu	a4,a5,65a0 <z_impl_k_mutex_unlock+0x68>
		mutex->lock_count--;
    657c:	fff78793          	addi	a5,a5,-1
    6580:	00f42623          	sw	a5,12(s0)


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    6584:	1f5000ef          	jal	ra,6f78 <k_sched_unlock>

	return 0;
    6588:	00000513          	li	a0,0
}
    658c:	00c12083          	lw	ra,12(sp)
    6590:	00812403          	lw	s0,8(sp)
    6594:	00412483          	lw	s1,4(sp)
    6598:	01010113          	addi	sp,sp,16
    659c:	00008067          	ret
	__asm__ volatile ("csrrc %0, mstatus, %1"
    65a0:	00800493          	li	s1,8
    65a4:	3004b4f3          	csrrc	s1,mstatus,s1
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    65a8:	01042583          	lw	a1,16(s0)
    65ac:	00842503          	lw	a0,8(s0)
	key = (mstatus & MSTATUS_IEN);
    65b0:	0084f493          	andi	s1,s1,8
    65b4:	df9ff0ef          	jal	ra,63ac <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    65b8:	00040513          	mv	a0,s0
    65bc:	205000ef          	jal	ra,6fc0 <z_unpend_first_thread>
	mutex->owner = new_owner;
    65c0:	00a42423          	sw	a0,8(s0)
	if (new_owner != NULL) {
    65c4:	02050463          	beqz	a0,65ec <z_impl_k_mutex_unlock+0xb4>
		mutex->owner_orig_prio = new_owner->base.prio;
    65c8:	00e50703          	lb	a4,14(a0)
    65cc:	00e42823          	sw	a4,16(s0)
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    65d0:	06052c23          	sw	zero,120(a0)
		z_ready_thread(new_owner);
    65d4:	534000ef          	jal	ra,6b08 <z_ready_thread>
		z_reschedule(&lock, key);
    65d8:	0000f537          	lui	a0,0xf
    65dc:	00048593          	mv	a1,s1
    65e0:	59c50513          	addi	a0,a0,1436 # f59c <sched_spinlock>
    65e4:	200000ef          	jal	ra,67e4 <z_reschedule>
    65e8:	f9dff06f          	j	6584 <z_impl_k_mutex_unlock+0x4c>
		mutex->lock_count = 0U;
    65ec:	00042623          	sw	zero,12(s0)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    65f0:	3004a4f3          	csrrs	s1,mstatus,s1
    65f4:	f91ff06f          	j	6584 <z_impl_k_mutex_unlock+0x4c>
		return -EINVAL;
    65f8:	fea00513          	li	a0,-22
}
    65fc:	00008067          	ret

00006600 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    6600:	ff010113          	addi	sp,sp,-16
    6604:	00812423          	sw	s0,8(sp)
    6608:	00912223          	sw	s1,4(sp)
    660c:	00112623          	sw	ra,12(sp)
    6610:	00050493          	mv	s1,a0
	__asm__ volatile ("csrrc %0, mstatus, %1"
    6614:	00800413          	li	s0,8
    6618:	30043473          	csrrc	s0,mstatus,s0
	key = (mstatus & MSTATUS_IEN);
    661c:	00847413          	andi	s0,s0,8
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    6620:	1a1000ef          	jal	ra,6fc0 <z_unpend_first_thread>

	if (thread != NULL) {
    6624:	02050663          	beqz	a0,6650 <z_impl_k_sem_give+0x50>
    6628:	06052c23          	sw	zero,120(a0)
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    662c:	4dc000ef          	jal	ra,6b08 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    6630:	00040593          	mv	a1,s0

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    6634:	00812403          	lw	s0,8(sp)
    6638:	00c12083          	lw	ra,12(sp)
    663c:	00412483          	lw	s1,4(sp)
	z_reschedule(&lock, key);
    6640:	0000f537          	lui	a0,0xf
    6644:	59c50513          	addi	a0,a0,1436 # f59c <sched_spinlock>
}
    6648:	01010113          	addi	sp,sp,16
	z_reschedule(&lock, key);
    664c:	1980006f          	j	67e4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    6650:	0084a703          	lw	a4,8(s1)
    6654:	00c4a783          	lw	a5,12(s1)
    6658:	40e787b3          	sub	a5,a5,a4
    665c:	00f037b3          	snez	a5,a5
    6660:	00e787b3          	add	a5,a5,a4
    6664:	00f4a423          	sw	a5,8(s1)
}
    6668:	fc9ff06f          	j	6630 <z_impl_k_sem_give+0x30>

0000666c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    666c:	00058693          	mv	a3,a1
    6670:	00060713          	mv	a4,a2
	__asm__ volatile ("csrrc %0, mstatus, %1"
    6674:	00800793          	li	a5,8
    6678:	3007b7f3          	csrrc	a5,mstatus,a5
	key = (mstatus & MSTATUS_IEN);
    667c:	0087f593          	andi	a1,a5,8

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    6680:	00852783          	lw	a5,8(a0)
    6684:	00078c63          	beqz	a5,669c <z_impl_k_sem_take+0x30>
		sem->count--;
    6688:	fff78793          	addi	a5,a5,-1
    668c:	00f52423          	sw	a5,8(a0)
	__asm__ volatile ("csrrs %0, mstatus, %1"
    6690:	3005a5f3          	csrrs	a1,mstatus,a1
		k_spin_unlock(&lock, key);
		ret = 0;
    6694:	00000513          	li	a0,0
		goto out;
    6698:	00008067          	ret
	}

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    669c:	00c6e7b3          	or	a5,a3,a2
    66a0:	00079863          	bnez	a5,66b0 <z_impl_k_sem_take+0x44>
    66a4:	3005a5f3          	csrrs	a1,mstatus,a1
		k_spin_unlock(&lock, key);
		ret = -EBUSY;
    66a8:	ff000513          	li	a0,-16

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    66ac:	00008067          	ret
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    66b0:	00050613          	mv	a2,a0
    66b4:	0000f537          	lui	a0,0xf
    66b8:	59c50513          	addi	a0,a0,1436 # f59c <sched_spinlock>
    66bc:	6d00006f          	j	6d8c <z_pend_curr>

000066c0 <sys_dlist_remove>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    66c0:	00452703          	lw	a4,4(a0)
	sys_dnode_t *const next = node->next;
    66c4:	00052783          	lw	a5,0(a0)

	prev->next = next;
    66c8:	00f72023          	sw	a5,0(a4)
	next->prev = prev;
    66cc:	00e7a223          	sw	a4,4(a5)
	node->next = NULL;
    66d0:	00052023          	sw	zero,0(a0)
	node->prev = NULL;
    66d4:	00052223          	sw	zero,4(a0)
	sys_dnode_init(node);
}
    66d8:	00008067          	ret

000066dc <unpend_thread_no_timeout>:
		pend_locked(thread, wait_q, timeout);
	}
}

static inline void unpend_thread_no_timeout(struct k_thread *thread)
{
    66dc:	ff010113          	addi	sp,sp,-16
    66e0:	00812423          	sw	s0,8(sp)
    66e4:	00112623          	sw	ra,12(sp)
    66e8:	00050413          	mv	s0,a0

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    66ec:	fd5ff0ef          	jal	ra,66c0 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    66f0:	00d44783          	lbu	a5,13(s0)
}
    66f4:	00c12083          	lw	ra,12(sp)
	thread->base.pended_on = NULL;
    66f8:	00042423          	sw	zero,8(s0)
    66fc:	ffd7f793          	andi	a5,a5,-3
    6700:	00f406a3          	sb	a5,13(s0)
}
    6704:	00812403          	lw	s0,8(sp)
    6708:	01010113          	addi	sp,sp,16
    670c:	00008067          	ret

00006710 <z_reset_time_slice>:
{
    6710:	ff010113          	addi	sp,sp,-16
    6714:	00812423          	sw	s0,8(sp)
	if (slice_time != 0) {
    6718:	0000d437          	lui	s0,0xd
    671c:	26040413          	addi	s0,s0,608 # d260 <slice_time>
    6720:	00042783          	lw	a5,0(s0)
{
    6724:	00112623          	sw	ra,12(sp)
	if (slice_time != 0) {
    6728:	02078863          	beqz	a5,6758 <z_reset_time_slice+0x48>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    672c:	f0cff0ef          	jal	ra,5e38 <sys_clock_elapsed>
    6730:	00050793          	mv	a5,a0
    6734:	00042503          	lw	a0,0(s0)
}
    6738:	00812403          	lw	s0,8(sp)
    673c:	00c12083          	lw	ra,12(sp)
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    6740:	00f507b3          	add	a5,a0,a5
    6744:	0000f737          	lui	a4,0xf
    6748:	58f72423          	sw	a5,1416(a4) # f588 <_kernel+0x10>
		z_set_timeout_expiry(slice_time, false);
    674c:	00000593          	li	a1,0
}
    6750:	01010113          	addi	sp,sp,16
		z_set_timeout_expiry(slice_time, false);
    6754:	6e50006f          	j	7638 <z_set_timeout_expiry>
}
    6758:	00c12083          	lw	ra,12(sp)
    675c:	00812403          	lw	s0,8(sp)
    6760:	01010113          	addi	sp,sp,16
    6764:	00008067          	ret

00006768 <k_sched_time_slice_set>:
{
    6768:	ff010113          	addi	sp,sp,-16
    676c:	00812423          	sw	s0,8(sp)
    6770:	00912223          	sw	s1,4(sp)
    6774:	00112623          	sw	ra,12(sp)
    6778:	00050793          	mv	a5,a0
    677c:	00058493          	mv	s1,a1
	__asm__ volatile ("csrrc %0, mstatus, %1"
    6780:	00800413          	li	s0,8
    6784:	30043473          	csrrc	s0,mstatus,s0
		_current_cpu->slice_ticks = 0;
    6788:	0000f737          	lui	a4,0xf
		t += off;
    678c:	00950513          	addi	a0,a0,9
    6790:	58072423          	sw	zero,1416(a4) # f588 <_kernel+0x10>
	key = (mstatus & MSTATUS_IEN);
    6794:	00847413          	andi	s0,s0,8
    6798:	00f535b3          	sltu	a1,a0,a5
		if (result32 && (t < BIT64(32))) {
    679c:	02f56c63          	bltu	a0,a5,67d4 <k_sched_time_slice_set+0x6c>
			return ((uint32_t)t) / (from_hz / to_hz);
    67a0:	00a00793          	li	a5,10
    67a4:	02f55533          	divu	a0,a0,a5
		slice_time = k_ms_to_ticks_ceil32(slice);
    67a8:	0000d7b7          	lui	a5,0xd
    67ac:	26a7a023          	sw	a0,608(a5) # d260 <slice_time>
		slice_max_prio = prio;
    67b0:	0000d7b7          	lui	a5,0xd
    67b4:	2497ae23          	sw	s1,604(a5) # d25c <slice_max_prio>
		z_reset_time_slice();
    67b8:	f59ff0ef          	jal	ra,6710 <z_reset_time_slice>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    67bc:	30042473          	csrrs	s0,mstatus,s0
}
    67c0:	00c12083          	lw	ra,12(sp)
    67c4:	00812403          	lw	s0,8(sp)
    67c8:	00412483          	lw	s1,4(sp)
    67cc:	01010113          	addi	sp,sp,16
    67d0:	00008067          	ret
			return t / ((uint64_t)from_hz / to_hz);
    67d4:	00a00613          	li	a2,10
    67d8:	00000693          	li	a3,0
    67dc:	b61f90ef          	jal	ra,33c <__udivdi3>
    67e0:	fc9ff06f          	j	67a8 <k_sched_time_slice_set+0x40>

000067e4 <z_reschedule>:
	 * have the single bit set).  But there is a mask applied to
	 * the argument in arch_irq_unlock() that has me worried
	 * that something elseswhere might try to set a bit?  Do it
	 * the safe way for now.
	 */
	return (key & MSTATUS_IEN) == MSTATUS_IEN;
    67e4:	0085f713          	andi	a4,a1,8
{
    67e8:	00058513          	mv	a0,a1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    67ec:	02070263          	beqz	a4,6810 <z_reschedule+0x2c>
FUNC_NORETURN void z_riscv_fatal_error(unsigned int reason,
				       const z_arch_esf_t *esf);

static inline bool arch_is_in_isr(void)
{
	return _kernel.cpus[0].nested != 0U;
    67f0:	0000f7b7          	lui	a5,0xf
    67f4:	57878793          	addi	a5,a5,1400 # f578 <_kernel>
	if (resched(key.key) && need_swap()) {
    67f8:	0007a683          	lw	a3,0(a5)
    67fc:	00069a63          	bnez	a3,6810 <z_reschedule+0x2c>
    6800:	0187a683          	lw	a3,24(a5)
    6804:	0087a783          	lw	a5,8(a5)
    6808:	00f68463          	beq	a3,a5,6810 <z_reschedule+0x2c>
    680c:	ac1f906f          	j	2cc <arch_swap>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    6810:	30072773          	csrrs	a4,mstatus,a4
}
    6814:	00008067          	ret

00006818 <z_reschedule_irqlock>:
	return (key & MSTATUS_IEN) == MSTATUS_IEN;
    6818:	00857793          	andi	a5,a0,8
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    681c:	00078a63          	beqz	a5,6830 <z_reschedule_irqlock+0x18>
	if (resched(key)) {
    6820:	0000f737          	lui	a4,0xf
    6824:	57872703          	lw	a4,1400(a4) # f578 <_kernel>
    6828:	00071463          	bnez	a4,6830 <z_reschedule_irqlock+0x18>
    682c:	aa1f906f          	j	2cc <arch_swap>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    6830:	3007a7f3          	csrrs	a5,mstatus,a5
}
    6834:	00008067          	ret

00006838 <z_reschedule_unlocked>:
	__asm__ volatile ("csrrc %0, mstatus, %1"
    6838:	00800513          	li	a0,8
    683c:	30053573          	csrrc	a0,mstatus,a0
	(void) z_reschedule_irqlock(arch_irq_lock());
    6840:	00857513          	andi	a0,a0,8
    6844:	fd5ff06f          	j	6818 <z_reschedule_irqlock>

00006848 <k_sched_lock>:
    6848:	00800793          	li	a5,8
    684c:	3007b7f3          	csrrc	a5,mstatus,a5
	--_current->base.sched_locked;
    6850:	0000f737          	lui	a4,0xf
    6854:	58072683          	lw	a3,1408(a4) # f580 <_kernel+0x8>
    6858:	00f6c703          	lbu	a4,15(a3)
    685c:	fff70713          	addi	a4,a4,-1
    6860:	00e687a3          	sb	a4,15(a3)
	key = (mstatus & MSTATUS_IEN);
    6864:	0087f793          	andi	a5,a5,8
	__asm__ volatile ("csrrs %0, mstatus, %1"
    6868:	3007a7f3          	csrrs	a5,mstatus,a5
}
    686c:	00008067          	ret

00006870 <z_priq_dumb_best>:
}

struct k_thread *z_priq_dumb_best(sys_dlist_t *pq)
{
    6870:	00050793          	mv	a5,a0
	return list->head == list;
    6874:	00052503          	lw	a0,0(a0)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6878:	00a79463          	bne	a5,a0,6880 <z_priq_dumb_best+0x10>
	struct k_thread *thread = NULL;
    687c:	00000513          	li	a0,0

	if (n != NULL) {
		thread = CONTAINER_OF(n, struct k_thread, base.qnode_dlist);
	}
	return thread;
}
    6880:	00008067          	ret

00006884 <update_cache>:
{
    6884:	ff010113          	addi	sp,sp,-16
    6888:	01212023          	sw	s2,0(sp)
    688c:	00050913          	mv	s2,a0
	thread = _priq_run_best(&_kernel.ready_q.runq);
    6890:	0000f537          	lui	a0,0xf
    6894:	59450513          	addi	a0,a0,1428 # f594 <_kernel+0x1c>
{
    6898:	00812423          	sw	s0,8(sp)
    689c:	00912223          	sw	s1,4(sp)
    68a0:	00112623          	sw	ra,12(sp)
    68a4:	0000f437          	lui	s0,0xf
	thread = _priq_run_best(&_kernel.ready_q.runq);
    68a8:	fc9ff0ef          	jal	ra,6870 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    68ac:	57840413          	addi	s0,s0,1400 # f578 <_kernel>
    68b0:	00050493          	mv	s1,a0
    68b4:	00051463          	bnez	a0,68bc <update_cache+0x38>
    68b8:	00c42483          	lw	s1,12(s0)
	if (z_is_thread_prevented_from_running(_current)) {
    68bc:	00842783          	lw	a5,8(s0)
	if (preempt_ok != 0) {
    68c0:	02091c63          	bnez	s2,68f8 <update_cache+0x74>
	if (z_is_thread_prevented_from_running(_current)) {
    68c4:	00d7c703          	lbu	a4,13(a5)
    68c8:	01f77713          	andi	a4,a4,31
    68cc:	02071663          	bnez	a4,68f8 <update_cache+0x74>
	if (is_preempt(_current) || is_metairq(thread)) {
    68d0:	00e7d683          	lhu	a3,14(a5)
    68d4:	07f00713          	li	a4,127
    68d8:	02d77063          	bgeu	a4,a3,68f8 <update_cache+0x74>
		_kernel.ready_q.cache = _current;
    68dc:	00f42c23          	sw	a5,24(s0)
}
    68e0:	00c12083          	lw	ra,12(sp)
    68e4:	00812403          	lw	s0,8(sp)
    68e8:	00412483          	lw	s1,4(sp)
    68ec:	00012903          	lw	s2,0(sp)
    68f0:	01010113          	addi	sp,sp,16
    68f4:	00008067          	ret
		if (thread != _current) {
    68f8:	00f48463          	beq	s1,a5,6900 <update_cache+0x7c>
			z_reset_time_slice();
    68fc:	e15ff0ef          	jal	ra,6710 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    6900:	00942c23          	sw	s1,24(s0)
}
    6904:	fddff06f          	j	68e0 <update_cache+0x5c>

00006908 <move_thread_to_end_of_prio_q>:
{
    6908:	ff010113          	addi	sp,sp,-16
    690c:	00812423          	sw	s0,8(sp)
    6910:	00112623          	sw	ra,12(sp)
	return (thread->base.thread_state & state) != 0U;
    6914:	00d54783          	lbu	a5,13(a0)
    6918:	00050413          	mv	s0,a0
	if (z_is_thread_queued(thread)) {
    691c:	01879713          	slli	a4,a5,0x18
    6920:	41875713          	srai	a4,a4,0x18
    6924:	00075863          	bgez	a4,6934 <move_thread_to_end_of_prio_q+0x2c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6928:	07f7f793          	andi	a5,a5,127
    692c:	00f506a3          	sb	a5,13(a0)
	sys_dlist_remove(&thread->base.qnode_dlist);
    6930:	d91ff0ef          	jal	ra,66c0 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    6934:	00d44783          	lbu	a5,13(s0)
	return list->head == list;
    6938:	0000f737          	lui	a4,0xf
    693c:	57870693          	addi	a3,a4,1400 # f578 <_kernel>
    6940:	f807e793          	ori	a5,a5,-128
    6944:	00f406a3          	sb	a5,13(s0)
    6948:	01c6a783          	lw	a5,28(a3)
	return (node == list->tail) ? NULL : node->next;
    694c:	0206a583          	lw	a1,32(a3)
    6950:	0000f6b7          	lui	a3,0xf
    6954:	59468693          	addi	a3,a3,1428 # f594 <_kernel+0x1c>
    6958:	57870713          	addi	a4,a4,1400
	return sys_dlist_is_empty(list) ? NULL : list->head;
    695c:	04d78c63          	beq	a5,a3,69b4 <move_thread_to_end_of_prio_q+0xac>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6960:	04078a63          	beqz	a5,69b4 <move_thread_to_end_of_prio_q+0xac>
	int32_t b1 = thread_1->base.prio;
    6964:	00e40503          	lb	a0,14(s0)
	int32_t b2 = thread_2->base.prio;
    6968:	00e78603          	lb	a2,14(a5)
	if (b1 != b2) {
    696c:	02c50e63          	beq	a0,a2,69a8 <move_thread_to_end_of_prio_q+0xa0>
		return b2 - b1;
    6970:	40a60633          	sub	a2,a2,a0
		if (z_sched_prio_cmp(thread, t) > 0) {
    6974:	02c05a63          	blez	a2,69a8 <move_thread_to_end_of_prio_q+0xa0>
	sys_dnode_t *const prev = successor->prev;
    6978:	0047a683          	lw	a3,4(a5)
	node->next = successor;
    697c:	00f42023          	sw	a5,0(s0)
	node->prev = prev;
    6980:	00d42223          	sw	a3,4(s0)
	prev->next = node;
    6984:	0086a023          	sw	s0,0(a3)
	successor->prev = node;
    6988:	0087a223          	sw	s0,4(a5)
	update_cache(thread == _current);
    698c:	00872503          	lw	a0,8(a4)
}
    6990:	00c12083          	lw	ra,12(sp)
	update_cache(thread == _current);
    6994:	40850533          	sub	a0,a0,s0
}
    6998:	00812403          	lw	s0,8(sp)
	update_cache(thread == _current);
    699c:	00153513          	seqz	a0,a0
}
    69a0:	01010113          	addi	sp,sp,16
	update_cache(thread == _current);
    69a4:	ee1ff06f          	j	6884 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    69a8:	00b78663          	beq	a5,a1,69b4 <move_thread_to_end_of_prio_q+0xac>
    69ac:	0007a783          	lw	a5,0(a5)
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    69b0:	fa079ce3          	bnez	a5,6968 <move_thread_to_end_of_prio_q+0x60>
	node->next = list;
    69b4:	00d42023          	sw	a3,0(s0)
	node->prev = tail;
    69b8:	00b42223          	sw	a1,4(s0)
	tail->next = node;
    69bc:	0085a023          	sw	s0,0(a1)
	list->tail = node;
    69c0:	02872023          	sw	s0,32(a4)
}
    69c4:	fc9ff06f          	j	698c <move_thread_to_end_of_prio_q+0x84>

000069c8 <z_time_slice>:
{
    69c8:	ff010113          	addi	sp,sp,-16
    69cc:	00812423          	sw	s0,8(sp)
    69d0:	00112623          	sw	ra,12(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    69d4:	00800413          	li	s0,8
    69d8:	30043473          	csrrc	s0,mstatus,s0
	if (slice_time && sliceable(_current)) {
    69dc:	0000d7b7          	lui	a5,0xd
    69e0:	2607a703          	lw	a4,608(a5) # d260 <slice_time>
    69e4:	0000f7b7          	lui	a5,0xf
	key = (mstatus & MSTATUS_IEN);
    69e8:	00847413          	andi	s0,s0,8
    69ec:	57878793          	addi	a5,a5,1400 # f578 <_kernel>
    69f0:	06070863          	beqz	a4,6a60 <z_time_slice+0x98>
    69f4:	00050693          	mv	a3,a0
    69f8:	0087a503          	lw	a0,8(a5)
		&& !z_is_idle_thread_object(thread);
    69fc:	07f00713          	li	a4,127
    6a00:	00e55603          	lhu	a2,14(a0)
    6a04:	04c76e63          	bltu	a4,a2,6a60 <z_time_slice+0x98>
		&& !z_is_thread_prevented_from_running(thread)
    6a08:	00d54703          	lbu	a4,13(a0)
    6a0c:	01f77713          	andi	a4,a4,31
    6a10:	04071863          	bnez	a4,6a60 <z_time_slice+0x98>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    6a14:	0000d737          	lui	a4,0xd
    6a18:	00e50603          	lb	a2,14(a0)
    6a1c:	25c72703          	lw	a4,604(a4) # d25c <slice_max_prio>
    6a20:	04e64063          	blt	a2,a4,6a60 <z_time_slice+0x98>
		&& !z_is_idle_thread_object(thread);
    6a24:	0000f737          	lui	a4,0xf
    6a28:	27870713          	addi	a4,a4,632 # f278 <z_idle_threads>
    6a2c:	02e50a63          	beq	a0,a4,6a60 <z_time_slice+0x98>
		if (ticks >= _current_cpu->slice_ticks) {
    6a30:	0107a703          	lw	a4,16(a5)
    6a34:	02e6c063          	blt	a3,a4,6a54 <z_time_slice+0x8c>
			move_thread_to_end_of_prio_q(_current);
    6a38:	ed1ff0ef          	jal	ra,6908 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
    6a3c:	cd5ff0ef          	jal	ra,6710 <z_reset_time_slice>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    6a40:	30042473          	csrrs	s0,mstatus,s0
}
    6a44:	00c12083          	lw	ra,12(sp)
    6a48:	00812403          	lw	s0,8(sp)
    6a4c:	01010113          	addi	sp,sp,16
    6a50:	00008067          	ret
			_current_cpu->slice_ticks -= ticks;
    6a54:	40d70733          	sub	a4,a4,a3
    6a58:	00e7a823          	sw	a4,16(a5)
    6a5c:	fe5ff06f          	j	6a40 <z_time_slice+0x78>
		_current_cpu->slice_ticks = 0;
    6a60:	0007a823          	sw	zero,16(a5)
    6a64:	fddff06f          	j	6a40 <z_time_slice+0x78>

00006a68 <ready_thread>:
    6a68:	00d54783          	lbu	a5,13(a0)
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    6a6c:	01879713          	slli	a4,a5,0x18
    6a70:	41875713          	srai	a4,a4,0x18
    6a74:	08074863          	bltz	a4,6b04 <ready_thread+0x9c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    6a78:	01f7f713          	andi	a4,a5,31
    6a7c:	08071463          	bnez	a4,6b04 <ready_thread+0x9c>
    6a80:	01852703          	lw	a4,24(a0)
    6a84:	08071063          	bnez	a4,6b04 <ready_thread+0x9c>
	thread->base.thread_state |= _THREAD_QUEUED;
    6a88:	f807e793          	ori	a5,a5,-128
	return list->head == list;
    6a8c:	0000f737          	lui	a4,0xf
    6a90:	57870693          	addi	a3,a4,1400 # f578 <_kernel>
    6a94:	00f506a3          	sb	a5,13(a0)
    6a98:	01c6a783          	lw	a5,28(a3)
	return (node == list->tail) ? NULL : node->next;
    6a9c:	0206a583          	lw	a1,32(a3)
    6aa0:	0000f6b7          	lui	a3,0xf
    6aa4:	59468693          	addi	a3,a3,1428 # f594 <_kernel+0x1c>
    6aa8:	57870713          	addi	a4,a4,1400
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6aac:	04d78263          	beq	a5,a3,6af0 <ready_thread+0x88>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6ab0:	04078063          	beqz	a5,6af0 <ready_thread+0x88>
	int32_t b1 = thread_1->base.prio;
    6ab4:	00e50803          	lb	a6,14(a0)
	int32_t b2 = thread_2->base.prio;
    6ab8:	00e78603          	lb	a2,14(a5)
	if (b1 != b2) {
    6abc:	02c80463          	beq	a6,a2,6ae4 <ready_thread+0x7c>
		return b2 - b1;
    6ac0:	41060633          	sub	a2,a2,a6
		if (z_sched_prio_cmp(thread, t) > 0) {
    6ac4:	02c05063          	blez	a2,6ae4 <ready_thread+0x7c>
	sys_dnode_t *const prev = successor->prev;
    6ac8:	0047a703          	lw	a4,4(a5)
	node->next = successor;
    6acc:	00f52023          	sw	a5,0(a0)
	node->prev = prev;
    6ad0:	00e52223          	sw	a4,4(a0)
	prev->next = node;
    6ad4:	00a72023          	sw	a0,0(a4)
	successor->prev = node;
    6ad8:	00a7a223          	sw	a0,4(a5)
		update_cache(0);
    6adc:	00000513          	li	a0,0
    6ae0:	da5ff06f          	j	6884 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    6ae4:	00b78663          	beq	a5,a1,6af0 <ready_thread+0x88>
    6ae8:	0007a783          	lw	a5,0(a5)
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6aec:	fc0796e3          	bnez	a5,6ab8 <ready_thread+0x50>
	node->next = list;
    6af0:	00d52023          	sw	a3,0(a0)
	node->prev = tail;
    6af4:	00b52223          	sw	a1,4(a0)
	tail->next = node;
    6af8:	00a5a023          	sw	a0,0(a1)
	list->tail = node;
    6afc:	02a72023          	sw	a0,32(a4)
}
    6b00:	fddff06f          	j	6adc <ready_thread+0x74>
}
    6b04:	00008067          	ret

00006b08 <z_ready_thread>:
{
    6b08:	ff010113          	addi	sp,sp,-16
    6b0c:	00812423          	sw	s0,8(sp)
    6b10:	00112623          	sw	ra,12(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    6b14:	00800413          	li	s0,8
    6b18:	30043473          	csrrc	s0,mstatus,s0
			ready_thread(thread);
    6b1c:	f4dff0ef          	jal	ra,6a68 <ready_thread>
	key = (mstatus & MSTATUS_IEN);
    6b20:	00847413          	andi	s0,s0,8
	__asm__ volatile ("csrrs %0, mstatus, %1"
    6b24:	30042473          	csrrs	s0,mstatus,s0
}
    6b28:	00c12083          	lw	ra,12(sp)
    6b2c:	00812403          	lw	s0,8(sp)
    6b30:	01010113          	addi	sp,sp,16
    6b34:	00008067          	ret

00006b38 <z_sched_start>:
	__asm__ volatile ("csrrc %0, mstatus, %1"
    6b38:	00800593          	li	a1,8
    6b3c:	3005b5f3          	csrrc	a1,mstatus,a1
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    6b40:	00d54703          	lbu	a4,13(a0)
	key = (mstatus & MSTATUS_IEN);
    6b44:	0085f593          	andi	a1,a1,8
	if (z_has_thread_started(thread)) {
    6b48:	00477693          	andi	a3,a4,4
    6b4c:	00069663          	bnez	a3,6b58 <z_sched_start+0x20>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    6b50:	3005a5f3          	csrrs	a1,mstatus,a1
		return;
    6b54:	00008067          	ret
{
    6b58:	fe010113          	addi	sp,sp,-32
    6b5c:	00112e23          	sw	ra,28(sp)
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6b60:	ffb77713          	andi	a4,a4,-5
    6b64:	00e506a3          	sb	a4,13(a0)
    6b68:	00b12623          	sw	a1,12(sp)
	ready_thread(thread);
    6b6c:	efdff0ef          	jal	ra,6a68 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    6b70:	00c12583          	lw	a1,12(sp)
}
    6b74:	01c12083          	lw	ra,28(sp)
	z_reschedule(&sched_spinlock, key);
    6b78:	0000f537          	lui	a0,0xf
    6b7c:	59c50513          	addi	a0,a0,1436 # f59c <sched_spinlock>
}
    6b80:	02010113          	addi	sp,sp,32
	z_reschedule(&sched_spinlock, key);
    6b84:	c61ff06f          	j	67e4 <z_reschedule>

00006b88 <z_impl_k_thread_resume>:
	__asm__ volatile ("csrrc %0, mstatus, %1"
    6b88:	00800593          	li	a1,8
    6b8c:	3005b5f3          	csrrc	a1,mstatus,a1
	return (thread->base.thread_state & _THREAD_SUSPENDED) != 0U;
    6b90:	00d54703          	lbu	a4,13(a0)
	key = (mstatus & MSTATUS_IEN);
    6b94:	0085f593          	andi	a1,a1,8
	if (!z_is_thread_suspended(thread)) {
    6b98:	01077693          	andi	a3,a4,16
    6b9c:	00069663          	bnez	a3,6ba8 <z_impl_k_thread_resume+0x20>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    6ba0:	3005a5f3          	csrrs	a1,mstatus,a1
		return;
    6ba4:	00008067          	ret
{
    6ba8:	fe010113          	addi	sp,sp,-32
    6bac:	00112e23          	sw	ra,28(sp)
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    6bb0:	fef77713          	andi	a4,a4,-17
    6bb4:	00e506a3          	sb	a4,13(a0)
    6bb8:	00b12623          	sw	a1,12(sp)
	ready_thread(thread);
    6bbc:	eadff0ef          	jal	ra,6a68 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    6bc0:	00c12583          	lw	a1,12(sp)
}
    6bc4:	01c12083          	lw	ra,28(sp)
	z_reschedule(&sched_spinlock, key);
    6bc8:	0000f537          	lui	a0,0xf
    6bcc:	59c50513          	addi	a0,a0,1436 # f59c <sched_spinlock>
}
    6bd0:	02010113          	addi	sp,sp,32
	z_reschedule(&sched_spinlock, key);
    6bd4:	c11ff06f          	j	67e4 <z_reschedule>

00006bd8 <z_thread_timeout>:
{
    6bd8:	fe010113          	addi	sp,sp,-32
    6bdc:	00912a23          	sw	s1,20(sp)
    6be0:	00112e23          	sw	ra,28(sp)
    6be4:	00812c23          	sw	s0,24(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    6be8:	00800493          	li	s1,8
    6bec:	3004b4f3          	csrrc	s1,mstatus,s1
		if (!killed) {
    6bf0:	ff554783          	lbu	a5,-11(a0)
	key = (mstatus & MSTATUS_IEN);
    6bf4:	0084f493          	andi	s1,s1,8
    6bf8:	0287f793          	andi	a5,a5,40
    6bfc:	02079863          	bnez	a5,6c2c <z_thread_timeout+0x54>
    6c00:	00050413          	mv	s0,a0
			if (thread->base.pended_on != NULL) {
    6c04:	ff042783          	lw	a5,-16(s0)
	struct k_thread *thread = CONTAINER_OF(timeout,
    6c08:	fe850513          	addi	a0,a0,-24
			if (thread->base.pended_on != NULL) {
    6c0c:	00078863          	beqz	a5,6c1c <z_thread_timeout+0x44>
				unpend_thread_no_timeout(thread);
    6c10:	00a12623          	sw	a0,12(sp)
    6c14:	ac9ff0ef          	jal	ra,66dc <unpend_thread_no_timeout>
    6c18:	00c12503          	lw	a0,12(sp)
    6c1c:	ff544783          	lbu	a5,-11(s0)
    6c20:	feb7f793          	andi	a5,a5,-21
    6c24:	fef40aa3          	sb	a5,-11(s0)
			ready_thread(thread);
    6c28:	e41ff0ef          	jal	ra,6a68 <ready_thread>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    6c2c:	3004a4f3          	csrrs	s1,mstatus,s1
}
    6c30:	01c12083          	lw	ra,28(sp)
    6c34:	01812403          	lw	s0,24(sp)
    6c38:	01412483          	lw	s1,20(sp)
    6c3c:	02010113          	addi	sp,sp,32
    6c40:	00008067          	ret

00006c44 <unready_thread>:
{
    6c44:	ff010113          	addi	sp,sp,-16
    6c48:	00812423          	sw	s0,8(sp)
    6c4c:	00112623          	sw	ra,12(sp)
	return (thread->base.thread_state & state) != 0U;
    6c50:	00d54783          	lbu	a5,13(a0)
    6c54:	00050413          	mv	s0,a0
	if (z_is_thread_queued(thread)) {
    6c58:	01879713          	slli	a4,a5,0x18
    6c5c:	41875713          	srai	a4,a4,0x18
    6c60:	00075863          	bgez	a4,6c70 <unready_thread+0x2c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6c64:	07f7f793          	andi	a5,a5,127
    6c68:	00f506a3          	sb	a5,13(a0)
	sys_dlist_remove(&thread->base.qnode_dlist);
    6c6c:	a55ff0ef          	jal	ra,66c0 <sys_dlist_remove>
	update_cache(thread == _current);
    6c70:	0000f7b7          	lui	a5,0xf
    6c74:	5807a503          	lw	a0,1408(a5) # f580 <_kernel+0x8>
}
    6c78:	00c12083          	lw	ra,12(sp)
	update_cache(thread == _current);
    6c7c:	40850533          	sub	a0,a0,s0
}
    6c80:	00812403          	lw	s0,8(sp)
	update_cache(thread == _current);
    6c84:	00153513          	seqz	a0,a0
}
    6c88:	01010113          	addi	sp,sp,16
	update_cache(thread == _current);
    6c8c:	bf9ff06f          	j	6884 <update_cache>

00006c90 <add_to_waitq_locked>:
{
    6c90:	ff010113          	addi	sp,sp,-16
    6c94:	00812423          	sw	s0,8(sp)
    6c98:	00912223          	sw	s1,4(sp)
    6c9c:	00050413          	mv	s0,a0
    6ca0:	00112623          	sw	ra,12(sp)
    6ca4:	00058493          	mv	s1,a1
	unready_thread(thread);
    6ca8:	f9dff0ef          	jal	ra,6c44 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    6cac:	00d44783          	lbu	a5,13(s0)
    6cb0:	0027e793          	ori	a5,a5,2
    6cb4:	00f406a3          	sb	a5,13(s0)
	if (wait_q != NULL) {
    6cb8:	02048e63          	beqz	s1,6cf4 <add_to_waitq_locked+0x64>
	return list->head == list;
    6cbc:	0004a783          	lw	a5,0(s1)
		thread->base.pended_on = wait_q;
    6cc0:	00942423          	sw	s1,8(s0)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6cc4:	04f48a63          	beq	s1,a5,6d18 <add_to_waitq_locked+0x88>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6cc8:	04078863          	beqz	a5,6d18 <add_to_waitq_locked+0x88>
	int32_t b1 = thread_1->base.prio;
    6ccc:	00e40683          	lb	a3,14(s0)
	int32_t b2 = thread_2->base.prio;
    6cd0:	00e78703          	lb	a4,14(a5)
	if (b1 != b2) {
    6cd4:	02e68a63          	beq	a3,a4,6d08 <add_to_waitq_locked+0x78>
		return b2 - b1;
    6cd8:	40d70733          	sub	a4,a4,a3
		if (z_sched_prio_cmp(thread, t) > 0) {
    6cdc:	02e05663          	blez	a4,6d08 <add_to_waitq_locked+0x78>
	sys_dnode_t *const prev = successor->prev;
    6ce0:	0047a703          	lw	a4,4(a5)
	node->next = successor;
    6ce4:	00f42023          	sw	a5,0(s0)
	node->prev = prev;
    6ce8:	00e42223          	sw	a4,4(s0)
	prev->next = node;
    6cec:	00872023          	sw	s0,0(a4)
	successor->prev = node;
    6cf0:	0087a223          	sw	s0,4(a5)
}
    6cf4:	00c12083          	lw	ra,12(sp)
    6cf8:	00812403          	lw	s0,8(sp)
    6cfc:	00412483          	lw	s1,4(sp)
    6d00:	01010113          	addi	sp,sp,16
    6d04:	00008067          	ret
	return (node == list->tail) ? NULL : node->next;
    6d08:	0044a703          	lw	a4,4(s1)
    6d0c:	00e78663          	beq	a5,a4,6d18 <add_to_waitq_locked+0x88>
    6d10:	0007a783          	lw	a5,0(a5)
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6d14:	fa079ee3          	bnez	a5,6cd0 <add_to_waitq_locked+0x40>
	sys_dnode_t *const tail = list->tail;
    6d18:	0044a783          	lw	a5,4(s1)
	node->next = list;
    6d1c:	00942023          	sw	s1,0(s0)
	node->prev = tail;
    6d20:	00f42223          	sw	a5,4(s0)
	tail->next = node;
    6d24:	0087a023          	sw	s0,0(a5)
	list->tail = node;
    6d28:	0084a223          	sw	s0,4(s1)
}
    6d2c:	fc9ff06f          	j	6cf4 <add_to_waitq_locked+0x64>

00006d30 <pend_locked>:
{
    6d30:	fe010113          	addi	sp,sp,-32
    6d34:	00812c23          	sw	s0,24(sp)
    6d38:	00c12623          	sw	a2,12(sp)
    6d3c:	00d12423          	sw	a3,8(sp)
    6d40:	00112e23          	sw	ra,28(sp)
    6d44:	00050413          	mv	s0,a0
	add_to_waitq_locked(thread, wait_q);
    6d48:	f49ff0ef          	jal	ra,6c90 <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
    6d4c:	00c12603          	lw	a2,12(sp)
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6d50:	fff00593          	li	a1,-1
    6d54:	00812683          	lw	a3,8(sp)
    6d58:	00b61463          	bne	a2,a1,6d60 <pend_locked+0x30>
    6d5c:	02c68063          	beq	a3,a2,6d7c <pend_locked+0x4c>
    6d60:	01840513          	addi	a0,s0,24
}
    6d64:	01812403          	lw	s0,24(sp)
    6d68:	01c12083          	lw	ra,28(sp)
    6d6c:	000075b7          	lui	a1,0x7
    6d70:	bd858593          	addi	a1,a1,-1064 # 6bd8 <z_thread_timeout>
    6d74:	02010113          	addi	sp,sp,32
    6d78:	6cc0006f          	j	7444 <z_add_timeout>
    6d7c:	01c12083          	lw	ra,28(sp)
    6d80:	01812403          	lw	s0,24(sp)
    6d84:	02010113          	addi	sp,sp,32
    6d88:	00008067          	ret

00006d8c <z_pend_curr>:
{
    6d8c:	ff010113          	addi	sp,sp,-16
    6d90:	00812423          	sw	s0,8(sp)
    6d94:	00112623          	sw	ra,12(sp)
    6d98:	00058413          	mv	s0,a1
	__asm__ volatile ("csrrc %0, mstatus, %1"
    6d9c:	00800793          	li	a5,8
    6da0:	00060593          	mv	a1,a2
    6da4:	00068613          	mv	a2,a3
    6da8:	00070693          	mv	a3,a4
    6dac:	3007b7f3          	csrrc	a5,mstatus,a5
	pend_locked(_current, wait_q, timeout);
    6db0:	0000f7b7          	lui	a5,0xf
    6db4:	5807a503          	lw	a0,1408(a5) # f580 <_kernel+0x8>
    6db8:	f79ff0ef          	jal	ra,6d30 <pend_locked>
    6dbc:	00040513          	mv	a0,s0
}
    6dc0:	00812403          	lw	s0,8(sp)
    6dc4:	00c12083          	lw	ra,12(sp)
    6dc8:	01010113          	addi	sp,sp,16
    6dcc:	d00f906f          	j	2cc <arch_swap>

00006dd0 <z_set_prio>:
{
    6dd0:	ff010113          	addi	sp,sp,-16
    6dd4:	00812423          	sw	s0,8(sp)
    6dd8:	01212023          	sw	s2,0(sp)
    6ddc:	00112623          	sw	ra,12(sp)
    6de0:	00912223          	sw	s1,4(sp)
    6de4:	00050413          	mv	s0,a0
    6de8:	00800913          	li	s2,8
    6dec:	30093973          	csrrc	s2,mstatus,s2
	uint8_t state = thread->base.thread_state;
    6df0:	00d54783          	lbu	a5,13(a0)
				thread->base.prio = prio;
    6df4:	01859493          	slli	s1,a1,0x18
	key = (mstatus & MSTATUS_IEN);
    6df8:	00897913          	andi	s2,s2,8
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    6dfc:	01f7f713          	andi	a4,a5,31
    6e00:	4184d493          	srai	s1,s1,0x18
    6e04:	0a071e63          	bnez	a4,6ec0 <z_set_prio+0xf0>
		if (need_sched) {
    6e08:	01852703          	lw	a4,24(a0)
    6e0c:	0a071a63          	bnez	a4,6ec0 <z_set_prio+0xf0>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6e10:	07f7f793          	andi	a5,a5,127
    6e14:	00f506a3          	sb	a5,13(a0)
	sys_dlist_remove(&thread->base.qnode_dlist);
    6e18:	8a9ff0ef          	jal	ra,66c0 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    6e1c:	00d44783          	lbu	a5,13(s0)
	return list->head == list;
    6e20:	0000f737          	lui	a4,0xf
    6e24:	0000f6b7          	lui	a3,0xf
    6e28:	f807e793          	ori	a5,a5,-128
    6e2c:	00f406a3          	sb	a5,13(s0)
    6e30:	57870793          	addi	a5,a4,1400 # f578 <_kernel>
    6e34:	01c7a783          	lw	a5,28(a5)
				thread->base.prio = prio;
    6e38:	00940723          	sb	s1,14(s0)
    6e3c:	59468693          	addi	a3,a3,1428 # f594 <_kernel+0x1c>
    6e40:	57870713          	addi	a4,a4,1400
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6e44:	06d78263          	beq	a5,a3,6ea8 <z_set_prio+0xd8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6e48:	06078063          	beqz	a5,6ea8 <z_set_prio+0xd8>
	return (node == list->tail) ? NULL : node->next;
    6e4c:	02072583          	lw	a1,32(a4)
	int32_t b2 = thread_2->base.prio;
    6e50:	00e78603          	lb	a2,14(a5)
	if (b1 != b2) {
    6e54:	04c48463          	beq	s1,a2,6e9c <z_set_prio+0xcc>
		return b2 - b1;
    6e58:	40960633          	sub	a2,a2,s1
		if (z_sched_prio_cmp(thread, t) > 0) {
    6e5c:	04c05063          	blez	a2,6e9c <z_set_prio+0xcc>
	sys_dnode_t *const prev = successor->prev;
    6e60:	0047a703          	lw	a4,4(a5)
	node->next = successor;
    6e64:	00f42023          	sw	a5,0(s0)
	node->prev = prev;
    6e68:	00e42223          	sw	a4,4(s0)
	prev->next = node;
    6e6c:	00872023          	sw	s0,0(a4)
	successor->prev = node;
    6e70:	0087a223          	sw	s0,4(a5)
			update_cache(1);
    6e74:	00100513          	li	a0,1
    6e78:	a0dff0ef          	jal	ra,6884 <update_cache>
    6e7c:	00100513          	li	a0,1
	__asm__ volatile ("csrrs %0, mstatus, %1"
    6e80:	30092973          	csrrs	s2,mstatus,s2
}
    6e84:	00c12083          	lw	ra,12(sp)
    6e88:	00812403          	lw	s0,8(sp)
    6e8c:	00412483          	lw	s1,4(sp)
    6e90:	00012903          	lw	s2,0(sp)
    6e94:	01010113          	addi	sp,sp,16
    6e98:	00008067          	ret
	return (node == list->tail) ? NULL : node->next;
    6e9c:	00b78663          	beq	a5,a1,6ea8 <z_set_prio+0xd8>
    6ea0:	0007a783          	lw	a5,0(a5)
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6ea4:	fa0796e3          	bnez	a5,6e50 <z_set_prio+0x80>
	sys_dnode_t *const tail = list->tail;
    6ea8:	02072783          	lw	a5,32(a4)
	node->next = list;
    6eac:	00d42023          	sw	a3,0(s0)
	node->prev = tail;
    6eb0:	00f42223          	sw	a5,4(s0)
	tail->next = node;
    6eb4:	0087a023          	sw	s0,0(a5)
	list->tail = node;
    6eb8:	02872023          	sw	s0,32(a4)
}
    6ebc:	fb9ff06f          	j	6e74 <z_set_prio+0xa4>
			thread->base.prio = prio;
    6ec0:	00940723          	sb	s1,14(s0)
    6ec4:	00000513          	li	a0,0
    6ec8:	fb9ff06f          	j	6e80 <z_set_prio+0xb0>

00006ecc <z_impl_k_thread_suspend>:
{
    6ecc:	ff010113          	addi	sp,sp,-16
    6ed0:	00812423          	sw	s0,8(sp)
    6ed4:	00050413          	mv	s0,a0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    6ed8:	01850513          	addi	a0,a0,24
    6edc:	00912223          	sw	s1,4(sp)
    6ee0:	00112623          	sw	ra,12(sp)
    6ee4:	01212023          	sw	s2,0(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    6ee8:	00800493          	li	s1,8
    6eec:	708000ef          	jal	ra,75f4 <z_abort_timeout>
    6ef0:	3004b4f3          	csrrc	s1,mstatus,s1
	return (thread->base.thread_state & state) != 0U;
    6ef4:	00d44783          	lbu	a5,13(s0)
	key = (mstatus & MSTATUS_IEN);
    6ef8:	0084f493          	andi	s1,s1,8
		if (z_is_thread_queued(thread)) {
    6efc:	01879713          	slli	a4,a5,0x18
    6f00:	41875713          	srai	a4,a4,0x18
    6f04:	00075a63          	bgez	a4,6f18 <z_impl_k_thread_suspend+0x4c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6f08:	07f7f793          	andi	a5,a5,127
    6f0c:	00f406a3          	sb	a5,13(s0)
	sys_dlist_remove(&thread->base.qnode_dlist);
    6f10:	00040513          	mv	a0,s0
    6f14:	facff0ef          	jal	ra,66c0 <sys_dlist_remove>
		update_cache(thread == _current);
    6f18:	0000f937          	lui	s2,0xf
    6f1c:	57890913          	addi	s2,s2,1400 # f578 <_kernel>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    6f20:	00d44783          	lbu	a5,13(s0)
    6f24:	00892503          	lw	a0,8(s2)
    6f28:	0107e793          	ori	a5,a5,16
    6f2c:	40850533          	sub	a0,a0,s0
    6f30:	00f406a3          	sb	a5,13(s0)
    6f34:	00153513          	seqz	a0,a0
    6f38:	94dff0ef          	jal	ra,6884 <update_cache>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    6f3c:	3004a4f3          	csrrs	s1,mstatus,s1
	if (thread == _current) {
    6f40:	00892783          	lw	a5,8(s2)
    6f44:	00879e63          	bne	a5,s0,6f60 <z_impl_k_thread_suspend+0x94>
}
    6f48:	00812403          	lw	s0,8(sp)
    6f4c:	00c12083          	lw	ra,12(sp)
    6f50:	00412483          	lw	s1,4(sp)
    6f54:	00012903          	lw	s2,0(sp)
    6f58:	01010113          	addi	sp,sp,16
		z_reschedule_unlocked();
    6f5c:	8ddff06f          	j	6838 <z_reschedule_unlocked>
}
    6f60:	00c12083          	lw	ra,12(sp)
    6f64:	00812403          	lw	s0,8(sp)
    6f68:	00412483          	lw	s1,4(sp)
    6f6c:	00012903          	lw	s2,0(sp)
    6f70:	01010113          	addi	sp,sp,16
    6f74:	00008067          	ret

00006f78 <k_sched_unlock>:
{
    6f78:	ff010113          	addi	sp,sp,-16
    6f7c:	00812423          	sw	s0,8(sp)
    6f80:	00112623          	sw	ra,12(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    6f84:	00800413          	li	s0,8
    6f88:	30043473          	csrrc	s0,mstatus,s0
		++_current->base.sched_locked;
    6f8c:	0000f7b7          	lui	a5,0xf
    6f90:	5807a703          	lw	a4,1408(a5) # f580 <_kernel+0x8>
		update_cache(0);
    6f94:	00000513          	li	a0,0
	key = (mstatus & MSTATUS_IEN);
    6f98:	00847413          	andi	s0,s0,8
		++_current->base.sched_locked;
    6f9c:	00f74783          	lbu	a5,15(a4)
    6fa0:	00178793          	addi	a5,a5,1
    6fa4:	00f707a3          	sb	a5,15(a4)
		update_cache(0);
    6fa8:	8ddff0ef          	jal	ra,6884 <update_cache>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    6fac:	30042473          	csrrs	s0,mstatus,s0
}
    6fb0:	00812403          	lw	s0,8(sp)
    6fb4:	00c12083          	lw	ra,12(sp)
    6fb8:	01010113          	addi	sp,sp,16
	z_reschedule_unlocked();
    6fbc:	87dff06f          	j	6838 <z_reschedule_unlocked>

00006fc0 <z_unpend_first_thread>:
{
    6fc0:	ff010113          	addi	sp,sp,-16
    6fc4:	00812423          	sw	s0,8(sp)
    6fc8:	00112623          	sw	ra,12(sp)
    6fcc:	00912223          	sw	s1,4(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    6fd0:	00800413          	li	s0,8
    6fd4:	30043473          	csrrc	s0,mstatus,s0
		thread = _priq_wait_best(&wait_q->waitq);
    6fd8:	899ff0ef          	jal	ra,6870 <z_priq_dumb_best>
	key = (mstatus & MSTATUS_IEN);
    6fdc:	00847413          	andi	s0,s0,8
    6fe0:	00050493          	mv	s1,a0
		if (thread != NULL) {
    6fe4:	00050863          	beqz	a0,6ff4 <z_unpend_first_thread+0x34>
			unpend_thread_no_timeout(thread);
    6fe8:	ef4ff0ef          	jal	ra,66dc <unpend_thread_no_timeout>
    6fec:	01848513          	addi	a0,s1,24
    6ff0:	604000ef          	jal	ra,75f4 <z_abort_timeout>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    6ff4:	30042473          	csrrs	s0,mstatus,s0
}
    6ff8:	00c12083          	lw	ra,12(sp)
    6ffc:	00812403          	lw	s0,8(sp)
    7000:	00048513          	mv	a0,s1
    7004:	00412483          	lw	s1,4(sp)
    7008:	01010113          	addi	sp,sp,16
    700c:	00008067          	ret

00007010 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    7010:	0000f7b7          	lui	a5,0xf
    7014:	0000f737          	lui	a4,0xf
    7018:	57878793          	addi	a5,a5,1400 # f578 <_kernel>
    701c:	59470713          	addi	a4,a4,1428 # f594 <_kernel+0x1c>
    7020:	00e7ae23          	sw	a4,28(a5)
	list->tail = (sys_dnode_t *)list;
    7024:	02e7a023          	sw	a4,32(a5)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    7028:	00000593          	li	a1,0
    702c:	00000513          	li	a0,0
    7030:	f38ff06f          	j	6768 <k_sched_time_slice_set>

00007034 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    7034:	ff010113          	addi	sp,sp,-16
    7038:	00912223          	sw	s1,4(sp)
    703c:	00112623          	sw	ra,12(sp)
    7040:	00812423          	sw	s0,8(sp)
    7044:	01212023          	sw	s2,0(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    7048:	00800493          	li	s1,8
    704c:	3004b4f3          	csrrc	s1,mstatus,s1

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
    7050:	0000f437          	lui	s0,0xf
    7054:	57840913          	addi	s2,s0,1400 # f578 <_kernel>
    7058:	00892503          	lw	a0,8(s2)
	key = (mstatus & MSTATUS_IEN);
    705c:	0084f493          	andi	s1,s1,8
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7060:	00d54783          	lbu	a5,13(a0)
    7064:	07f7f793          	andi	a5,a5,127
    7068:	00f506a3          	sb	a5,13(a0)
	sys_dlist_remove(&thread->base.qnode_dlist);
    706c:	e54ff0ef          	jal	ra,66c0 <sys_dlist_remove>
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
    7070:	00892783          	lw	a5,8(s2)
	thread->base.thread_state |= _THREAD_QUEUED;
    7074:	0000f637          	lui	a2,0xf
    7078:	59460613          	addi	a2,a2,1428 # f594 <_kernel+0x1c>
    707c:	00d7c703          	lbu	a4,13(a5)
    7080:	57840693          	addi	a3,s0,1400
    7084:	f8076713          	ori	a4,a4,-128
    7088:	00e786a3          	sb	a4,13(a5)
	return list->head == list;
    708c:	01c92703          	lw	a4,28(s2)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7090:	06c70263          	beq	a4,a2,70f4 <z_impl_k_yield+0xc0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7094:	06070063          	beqz	a4,70f4 <z_impl_k_yield+0xc0>
	return (node == list->tail) ? NULL : node->next;
    7098:	0206a803          	lw	a6,32(a3)
	int32_t b1 = thread_1->base.prio;
    709c:	00e78503          	lb	a0,14(a5)
	int32_t b2 = thread_2->base.prio;
    70a0:	00e70583          	lb	a1,14(a4)
	if (b1 != b2) {
    70a4:	04b50263          	beq	a0,a1,70e8 <z_impl_k_yield+0xb4>
		return b2 - b1;
    70a8:	40a585b3          	sub	a1,a1,a0
		if (z_sched_prio_cmp(thread, t) > 0) {
    70ac:	02b05e63          	blez	a1,70e8 <z_impl_k_yield+0xb4>
	sys_dnode_t *const prev = successor->prev;
    70b0:	00472683          	lw	a3,4(a4)
	node->next = successor;
    70b4:	00e7a023          	sw	a4,0(a5)
	node->prev = prev;
    70b8:	00d7a223          	sw	a3,4(a5)
	prev->next = node;
    70bc:	00f6a023          	sw	a5,0(a3)
	successor->prev = node;
    70c0:	00f72223          	sw	a5,4(a4)
	update_cache(1);
    70c4:	00100513          	li	a0,1
    70c8:	fbcff0ef          	jal	ra,6884 <update_cache>
	z_swap(&sched_spinlock, key);
}
    70cc:	00812403          	lw	s0,8(sp)
    70d0:	00c12083          	lw	ra,12(sp)
    70d4:	00012903          	lw	s2,0(sp)
    70d8:	00048513          	mv	a0,s1
    70dc:	00412483          	lw	s1,4(sp)
    70e0:	01010113          	addi	sp,sp,16
    70e4:	9e8f906f          	j	2cc <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    70e8:	01070663          	beq	a4,a6,70f4 <z_impl_k_yield+0xc0>
    70ec:	00072703          	lw	a4,0(a4)
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    70f0:	fa0718e3          	bnez	a4,70a0 <z_impl_k_yield+0x6c>
	sys_dnode_t *const tail = list->tail;
    70f4:	0206a703          	lw	a4,32(a3)
	node->next = list;
    70f8:	00c7a023          	sw	a2,0(a5)
	node->prev = tail;
    70fc:	00e7a223          	sw	a4,4(a5)
	tail->next = node;
    7100:	00f72023          	sw	a5,0(a4)
	list->tail = node;
    7104:	02f6a023          	sw	a5,32(a3)
}
    7108:	fbdff06f          	j	70c4 <z_impl_k_yield+0x90>

0000710c <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    710c:	fe010113          	addi	sp,sp,-32
    7110:	00112e23          	sw	ra,28(sp)
    7114:	00812c23          	sw	s0,24(sp)
    7118:	00912a23          	sw	s1,20(sp)
    711c:	01212823          	sw	s2,16(sp)
    7120:	01312623          	sw	s3,12(sp)
    7124:	01412423          	sw	s4,8(sp)
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    7128:	00b567b3          	or	a5,a0,a1
    712c:	00079863          	bnez	a5,713c <z_tick_sleep+0x30>
	z_impl_k_yield();
    7130:	f05ff0ef          	jal	ra,7034 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    7134:	00000513          	li	a0,0
    7138:	09c0006f          	j	71d4 <z_tick_sleep+0xc8>
	if (Z_TICK_ABS(ticks) <= 0) {
    713c:	ffe00793          	li	a5,-2
    7140:	40a786b3          	sub	a3,a5,a0
    7144:	00d7b733          	sltu	a4,a5,a3
    7148:	fff5c793          	not	a5,a1
    714c:	40e787b3          	sub	a5,a5,a4
    7150:	00050493          	mv	s1,a0
    7154:	00058993          	mv	s3,a1
    7158:	08f04e63          	bgtz	a5,71f4 <z_tick_sleep+0xe8>
    715c:	00079463          	bnez	a5,7164 <z_tick_sleep+0x58>
    7160:	08069a63          	bnez	a3,71f4 <z_tick_sleep+0xe8>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    7164:	6b8000ef          	jal	ra,781c <sys_clock_tick_get_32>
    7168:	00950433          	add	s0,a0,s1
	__asm__ volatile ("csrrc %0, mstatus, %1"
    716c:	00800a13          	li	s4,8
    7170:	300a3a73          	csrrc	s4,mstatus,s4
	unready_thread(_current);
    7174:	0000f937          	lui	s2,0xf
    7178:	57890913          	addi	s2,s2,1400 # f578 <_kernel>
    717c:	00892503          	lw	a0,8(s2)
    7180:	ac5ff0ef          	jal	ra,6c44 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    7184:	00892503          	lw	a0,8(s2)
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    7188:	000075b7          	lui	a1,0x7
    718c:	00048613          	mv	a2,s1
    7190:	00098693          	mv	a3,s3
    7194:	bd858593          	addi	a1,a1,-1064 # 6bd8 <z_thread_timeout>
    7198:	01850513          	addi	a0,a0,24
    719c:	2a8000ef          	jal	ra,7444 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    71a0:	00892703          	lw	a4,8(s2)
    71a4:	008a7513          	andi	a0,s4,8
    71a8:	00d74783          	lbu	a5,13(a4)
    71ac:	0107e793          	ori	a5,a5,16
    71b0:	00f706a3          	sb	a5,13(a4)
    71b4:	918f90ef          	jal	ra,2cc <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    71b8:	664000ef          	jal	ra,781c <sys_clock_tick_get_32>
    71bc:	40a407b3          	sub	a5,s0,a0
    71c0:	00f43433          	sltu	s0,s0,a5
    71c4:	40800433          	neg	s0,s0
	if (ticks > 0) {
    71c8:	f60416e3          	bnez	s0,7134 <z_tick_sleep+0x28>
		return ticks;
    71cc:	00078513          	mv	a0,a5
	if (ticks > 0) {
    71d0:	f60782e3          	beqz	a5,7134 <z_tick_sleep+0x28>
}
    71d4:	01c12083          	lw	ra,28(sp)
    71d8:	01812403          	lw	s0,24(sp)
    71dc:	01412483          	lw	s1,20(sp)
    71e0:	01012903          	lw	s2,16(sp)
    71e4:	00c12983          	lw	s3,12(sp)
    71e8:	00812a03          	lw	s4,8(sp)
    71ec:	02010113          	addi	sp,sp,32
    71f0:	00008067          	ret
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    71f4:	ffe00413          	li	s0,-2
    71f8:	40940433          	sub	s0,s0,s1
    71fc:	f71ff06f          	j	716c <z_tick_sleep+0x60>

00007200 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    7200:	ff010113          	addi	sp,sp,-16
    7204:	00112623          	sw	ra,12(sp)
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7208:	fff00693          	li	a3,-1
    720c:	02d51263          	bne	a0,a3,7230 <z_impl_k_sleep+0x30>
    7210:	02a59063          	bne	a1,a0,7230 <z_impl_k_sleep+0x30>
		k_thread_suspend(_current);
    7214:	0000f7b7          	lui	a5,0xf
    7218:	5807a503          	lw	a0,1408(a5) # f580 <_kernel+0x8>
	z_impl_k_thread_suspend(thread);
    721c:	cb1ff0ef          	jal	ra,6ecc <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    7220:	fff00513          	li	a0,-1
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    7224:	00c12083          	lw	ra,12(sp)
    7228:	01010113          	addi	sp,sp,16
    722c:	00008067          	ret
	ticks = z_tick_sleep(ticks);
    7230:	eddff0ef          	jal	ra,710c <z_tick_sleep>
			return t * ((uint64_t)to_hz / from_hz);
    7234:	00a00793          	li	a5,10
    7238:	02f50533          	mul	a0,a0,a5
	return ret;
    723c:	fe9ff06f          	j	7224 <z_impl_k_sleep+0x24>

00007240 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    7240:	0000f7b7          	lui	a5,0xf
    7244:	5807a503          	lw	a0,1408(a5) # f580 <_kernel+0x8>
    7248:	00008067          	ret

0000724c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    724c:	fe010113          	addi	sp,sp,-32
    7250:	00912a23          	sw	s1,20(sp)
    7254:	00112e23          	sw	ra,28(sp)
    7258:	00812c23          	sw	s0,24(sp)
    725c:	01212823          	sw	s2,16(sp)
    7260:	01312623          	sw	s3,12(sp)
    7264:	00800493          	li	s1,8
    7268:	3004b4f3          	csrrc	s1,mstatus,s1
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    726c:	00d54783          	lbu	a5,13(a0)
	key = (mstatus & MSTATUS_IEN);
    7270:	0084f493          	andi	s1,s1,8
    7274:	0087f713          	andi	a4,a5,8
    7278:	02070263          	beqz	a4,729c <z_thread_abort+0x50>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    727c:	3004a4f3          	csrrs	s1,mstatus,s1
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    7280:	01c12083          	lw	ra,28(sp)
    7284:	01812403          	lw	s0,24(sp)
    7288:	01412483          	lw	s1,20(sp)
    728c:	01012903          	lw	s2,16(sp)
    7290:	00c12983          	lw	s3,12(sp)
    7294:	02010113          	addi	sp,sp,32
    7298:	00008067          	ret
		thread->base.thread_state &= ~_THREAD_ABORTING;
    729c:	fdf7f713          	andi	a4,a5,-33
    72a0:	00876713          	ori	a4,a4,8
		if (z_is_thread_queued(thread)) {
    72a4:	01871693          	slli	a3,a4,0x18
    72a8:	4186d693          	srai	a3,a3,0x18
    72ac:	00050413          	mv	s0,a0
    72b0:	0406ce63          	bltz	a3,730c <z_thread_abort+0xc0>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    72b4:	00e506a3          	sb	a4,13(a0)
		if (thread->base.pended_on != NULL) {
    72b8:	00842783          	lw	a5,8(s0)
    72bc:	00078663          	beqz	a5,72c8 <z_thread_abort+0x7c>
			unpend_thread_no_timeout(thread);
    72c0:	00040513          	mv	a0,s0
    72c4:	c18ff0ef          	jal	ra,66dc <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    72c8:	01840513          	addi	a0,s0,24
    72cc:	328000ef          	jal	ra,75f4 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    72d0:	06840993          	addi	s3,s0,104
	return list->head == list;
    72d4:	06842903          	lw	s2,104(s0)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    72d8:	01390463          	beq	s2,s3,72e0 <z_thread_abort+0x94>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    72dc:	04091263          	bnez	s2,7320 <z_thread_abort+0xd4>
		update_cache(1);
    72e0:	00100513          	li	a0,1
    72e4:	da0ff0ef          	jal	ra,6884 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    72e8:	0000f7b7          	lui	a5,0xf
    72ec:	57878793          	addi	a5,a5,1400 # f578 <_kernel>
    72f0:	0087a703          	lw	a4,8(a5)
    72f4:	f88714e3          	bne	a4,s0,727c <z_thread_abort+0x30>
    72f8:	0007a783          	lw	a5,0(a5)
    72fc:	f80790e3          	bnez	a5,727c <z_thread_abort+0x30>
    7300:	00048513          	mv	a0,s1
    7304:	fc9f80ef          	jal	ra,2cc <arch_swap>
	return ret;
    7308:	f75ff06f          	j	727c <z_thread_abort+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    730c:	05f7f793          	andi	a5,a5,95
    7310:	0087e793          	ori	a5,a5,8
    7314:	00f506a3          	sb	a5,13(a0)
	sys_dlist_remove(&thread->base.qnode_dlist);
    7318:	ba8ff0ef          	jal	ra,66c0 <sys_dlist_remove>
}
    731c:	f9dff06f          	j	72b8 <z_thread_abort+0x6c>
		unpend_thread_no_timeout(thread);
    7320:	00090513          	mv	a0,s2
    7324:	bb8ff0ef          	jal	ra,66dc <unpend_thread_no_timeout>
    7328:	01890513          	addi	a0,s2,24
    732c:	2c8000ef          	jal	ra,75f4 <z_abort_timeout>
		ready_thread(thread);
    7330:	00090513          	mv	a0,s2
	thread->arch.swap_return_value = value;
    7334:	06092c23          	sw	zero,120(s2)
    7338:	f30ff0ef          	jal	ra,6a68 <ready_thread>
    733c:	f99ff06f          	j	72d4 <z_thread_abort+0x88>

00007340 <z_impl_k_thread_abort>:
#if !defined(CONFIG_ARCH_HAS_THREAD_ABORT)
void z_impl_k_thread_abort(struct k_thread *thread)
{
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_thread, abort, thread);

	z_thread_abort(thread);
    7340:	f0dff06f          	j	724c <z_thread_abort>

00007344 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    7344:	0000d7b7          	lui	a5,0xd
    7348:	2647a783          	lw	a5,612(a5) # d264 <announce_remaining>
    734c:	00079463          	bnez	a5,7354 <elapsed+0x10>
    7350:	ae9fe06f          	j	5e38 <sys_clock_elapsed>
}
    7354:	00000513          	li	a0,0
    7358:	00008067          	ret

0000735c <next_timeout>:
	return list->head == list;
    735c:	002137b7          	lui	a5,0x213

static int32_t next_timeout(void)
{
    7360:	ff010113          	addi	sp,sp,-16
    7364:	78c78793          	addi	a5,a5,1932 # 21378c <timeout_list>
    7368:	00812423          	sw	s0,8(sp)
    736c:	0007a403          	lw	s0,0(a5)
    7370:	00112623          	sw	ra,12(sp)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7374:	00f41463          	bne	s0,a5,737c <next_timeout+0x20>
    7378:	00000413          	li	s0,0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    737c:	fc9ff0ef          	jal	ra,7344 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
    7380:	02040c63          	beqz	s0,73b8 <next_timeout+0x5c>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    7384:	01042703          	lw	a4,16(s0)
    7388:	01442783          	lw	a5,20(s0)
    738c:	41f55693          	srai	a3,a0,0x1f
    7390:	40a70533          	sub	a0,a4,a0
    7394:	00a73733          	sltu	a4,a4,a0
    7398:	40d787b3          	sub	a5,a5,a3
    739c:	40e787b3          	sub	a5,a5,a4
	int32_t ret = to == NULL ? MAX_WAIT
    73a0:	00f04663          	bgtz	a5,73ac <next_timeout+0x50>
    73a4:	04079063          	bnez	a5,73e4 <next_timeout+0x88>
    73a8:	02050e63          	beqz	a0,73e4 <next_timeout+0x88>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    73ac:	00f04663          	bgtz	a5,73b8 <next_timeout+0x5c>
    73b0:	00079863          	bnez	a5,73c0 <next_timeout+0x64>
    73b4:	00055663          	bgez	a0,73c0 <next_timeout+0x64>
	int32_t ret = to == NULL ? MAX_WAIT
    73b8:	80000537          	lui	a0,0x80000
    73bc:	fff54513          	not	a0,a0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    73c0:	0000f7b7          	lui	a5,0xf
    73c4:	5887a783          	lw	a5,1416(a5) # f588 <_kernel+0x10>
    73c8:	00078663          	beqz	a5,73d4 <next_timeout+0x78>
    73cc:	00a7d463          	bge	a5,a0,73d4 <next_timeout+0x78>
    73d0:	00078513          	mv	a0,a5
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    73d4:	00c12083          	lw	ra,12(sp)
    73d8:	00812403          	lw	s0,8(sp)
    73dc:	01010113          	addi	sp,sp,16
    73e0:	00008067          	ret
	int32_t ret = to == NULL ? MAX_WAIT
    73e4:	00000513          	li	a0,0
    73e8:	fd9ff06f          	j	73c0 <next_timeout+0x64>

000073ec <remove_timeout>:
	return (node == list->tail) ? NULL : node->next;
    73ec:	00052783          	lw	a5,0(a0) # 80000000 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000001>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    73f0:	02050e63          	beqz	a0,742c <remove_timeout+0x40>
	return (node == list->tail) ? NULL : node->next;
    73f4:	00213737          	lui	a4,0x213
    73f8:	79072703          	lw	a4,1936(a4) # 213790 <timeout_list+0x4>
    73fc:	02e50863          	beq	a0,a4,742c <remove_timeout+0x40>
	if (next(t) != NULL) {
    7400:	02078663          	beqz	a5,742c <remove_timeout+0x40>
		next(t)->dticks += t->dticks;
    7404:	0107a703          	lw	a4,16(a5)
    7408:	01052683          	lw	a3,16(a0)
    740c:	01452583          	lw	a1,20(a0)
    7410:	0147a603          	lw	a2,20(a5)
    7414:	00d706b3          	add	a3,a4,a3
    7418:	00e6b733          	sltu	a4,a3,a4
    741c:	00b60633          	add	a2,a2,a1
    7420:	00c70733          	add	a4,a4,a2
    7424:	00d7a823          	sw	a3,16(a5)
    7428:	00e7aa23          	sw	a4,20(a5)
	sys_dnode_t *const prev = node->prev;
    742c:	00452703          	lw	a4,4(a0)
	prev->next = next;
    7430:	00f72023          	sw	a5,0(a4)
	next->prev = prev;
    7434:	00e7a223          	sw	a4,4(a5)
	node->next = NULL;
    7438:	00052023          	sw	zero,0(a0)
	node->prev = NULL;
    743c:	00052223          	sw	zero,4(a0)
}
    7440:	00008067          	ret

00007444 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    7444:	fe010113          	addi	sp,sp,-32
    7448:	00812c23          	sw	s0,24(sp)
    744c:	00912a23          	sw	s1,20(sp)
    7450:	01312623          	sw	s3,12(sp)
    7454:	00112e23          	sw	ra,28(sp)
    7458:	00068993          	mv	s3,a3
    745c:	01212823          	sw	s2,16(sp)
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7460:	fff00693          	li	a3,-1
{
    7464:	00050413          	mv	s0,a0
    7468:	00060493          	mv	s1,a2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    746c:	00d61463          	bne	a2,a3,7474 <z_add_timeout+0x30>
    7470:	16c98463          	beq	s3,a2,75d8 <z_add_timeout+0x194>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    7474:	00b42423          	sw	a1,8(s0)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    7478:	00800913          	li	s2,8
    747c:	30093973          	csrrc	s2,mstatus,s2

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    7480:	ffe00693          	li	a3,-2
    7484:	409687b3          	sub	a5,a3,s1
    7488:	00f6b733          	sltu	a4,a3,a5
    748c:	fff9c793          	not	a5,s3
    7490:	40e787b3          	sub	a5,a5,a4
	key = (mstatus & MSTATUS_IEN);
    7494:	00897913          	andi	s2,s2,8
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    7498:	0607ce63          	bltz	a5,7514 <z_add_timeout+0xd0>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    749c:	0000d7b7          	lui	a5,0xd
    74a0:	23878793          	addi	a5,a5,568 # d238 <curr_tick>
    74a4:	0007a703          	lw	a4,0(a5)
    74a8:	0047a783          	lw	a5,4(a5)
    74ac:	40e68733          	sub	a4,a3,a4
    74b0:	00e6b6b3          	sltu	a3,a3,a4
    74b4:	fff7c793          	not	a5,a5
    74b8:	40d787b3          	sub	a5,a5,a3
    74bc:	409704b3          	sub	s1,a4,s1
    74c0:	00973733          	sltu	a4,a4,s1
    74c4:	413786b3          	sub	a3,a5,s3

			to->dticks = MAX(1, ticks);
    74c8:	40e686b3          	sub	a3,a3,a4
    74cc:	00d04a63          	bgtz	a3,74e0 <z_add_timeout+0x9c>
    74d0:	00069463          	bnez	a3,74d8 <z_add_timeout+0x94>
    74d4:	00049663          	bnez	s1,74e0 <z_add_timeout+0x9c>
    74d8:	00100493          	li	s1,1
    74dc:	00000693          	li	a3,0
    74e0:	00942823          	sw	s1,16(s0)
	return list->head == list;
    74e4:	00213637          	lui	a2,0x213
    74e8:	78c60713          	addi	a4,a2,1932 # 21378c <timeout_list>
    74ec:	00072783          	lw	a5,0(a4)
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    74f0:	00d42a23          	sw	a3,20(s0)
    74f4:	78c60613          	addi	a2,a2,1932
	sys_dnode_t *const tail = list->tail;
    74f8:	00472803          	lw	a6,4(a4)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    74fc:	06c79263          	bne	a5,a2,7560 <z_add_timeout+0x11c>
	node->next = list;
    7500:	00c42023          	sw	a2,0(s0)
	node->prev = tail;
    7504:	01042223          	sw	a6,4(s0)
	tail->next = node;
    7508:	00882023          	sw	s0,0(a6)
	list->tail = node;
    750c:	00862223          	sw	s0,4(a2)
}
    7510:	09c0006f          	j	75ac <z_add_timeout+0x168>
    7514:	e31ff0ef          	jal	ra,7344 <elapsed>
    7518:	00148793          	addi	a5,s1,1
    751c:	0097b4b3          	sltu	s1,a5,s1
    7520:	013486b3          	add	a3,s1,s3
    7524:	41f55493          	srai	s1,a0,0x1f
    7528:	00a78533          	add	a0,a5,a0
    752c:	00f537b3          	sltu	a5,a0,a5
    7530:	009686b3          	add	a3,a3,s1
    7534:	00d786b3          	add	a3,a5,a3
    7538:	00a42823          	sw	a0,16(s0)
    753c:	fa9ff06f          	j	74e4 <z_add_timeout+0xa0>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    7540:	40e68733          	sub	a4,a3,a4
    7544:	00e6b6b3          	sltu	a3,a3,a4
    7548:	40a585b3          	sub	a1,a1,a0
    754c:	40d586b3          	sub	a3,a1,a3
    7550:	00e42823          	sw	a4,16(s0)
    7554:	00d42a23          	sw	a3,20(s0)
	return (node == list->tail) ? NULL : node->next;
    7558:	faf804e3          	beq	a6,a5,7500 <z_add_timeout+0xbc>
    755c:	0007a783          	lw	a5,0(a5)
		for (t = first(); t != NULL; t = next(t)) {
    7560:	fa0780e3          	beqz	a5,7500 <z_add_timeout+0xbc>
			if (t->dticks > to->dticks) {
    7564:	0147a503          	lw	a0,20(a5)
    7568:	01442583          	lw	a1,20(s0)
    756c:	0107a703          	lw	a4,16(a5)
    7570:	01042683          	lw	a3,16(s0)
    7574:	00a5c663          	blt	a1,a0,7580 <z_add_timeout+0x13c>
    7578:	fcb514e3          	bne	a0,a1,7540 <z_add_timeout+0xfc>
    757c:	fce6f2e3          	bgeu	a3,a4,7540 <z_add_timeout+0xfc>
				t->dticks -= to->dticks;
    7580:	40d706b3          	sub	a3,a4,a3
    7584:	00d73733          	sltu	a4,a4,a3
    7588:	40b505b3          	sub	a1,a0,a1
    758c:	40e58733          	sub	a4,a1,a4
    7590:	00e7aa23          	sw	a4,20(a5)
	sys_dnode_t *const prev = successor->prev;
    7594:	0047a703          	lw	a4,4(a5)
    7598:	00d7a823          	sw	a3,16(a5)
	node->next = successor;
    759c:	00f42023          	sw	a5,0(s0)
	node->prev = prev;
    75a0:	00e42223          	sw	a4,4(s0)
	prev->next = node;
    75a4:	00872023          	sw	s0,0(a4)
	successor->prev = node;
    75a8:	0087a223          	sw	s0,4(a5)
	return list->head == list;
    75ac:	00062783          	lw	a5,0(a2)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    75b0:	02c78263          	beq	a5,a2,75d4 <z_add_timeout+0x190>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    75b4:	02f41063          	bne	s0,a5,75d4 <z_add_timeout+0x190>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    75b8:	da5ff0ef          	jal	ra,735c <next_timeout>

			if (next_time == 0 ||
    75bc:	00050863          	beqz	a0,75cc <z_add_timeout+0x188>
			    _current_cpu->slice_ticks != next_time) {
    75c0:	0000f7b7          	lui	a5,0xf
			if (next_time == 0 ||
    75c4:	5887a783          	lw	a5,1416(a5) # f588 <_kernel+0x10>
    75c8:	00a78663          	beq	a5,a0,75d4 <z_add_timeout+0x190>
				sys_clock_set_timeout(next_time, false);
    75cc:	00000593          	li	a1,0
    75d0:	865fe0ef          	jal	ra,5e34 <sys_clock_set_timeout>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    75d4:	30092973          	csrrs	s2,mstatus,s2
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    75d8:	01c12083          	lw	ra,28(sp)
    75dc:	01812403          	lw	s0,24(sp)
    75e0:	01412483          	lw	s1,20(sp)
    75e4:	01012903          	lw	s2,16(sp)
    75e8:	00c12983          	lw	s3,12(sp)
    75ec:	02010113          	addi	sp,sp,32
    75f0:	00008067          	ret

000075f4 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    75f4:	ff010113          	addi	sp,sp,-16
    75f8:	00812423          	sw	s0,8(sp)
    75fc:	00112623          	sw	ra,12(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    7600:	00800413          	li	s0,8
    7604:	30043473          	csrrc	s0,mstatus,s0
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    7608:	00052783          	lw	a5,0(a0)
	key = (mstatus & MSTATUS_IEN);
    760c:	00847413          	andi	s0,s0,8
    7610:	02078063          	beqz	a5,7630 <z_abort_timeout+0x3c>
			remove_timeout(to);
    7614:	dd9ff0ef          	jal	ra,73ec <remove_timeout>
			ret = 0;
    7618:	00000513          	li	a0,0
	__asm__ volatile ("csrrs %0, mstatus, %1"
    761c:	30042473          	csrrs	s0,mstatus,s0
		}
	}

	return ret;
}
    7620:	00c12083          	lw	ra,12(sp)
    7624:	00812403          	lw	s0,8(sp)
    7628:	01010113          	addi	sp,sp,16
    762c:	00008067          	ret
	int ret = -EINVAL;
    7630:	fea00513          	li	a0,-22
    7634:	fe9ff06f          	j	761c <z_abort_timeout+0x28>

00007638 <z_set_timeout_expiry>:
	}
	return ret;
}

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    7638:	fe010113          	addi	sp,sp,-32
    763c:	00812c23          	sw	s0,24(sp)
    7640:	00912a23          	sw	s1,20(sp)
    7644:	00112e23          	sw	ra,28(sp)
    7648:	00050493          	mv	s1,a0
    764c:	00b12623          	sw	a1,12(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    7650:	00800413          	li	s0,8
    7654:	30043473          	csrrc	s0,mstatus,s0
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    7658:	d05ff0ef          	jal	ra,735c <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    765c:	00100793          	li	a5,1
	key = (mstatus & MSTATUS_IEN);
    7660:	00847413          	andi	s0,s0,8
    7664:	00a7da63          	bge	a5,a0,7678 <z_set_timeout_expiry+0x40>
    7668:	00c12583          	lw	a1,12(sp)
    766c:	00954663          	blt	a0,s1,7678 <z_set_timeout_expiry+0x40>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    7670:	00048513          	mv	a0,s1
    7674:	fc0fe0ef          	jal	ra,5e34 <sys_clock_set_timeout>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    7678:	30042473          	csrrs	s0,mstatus,s0
		}
	}
}
    767c:	01c12083          	lw	ra,28(sp)
    7680:	01812403          	lw	s0,24(sp)
    7684:	01412483          	lw	s1,20(sp)
    7688:	02010113          	addi	sp,sp,32
    768c:	00008067          	ret

00007690 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    7690:	fd010113          	addi	sp,sp,-48
    7694:	02812423          	sw	s0,40(sp)
    7698:	02912223          	sw	s1,36(sp)
    769c:	02112623          	sw	ra,44(sp)
    76a0:	03212023          	sw	s2,32(sp)
    76a4:	01312e23          	sw	s3,28(sp)
    76a8:	01412c23          	sw	s4,24(sp)
    76ac:	00050493          	mv	s1,a0
	__asm__ volatile ("csrrc %0, mstatus, %1"
    76b0:	00800413          	li	s0,8
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    76b4:	b14ff0ef          	jal	ra,69c8 <z_time_slice>
    76b8:	30043473          	csrrc	s0,mstatus,s0
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    76bc:	0000d937          	lui	s2,0xd
    76c0:	26992223          	sw	s1,612(s2) # d264 <announce_remaining>
	return list->head == list;
    76c4:	002139b7          	lui	s3,0x213

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    76c8:	0000d4b7          	lui	s1,0xd
	key = (mstatus & MSTATUS_IEN);
    76cc:	00847413          	andi	s0,s0,8
	while (first() != NULL && first()->dticks <= announce_remaining) {
    76d0:	26490913          	addi	s2,s2,612
    76d4:	78c98993          	addi	s3,s3,1932 # 21378c <timeout_list>
		curr_tick += dt;
    76d8:	23848493          	addi	s1,s1,568 # d238 <curr_tick>
	__asm__ volatile ("csrrc %0, mstatus, %1"
    76dc:	00800a13          	li	s4,8
	while (first() != NULL && first()->dticks <= announce_remaining) {
    76e0:	00092783          	lw	a5,0(s2)
    76e4:	0009a503          	lw	a0,0(s3)
		curr_tick += dt;
    76e8:	0004a683          	lw	a3,0(s1)
    76ec:	0044a883          	lw	a7,4(s1)
    76f0:	41f7d593          	srai	a1,a5,0x1f
	return sys_dlist_is_empty(list) ? NULL : list->head;
    76f4:	03350a63          	beq	a0,s3,7728 <sys_clock_announce+0x98>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    76f8:	02050863          	beqz	a0,7728 <sys_clock_announce+0x98>
    76fc:	01452603          	lw	a2,20(a0)
    7700:	01052703          	lw	a4,16(a0)
    7704:	00c5c663          	blt	a1,a2,7710 <sys_clock_announce+0x80>
    7708:	06b61663          	bne	a2,a1,7774 <sys_clock_announce+0xe4>
    770c:	06e7f463          	bgeu	a5,a4,7774 <sys_clock_announce+0xe4>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    7710:	40f70833          	sub	a6,a4,a5
    7714:	01073733          	sltu	a4,a4,a6
    7718:	40b60633          	sub	a2,a2,a1
    771c:	40e60733          	sub	a4,a2,a4
    7720:	01052823          	sw	a6,16(a0)
    7724:	00e52a23          	sw	a4,20(a0)
	}

	curr_tick += announce_remaining;
    7728:	00d786b3          	add	a3,a5,a3
    772c:	011585b3          	add	a1,a1,a7
    7730:	00f6b7b3          	sltu	a5,a3,a5
    7734:	00b787b3          	add	a5,a5,a1
    7738:	00d4a023          	sw	a3,0(s1)
    773c:	00f4a223          	sw	a5,4(s1)
	announce_remaining = 0;
    7740:	00092023          	sw	zero,0(s2)

	sys_clock_set_timeout(next_timeout(), false);
    7744:	c19ff0ef          	jal	ra,735c <next_timeout>
    7748:	00000593          	li	a1,0
    774c:	ee8fe0ef          	jal	ra,5e34 <sys_clock_set_timeout>
	__asm__ volatile ("csrrs %0, mstatus, %1"
    7750:	30042473          	csrrs	s0,mstatus,s0

	k_spin_unlock(&timeout_lock, key);
}
    7754:	02c12083          	lw	ra,44(sp)
    7758:	02812403          	lw	s0,40(sp)
    775c:	02412483          	lw	s1,36(sp)
    7760:	02012903          	lw	s2,32(sp)
    7764:	01c12983          	lw	s3,28(sp)
    7768:	01812a03          	lw	s4,24(sp)
    776c:	03010113          	addi	sp,sp,48
    7770:	00008067          	ret
		curr_tick += dt;
    7774:	00d706b3          	add	a3,a4,a3
		announce_remaining -= dt;
    7778:	40e787b3          	sub	a5,a5,a4
		curr_tick += dt;
    777c:	41f75593          	srai	a1,a4,0x1f
    7780:	00e6b633          	sltu	a2,a3,a4
    7784:	011585b3          	add	a1,a1,a7
		announce_remaining -= dt;
    7788:	00f92023          	sw	a5,0(s2)
		t->dticks = 0;
    778c:	00000813          	li	a6,0
    7790:	00000793          	li	a5,0
		curr_tick += dt;
    7794:	00b605b3          	add	a1,a2,a1
		t->dticks = 0;
    7798:	00f52823          	sw	a5,16(a0)
    779c:	01052a23          	sw	a6,20(a0)
		curr_tick += dt;
    77a0:	00d4a023          	sw	a3,0(s1)
    77a4:	00b4a223          	sw	a1,4(s1)
		remove_timeout(t);
    77a8:	00a12623          	sw	a0,12(sp)
    77ac:	c41ff0ef          	jal	ra,73ec <remove_timeout>
    77b0:	30042473          	csrrs	s0,mstatus,s0
		t->fn(t);
    77b4:	00c12503          	lw	a0,12(sp)
    77b8:	00852783          	lw	a5,8(a0)
    77bc:	000780e7          	jalr	a5
	__asm__ volatile ("csrrc %0, mstatus, %1"
    77c0:	300a3473          	csrrc	s0,mstatus,s4
	key = (mstatus & MSTATUS_IEN);
    77c4:	00847413          	andi	s0,s0,8
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    77c8:	f19ff06f          	j	76e0 <sys_clock_announce+0x50>

000077cc <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    77cc:	ff010113          	addi	sp,sp,-16
    77d0:	00812423          	sw	s0,8(sp)
    77d4:	00112623          	sw	ra,12(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    77d8:	00800413          	li	s0,8
    77dc:	30043473          	csrrc	s0,mstatus,s0
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    77e0:	e58fe0ef          	jal	ra,5e38 <sys_clock_elapsed>
    77e4:	0000d737          	lui	a4,0xd
    77e8:	23870713          	addi	a4,a4,568 # d238 <curr_tick>
    77ec:	00050793          	mv	a5,a0
    77f0:	00072503          	lw	a0,0(a4)
    77f4:	00472583          	lw	a1,4(a4)
	key = (mstatus & MSTATUS_IEN);
    77f8:	00847413          	andi	s0,s0,8
    77fc:	00a78533          	add	a0,a5,a0
    7800:	00f537b3          	sltu	a5,a0,a5
    7804:	00b785b3          	add	a1,a5,a1
	__asm__ volatile ("csrrs %0, mstatus, %1"
    7808:	30042473          	csrrs	s0,mstatus,s0
	}
	return t;
}
    780c:	00c12083          	lw	ra,12(sp)
    7810:	00812403          	lw	s0,8(sp)
    7814:	01010113          	addi	sp,sp,16
    7818:	00008067          	ret

0000781c <sys_clock_tick_get_32>:
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
#else
	return (uint32_t)curr_tick;
#endif
}
    781c:	0000d7b7          	lui	a5,0xd
    7820:	2387a503          	lw	a0,568(a5) # d238 <curr_tick>
    7824:	00008067          	ret

00007828 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    7828:	fa5ff06f          	j	77cc <sys_clock_tick_get>

0000782c <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    782c:	0000d637          	lui	a2,0xd
    7830:	0000d5b7          	lui	a1,0xd
    7834:	0000d537          	lui	a0,0xd
    7838:	1ec60613          	addi	a2,a2,492 # d1ec <p05.0+0x2c>
    783c:	e9858593          	addi	a1,a1,-360 # ce98 <levels.0+0x1c>
    7840:	ea050513          	addi	a0,a0,-352 # cea0 <levels.0+0x24>
    7844:	cd1fc06f          	j	4514 <printk>

00007848 <exp>:
    7848:	fe010113          	addi	sp,sp,-32
    784c:	00812c23          	sw	s0,24(sp)
    7850:	00912a23          	sw	s1,20(sp)
    7854:	01212823          	sw	s2,16(sp)
    7858:	01312623          	sw	s3,12(sp)
    785c:	00112e23          	sw	ra,28(sp)
    7860:	00050993          	mv	s3,a0
    7864:	00058913          	mv	s2,a1
    7868:	0b8000ef          	jal	ra,7920 <__ieee754_exp>
    786c:	002137b7          	lui	a5,0x213
    7870:	7987a703          	lw	a4,1944(a5) # 213798 <__fdlib_version>
    7874:	fff00793          	li	a5,-1
    7878:	00050493          	mv	s1,a0
    787c:	00058413          	mv	s0,a1
    7880:	04f70463          	beq	a4,a5,78c8 <exp+0x80>
    7884:	00098513          	mv	a0,s3
    7888:	00090593          	mv	a1,s2
    788c:	4d8000ef          	jal	ra,7d64 <finite>
    7890:	02050c63          	beqz	a0,78c8 <exp+0x80>
    7894:	0000d7b7          	lui	a5,0xd
    7898:	8607a603          	lw	a2,-1952(a5) # c860 <__device_handles_end+0x8>
    789c:	8647a683          	lw	a3,-1948(a5)
    78a0:	00098513          	mv	a0,s3
    78a4:	00090593          	mv	a1,s2
    78a8:	cc5fb0ef          	jal	ra,356c <__gedf2>
    78ac:	04a05063          	blez	a0,78ec <exp+0xa4>
    78b0:	d45fd0ef          	jal	ra,55f4 <__errno>
    78b4:	02200793          	li	a5,34
    78b8:	00f52023          	sw	a5,0(a0)
    78bc:	0000d7b7          	lui	a5,0xd
    78c0:	8587a483          	lw	s1,-1960(a5) # c858 <__device_handles_end>
    78c4:	85c7a403          	lw	s0,-1956(a5)
    78c8:	01c12083          	lw	ra,28(sp)
    78cc:	00040593          	mv	a1,s0
    78d0:	01812403          	lw	s0,24(sp)
    78d4:	01012903          	lw	s2,16(sp)
    78d8:	00c12983          	lw	s3,12(sp)
    78dc:	00048513          	mv	a0,s1
    78e0:	01412483          	lw	s1,20(sp)
    78e4:	02010113          	addi	sp,sp,32
    78e8:	00008067          	ret
    78ec:	0000d7b7          	lui	a5,0xd
    78f0:	8687a603          	lw	a2,-1944(a5) # c868 <__device_handles_end+0x10>
    78f4:	86c7a683          	lw	a3,-1940(a5)
    78f8:	00098513          	mv	a0,s3
    78fc:	00090593          	mv	a1,s2
    7900:	d51fb0ef          	jal	ra,3650 <__ledf2>
    7904:	fc0552e3          	bgez	a0,78c8 <exp+0x80>
    7908:	cedfd0ef          	jal	ra,55f4 <__errno>
    790c:	02200793          	li	a5,34
    7910:	00f52023          	sw	a5,0(a0)
    7914:	00000493          	li	s1,0
    7918:	00000413          	li	s0,0
    791c:	fadff06f          	j	78c8 <exp+0x80>

00007920 <__ieee754_exp>:
    7920:	fc010113          	addi	sp,sp,-64
    7924:	00159793          	slli	a5,a1,0x1
    7928:	408636b7          	lui	a3,0x40863
    792c:	02812c23          	sw	s0,56(sp)
    7930:	02912a23          	sw	s1,52(sp)
    7934:	03512223          	sw	s5,36(sp)
    7938:	02112e23          	sw	ra,60(sp)
    793c:	03212823          	sw	s2,48(sp)
    7940:	03312623          	sw	s3,44(sp)
    7944:	03412423          	sw	s4,40(sp)
    7948:	03612023          	sw	s6,32(sp)
    794c:	01712e23          	sw	s7,28(sp)
    7950:	01812c23          	sw	s8,24(sp)
    7954:	01912a23          	sw	s9,20(sp)
    7958:	01a12823          	sw	s10,16(sp)
    795c:	01b12623          	sw	s11,12(sp)
    7960:	0017d793          	srli	a5,a5,0x1
    7964:	e4168693          	addi	a3,a3,-447 # 40862e41 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3d8b3dc1>
    7968:	00050493          	mv	s1,a0
    796c:	00058413          	mv	s0,a1
    7970:	01f5da93          	srli	s5,a1,0x1f
    7974:	0cf6fa63          	bgeu	a3,a5,7a48 <__ieee754_exp+0x128>
    7978:	7ff006b7          	lui	a3,0x7ff00
    797c:	06d7ea63          	bltu	a5,a3,79f0 <__ieee754_exp+0xd0>
    7980:	00c59793          	slli	a5,a1,0xc
    7984:	00c7d793          	srli	a5,a5,0xc
    7988:	00a7e7b3          	or	a5,a5,a0
    798c:	00078e63          	beqz	a5,79a8 <__ieee754_exp+0x88>
    7990:	00050613          	mv	a2,a0
    7994:	00058693          	mv	a3,a1
    7998:	9dcf90ef          	jal	ra,b74 <__adddf3>
    799c:	00050493          	mv	s1,a0
    79a0:	00058413          	mv	s0,a1
    79a4:	0080006f          	j	79ac <__ieee754_exp+0x8c>
    79a8:	080a9a63          	bnez	s5,7a3c <__ieee754_exp+0x11c>
    79ac:	03c12083          	lw	ra,60(sp)
    79b0:	00040593          	mv	a1,s0
    79b4:	03812403          	lw	s0,56(sp)
    79b8:	03012903          	lw	s2,48(sp)
    79bc:	02c12983          	lw	s3,44(sp)
    79c0:	02812a03          	lw	s4,40(sp)
    79c4:	02412a83          	lw	s5,36(sp)
    79c8:	02012b03          	lw	s6,32(sp)
    79cc:	01c12b83          	lw	s7,28(sp)
    79d0:	01812c03          	lw	s8,24(sp)
    79d4:	01412c83          	lw	s9,20(sp)
    79d8:	01012d03          	lw	s10,16(sp)
    79dc:	00c12d83          	lw	s11,12(sp)
    79e0:	00048513          	mv	a0,s1
    79e4:	03412483          	lw	s1,52(sp)
    79e8:	04010113          	addi	sp,sp,64
    79ec:	00008067          	ret
    79f0:	0000d7b7          	lui	a5,0xd
    79f4:	8607a603          	lw	a2,-1952(a5) # c860 <__device_handles_end+0x8>
    79f8:	8647a683          	lw	a3,-1948(a5)
    79fc:	b71fb0ef          	jal	ra,356c <__gedf2>
    7a00:	02a05063          	blez	a0,7a20 <__ieee754_exp+0x100>
    7a04:	0000d7b7          	lui	a5,0xd
    7a08:	8707a603          	lw	a2,-1936(a5) # c870 <__device_handles_end+0x18>
    7a0c:	8747a683          	lw	a3,-1932(a5)
    7a10:	00060513          	mv	a0,a2
    7a14:	00068593          	mv	a1,a3
    7a18:	814fa0ef          	jal	ra,1a2c <__muldf3>
    7a1c:	f81ff06f          	j	799c <__ieee754_exp+0x7c>
    7a20:	0000d7b7          	lui	a5,0xd
    7a24:	8687a603          	lw	a2,-1944(a5) # c868 <__device_handles_end+0x10>
    7a28:	86c7a683          	lw	a3,-1940(a5)
    7a2c:	00048513          	mv	a0,s1
    7a30:	00040593          	mv	a1,s0
    7a34:	c1dfb0ef          	jal	ra,3650 <__ledf2>
    7a38:	1a055a63          	bgez	a0,7bec <__ieee754_exp+0x2cc>
    7a3c:	00000493          	li	s1,0
    7a40:	00000413          	li	s0,0
    7a44:	f69ff06f          	j	79ac <__ieee754_exp+0x8c>
    7a48:	3fd63737          	lui	a4,0x3fd63
    7a4c:	e4270713          	addi	a4,a4,-446 # 3fd62e42 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3cdb3dc2>
    7a50:	22f77a63          	bgeu	a4,a5,7c84 <__ieee754_exp+0x364>
    7a54:	3ff0a737          	lui	a4,0x3ff0a
    7a58:	2b170713          	addi	a4,a4,689 # 3ff0a2b1 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3cf5b231>
    7a5c:	18f76863          	bltu	a4,a5,7bec <__ieee754_exp+0x2cc>
    7a60:	0000d737          	lui	a4,0xd
    7a64:	003a9413          	slli	s0,s5,0x3
    7a68:	af070713          	addi	a4,a4,-1296 # caf0 <ln2HI>
    7a6c:	00870733          	add	a4,a4,s0
    7a70:	00072603          	lw	a2,0(a4)
    7a74:	00472683          	lw	a3,4(a4)
    7a78:	00100913          	li	s2,1
    7a7c:	41590933          	sub	s2,s2,s5
    7a80:	d74fa0ef          	jal	ra,1ff4 <__subdf3>
    7a84:	0000d7b7          	lui	a5,0xd
    7a88:	b0078793          	addi	a5,a5,-1280 # cb00 <ln2LO>
    7a8c:	008787b3          	add	a5,a5,s0
    7a90:	0007ab83          	lw	s7,0(a5)
    7a94:	0047ab03          	lw	s6,4(a5)
    7a98:	00050a13          	mv	s4,a0
    7a9c:	00058993          	mv	s3,a1
    7aa0:	41590933          	sub	s2,s2,s5
    7aa4:	000b8613          	mv	a2,s7
    7aa8:	000b0693          	mv	a3,s6
    7aac:	000a0513          	mv	a0,s4
    7ab0:	00098593          	mv	a1,s3
    7ab4:	d40fa0ef          	jal	ra,1ff4 <__subdf3>
    7ab8:	00050493          	mv	s1,a0
    7abc:	00058413          	mv	s0,a1
    7ac0:	00048613          	mv	a2,s1
    7ac4:	00040693          	mv	a3,s0
    7ac8:	00048513          	mv	a0,s1
    7acc:	00040593          	mv	a1,s0
    7ad0:	f5df90ef          	jal	ra,1a2c <__muldf3>
    7ad4:	0000d7b7          	lui	a5,0xd
    7ad8:	8987a603          	lw	a2,-1896(a5) # c898 <__device_handles_end+0x40>
    7adc:	89c7a683          	lw	a3,-1892(a5)
    7ae0:	00050c13          	mv	s8,a0
    7ae4:	00058a93          	mv	s5,a1
    7ae8:	f45f90ef          	jal	ra,1a2c <__muldf3>
    7aec:	0000d7b7          	lui	a5,0xd
    7af0:	8a07a603          	lw	a2,-1888(a5) # c8a0 <__device_handles_end+0x48>
    7af4:	8a47a683          	lw	a3,-1884(a5)
    7af8:	0000ddb7          	lui	s11,0xd
    7afc:	cf8fa0ef          	jal	ra,1ff4 <__subdf3>
    7b00:	000c0613          	mv	a2,s8
    7b04:	000a8693          	mv	a3,s5
    7b08:	f25f90ef          	jal	ra,1a2c <__muldf3>
    7b0c:	0000d7b7          	lui	a5,0xd
    7b10:	8a87a603          	lw	a2,-1880(a5) # c8a8 <__device_handles_end+0x50>
    7b14:	8ac7a683          	lw	a3,-1876(a5)
    7b18:	85cf90ef          	jal	ra,b74 <__adddf3>
    7b1c:	000c0613          	mv	a2,s8
    7b20:	000a8693          	mv	a3,s5
    7b24:	f09f90ef          	jal	ra,1a2c <__muldf3>
    7b28:	0000d7b7          	lui	a5,0xd
    7b2c:	8b07a603          	lw	a2,-1872(a5) # c8b0 <__device_handles_end+0x58>
    7b30:	8b47a683          	lw	a3,-1868(a5)
    7b34:	cc0fa0ef          	jal	ra,1ff4 <__subdf3>
    7b38:	000c0613          	mv	a2,s8
    7b3c:	000a8693          	mv	a3,s5
    7b40:	eedf90ef          	jal	ra,1a2c <__muldf3>
    7b44:	0000d7b7          	lui	a5,0xd
    7b48:	8b87a603          	lw	a2,-1864(a5) # c8b8 <__device_handles_end+0x60>
    7b4c:	8bc7a683          	lw	a3,-1860(a5)
    7b50:	824f90ef          	jal	ra,b74 <__adddf3>
    7b54:	000c0613          	mv	a2,s8
    7b58:	000a8693          	mv	a3,s5
    7b5c:	ed1f90ef          	jal	ra,1a2c <__muldf3>
    7b60:	00050613          	mv	a2,a0
    7b64:	00058693          	mv	a3,a1
    7b68:	00048513          	mv	a0,s1
    7b6c:	00040593          	mv	a1,s0
    7b70:	c84fa0ef          	jal	ra,1ff4 <__subdf3>
    7b74:	00050613          	mv	a2,a0
    7b78:	00058693          	mv	a3,a1
    7b7c:	00050c13          	mv	s8,a0
    7b80:	00058a93          	mv	s5,a1
    7b84:	00048513          	mv	a0,s1
    7b88:	00040593          	mv	a1,s0
    7b8c:	ea1f90ef          	jal	ra,1a2c <__muldf3>
    7b90:	00050d13          	mv	s10,a0
    7b94:	00058c93          	mv	s9,a1
    7b98:	0000d7b7          	lui	a5,0xd
    7b9c:	12091c63          	bnez	s2,7cd4 <__ieee754_exp+0x3b4>
    7ba0:	8c07a603          	lw	a2,-1856(a5) # c8c0 <__device_handles_end+0x68>
    7ba4:	8c47a683          	lw	a3,-1852(a5)
    7ba8:	000c0513          	mv	a0,s8
    7bac:	000a8593          	mv	a1,s5
    7bb0:	c44fa0ef          	jal	ra,1ff4 <__subdf3>
    7bb4:	00050613          	mv	a2,a0
    7bb8:	00058693          	mv	a3,a1
    7bbc:	000d0513          	mv	a0,s10
    7bc0:	000c8593          	mv	a1,s9
    7bc4:	f88f90ef          	jal	ra,134c <__divdf3>
    7bc8:	00048613          	mv	a2,s1
    7bcc:	00040693          	mv	a3,s0
    7bd0:	c24fa0ef          	jal	ra,1ff4 <__subdf3>
    7bd4:	00050613          	mv	a2,a0
    7bd8:	00058693          	mv	a3,a1
    7bdc:	890da503          	lw	a0,-1904(s11) # c890 <__device_handles_end+0x38>
    7be0:	894da583          	lw	a1,-1900(s11)
    7be4:	c10fa0ef          	jal	ra,1ff4 <__subdf3>
    7be8:	db5ff06f          	j	799c <__ieee754_exp+0x7c>
    7bec:	0000d7b7          	lui	a5,0xd
    7bf0:	8787a603          	lw	a2,-1928(a5) # c878 <__device_handles_end+0x20>
    7bf4:	87c7a683          	lw	a3,-1924(a5)
    7bf8:	003a9913          	slli	s2,s5,0x3
    7bfc:	0000dab7          	lui	s5,0xd
    7c00:	ae0a8a93          	addi	s5,s5,-1312 # cae0 <halF>
    7c04:	00048513          	mv	a0,s1
    7c08:	00040593          	mv	a1,s0
    7c0c:	012a8933          	add	s2,s5,s2
    7c10:	e1df90ef          	jal	ra,1a2c <__muldf3>
    7c14:	00092603          	lw	a2,0(s2)
    7c18:	00492683          	lw	a3,4(s2)
    7c1c:	f59f80ef          	jal	ra,b74 <__adddf3>
    7c20:	b61fb0ef          	jal	ra,3780 <__fixdfsi>
    7c24:	00050913          	mv	s2,a0
    7c28:	bd9fb0ef          	jal	ra,3800 <__floatsidf>
    7c2c:	0000d7b7          	lui	a5,0xd
    7c30:	8807a603          	lw	a2,-1920(a5) # c880 <__device_handles_end+0x28>
    7c34:	8847a683          	lw	a3,-1916(a5)
    7c38:	00050b13          	mv	s6,a0
    7c3c:	00058a93          	mv	s5,a1
    7c40:	dedf90ef          	jal	ra,1a2c <__muldf3>
    7c44:	00050613          	mv	a2,a0
    7c48:	00058693          	mv	a3,a1
    7c4c:	00048513          	mv	a0,s1
    7c50:	00040593          	mv	a1,s0
    7c54:	ba0fa0ef          	jal	ra,1ff4 <__subdf3>
    7c58:	0000d7b7          	lui	a5,0xd
    7c5c:	8887a603          	lw	a2,-1912(a5) # c888 <__device_handles_end+0x30>
    7c60:	88c7a683          	lw	a3,-1908(a5)
    7c64:	00050a13          	mv	s4,a0
    7c68:	00058993          	mv	s3,a1
    7c6c:	000b0513          	mv	a0,s6
    7c70:	000a8593          	mv	a1,s5
    7c74:	db9f90ef          	jal	ra,1a2c <__muldf3>
    7c78:	00050b93          	mv	s7,a0
    7c7c:	00058b13          	mv	s6,a1
    7c80:	e25ff06f          	j	7aa4 <__ieee754_exp+0x184>
    7c84:	3e300737          	lui	a4,0x3e300
    7c88:	04e7f263          	bgeu	a5,a4,7ccc <__ieee754_exp+0x3ac>
    7c8c:	0000d7b7          	lui	a5,0xd
    7c90:	8707a603          	lw	a2,-1936(a5) # c870 <__device_handles_end+0x18>
    7c94:	8747a683          	lw	a3,-1932(a5)
    7c98:	eddf80ef          	jal	ra,b74 <__adddf3>
    7c9c:	0000d7b7          	lui	a5,0xd
    7ca0:	8907ac03          	lw	s8,-1904(a5) # c890 <__device_handles_end+0x38>
    7ca4:	8947ac83          	lw	s9,-1900(a5)
    7ca8:	000c0613          	mv	a2,s8
    7cac:	000c8693          	mv	a3,s9
    7cb0:	8bdfb0ef          	jal	ra,356c <__gedf2>
    7cb4:	00a05c63          	blez	a0,7ccc <__ieee754_exp+0x3ac>
    7cb8:	000c0613          	mv	a2,s8
    7cbc:	000c8693          	mv	a3,s9
    7cc0:	00048513          	mv	a0,s1
    7cc4:	00040593          	mv	a1,s0
    7cc8:	cd1ff06f          	j	7998 <__ieee754_exp+0x78>
    7ccc:	00000913          	li	s2,0
    7cd0:	df1ff06f          	j	7ac0 <__ieee754_exp+0x1a0>
    7cd4:	8c07a503          	lw	a0,-1856(a5)
    7cd8:	8c47a583          	lw	a1,-1852(a5)
    7cdc:	000c0613          	mv	a2,s8
    7ce0:	000a8693          	mv	a3,s5
    7ce4:	b10fa0ef          	jal	ra,1ff4 <__subdf3>
    7ce8:	00050613          	mv	a2,a0
    7cec:	00058693          	mv	a3,a1
    7cf0:	000d0513          	mv	a0,s10
    7cf4:	000c8593          	mv	a1,s9
    7cf8:	e54f90ef          	jal	ra,134c <__divdf3>
    7cfc:	00050613          	mv	a2,a0
    7d00:	00058693          	mv	a3,a1
    7d04:	000b8513          	mv	a0,s7
    7d08:	000b0593          	mv	a1,s6
    7d0c:	ae8fa0ef          	jal	ra,1ff4 <__subdf3>
    7d10:	000a0613          	mv	a2,s4
    7d14:	00098693          	mv	a3,s3
    7d18:	adcfa0ef          	jal	ra,1ff4 <__subdf3>
    7d1c:	00058693          	mv	a3,a1
    7d20:	00050613          	mv	a2,a0
    7d24:	894da583          	lw	a1,-1900(s11)
    7d28:	890da503          	lw	a0,-1904(s11)
    7d2c:	ac8fa0ef          	jal	ra,1ff4 <__subdf3>
    7d30:	c0300693          	li	a3,-1021
    7d34:	00d94863          	blt	s2,a3,7d44 <__ieee754_exp+0x424>
    7d38:	01491913          	slli	s2,s2,0x14
    7d3c:	00b905b3          	add	a1,s2,a1
    7d40:	c5dff06f          	j	799c <__ieee754_exp+0x7c>
    7d44:	3e890913          	addi	s2,s2,1000
    7d48:	01491913          	slli	s2,s2,0x14
    7d4c:	0000d7b7          	lui	a5,0xd
    7d50:	00b90833          	add	a6,s2,a1
    7d54:	8c87a603          	lw	a2,-1848(a5) # c8c8 <__device_handles_end+0x70>
    7d58:	8cc7a683          	lw	a3,-1844(a5)
    7d5c:	00080593          	mv	a1,a6
    7d60:	cb9ff06f          	j	7a18 <__ieee754_exp+0xf8>

00007d64 <finite>:
    7d64:	00159513          	slli	a0,a1,0x1
    7d68:	00155513          	srli	a0,a0,0x1
    7d6c:	801005b7          	lui	a1,0x80100
    7d70:	00b50533          	add	a0,a0,a1
    7d74:	01f55513          	srli	a0,a0,0x1f
    7d78:	00008067          	ret

00007d7c <malloc>:
    7d7c:	002137b7          	lui	a5,0x213
    7d80:	00050593          	mv	a1,a0
    7d84:	79c7a503          	lw	a0,1948(a5) # 21379c <_impure_ptr>
    7d88:	1080006f          	j	7e90 <_malloc_r>

00007d8c <_free_r>:
    7d8c:	10058063          	beqz	a1,7e8c <_free_r+0x100>
    7d90:	ffc5a783          	lw	a5,-4(a1) # 800ffffc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800ffffd>
    7d94:	fe010113          	addi	sp,sp,-32
    7d98:	00812c23          	sw	s0,24(sp)
    7d9c:	00112e23          	sw	ra,28(sp)
    7da0:	ffc58413          	addi	s0,a1,-4
    7da4:	0007d463          	bgez	a5,7dac <_free_r+0x20>
    7da8:	00f40433          	add	s0,s0,a5
    7dac:	00a12623          	sw	a0,12(sp)
    7db0:	19d020ef          	jal	ra,a74c <__malloc_lock>
    7db4:	0000d737          	lui	a4,0xd
    7db8:	26872783          	lw	a5,616(a4) # d268 <__malloc_free_list>
    7dbc:	00c12503          	lw	a0,12(sp)
    7dc0:	00070613          	mv	a2,a4
    7dc4:	00079e63          	bnez	a5,7de0 <_free_r+0x54>
    7dc8:	00042223          	sw	zero,4(s0)
    7dcc:	26872423          	sw	s0,616(a4)
    7dd0:	01812403          	lw	s0,24(sp)
    7dd4:	01c12083          	lw	ra,28(sp)
    7dd8:	02010113          	addi	sp,sp,32
    7ddc:	17d0206f          	j	a758 <__malloc_unlock>
    7de0:	02f47663          	bgeu	s0,a5,7e0c <_free_r+0x80>
    7de4:	00042683          	lw	a3,0(s0)
    7de8:	00d40733          	add	a4,s0,a3
    7dec:	00e79a63          	bne	a5,a4,7e00 <_free_r+0x74>
    7df0:	0007a703          	lw	a4,0(a5)
    7df4:	0047a783          	lw	a5,4(a5)
    7df8:	00d70733          	add	a4,a4,a3
    7dfc:	00e42023          	sw	a4,0(s0)
    7e00:	00f42223          	sw	a5,4(s0)
    7e04:	26862423          	sw	s0,616(a2)
    7e08:	fc9ff06f          	j	7dd0 <_free_r+0x44>
    7e0c:	00078713          	mv	a4,a5
    7e10:	0047a783          	lw	a5,4(a5)
    7e14:	00078463          	beqz	a5,7e1c <_free_r+0x90>
    7e18:	fef47ae3          	bgeu	s0,a5,7e0c <_free_r+0x80>
    7e1c:	00072683          	lw	a3,0(a4)
    7e20:	00d70633          	add	a2,a4,a3
    7e24:	02861863          	bne	a2,s0,7e54 <_free_r+0xc8>
    7e28:	00042603          	lw	a2,0(s0)
    7e2c:	00c686b3          	add	a3,a3,a2
    7e30:	00d72023          	sw	a3,0(a4)
    7e34:	00d70633          	add	a2,a4,a3
    7e38:	f8c79ce3          	bne	a5,a2,7dd0 <_free_r+0x44>
    7e3c:	0007a603          	lw	a2,0(a5)
    7e40:	0047a783          	lw	a5,4(a5)
    7e44:	00d606b3          	add	a3,a2,a3
    7e48:	00d72023          	sw	a3,0(a4)
    7e4c:	00f72223          	sw	a5,4(a4)
    7e50:	f81ff06f          	j	7dd0 <_free_r+0x44>
    7e54:	00c47863          	bgeu	s0,a2,7e64 <_free_r+0xd8>
    7e58:	00c00793          	li	a5,12
    7e5c:	00f52023          	sw	a5,0(a0)
    7e60:	f71ff06f          	j	7dd0 <_free_r+0x44>
    7e64:	00042603          	lw	a2,0(s0)
    7e68:	00c406b3          	add	a3,s0,a2
    7e6c:	00d79a63          	bne	a5,a3,7e80 <_free_r+0xf4>
    7e70:	0007a683          	lw	a3,0(a5)
    7e74:	0047a783          	lw	a5,4(a5)
    7e78:	00c686b3          	add	a3,a3,a2
    7e7c:	00d42023          	sw	a3,0(s0)
    7e80:	00f42223          	sw	a5,4(s0)
    7e84:	00872223          	sw	s0,4(a4)
    7e88:	f49ff06f          	j	7dd0 <_free_r+0x44>
    7e8c:	00008067          	ret

00007e90 <_malloc_r>:
    7e90:	fe010113          	addi	sp,sp,-32
    7e94:	00912a23          	sw	s1,20(sp)
    7e98:	00358493          	addi	s1,a1,3
    7e9c:	ffc4f493          	andi	s1,s1,-4
    7ea0:	01212823          	sw	s2,16(sp)
    7ea4:	00112e23          	sw	ra,28(sp)
    7ea8:	00812c23          	sw	s0,24(sp)
    7eac:	01312623          	sw	s3,12(sp)
    7eb0:	00848493          	addi	s1,s1,8
    7eb4:	00c00793          	li	a5,12
    7eb8:	00050913          	mv	s2,a0
    7ebc:	06f4f863          	bgeu	s1,a5,7f2c <_malloc_r+0x9c>
    7ec0:	00c00493          	li	s1,12
    7ec4:	06b4e663          	bltu	s1,a1,7f30 <_malloc_r+0xa0>
    7ec8:	00090513          	mv	a0,s2
    7ecc:	081020ef          	jal	ra,a74c <__malloc_lock>
    7ed0:	0000d7b7          	lui	a5,0xd
    7ed4:	2687a703          	lw	a4,616(a5) # d268 <__malloc_free_list>
    7ed8:	26878693          	addi	a3,a5,616
    7edc:	00070413          	mv	s0,a4
    7ee0:	06041c63          	bnez	s0,7f58 <_malloc_r+0xc8>
    7ee4:	0000d437          	lui	s0,0xd
    7ee8:	26c40413          	addi	s0,s0,620 # d26c <__malloc_sbrk_start>
    7eec:	00042783          	lw	a5,0(s0)
    7ef0:	00079a63          	bnez	a5,7f04 <_malloc_r+0x74>
    7ef4:	00000593          	li	a1,0
    7ef8:	00090513          	mv	a0,s2
    7efc:	058010ef          	jal	ra,8f54 <_sbrk_r>
    7f00:	00a42023          	sw	a0,0(s0)
    7f04:	00048593          	mv	a1,s1
    7f08:	00090513          	mv	a0,s2
    7f0c:	048010ef          	jal	ra,8f54 <_sbrk_r>
    7f10:	fff00993          	li	s3,-1
    7f14:	0b351a63          	bne	a0,s3,7fc8 <_malloc_r+0x138>
    7f18:	00c00793          	li	a5,12
    7f1c:	00f92023          	sw	a5,0(s2)
    7f20:	00090513          	mv	a0,s2
    7f24:	035020ef          	jal	ra,a758 <__malloc_unlock>
    7f28:	0100006f          	j	7f38 <_malloc_r+0xa8>
    7f2c:	f804dce3          	bgez	s1,7ec4 <_malloc_r+0x34>
    7f30:	00c00793          	li	a5,12
    7f34:	00f92023          	sw	a5,0(s2)
    7f38:	00000513          	li	a0,0
    7f3c:	01c12083          	lw	ra,28(sp)
    7f40:	01812403          	lw	s0,24(sp)
    7f44:	01412483          	lw	s1,20(sp)
    7f48:	01012903          	lw	s2,16(sp)
    7f4c:	00c12983          	lw	s3,12(sp)
    7f50:	02010113          	addi	sp,sp,32
    7f54:	00008067          	ret
    7f58:	00042783          	lw	a5,0(s0)
    7f5c:	409787b3          	sub	a5,a5,s1
    7f60:	0407ce63          	bltz	a5,7fbc <_malloc_r+0x12c>
    7f64:	00b00613          	li	a2,11
    7f68:	00f67a63          	bgeu	a2,a5,7f7c <_malloc_r+0xec>
    7f6c:	00f42023          	sw	a5,0(s0)
    7f70:	00f40433          	add	s0,s0,a5
    7f74:	00942023          	sw	s1,0(s0)
    7f78:	0100006f          	j	7f88 <_malloc_r+0xf8>
    7f7c:	00442783          	lw	a5,4(s0)
    7f80:	02871a63          	bne	a4,s0,7fb4 <_malloc_r+0x124>
    7f84:	00f6a023          	sw	a5,0(a3) # 7ff00000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7cf50f80>
    7f88:	00090513          	mv	a0,s2
    7f8c:	7cc020ef          	jal	ra,a758 <__malloc_unlock>
    7f90:	00b40513          	addi	a0,s0,11
    7f94:	00440793          	addi	a5,s0,4
    7f98:	ff857513          	andi	a0,a0,-8
    7f9c:	40f50733          	sub	a4,a0,a5
    7fa0:	f8f50ee3          	beq	a0,a5,7f3c <_malloc_r+0xac>
    7fa4:	00e40433          	add	s0,s0,a4
    7fa8:	40a787b3          	sub	a5,a5,a0
    7fac:	00f42023          	sw	a5,0(s0)
    7fb0:	f8dff06f          	j	7f3c <_malloc_r+0xac>
    7fb4:	00f72223          	sw	a5,4(a4)
    7fb8:	fd1ff06f          	j	7f88 <_malloc_r+0xf8>
    7fbc:	00040713          	mv	a4,s0
    7fc0:	00442403          	lw	s0,4(s0)
    7fc4:	f1dff06f          	j	7ee0 <_malloc_r+0x50>
    7fc8:	00350413          	addi	s0,a0,3
    7fcc:	ffc47413          	andi	s0,s0,-4
    7fd0:	fa8502e3          	beq	a0,s0,7f74 <_malloc_r+0xe4>
    7fd4:	40a405b3          	sub	a1,s0,a0
    7fd8:	00090513          	mv	a0,s2
    7fdc:	779000ef          	jal	ra,8f54 <_sbrk_r>
    7fe0:	f9351ae3          	bne	a0,s3,7f74 <_malloc_r+0xe4>
    7fe4:	f35ff06f          	j	7f18 <_malloc_r+0x88>

00007fe8 <__cvt>:
    7fe8:	fd010113          	addi	sp,sp,-48
    7fec:	02812423          	sw	s0,40(sp)
    7ff0:	03212023          	sw	s2,32(sp)
    7ff4:	01412c23          	sw	s4,24(sp)
    7ff8:	01512a23          	sw	s5,20(sp)
    7ffc:	01612823          	sw	s6,16(sp)
    8000:	02112623          	sw	ra,44(sp)
    8004:	02912223          	sw	s1,36(sp)
    8008:	01312e23          	sw	s3,28(sp)
    800c:	00070b13          	mv	s6,a4
    8010:	00058a13          	mv	s4,a1
    8014:	00060413          	mv	s0,a2
    8018:	00068913          	mv	s2,a3
    801c:	00080a93          	mv	s5,a6
    8020:	00000713          	li	a4,0
    8024:	00065863          	bgez	a2,8034 <__cvt+0x4c>
    8028:	80000737          	lui	a4,0x80000
    802c:	00c74433          	xor	s0,a4,a2
    8030:	02d00713          	li	a4,45
    8034:	00e78023          	sb	a4,0(a5)
    8038:	fdf8f493          	andi	s1,a7,-33
    803c:	04600793          	li	a5,70
    8040:	00300693          	li	a3,3
    8044:	00f48a63          	beq	s1,a5,8058 <__cvt+0x70>
    8048:	04500793          	li	a5,69
    804c:	00200693          	li	a3,2
    8050:	00f49463          	bne	s1,a5,8058 <__cvt+0x70>
    8054:	00190913          	addi	s2,s2,1
    8058:	000a8793          	mv	a5,s5
    805c:	00c10893          	addi	a7,sp,12
    8060:	00810813          	addi	a6,sp,8
    8064:	00090713          	mv	a4,s2
    8068:	000a0593          	mv	a1,s4
    806c:	00040613          	mv	a2,s0
    8070:	13c010ef          	jal	ra,91ac <_dtoa_r>
    8074:	04700793          	li	a5,71
    8078:	00050993          	mv	s3,a0
    807c:	00f49663          	bne	s1,a5,8088 <__cvt+0xa0>
    8080:	001b7613          	andi	a2,s6,1
    8084:	06060863          	beqz	a2,80f4 <__cvt+0x10c>
    8088:	04600793          	li	a5,70
    808c:	01298b33          	add	s6,s3,s2
    8090:	02f49e63          	bne	s1,a5,80cc <__cvt+0xe4>
    8094:	0009c703          	lbu	a4,0(s3)
    8098:	03000793          	li	a5,48
    809c:	02f71463          	bne	a4,a5,80c4 <__cvt+0xdc>
    80a0:	00000613          	li	a2,0
    80a4:	00000693          	li	a3,0
    80a8:	000a0513          	mv	a0,s4
    80ac:	00040593          	mv	a1,s0
    80b0:	c30fb0ef          	jal	ra,34e0 <__eqdf2>
    80b4:	00050863          	beqz	a0,80c4 <__cvt+0xdc>
    80b8:	00100613          	li	a2,1
    80bc:	412606b3          	sub	a3,a2,s2
    80c0:	00daa023          	sw	a3,0(s5)
    80c4:	000aa783          	lw	a5,0(s5)
    80c8:	00fb0b33          	add	s6,s6,a5
    80cc:	00000613          	li	a2,0
    80d0:	00000693          	li	a3,0
    80d4:	000a0513          	mv	a0,s4
    80d8:	00040593          	mv	a1,s0
    80dc:	c04fb0ef          	jal	ra,34e0 <__eqdf2>
    80e0:	00051463          	bnez	a0,80e8 <__cvt+0x100>
    80e4:	01612623          	sw	s6,12(sp)
    80e8:	03000713          	li	a4,48
    80ec:	00c12783          	lw	a5,12(sp)
    80f0:	0567e063          	bltu	a5,s6,8130 <__cvt+0x148>
    80f4:	00c12783          	lw	a5,12(sp)
    80f8:	03012703          	lw	a4,48(sp)
    80fc:	02c12083          	lw	ra,44(sp)
    8100:	02812403          	lw	s0,40(sp)
    8104:	413787b3          	sub	a5,a5,s3
    8108:	00f72023          	sw	a5,0(a4) # 80000000 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000001>
    810c:	02412483          	lw	s1,36(sp)
    8110:	02012903          	lw	s2,32(sp)
    8114:	01812a03          	lw	s4,24(sp)
    8118:	01412a83          	lw	s5,20(sp)
    811c:	01012b03          	lw	s6,16(sp)
    8120:	00098513          	mv	a0,s3
    8124:	01c12983          	lw	s3,28(sp)
    8128:	03010113          	addi	sp,sp,48
    812c:	00008067          	ret
    8130:	00178693          	addi	a3,a5,1
    8134:	00d12623          	sw	a3,12(sp)
    8138:	00e78023          	sb	a4,0(a5)
    813c:	fb1ff06f          	j	80ec <__cvt+0x104>

00008140 <__exponent>:
    8140:	00c50023          	sb	a2,0(a0)
    8144:	00250793          	addi	a5,a0,2
    8148:	02b00713          	li	a4,43
    814c:	0005d663          	bgez	a1,8158 <__exponent+0x18>
    8150:	40b005b3          	neg	a1,a1
    8154:	02d00713          	li	a4,45
    8158:	00e500a3          	sb	a4,1(a0)
    815c:	00900713          	li	a4,9
    8160:	08b75263          	bge	a4,a1,81e4 <__exponent+0xa4>
    8164:	ff010113          	addi	sp,sp,-16
    8168:	00f10713          	addi	a4,sp,15
    816c:	00070813          	mv	a6,a4
    8170:	00a00893          	li	a7,10
    8174:	06300313          	li	t1,99
    8178:	0315e633          	rem	a2,a1,a7
    817c:	00070693          	mv	a3,a4
    8180:	fff70713          	addi	a4,a4,-1
    8184:	03060613          	addi	a2,a2,48
    8188:	fec68fa3          	sb	a2,-1(a3)
    818c:	00058613          	mv	a2,a1
    8190:	0315c5b3          	div	a1,a1,a7
    8194:	fec342e3          	blt	t1,a2,8178 <__exponent+0x38>
    8198:	ffe68893          	addi	a7,a3,-2
    819c:	03058593          	addi	a1,a1,48
    81a0:	feb70fa3          	sb	a1,-1(a4)
    81a4:	00078613          	mv	a2,a5
    81a8:	00088713          	mv	a4,a7
    81ac:	03076263          	bltu	a4,a6,81d0 <__exponent+0x90>
    81b0:	00000713          	li	a4,0
    81b4:	01186663          	bltu	a6,a7,81c0 <__exponent+0x80>
    81b8:	01110713          	addi	a4,sp,17
    81bc:	40d70733          	sub	a4,a4,a3
    81c0:	00e787b3          	add	a5,a5,a4
    81c4:	40a78533          	sub	a0,a5,a0
    81c8:	01010113          	addi	sp,sp,16
    81cc:	00008067          	ret
    81d0:	00074583          	lbu	a1,0(a4)
    81d4:	00170713          	addi	a4,a4,1
    81d8:	00160613          	addi	a2,a2,1
    81dc:	feb60fa3          	sb	a1,-1(a2)
    81e0:	fcdff06f          	j	81ac <__exponent+0x6c>
    81e4:	03000793          	li	a5,48
    81e8:	00f50123          	sb	a5,2(a0)
    81ec:	03058593          	addi	a1,a1,48
    81f0:	00450793          	addi	a5,a0,4
    81f4:	00b501a3          	sb	a1,3(a0)
    81f8:	40a78533          	sub	a0,a5,a0
    81fc:	00008067          	ret

00008200 <_printf_float>:
    8200:	f8010113          	addi	sp,sp,-128
    8204:	06112e23          	sw	ra,124(sp)
    8208:	06812c23          	sw	s0,120(sp)
    820c:	06912a23          	sw	s1,116(sp)
    8210:	00058413          	mv	s0,a1
    8214:	07212823          	sw	s2,112(sp)
    8218:	07312623          	sw	s3,108(sp)
    821c:	07412423          	sw	s4,104(sp)
    8220:	07512223          	sw	s5,100(sp)
    8224:	00070a13          	mv	s4,a4
    8228:	07612023          	sw	s6,96(sp)
    822c:	05712e23          	sw	s7,92(sp)
    8230:	05812c23          	sw	s8,88(sp)
    8234:	00060913          	mv	s2,a2
    8238:	00068993          	mv	s3,a3
    823c:	05912a23          	sw	s9,84(sp)
    8240:	05a12823          	sw	s10,80(sp)
    8244:	05b12623          	sw	s11,76(sp)
    8248:	00050493          	mv	s1,a0
    824c:	4d0020ef          	jal	ra,a71c <_localeconv_r>
    8250:	00052c03          	lw	s8,0(a0)
    8254:	000c0513          	mv	a0,s8
    8258:	549000ef          	jal	ra,8fa0 <strlen>
    825c:	00042b03          	lw	s6,0(s0)
    8260:	02012c23          	sw	zero,56(sp)
    8264:	01844a83          	lbu	s5,24(s0)
    8268:	100b7713          	andi	a4,s6,256
    826c:	000a2783          	lw	a5,0(s4)
    8270:	00050b93          	mv	s7,a0
    8274:	12070c63          	beqz	a4,83ac <_printf_float+0x1ac>
    8278:	00478713          	addi	a4,a5,4
    827c:	00ea2023          	sw	a4,0(s4)
    8280:	0007a783          	lw	a5,0(a5)
    8284:	02010513          	addi	a0,sp,32
    8288:	0007a703          	lw	a4,0(a5)
    828c:	02e12023          	sw	a4,32(sp)
    8290:	0047a703          	lw	a4,4(a5)
    8294:	02e12223          	sw	a4,36(sp)
    8298:	0087a703          	lw	a4,8(a5)
    829c:	02e12423          	sw	a4,40(sp)
    82a0:	00c7a783          	lw	a5,12(a5)
    82a4:	02f12623          	sw	a5,44(sp)
    82a8:	e00fb0ef          	jal	ra,38a8 <__trunctfdf2>
    82ac:	04a42423          	sw	a0,72(s0)
    82b0:	04b42623          	sw	a1,76(s0)
    82b4:	04c42a03          	lw	s4,76(s0)
    82b8:	0000d737          	lui	a4,0xd
    82bc:	04842c83          	lw	s9,72(s0)
    82c0:	8d072d03          	lw	s10,-1840(a4) # c8d0 <__device_handles_end+0x78>
    82c4:	8d472d83          	lw	s11,-1836(a4)
    82c8:	001a1793          	slli	a5,s4,0x1
    82cc:	0017d793          	srli	a5,a5,0x1
    82d0:	000d0613          	mv	a2,s10
    82d4:	000d8693          	mv	a3,s11
    82d8:	000c8513          	mv	a0,s9
    82dc:	00078593          	mv	a1,a5
    82e0:	00f12e23          	sw	a5,28(sp)
    82e4:	c50fb0ef          	jal	ra,3734 <__unorddf2>
    82e8:	0e051463          	bnez	a0,83d0 <_printf_float+0x1d0>
    82ec:	01c12783          	lw	a5,28(sp)
    82f0:	000d0613          	mv	a2,s10
    82f4:	000d8693          	mv	a3,s11
    82f8:	000c8513          	mv	a0,s9
    82fc:	00078593          	mv	a1,a5
    8300:	b50fb0ef          	jal	ra,3650 <__ledf2>
    8304:	0ca05663          	blez	a0,83d0 <_printf_float+0x1d0>
    8308:	00000613          	li	a2,0
    830c:	00000693          	li	a3,0
    8310:	000c8513          	mv	a0,s9
    8314:	000a0593          	mv	a1,s4
    8318:	b38fb0ef          	jal	ra,3650 <__ledf2>
    831c:	00055663          	bgez	a0,8328 <_printf_float+0x128>
    8320:	02d00793          	li	a5,45
    8324:	04f401a3          	sb	a5,67(s0)
    8328:	04700793          	li	a5,71
    832c:	0d57fe63          	bgeu	a5,s5,8408 <_printf_float+0x208>
    8330:	0000da37          	lui	s4,0xd
    8334:	fd0a0a13          	addi	s4,s4,-48 # cfd0 <_ctype_+0x108>
    8338:	ffbb7b13          	andi	s6,s6,-5
    833c:	00300793          	li	a5,3
    8340:	01642023          	sw	s6,0(s0)
    8344:	00f42823          	sw	a5,16(s0)
    8348:	00000b13          	li	s6,0
    834c:	00098713          	mv	a4,s3
    8350:	00090693          	mv	a3,s2
    8354:	03c10613          	addi	a2,sp,60
    8358:	00040593          	mv	a1,s0
    835c:	00048513          	mv	a0,s1
    8360:	634000ef          	jal	ra,8994 <_printf_common>
    8364:	fff00c93          	li	s9,-1
    8368:	23951a63          	bne	a0,s9,859c <_printf_float+0x39c>
    836c:	fff00513          	li	a0,-1
    8370:	07c12083          	lw	ra,124(sp)
    8374:	07812403          	lw	s0,120(sp)
    8378:	07412483          	lw	s1,116(sp)
    837c:	07012903          	lw	s2,112(sp)
    8380:	06c12983          	lw	s3,108(sp)
    8384:	06812a03          	lw	s4,104(sp)
    8388:	06412a83          	lw	s5,100(sp)
    838c:	06012b03          	lw	s6,96(sp)
    8390:	05c12b83          	lw	s7,92(sp)
    8394:	05812c03          	lw	s8,88(sp)
    8398:	05412c83          	lw	s9,84(sp)
    839c:	05012d03          	lw	s10,80(sp)
    83a0:	04c12d83          	lw	s11,76(sp)
    83a4:	08010113          	addi	sp,sp,128
    83a8:	00008067          	ret
    83ac:	00778793          	addi	a5,a5,7
    83b0:	ff87f793          	andi	a5,a5,-8
    83b4:	00878713          	addi	a4,a5,8
    83b8:	00ea2023          	sw	a4,0(s4)
    83bc:	0007a703          	lw	a4,0(a5)
    83c0:	0047a783          	lw	a5,4(a5)
    83c4:	04e42423          	sw	a4,72(s0)
    83c8:	04f42623          	sw	a5,76(s0)
    83cc:	ee9ff06f          	j	82b4 <_printf_float+0xb4>
    83d0:	000c8613          	mv	a2,s9
    83d4:	000a0693          	mv	a3,s4
    83d8:	000c8513          	mv	a0,s9
    83dc:	000a0593          	mv	a1,s4
    83e0:	b54fb0ef          	jal	ra,3734 <__unorddf2>
    83e4:	02050e63          	beqz	a0,8420 <_printf_float+0x220>
    83e8:	000a5663          	bgez	s4,83f4 <_printf_float+0x1f4>
    83ec:	02d00793          	li	a5,45
    83f0:	04f401a3          	sb	a5,67(s0)
    83f4:	04700793          	li	a5,71
    83f8:	0157fe63          	bgeu	a5,s5,8414 <_printf_float+0x214>
    83fc:	0000da37          	lui	s4,0xd
    8400:	fd8a0a13          	addi	s4,s4,-40 # cfd8 <_ctype_+0x110>
    8404:	f35ff06f          	j	8338 <_printf_float+0x138>
    8408:	0000da37          	lui	s4,0xd
    840c:	fcca0a13          	addi	s4,s4,-52 # cfcc <_ctype_+0x104>
    8410:	f29ff06f          	j	8338 <_printf_float+0x138>
    8414:	0000da37          	lui	s4,0xd
    8418:	fd4a0a13          	addi	s4,s4,-44 # cfd4 <_ctype_+0x10c>
    841c:	f1dff06f          	j	8338 <_printf_float+0x138>
    8420:	00442783          	lw	a5,4(s0)
    8424:	fff00713          	li	a4,-1
    8428:	0dfafd13          	andi	s10,s5,223
    842c:	0ce79263          	bne	a5,a4,84f0 <_printf_float+0x2f0>
    8430:	00600793          	li	a5,6
    8434:	00f42223          	sw	a5,4(s0)
    8438:	00442683          	lw	a3,4(s0)
    843c:	400b6713          	ori	a4,s6,1024
    8440:	03810793          	addi	a5,sp,56
    8444:	00f12023          	sw	a5,0(sp)
    8448:	000a0613          	mv	a2,s4
    844c:	03310793          	addi	a5,sp,51
    8450:	000c8593          	mv	a1,s9
    8454:	00e42023          	sw	a4,0(s0)
    8458:	00012223          	sw	zero,4(sp)
    845c:	000a8893          	mv	a7,s5
    8460:	03410813          	addi	a6,sp,52
    8464:	00048513          	mv	a0,s1
    8468:	b81ff0ef          	jal	ra,7fe8 <__cvt>
    846c:	04700793          	li	a5,71
    8470:	03412583          	lw	a1,52(sp)
    8474:	00050a13          	mv	s4,a0
    8478:	00fd1e63          	bne	s10,a5,8494 <_printf_float+0x294>
    847c:	ffd00793          	li	a5,-3
    8480:	00f5c663          	blt	a1,a5,848c <_printf_float+0x28c>
    8484:	00442783          	lw	a5,4(s0)
    8488:	0cb7dc63          	bge	a5,a1,8560 <_printf_float+0x360>
    848c:	ffea8a93          	addi	s5,s5,-2
    8490:	0ffafa93          	andi	s5,s5,255
    8494:	06500793          	li	a5,101
    8498:	0757e663          	bltu	a5,s5,8504 <_printf_float+0x304>
    849c:	fff58593          	addi	a1,a1,-1
    84a0:	000a8613          	mv	a2,s5
    84a4:	05040513          	addi	a0,s0,80
    84a8:	02b12a23          	sw	a1,52(sp)
    84ac:	c95ff0ef          	jal	ra,8140 <__exponent>
    84b0:	03812703          	lw	a4,56(sp)
    84b4:	00100693          	li	a3,1
    84b8:	00050b13          	mv	s6,a0
    84bc:	00a707b3          	add	a5,a4,a0
    84c0:	00f42823          	sw	a5,16(s0)
    84c4:	00e6c863          	blt	a3,a4,84d4 <_printf_float+0x2d4>
    84c8:	00042703          	lw	a4,0(s0)
    84cc:	00177713          	andi	a4,a4,1
    84d0:	00070663          	beqz	a4,84dc <_printf_float+0x2dc>
    84d4:	00178793          	addi	a5,a5,1
    84d8:	00f42823          	sw	a5,16(s0)
    84dc:	03314783          	lbu	a5,51(sp)
    84e0:	e60786e3          	beqz	a5,834c <_printf_float+0x14c>
    84e4:	02d00793          	li	a5,45
    84e8:	04f401a3          	sb	a5,67(s0)
    84ec:	e61ff06f          	j	834c <_printf_float+0x14c>
    84f0:	04700713          	li	a4,71
    84f4:	f4ed12e3          	bne	s10,a4,8438 <_printf_float+0x238>
    84f8:	f40790e3          	bnez	a5,8438 <_printf_float+0x238>
    84fc:	00100793          	li	a5,1
    8500:	f35ff06f          	j	8434 <_printf_float+0x234>
    8504:	06600793          	li	a5,102
    8508:	04fa9e63          	bne	s5,a5,8564 <_printf_float+0x364>
    850c:	00442783          	lw	a5,4(s0)
    8510:	02b05463          	blez	a1,8538 <_printf_float+0x338>
    8514:	00b42823          	sw	a1,16(s0)
    8518:	00079863          	bnez	a5,8528 <_printf_float+0x328>
    851c:	00042703          	lw	a4,0(s0)
    8520:	00177713          	andi	a4,a4,1
    8524:	02070863          	beqz	a4,8554 <_printf_float+0x354>
    8528:	00178793          	addi	a5,a5,1
    852c:	00b787b3          	add	a5,a5,a1
    8530:	00f42823          	sw	a5,16(s0)
    8534:	0200006f          	j	8554 <_printf_float+0x354>
    8538:	00079a63          	bnez	a5,854c <_printf_float+0x34c>
    853c:	00042703          	lw	a4,0(s0)
    8540:	00100693          	li	a3,1
    8544:	00177713          	andi	a4,a4,1
    8548:	00070463          	beqz	a4,8550 <_printf_float+0x350>
    854c:	00278693          	addi	a3,a5,2
    8550:	00d42823          	sw	a3,16(s0)
    8554:	04b42c23          	sw	a1,88(s0)
    8558:	00000b13          	li	s6,0
    855c:	f81ff06f          	j	84dc <_printf_float+0x2dc>
    8560:	06700a93          	li	s5,103
    8564:	03812783          	lw	a5,56(sp)
    8568:	00f5ce63          	blt	a1,a5,8584 <_printf_float+0x384>
    856c:	00042783          	lw	a5,0(s0)
    8570:	00b42823          	sw	a1,16(s0)
    8574:	0017f793          	andi	a5,a5,1
    8578:	fc078ee3          	beqz	a5,8554 <_printf_float+0x354>
    857c:	00158793          	addi	a5,a1,1
    8580:	fb1ff06f          	j	8530 <_printf_float+0x330>
    8584:	00100713          	li	a4,1
    8588:	00b04663          	bgtz	a1,8594 <_printf_float+0x394>
    858c:	00200713          	li	a4,2
    8590:	40b70733          	sub	a4,a4,a1
    8594:	00e787b3          	add	a5,a5,a4
    8598:	f99ff06f          	j	8530 <_printf_float+0x330>
    859c:	00042783          	lw	a5,0(s0)
    85a0:	4007f713          	andi	a4,a5,1024
    85a4:	02071e63          	bnez	a4,85e0 <_printf_float+0x3e0>
    85a8:	01042683          	lw	a3,16(s0)
    85ac:	000a0613          	mv	a2,s4
    85b0:	00090593          	mv	a1,s2
    85b4:	00048513          	mv	a0,s1
    85b8:	000980e7          	jalr	s3
    85bc:	db9508e3          	beq	a0,s9,836c <_printf_float+0x16c>
    85c0:	00042783          	lw	a5,0(s0)
    85c4:	0027f793          	andi	a5,a5,2
    85c8:	3a079e63          	bnez	a5,8984 <_printf_float+0x784>
    85cc:	03c12783          	lw	a5,60(sp)
    85d0:	00c42503          	lw	a0,12(s0)
    85d4:	d8f55ee3          	bge	a0,a5,8370 <_printf_float+0x170>
    85d8:	00078513          	mv	a0,a5
    85dc:	d95ff06f          	j	8370 <_printf_float+0x170>
    85e0:	06500713          	li	a4,101
    85e4:	29577863          	bgeu	a4,s5,8874 <_printf_float+0x674>
    85e8:	04842503          	lw	a0,72(s0)
    85ec:	04c42583          	lw	a1,76(s0)
    85f0:	00000613          	li	a2,0
    85f4:	00000693          	li	a3,0
    85f8:	ee9fa0ef          	jal	ra,34e0 <__eqdf2>
    85fc:	08051663          	bnez	a0,8688 <_printf_float+0x488>
    8600:	0000d637          	lui	a2,0xd
    8604:	00100693          	li	a3,1
    8608:	e5860613          	addi	a2,a2,-424 # ce58 <gpio_veerwolf_driver_api+0x28>
    860c:	00090593          	mv	a1,s2
    8610:	00048513          	mv	a0,s1
    8614:	000980e7          	jalr	s3
    8618:	d5950ae3          	beq	a0,s9,836c <_printf_float+0x16c>
    861c:	03412703          	lw	a4,52(sp)
    8620:	03812783          	lw	a5,56(sp)
    8624:	00f74863          	blt	a4,a5,8634 <_printf_float+0x434>
    8628:	00042783          	lw	a5,0(s0)
    862c:	0017f793          	andi	a5,a5,1
    8630:	f80788e3          	beqz	a5,85c0 <_printf_float+0x3c0>
    8634:	000b8693          	mv	a3,s7
    8638:	000c0613          	mv	a2,s8
    863c:	00090593          	mv	a1,s2
    8640:	00048513          	mv	a0,s1
    8644:	000980e7          	jalr	s3
    8648:	fff00793          	li	a5,-1
    864c:	d2f500e3          	beq	a0,a5,836c <_printf_float+0x16c>
    8650:	00000a13          	li	s4,0
    8654:	01a40a93          	addi	s5,s0,26
    8658:	fff00b13          	li	s6,-1
    865c:	03812783          	lw	a5,56(sp)
    8660:	fff78793          	addi	a5,a5,-1
    8664:	f4fa5ee3          	bge	s4,a5,85c0 <_printf_float+0x3c0>
    8668:	00100693          	li	a3,1
    866c:	000a8613          	mv	a2,s5
    8670:	00090593          	mv	a1,s2
    8674:	00048513          	mv	a0,s1
    8678:	000980e7          	jalr	s3
    867c:	cf6508e3          	beq	a0,s6,836c <_printf_float+0x16c>
    8680:	001a0a13          	addi	s4,s4,1
    8684:	fd9ff06f          	j	865c <_printf_float+0x45c>
    8688:	03412783          	lw	a5,52(sp)
    868c:	0af04863          	bgtz	a5,873c <_printf_float+0x53c>
    8690:	0000d637          	lui	a2,0xd
    8694:	00100693          	li	a3,1
    8698:	e5860613          	addi	a2,a2,-424 # ce58 <gpio_veerwolf_driver_api+0x28>
    869c:	00090593          	mv	a1,s2
    86a0:	00048513          	mv	a0,s1
    86a4:	000980e7          	jalr	s3
    86a8:	cd9502e3          	beq	a0,s9,836c <_printf_float+0x16c>
    86ac:	03412783          	lw	a5,52(sp)
    86b0:	03812703          	lw	a4,56(sp)
    86b4:	00e7e7b3          	or	a5,a5,a4
    86b8:	00079863          	bnez	a5,86c8 <_printf_float+0x4c8>
    86bc:	00042783          	lw	a5,0(s0)
    86c0:	0017f793          	andi	a5,a5,1
    86c4:	ee078ee3          	beqz	a5,85c0 <_printf_float+0x3c0>
    86c8:	000b8693          	mv	a3,s7
    86cc:	000c0613          	mv	a2,s8
    86d0:	00090593          	mv	a1,s2
    86d4:	00048513          	mv	a0,s1
    86d8:	000980e7          	jalr	s3
    86dc:	fff00793          	li	a5,-1
    86e0:	c8f506e3          	beq	a0,a5,836c <_printf_float+0x16c>
    86e4:	00000a93          	li	s5,0
    86e8:	01a40b13          	addi	s6,s0,26
    86ec:	fff00b93          	li	s7,-1
    86f0:	03412783          	lw	a5,52(sp)
    86f4:	40f007b3          	neg	a5,a5
    86f8:	02fac263          	blt	s5,a5,871c <_printf_float+0x51c>
    86fc:	03812683          	lw	a3,56(sp)
    8700:	000a0613          	mv	a2,s4
    8704:	00090593          	mv	a1,s2
    8708:	00048513          	mv	a0,s1
    870c:	000980e7          	jalr	s3
    8710:	fff00793          	li	a5,-1
    8714:	eaf516e3          	bne	a0,a5,85c0 <_printf_float+0x3c0>
    8718:	c55ff06f          	j	836c <_printf_float+0x16c>
    871c:	00100693          	li	a3,1
    8720:	000b0613          	mv	a2,s6
    8724:	00090593          	mv	a1,s2
    8728:	00048513          	mv	a0,s1
    872c:	000980e7          	jalr	s3
    8730:	c3750ee3          	beq	a0,s7,836c <_printf_float+0x16c>
    8734:	001a8a93          	addi	s5,s5,1
    8738:	fb9ff06f          	j	86f0 <_printf_float+0x4f0>
    873c:	05842783          	lw	a5,88(s0)
    8740:	03812a83          	lw	s5,56(sp)
    8744:	0157d463          	bge	a5,s5,874c <_printf_float+0x54c>
    8748:	00078a93          	mv	s5,a5
    874c:	0b504463          	bgtz	s5,87f4 <_printf_float+0x5f4>
    8750:	00000b13          	li	s6,0
    8754:	01a40d13          	addi	s10,s0,26
    8758:	fff00d93          	li	s11,-1
    875c:	05842c83          	lw	s9,88(s0)
    8760:	000a8793          	mv	a5,s5
    8764:	000ad463          	bgez	s5,876c <_printf_float+0x56c>
    8768:	00000793          	li	a5,0
    876c:	40fc87b3          	sub	a5,s9,a5
    8770:	0afb4263          	blt	s6,a5,8814 <_printf_float+0x614>
    8774:	03412703          	lw	a4,52(sp)
    8778:	03812783          	lw	a5,56(sp)
    877c:	0af74c63          	blt	a4,a5,8834 <_printf_float+0x634>
    8780:	00042783          	lw	a5,0(s0)
    8784:	0017f793          	andi	a5,a5,1
    8788:	0a079663          	bnez	a5,8834 <_printf_float+0x634>
    878c:	03812a83          	lw	s5,56(sp)
    8790:	03412703          	lw	a4,52(sp)
    8794:	419a87b3          	sub	a5,s5,s9
    8798:	40ea8ab3          	sub	s5,s5,a4
    879c:	0157d463          	bge	a5,s5,87a4 <_printf_float+0x5a4>
    87a0:	00078a93          	mv	s5,a5
    87a4:	0b504863          	bgtz	s5,8854 <_printf_float+0x654>
    87a8:	00000a13          	li	s4,0
    87ac:	01a40b13          	addi	s6,s0,26
    87b0:	fff00b93          	li	s7,-1
    87b4:	03412703          	lw	a4,52(sp)
    87b8:	03812783          	lw	a5,56(sp)
    87bc:	40e787b3          	sub	a5,a5,a4
    87c0:	000a8713          	mv	a4,s5
    87c4:	000ad463          	bgez	s5,87cc <_printf_float+0x5cc>
    87c8:	00000713          	li	a4,0
    87cc:	40e787b3          	sub	a5,a5,a4
    87d0:	defa58e3          	bge	s4,a5,85c0 <_printf_float+0x3c0>
    87d4:	00100693          	li	a3,1
    87d8:	000b0613          	mv	a2,s6
    87dc:	00090593          	mv	a1,s2
    87e0:	00048513          	mv	a0,s1
    87e4:	000980e7          	jalr	s3
    87e8:	b97502e3          	beq	a0,s7,836c <_printf_float+0x16c>
    87ec:	001a0a13          	addi	s4,s4,1
    87f0:	fc5ff06f          	j	87b4 <_printf_float+0x5b4>
    87f4:	000a8693          	mv	a3,s5
    87f8:	000a0613          	mv	a2,s4
    87fc:	00090593          	mv	a1,s2
    8800:	00048513          	mv	a0,s1
    8804:	000980e7          	jalr	s3
    8808:	fff00793          	li	a5,-1
    880c:	f4f512e3          	bne	a0,a5,8750 <_printf_float+0x550>
    8810:	b5dff06f          	j	836c <_printf_float+0x16c>
    8814:	00100693          	li	a3,1
    8818:	000d0613          	mv	a2,s10
    881c:	00090593          	mv	a1,s2
    8820:	00048513          	mv	a0,s1
    8824:	000980e7          	jalr	s3
    8828:	b5b502e3          	beq	a0,s11,836c <_printf_float+0x16c>
    882c:	001b0b13          	addi	s6,s6,1
    8830:	f2dff06f          	j	875c <_printf_float+0x55c>
    8834:	000b8693          	mv	a3,s7
    8838:	000c0613          	mv	a2,s8
    883c:	00090593          	mv	a1,s2
    8840:	00048513          	mv	a0,s1
    8844:	000980e7          	jalr	s3
    8848:	fff00793          	li	a5,-1
    884c:	f4f510e3          	bne	a0,a5,878c <_printf_float+0x58c>
    8850:	b1dff06f          	j	836c <_printf_float+0x16c>
    8854:	000a8693          	mv	a3,s5
    8858:	019a0633          	add	a2,s4,s9
    885c:	00090593          	mv	a1,s2
    8860:	00048513          	mv	a0,s1
    8864:	000980e7          	jalr	s3
    8868:	fff00793          	li	a5,-1
    886c:	f2f51ee3          	bne	a0,a5,87a8 <_printf_float+0x5a8>
    8870:	afdff06f          	j	836c <_printf_float+0x16c>
    8874:	03812683          	lw	a3,56(sp)
    8878:	00100713          	li	a4,1
    887c:	00d74663          	blt	a4,a3,8888 <_printf_float+0x688>
    8880:	0017f793          	andi	a5,a5,1
    8884:	0a078a63          	beqz	a5,8938 <_printf_float+0x738>
    8888:	00100693          	li	a3,1
    888c:	000a0613          	mv	a2,s4
    8890:	00090593          	mv	a1,s2
    8894:	00048513          	mv	a0,s1
    8898:	000980e7          	jalr	s3
    889c:	fff00a93          	li	s5,-1
    88a0:	ad5506e3          	beq	a0,s5,836c <_printf_float+0x16c>
    88a4:	000b8693          	mv	a3,s7
    88a8:	000c0613          	mv	a2,s8
    88ac:	00090593          	mv	a1,s2
    88b0:	00048513          	mv	a0,s1
    88b4:	000980e7          	jalr	s3
    88b8:	ab550ae3          	beq	a0,s5,836c <_printf_float+0x16c>
    88bc:	04842503          	lw	a0,72(s0)
    88c0:	04c42583          	lw	a1,76(s0)
    88c4:	00000613          	li	a2,0
    88c8:	00000693          	li	a3,0
    88cc:	c15fa0ef          	jal	ra,34e0 <__eqdf2>
    88d0:	04050c63          	beqz	a0,8928 <_printf_float+0x728>
    88d4:	03812683          	lw	a3,56(sp)
    88d8:	001a0613          	addi	a2,s4,1
    88dc:	00090593          	mv	a1,s2
    88e0:	fff68693          	addi	a3,a3,-1
    88e4:	00048513          	mv	a0,s1
    88e8:	000980e7          	jalr	s3
    88ec:	a95500e3          	beq	a0,s5,836c <_printf_float+0x16c>
    88f0:	000b0693          	mv	a3,s6
    88f4:	05040613          	addi	a2,s0,80
    88f8:	e0dff06f          	j	8704 <_printf_float+0x504>
    88fc:	00100693          	li	a3,1
    8900:	000a8613          	mv	a2,s5
    8904:	00090593          	mv	a1,s2
    8908:	00048513          	mv	a0,s1
    890c:	000980e7          	jalr	s3
    8910:	a5750ee3          	beq	a0,s7,836c <_printf_float+0x16c>
    8914:	001a0a13          	addi	s4,s4,1
    8918:	03812783          	lw	a5,56(sp)
    891c:	fff78793          	addi	a5,a5,-1
    8920:	fcfa4ee3          	blt	s4,a5,88fc <_printf_float+0x6fc>
    8924:	fcdff06f          	j	88f0 <_printf_float+0x6f0>
    8928:	00000a13          	li	s4,0
    892c:	01a40a93          	addi	s5,s0,26
    8930:	fff00b93          	li	s7,-1
    8934:	fe5ff06f          	j	8918 <_printf_float+0x718>
    8938:	00100693          	li	a3,1
    893c:	000a0613          	mv	a2,s4
    8940:	00090593          	mv	a1,s2
    8944:	00048513          	mv	a0,s1
    8948:	000980e7          	jalr	s3
    894c:	fb9512e3          	bne	a0,s9,88f0 <_printf_float+0x6f0>
    8950:	a1dff06f          	j	836c <_printf_float+0x16c>
    8954:	00100693          	li	a3,1
    8958:	000a8613          	mv	a2,s5
    895c:	00090593          	mv	a1,s2
    8960:	00048513          	mv	a0,s1
    8964:	000980e7          	jalr	s3
    8968:	a16502e3          	beq	a0,s6,836c <_printf_float+0x16c>
    896c:	001a0a13          	addi	s4,s4,1
    8970:	00c42783          	lw	a5,12(s0)
    8974:	03c12703          	lw	a4,60(sp)
    8978:	40e787b3          	sub	a5,a5,a4
    897c:	fcfa4ce3          	blt	s4,a5,8954 <_printf_float+0x754>
    8980:	c4dff06f          	j	85cc <_printf_float+0x3cc>
    8984:	00000a13          	li	s4,0
    8988:	01940a93          	addi	s5,s0,25
    898c:	fff00b13          	li	s6,-1
    8990:	fe1ff06f          	j	8970 <_printf_float+0x770>

00008994 <_printf_common>:
    8994:	fd010113          	addi	sp,sp,-48
    8998:	01412c23          	sw	s4,24(sp)
    899c:	0105a783          	lw	a5,16(a1)
    89a0:	00070a13          	mv	s4,a4
    89a4:	0085a703          	lw	a4,8(a1)
    89a8:	02812423          	sw	s0,40(sp)
    89ac:	02912223          	sw	s1,36(sp)
    89b0:	01312e23          	sw	s3,28(sp)
    89b4:	01512a23          	sw	s5,20(sp)
    89b8:	02112623          	sw	ra,44(sp)
    89bc:	03212023          	sw	s2,32(sp)
    89c0:	01612823          	sw	s6,16(sp)
    89c4:	01712623          	sw	s7,12(sp)
    89c8:	00050993          	mv	s3,a0
    89cc:	00058413          	mv	s0,a1
    89d0:	00060493          	mv	s1,a2
    89d4:	00068a93          	mv	s5,a3
    89d8:	00e7d463          	bge	a5,a4,89e0 <_printf_common+0x4c>
    89dc:	00070793          	mv	a5,a4
    89e0:	00f4a023          	sw	a5,0(s1)
    89e4:	04344703          	lbu	a4,67(s0)
    89e8:	00070663          	beqz	a4,89f4 <_printf_common+0x60>
    89ec:	00178793          	addi	a5,a5,1
    89f0:	00f4a023          	sw	a5,0(s1)
    89f4:	00042783          	lw	a5,0(s0)
    89f8:	0207f793          	andi	a5,a5,32
    89fc:	00078863          	beqz	a5,8a0c <_printf_common+0x78>
    8a00:	0004a783          	lw	a5,0(s1)
    8a04:	00278793          	addi	a5,a5,2
    8a08:	00f4a023          	sw	a5,0(s1)
    8a0c:	00042903          	lw	s2,0(s0)
    8a10:	00697913          	andi	s2,s2,6
    8a14:	00091e63          	bnez	s2,8a30 <_printf_common+0x9c>
    8a18:	01940b13          	addi	s6,s0,25
    8a1c:	fff00b93          	li	s7,-1
    8a20:	00c42783          	lw	a5,12(s0)
    8a24:	0004a703          	lw	a4,0(s1)
    8a28:	40e787b3          	sub	a5,a5,a4
    8a2c:	08f94263          	blt	s2,a5,8ab0 <_printf_common+0x11c>
    8a30:	04344783          	lbu	a5,67(s0)
    8a34:	00f036b3          	snez	a3,a5
    8a38:	00042783          	lw	a5,0(s0)
    8a3c:	0207f793          	andi	a5,a5,32
    8a40:	0c079063          	bnez	a5,8b00 <_printf_common+0x16c>
    8a44:	04340613          	addi	a2,s0,67
    8a48:	000a8593          	mv	a1,s5
    8a4c:	00098513          	mv	a0,s3
    8a50:	000a00e7          	jalr	s4
    8a54:	fff00793          	li	a5,-1
    8a58:	06f50863          	beq	a0,a5,8ac8 <_printf_common+0x134>
    8a5c:	00042783          	lw	a5,0(s0)
    8a60:	00400613          	li	a2,4
    8a64:	0004a703          	lw	a4,0(s1)
    8a68:	0067f793          	andi	a5,a5,6
    8a6c:	00c42683          	lw	a3,12(s0)
    8a70:	00000493          	li	s1,0
    8a74:	00c79863          	bne	a5,a2,8a84 <_printf_common+0xf0>
    8a78:	40e684b3          	sub	s1,a3,a4
    8a7c:	0004d463          	bgez	s1,8a84 <_printf_common+0xf0>
    8a80:	00000493          	li	s1,0
    8a84:	00842783          	lw	a5,8(s0)
    8a88:	01042703          	lw	a4,16(s0)
    8a8c:	00f75663          	bge	a4,a5,8a98 <_printf_common+0x104>
    8a90:	40e787b3          	sub	a5,a5,a4
    8a94:	00f484b3          	add	s1,s1,a5
    8a98:	00000913          	li	s2,0
    8a9c:	01a40413          	addi	s0,s0,26
    8aa0:	fff00b13          	li	s6,-1
    8aa4:	09249063          	bne	s1,s2,8b24 <_printf_common+0x190>
    8aa8:	00000513          	li	a0,0
    8aac:	0200006f          	j	8acc <_printf_common+0x138>
    8ab0:	00100693          	li	a3,1
    8ab4:	000b0613          	mv	a2,s6
    8ab8:	000a8593          	mv	a1,s5
    8abc:	00098513          	mv	a0,s3
    8ac0:	000a00e7          	jalr	s4
    8ac4:	03751a63          	bne	a0,s7,8af8 <_printf_common+0x164>
    8ac8:	fff00513          	li	a0,-1
    8acc:	02c12083          	lw	ra,44(sp)
    8ad0:	02812403          	lw	s0,40(sp)
    8ad4:	02412483          	lw	s1,36(sp)
    8ad8:	02012903          	lw	s2,32(sp)
    8adc:	01c12983          	lw	s3,28(sp)
    8ae0:	01812a03          	lw	s4,24(sp)
    8ae4:	01412a83          	lw	s5,20(sp)
    8ae8:	01012b03          	lw	s6,16(sp)
    8aec:	00c12b83          	lw	s7,12(sp)
    8af0:	03010113          	addi	sp,sp,48
    8af4:	00008067          	ret
    8af8:	00190913          	addi	s2,s2,1
    8afc:	f25ff06f          	j	8a20 <_printf_common+0x8c>
    8b00:	00d40733          	add	a4,s0,a3
    8b04:	03000613          	li	a2,48
    8b08:	04c701a3          	sb	a2,67(a4)
    8b0c:	04544703          	lbu	a4,69(s0)
    8b10:	00168793          	addi	a5,a3,1
    8b14:	00f407b3          	add	a5,s0,a5
    8b18:	00268693          	addi	a3,a3,2
    8b1c:	04e781a3          	sb	a4,67(a5)
    8b20:	f25ff06f          	j	8a44 <_printf_common+0xb0>
    8b24:	00100693          	li	a3,1
    8b28:	00040613          	mv	a2,s0
    8b2c:	000a8593          	mv	a1,s5
    8b30:	00098513          	mv	a0,s3
    8b34:	000a00e7          	jalr	s4
    8b38:	f96508e3          	beq	a0,s6,8ac8 <_printf_common+0x134>
    8b3c:	00190913          	addi	s2,s2,1
    8b40:	f65ff06f          	j	8aa4 <_printf_common+0x110>

00008b44 <_printf_i>:
    8b44:	fd010113          	addi	sp,sp,-48
    8b48:	02812423          	sw	s0,40(sp)
    8b4c:	02912223          	sw	s1,36(sp)
    8b50:	03212023          	sw	s2,32(sp)
    8b54:	01312e23          	sw	s3,28(sp)
    8b58:	02112623          	sw	ra,44(sp)
    8b5c:	01412c23          	sw	s4,24(sp)
    8b60:	01512a23          	sw	s5,20(sp)
    8b64:	01612823          	sw	s6,16(sp)
    8b68:	0185c883          	lbu	a7,24(a1)
    8b6c:	07800793          	li	a5,120
    8b70:	00050493          	mv	s1,a0
    8b74:	00058413          	mv	s0,a1
    8b78:	00060913          	mv	s2,a2
    8b7c:	00068993          	mv	s3,a3
    8b80:	0117ee63          	bltu	a5,a7,8b9c <_printf_i+0x58>
    8b84:	06200793          	li	a5,98
    8b88:	04358693          	addi	a3,a1,67
    8b8c:	0117ee63          	bltu	a5,a7,8ba8 <_printf_i+0x64>
    8b90:	28088a63          	beqz	a7,8e24 <_printf_i+0x2e0>
    8b94:	05800793          	li	a5,88
    8b98:	1cf88063          	beq	a7,a5,8d58 <_printf_i+0x214>
    8b9c:	04240a93          	addi	s5,s0,66
    8ba0:	05140123          	sb	a7,66(s0)
    8ba4:	0440006f          	j	8be8 <_printf_i+0xa4>
    8ba8:	f9d88793          	addi	a5,a7,-99
    8bac:	0ff7f793          	andi	a5,a5,255
    8bb0:	01500613          	li	a2,21
    8bb4:	fef664e3          	bltu	a2,a5,8b9c <_printf_i+0x58>
    8bb8:	0000d637          	lui	a2,0xd
    8bbc:	00279793          	slli	a5,a5,0x2
    8bc0:	00460613          	addi	a2,a2,4 # d004 <_ctype_+0x13c>
    8bc4:	00c787b3          	add	a5,a5,a2
    8bc8:	0007a783          	lw	a5,0(a5)
    8bcc:	00078067          	jr	a5
    8bd0:	00072783          	lw	a5,0(a4)
    8bd4:	04258a93          	addi	s5,a1,66
    8bd8:	00478693          	addi	a3,a5,4
    8bdc:	0007a783          	lw	a5,0(a5)
    8be0:	00d72023          	sw	a3,0(a4)
    8be4:	04f58123          	sb	a5,66(a1)
    8be8:	00100793          	li	a5,1
    8bec:	2740006f          	j	8e60 <_printf_i+0x31c>
    8bf0:	0005a783          	lw	a5,0(a1)
    8bf4:	00072503          	lw	a0,0(a4)
    8bf8:	0807f613          	andi	a2,a5,128
    8bfc:	00450593          	addi	a1,a0,4
    8c00:	02060663          	beqz	a2,8c2c <_printf_i+0xe8>
    8c04:	00052783          	lw	a5,0(a0)
    8c08:	00b72023          	sw	a1,0(a4)
    8c0c:	0000d837          	lui	a6,0xd
    8c10:	0007d863          	bgez	a5,8c20 <_printf_i+0xdc>
    8c14:	02d00713          	li	a4,45
    8c18:	40f007b3          	neg	a5,a5
    8c1c:	04e401a3          	sb	a4,67(s0)
    8c20:	fdc80813          	addi	a6,a6,-36 # cfdc <_ctype_+0x114>
    8c24:	00a00713          	li	a4,10
    8c28:	0680006f          	j	8c90 <_printf_i+0x14c>
    8c2c:	0407f613          	andi	a2,a5,64
    8c30:	00052783          	lw	a5,0(a0)
    8c34:	00b72023          	sw	a1,0(a4)
    8c38:	fc060ae3          	beqz	a2,8c0c <_printf_i+0xc8>
    8c3c:	01079793          	slli	a5,a5,0x10
    8c40:	4107d793          	srai	a5,a5,0x10
    8c44:	fc9ff06f          	j	8c0c <_printf_i+0xc8>
    8c48:	0005a603          	lw	a2,0(a1)
    8c4c:	00072783          	lw	a5,0(a4)
    8c50:	08067513          	andi	a0,a2,128
    8c54:	00478593          	addi	a1,a5,4
    8c58:	00050863          	beqz	a0,8c68 <_printf_i+0x124>
    8c5c:	00b72023          	sw	a1,0(a4)
    8c60:	0007a783          	lw	a5,0(a5)
    8c64:	0140006f          	j	8c78 <_printf_i+0x134>
    8c68:	04067613          	andi	a2,a2,64
    8c6c:	00b72023          	sw	a1,0(a4)
    8c70:	fe0608e3          	beqz	a2,8c60 <_printf_i+0x11c>
    8c74:	0007d783          	lhu	a5,0(a5)
    8c78:	0000d837          	lui	a6,0xd
    8c7c:	06f00713          	li	a4,111
    8c80:	fdc80813          	addi	a6,a6,-36 # cfdc <_ctype_+0x114>
    8c84:	14e88e63          	beq	a7,a4,8de0 <_printf_i+0x29c>
    8c88:	00a00713          	li	a4,10
    8c8c:	040401a3          	sb	zero,67(s0)
    8c90:	00442603          	lw	a2,4(s0)
    8c94:	00c42423          	sw	a2,8(s0)
    8c98:	00064863          	bltz	a2,8ca8 <_printf_i+0x164>
    8c9c:	00042583          	lw	a1,0(s0)
    8ca0:	ffb5f593          	andi	a1,a1,-5
    8ca4:	00b42023          	sw	a1,0(s0)
    8ca8:	00079663          	bnez	a5,8cb4 <_printf_i+0x170>
    8cac:	00068a93          	mv	s5,a3
    8cb0:	02060463          	beqz	a2,8cd8 <_printf_i+0x194>
    8cb4:	00068a93          	mv	s5,a3
    8cb8:	02e7f633          	remu	a2,a5,a4
    8cbc:	fffa8a93          	addi	s5,s5,-1
    8cc0:	00c80633          	add	a2,a6,a2
    8cc4:	00064603          	lbu	a2,0(a2)
    8cc8:	00ca8023          	sb	a2,0(s5)
    8ccc:	00078613          	mv	a2,a5
    8cd0:	02e7d7b3          	divu	a5,a5,a4
    8cd4:	fee672e3          	bgeu	a2,a4,8cb8 <_printf_i+0x174>
    8cd8:	00800793          	li	a5,8
    8cdc:	02f71463          	bne	a4,a5,8d04 <_printf_i+0x1c0>
    8ce0:	00042783          	lw	a5,0(s0)
    8ce4:	0017f793          	andi	a5,a5,1
    8ce8:	00078e63          	beqz	a5,8d04 <_printf_i+0x1c0>
    8cec:	00442703          	lw	a4,4(s0)
    8cf0:	01042783          	lw	a5,16(s0)
    8cf4:	00e7c863          	blt	a5,a4,8d04 <_printf_i+0x1c0>
    8cf8:	03000793          	li	a5,48
    8cfc:	fefa8fa3          	sb	a5,-1(s5)
    8d00:	fffa8a93          	addi	s5,s5,-1
    8d04:	415686b3          	sub	a3,a3,s5
    8d08:	00d42823          	sw	a3,16(s0)
    8d0c:	00098713          	mv	a4,s3
    8d10:	00090693          	mv	a3,s2
    8d14:	00c10613          	addi	a2,sp,12
    8d18:	00040593          	mv	a1,s0
    8d1c:	00048513          	mv	a0,s1
    8d20:	c75ff0ef          	jal	ra,8994 <_printf_common>
    8d24:	fff00a13          	li	s4,-1
    8d28:	15451263          	bne	a0,s4,8e6c <_printf_i+0x328>
    8d2c:	fff00513          	li	a0,-1
    8d30:	02c12083          	lw	ra,44(sp)
    8d34:	02812403          	lw	s0,40(sp)
    8d38:	02412483          	lw	s1,36(sp)
    8d3c:	02012903          	lw	s2,32(sp)
    8d40:	01c12983          	lw	s3,28(sp)
    8d44:	01812a03          	lw	s4,24(sp)
    8d48:	01412a83          	lw	s5,20(sp)
    8d4c:	01012b03          	lw	s6,16(sp)
    8d50:	03010113          	addi	sp,sp,48
    8d54:	00008067          	ret
    8d58:	0000d837          	lui	a6,0xd
    8d5c:	051582a3          	sb	a7,69(a1)
    8d60:	fdc80813          	addi	a6,a6,-36 # cfdc <_ctype_+0x114>
    8d64:	00042603          	lw	a2,0(s0)
    8d68:	00072583          	lw	a1,0(a4)
    8d6c:	08067513          	andi	a0,a2,128
    8d70:	0005a783          	lw	a5,0(a1)
    8d74:	00458593          	addi	a1,a1,4
    8d78:	04050863          	beqz	a0,8dc8 <_printf_i+0x284>
    8d7c:	00b72023          	sw	a1,0(a4)
    8d80:	00167713          	andi	a4,a2,1
    8d84:	00070663          	beqz	a4,8d90 <_printf_i+0x24c>
    8d88:	02066613          	ori	a2,a2,32
    8d8c:	00c42023          	sw	a2,0(s0)
    8d90:	01000713          	li	a4,16
    8d94:	ee079ce3          	bnez	a5,8c8c <_printf_i+0x148>
    8d98:	00042603          	lw	a2,0(s0)
    8d9c:	fdf67613          	andi	a2,a2,-33
    8da0:	00c42023          	sw	a2,0(s0)
    8da4:	ee9ff06f          	j	8c8c <_printf_i+0x148>
    8da8:	0005a783          	lw	a5,0(a1)
    8dac:	0207e793          	ori	a5,a5,32
    8db0:	00f5a023          	sw	a5,0(a1)
    8db4:	07800793          	li	a5,120
    8db8:	0000d837          	lui	a6,0xd
    8dbc:	04f402a3          	sb	a5,69(s0)
    8dc0:	ff080813          	addi	a6,a6,-16 # cff0 <_ctype_+0x128>
    8dc4:	fa1ff06f          	j	8d64 <_printf_i+0x220>
    8dc8:	04067513          	andi	a0,a2,64
    8dcc:	00b72023          	sw	a1,0(a4)
    8dd0:	fa0508e3          	beqz	a0,8d80 <_printf_i+0x23c>
    8dd4:	01079793          	slli	a5,a5,0x10
    8dd8:	0107d793          	srli	a5,a5,0x10
    8ddc:	fa5ff06f          	j	8d80 <_printf_i+0x23c>
    8de0:	00800713          	li	a4,8
    8de4:	ea9ff06f          	j	8c8c <_printf_i+0x148>
    8de8:	0005a603          	lw	a2,0(a1)
    8dec:	00072783          	lw	a5,0(a4)
    8df0:	0145a583          	lw	a1,20(a1)
    8df4:	08067813          	andi	a6,a2,128
    8df8:	00478513          	addi	a0,a5,4
    8dfc:	00080a63          	beqz	a6,8e10 <_printf_i+0x2cc>
    8e00:	00a72023          	sw	a0,0(a4)
    8e04:	0007a783          	lw	a5,0(a5)
    8e08:	00b7a023          	sw	a1,0(a5)
    8e0c:	0180006f          	j	8e24 <_printf_i+0x2e0>
    8e10:	00a72023          	sw	a0,0(a4)
    8e14:	04067613          	andi	a2,a2,64
    8e18:	0007a783          	lw	a5,0(a5)
    8e1c:	fe0606e3          	beqz	a2,8e08 <_printf_i+0x2c4>
    8e20:	00b79023          	sh	a1,0(a5)
    8e24:	00042823          	sw	zero,16(s0)
    8e28:	00068a93          	mv	s5,a3
    8e2c:	ee1ff06f          	j	8d0c <_printf_i+0x1c8>
    8e30:	00072783          	lw	a5,0(a4)
    8e34:	0045a603          	lw	a2,4(a1)
    8e38:	00000593          	li	a1,0
    8e3c:	00478693          	addi	a3,a5,4
    8e40:	00d72023          	sw	a3,0(a4)
    8e44:	0007aa83          	lw	s5,0(a5)
    8e48:	000a8513          	mv	a0,s5
    8e4c:	0dd010ef          	jal	ra,a728 <memchr>
    8e50:	00050663          	beqz	a0,8e5c <_printf_i+0x318>
    8e54:	41550533          	sub	a0,a0,s5
    8e58:	00a42223          	sw	a0,4(s0)
    8e5c:	00442783          	lw	a5,4(s0)
    8e60:	00f42823          	sw	a5,16(s0)
    8e64:	040401a3          	sb	zero,67(s0)
    8e68:	ea5ff06f          	j	8d0c <_printf_i+0x1c8>
    8e6c:	01042683          	lw	a3,16(s0)
    8e70:	000a8613          	mv	a2,s5
    8e74:	00090593          	mv	a1,s2
    8e78:	00048513          	mv	a0,s1
    8e7c:	000980e7          	jalr	s3
    8e80:	eb4506e3          	beq	a0,s4,8d2c <_printf_i+0x1e8>
    8e84:	00042783          	lw	a5,0(s0)
    8e88:	0027f793          	andi	a5,a5,2
    8e8c:	04079463          	bnez	a5,8ed4 <_printf_i+0x390>
    8e90:	00c12783          	lw	a5,12(sp)
    8e94:	00c42503          	lw	a0,12(s0)
    8e98:	e8f55ce3          	bge	a0,a5,8d30 <_printf_i+0x1ec>
    8e9c:	00078513          	mv	a0,a5
    8ea0:	e91ff06f          	j	8d30 <_printf_i+0x1ec>
    8ea4:	00100693          	li	a3,1
    8ea8:	000a8613          	mv	a2,s5
    8eac:	00090593          	mv	a1,s2
    8eb0:	00048513          	mv	a0,s1
    8eb4:	000980e7          	jalr	s3
    8eb8:	e7650ae3          	beq	a0,s6,8d2c <_printf_i+0x1e8>
    8ebc:	001a0a13          	addi	s4,s4,1
    8ec0:	00c42783          	lw	a5,12(s0)
    8ec4:	00c12703          	lw	a4,12(sp)
    8ec8:	40e787b3          	sub	a5,a5,a4
    8ecc:	fcfa4ce3          	blt	s4,a5,8ea4 <_printf_i+0x360>
    8ed0:	fc1ff06f          	j	8e90 <_printf_i+0x34c>
    8ed4:	00000a13          	li	s4,0
    8ed8:	01940a93          	addi	s5,s0,25
    8edc:	fff00b13          	li	s6,-1
    8ee0:	fe1ff06f          	j	8ec0 <_printf_i+0x37c>

00008ee4 <iprintf>:
    8ee4:	fb010113          	addi	sp,sp,-80
    8ee8:	04f12223          	sw	a5,68(sp)
    8eec:	002137b7          	lui	a5,0x213
    8ef0:	02812423          	sw	s0,40(sp)
    8ef4:	00050413          	mv	s0,a0
    8ef8:	79c7a503          	lw	a0,1948(a5) # 21379c <_impure_ptr>
    8efc:	02112623          	sw	ra,44(sp)
    8f00:	02b12a23          	sw	a1,52(sp)
    8f04:	02c12c23          	sw	a2,56(sp)
    8f08:	02d12e23          	sw	a3,60(sp)
    8f0c:	04e12023          	sw	a4,64(sp)
    8f10:	05012423          	sw	a6,72(sp)
    8f14:	05112623          	sw	a7,76(sp)
    8f18:	00050c63          	beqz	a0,8f30 <iprintf+0x4c>
    8f1c:	01852783          	lw	a5,24(a0)
    8f20:	00079863          	bnez	a5,8f30 <iprintf+0x4c>
    8f24:	00a12623          	sw	a0,12(sp)
    8f28:	58c010ef          	jal	ra,a4b4 <__sinit>
    8f2c:	00c12503          	lw	a0,12(sp)
    8f30:	00852583          	lw	a1,8(a0)
    8f34:	03410693          	addi	a3,sp,52
    8f38:	00040613          	mv	a2,s0
    8f3c:	00d12e23          	sw	a3,28(sp)
    8f40:	5c0020ef          	jal	ra,b500 <_vfiprintf_r>
    8f44:	02c12083          	lw	ra,44(sp)
    8f48:	02812403          	lw	s0,40(sp)
    8f4c:	05010113          	addi	sp,sp,80
    8f50:	00008067          	ret

00008f54 <_sbrk_r>:
    8f54:	ff010113          	addi	sp,sp,-16
    8f58:	00812423          	sw	s0,8(sp)
    8f5c:	00912223          	sw	s1,4(sp)
    8f60:	00050413          	mv	s0,a0
    8f64:	0000d4b7          	lui	s1,0xd
    8f68:	00058513          	mv	a0,a1
    8f6c:	00112623          	sw	ra,12(sp)
    8f70:	2604a823          	sw	zero,624(s1) # d270 <errno>
    8f74:	e0cfc0ef          	jal	ra,5580 <_sbrk>
    8f78:	fff00793          	li	a5,-1
    8f7c:	00f51863          	bne	a0,a5,8f8c <_sbrk_r+0x38>
    8f80:	2704a783          	lw	a5,624(s1)
    8f84:	00078463          	beqz	a5,8f8c <_sbrk_r+0x38>
    8f88:	00f42023          	sw	a5,0(s0)
    8f8c:	00c12083          	lw	ra,12(sp)
    8f90:	00812403          	lw	s0,8(sp)
    8f94:	00412483          	lw	s1,4(sp)
    8f98:	01010113          	addi	sp,sp,16
    8f9c:	00008067          	ret

00008fa0 <strlen>:
    8fa0:	00050793          	mv	a5,a0
    8fa4:	0007c703          	lbu	a4,0(a5)
    8fa8:	00178793          	addi	a5,a5,1
    8fac:	fe071ce3          	bnez	a4,8fa4 <strlen+0x4>
    8fb0:	40a78533          	sub	a0,a5,a0
    8fb4:	fff50513          	addi	a0,a0,-1
    8fb8:	00008067          	ret

00008fbc <strnlen>:
    8fbc:	00b505b3          	add	a1,a0,a1
    8fc0:	00050793          	mv	a5,a0
    8fc4:	00b78663          	beq	a5,a1,8fd0 <strnlen+0x14>
    8fc8:	0007c703          	lbu	a4,0(a5)
    8fcc:	00071663          	bnez	a4,8fd8 <strnlen+0x1c>
    8fd0:	40a78533          	sub	a0,a5,a0
    8fd4:	00008067          	ret
    8fd8:	00178793          	addi	a5,a5,1
    8fdc:	fe9ff06f          	j	8fc4 <strnlen+0x8>

00008fe0 <quorem>:
    8fe0:	fe010113          	addi	sp,sp,-32
    8fe4:	00812c23          	sw	s0,24(sp)
    8fe8:	01052783          	lw	a5,16(a0)
    8fec:	0105a403          	lw	s0,16(a1)
    8ff0:	00112e23          	sw	ra,28(sp)
    8ff4:	00912a23          	sw	s1,20(sp)
    8ff8:	01212823          	sw	s2,16(sp)
    8ffc:	01312623          	sw	s3,12(sp)
    9000:	01412423          	sw	s4,8(sp)
    9004:	01512223          	sw	s5,4(sp)
    9008:	1887ce63          	blt	a5,s0,91a4 <quorem+0x1c4>
    900c:	fff40413          	addi	s0,s0,-1
    9010:	00241613          	slli	a2,s0,0x2
    9014:	01458a13          	addi	s4,a1,20
    9018:	00ca0ab3          	add	s5,s4,a2
    901c:	01450993          	addi	s3,a0,20
    9020:	000aa783          	lw	a5,0(s5)
    9024:	00c98633          	add	a2,s3,a2
    9028:	00062703          	lw	a4,0(a2)
    902c:	00178793          	addi	a5,a5,1
    9030:	00050913          	mv	s2,a0
    9034:	02f754b3          	divu	s1,a4,a5
    9038:	08f76863          	bltu	a4,a5,90c8 <quorem+0xe8>
    903c:	00010537          	lui	a0,0x10
    9040:	000a0813          	mv	a6,s4
    9044:	00098893          	mv	a7,s3
    9048:	00000313          	li	t1,0
    904c:	00000e13          	li	t3,0
    9050:	fff50513          	addi	a0,a0,-1 # ffff <stacks+0xa5f>
    9054:	00082683          	lw	a3,0(a6)
    9058:	00488893          	addi	a7,a7,4
    905c:	00480813          	addi	a6,a6,4
    9060:	00a6f7b3          	and	a5,a3,a0
    9064:	0106d693          	srli	a3,a3,0x10
    9068:	029787b3          	mul	a5,a5,s1
    906c:	029686b3          	mul	a3,a3,s1
    9070:	006787b3          	add	a5,a5,t1
    9074:	0107d713          	srli	a4,a5,0x10
    9078:	00a7f7b3          	and	a5,a5,a0
    907c:	40fe07b3          	sub	a5,t3,a5
    9080:	00e686b3          	add	a3,a3,a4
    9084:	ffc8a703          	lw	a4,-4(a7)
    9088:	0106d313          	srli	t1,a3,0x10
    908c:	00a6f6b3          	and	a3,a3,a0
    9090:	00a77e33          	and	t3,a4,a0
    9094:	01c787b3          	add	a5,a5,t3
    9098:	01075713          	srli	a4,a4,0x10
    909c:	40d70733          	sub	a4,a4,a3
    90a0:	4107d693          	srai	a3,a5,0x10
    90a4:	00d70733          	add	a4,a4,a3
    90a8:	41075e13          	srai	t3,a4,0x10
    90ac:	00a7f7b3          	and	a5,a5,a0
    90b0:	01071713          	slli	a4,a4,0x10
    90b4:	00f767b3          	or	a5,a4,a5
    90b8:	fef8ae23          	sw	a5,-4(a7)
    90bc:	f90afce3          	bgeu	s5,a6,9054 <quorem+0x74>
    90c0:	00062783          	lw	a5,0(a2)
    90c4:	0a078a63          	beqz	a5,9178 <quorem+0x198>
    90c8:	00090513          	mv	a0,s2
    90cc:	795010ef          	jal	ra,b060 <__mcmp>
    90d0:	06054a63          	bltz	a0,9144 <quorem+0x164>
    90d4:	000106b7          	lui	a3,0x10
    90d8:	00148493          	addi	s1,s1,1
    90dc:	00098613          	mv	a2,s3
    90e0:	00000593          	li	a1,0
    90e4:	fff68693          	addi	a3,a3,-1 # ffff <stacks+0xa5f>
    90e8:	000a2503          	lw	a0,0(s4)
    90ec:	00062783          	lw	a5,0(a2)
    90f0:	00460613          	addi	a2,a2,4
    90f4:	00d57733          	and	a4,a0,a3
    90f8:	40e585b3          	sub	a1,a1,a4
    90fc:	00d7f733          	and	a4,a5,a3
    9100:	00e58733          	add	a4,a1,a4
    9104:	0107d793          	srli	a5,a5,0x10
    9108:	01055513          	srli	a0,a0,0x10
    910c:	41075593          	srai	a1,a4,0x10
    9110:	40a787b3          	sub	a5,a5,a0
    9114:	00b787b3          	add	a5,a5,a1
    9118:	4107d593          	srai	a1,a5,0x10
    911c:	00d77733          	and	a4,a4,a3
    9120:	01079793          	slli	a5,a5,0x10
    9124:	00e7e7b3          	or	a5,a5,a4
    9128:	004a0a13          	addi	s4,s4,4
    912c:	fef62e23          	sw	a5,-4(a2)
    9130:	fb4afce3          	bgeu	s5,s4,90e8 <quorem+0x108>
    9134:	00241793          	slli	a5,s0,0x2
    9138:	00f987b3          	add	a5,s3,a5
    913c:	0007a703          	lw	a4,0(a5)
    9140:	04070a63          	beqz	a4,9194 <quorem+0x1b4>
    9144:	00048513          	mv	a0,s1
    9148:	01c12083          	lw	ra,28(sp)
    914c:	01812403          	lw	s0,24(sp)
    9150:	01412483          	lw	s1,20(sp)
    9154:	01012903          	lw	s2,16(sp)
    9158:	00c12983          	lw	s3,12(sp)
    915c:	00812a03          	lw	s4,8(sp)
    9160:	00412a83          	lw	s5,4(sp)
    9164:	02010113          	addi	sp,sp,32
    9168:	00008067          	ret
    916c:	00062783          	lw	a5,0(a2)
    9170:	00079863          	bnez	a5,9180 <quorem+0x1a0>
    9174:	fff40413          	addi	s0,s0,-1
    9178:	ffc60613          	addi	a2,a2,-4
    917c:	fec9e8e3          	bltu	s3,a2,916c <quorem+0x18c>
    9180:	00892823          	sw	s0,16(s2)
    9184:	f45ff06f          	j	90c8 <quorem+0xe8>
    9188:	0007a703          	lw	a4,0(a5)
    918c:	00071863          	bnez	a4,919c <quorem+0x1bc>
    9190:	fff40413          	addi	s0,s0,-1
    9194:	ffc78793          	addi	a5,a5,-4
    9198:	fef9e8e3          	bltu	s3,a5,9188 <quorem+0x1a8>
    919c:	00892823          	sw	s0,16(s2)
    91a0:	fa5ff06f          	j	9144 <quorem+0x164>
    91a4:	00000513          	li	a0,0
    91a8:	fa1ff06f          	j	9148 <quorem+0x168>

000091ac <_dtoa_r>:
    91ac:	f5010113          	addi	sp,sp,-176
    91b0:	02f12c23          	sw	a5,56(sp)
    91b4:	02452783          	lw	a5,36(a0)
    91b8:	0a812423          	sw	s0,168(sp)
    91bc:	0a912223          	sw	s1,164(sp)
    91c0:	0b212023          	sw	s2,160(sp)
    91c4:	09312e23          	sw	s3,156(sp)
    91c8:	09512a23          	sw	s5,148(sp)
    91cc:	09612823          	sw	s6,144(sp)
    91d0:	0a112623          	sw	ra,172(sp)
    91d4:	09412c23          	sw	s4,152(sp)
    91d8:	09712623          	sw	s7,140(sp)
    91dc:	09812423          	sw	s8,136(sp)
    91e0:	09912223          	sw	s9,132(sp)
    91e4:	09a12023          	sw	s10,128(sp)
    91e8:	07b12e23          	sw	s11,124(sp)
    91ec:	00d12a23          	sw	a3,20(sp)
    91f0:	02e12023          	sw	a4,32(sp)
    91f4:	03112223          	sw	a7,36(sp)
    91f8:	00050493          	mv	s1,a0
    91fc:	00058a93          	mv	s5,a1
    9200:	00060413          	mv	s0,a2
    9204:	00080913          	mv	s2,a6
    9208:	00058993          	mv	s3,a1
    920c:	00060b13          	mv	s6,a2
    9210:	04079063          	bnez	a5,9250 <_dtoa_r+0xa4>
    9214:	01000513          	li	a0,16
    9218:	b65fe0ef          	jal	ra,7d7c <malloc>
    921c:	02a4a223          	sw	a0,36(s1)
    9220:	02051063          	bnez	a0,9240 <_dtoa_r+0x94>
    9224:	0000d6b7          	lui	a3,0xd
    9228:	06c68693          	addi	a3,a3,108 # d06c <_ctype_+0x1a4>
    922c:	00000613          	li	a2,0
    9230:	0ea00593          	li	a1,234
    9234:	0000d537          	lui	a0,0xd
    9238:	08450513          	addi	a0,a0,132 # d084 <_ctype_+0x1bc>
    923c:	331020ef          	jal	ra,bd6c <__assert_func>
    9240:	00052223          	sw	zero,4(a0)
    9244:	00052423          	sw	zero,8(a0)
    9248:	00052023          	sw	zero,0(a0)
    924c:	00052623          	sw	zero,12(a0)
    9250:	0244a783          	lw	a5,36(s1)
    9254:	0007a583          	lw	a1,0(a5)
    9258:	02058463          	beqz	a1,9280 <_dtoa_r+0xd4>
    925c:	0047a703          	lw	a4,4(a5)
    9260:	00100793          	li	a5,1
    9264:	00048513          	mv	a0,s1
    9268:	00e797b3          	sll	a5,a5,a4
    926c:	00f5a423          	sw	a5,8(a1)
    9270:	00e5a223          	sw	a4,4(a1)
    9274:	5f0010ef          	jal	ra,a864 <_Bfree>
    9278:	0244a783          	lw	a5,36(s1)
    927c:	0007a023          	sw	zero,0(a5)
    9280:	04045c63          	bgez	s0,92d8 <_dtoa_r+0x12c>
    9284:	00100793          	li	a5,1
    9288:	00141413          	slli	s0,s0,0x1
    928c:	00f92023          	sw	a5,0(s2)
    9290:	00145b13          	srli	s6,s0,0x1
    9294:	7ff007b7          	lui	a5,0x7ff00
    9298:	00fb7733          	and	a4,s6,a5
    929c:	0af71863          	bne	a4,a5,934c <_dtoa_r+0x1a0>
    92a0:	03812703          	lw	a4,56(sp)
    92a4:	000027b7          	lui	a5,0x2
    92a8:	00cb1b13          	slli	s6,s6,0xc
    92ac:	70f78793          	addi	a5,a5,1807 # 270f <CONFIG_SRAM_SIZE+0x70f>
    92b0:	00cb5b13          	srli	s6,s6,0xc
    92b4:	00f72023          	sw	a5,0(a4)
    92b8:	015b6ab3          	or	s5,s6,s5
    92bc:	000a9463          	bnez	s5,92c4 <_dtoa_r+0x118>
    92c0:	0540106f          	j	a314 <_dtoa_r+0x1168>
    92c4:	02412783          	lw	a5,36(sp)
    92c8:	0000d537          	lui	a0,0xd
    92cc:	06079663          	bnez	a5,9338 <_dtoa_r+0x18c>
    92d0:	06850793          	addi	a5,a0,104 # d068 <_ctype_+0x1a0>
    92d4:	0540106f          	j	a328 <_dtoa_r+0x117c>
    92d8:	00092023          	sw	zero,0(s2)
    92dc:	fb9ff06f          	j	9294 <_dtoa_r+0xe8>
    92e0:	05c50793          	addi	a5,a0,92
    92e4:	00f12823          	sw	a5,16(sp)
    92e8:	0000d7b7          	lui	a5,0xd
    92ec:	06478793          	addi	a5,a5,100 # d064 <_ctype_+0x19c>
    92f0:	02412703          	lw	a4,36(sp)
    92f4:	00f72023          	sw	a5,0(a4)
    92f8:	0ac12083          	lw	ra,172(sp)
    92fc:	0a812403          	lw	s0,168(sp)
    9300:	01012503          	lw	a0,16(sp)
    9304:	0a412483          	lw	s1,164(sp)
    9308:	0a012903          	lw	s2,160(sp)
    930c:	09c12983          	lw	s3,156(sp)
    9310:	09812a03          	lw	s4,152(sp)
    9314:	09412a83          	lw	s5,148(sp)
    9318:	09012b03          	lw	s6,144(sp)
    931c:	08c12b83          	lw	s7,140(sp)
    9320:	08812c03          	lw	s8,136(sp)
    9324:	08412c83          	lw	s9,132(sp)
    9328:	08012d03          	lw	s10,128(sp)
    932c:	07c12d83          	lw	s11,124(sp)
    9330:	0b010113          	addi	sp,sp,176
    9334:	00008067          	ret
    9338:	06850793          	addi	a5,a0,104
    933c:	00f12823          	sw	a5,16(sp)
    9340:	0000d7b7          	lui	a5,0xd
    9344:	06b78793          	addi	a5,a5,107 # d06b <_ctype_+0x1a3>
    9348:	fa9ff06f          	j	92f0 <_dtoa_r+0x144>
    934c:	00000613          	li	a2,0
    9350:	00000693          	li	a3,0
    9354:	000a8513          	mv	a0,s5
    9358:	000b0593          	mv	a1,s6
    935c:	03512623          	sw	s5,44(sp)
    9360:	03612823          	sw	s6,48(sp)
    9364:	97cfa0ef          	jal	ra,34e0 <__eqdf2>
    9368:	02051c63          	bnez	a0,93a0 <_dtoa_r+0x1f4>
    936c:	03812703          	lw	a4,56(sp)
    9370:	00100793          	li	a5,1
    9374:	00f72023          	sw	a5,0(a4)
    9378:	0000d737          	lui	a4,0xd
    937c:	e5870793          	addi	a5,a4,-424 # ce58 <gpio_veerwolf_driver_api+0x28>
    9380:	00f12823          	sw	a5,16(sp)
    9384:	02412783          	lw	a5,36(sp)
    9388:	f60788e3          	beqz	a5,92f8 <_dtoa_r+0x14c>
    938c:	02412683          	lw	a3,36(sp)
    9390:	0000d7b7          	lui	a5,0xd
    9394:	e5978793          	addi	a5,a5,-423 # ce59 <gpio_veerwolf_driver_api+0x29>
    9398:	00f6a023          	sw	a5,0(a3)
    939c:	f5dff06f          	j	92f8 <_dtoa_r+0x14c>
    93a0:	06810713          	addi	a4,sp,104
    93a4:	06c10693          	addi	a3,sp,108
    93a8:	000b0613          	mv	a2,s6
    93ac:	000a8593          	mv	a1,s5
    93b0:	00048513          	mv	a0,s1
    93b4:	6fd010ef          	jal	ra,b2b0 <__d2b>
    93b8:	014b5913          	srli	s2,s6,0x14
    93bc:	00a12623          	sw	a0,12(sp)
    93c0:	7ff97913          	andi	s2,s2,2047
    93c4:	06812a03          	lw	s4,104(sp)
    93c8:	1a090063          	beqz	s2,9568 <_dtoa_r+0x3bc>
    93cc:	03012783          	lw	a5,48(sp)
    93d0:	02c12503          	lw	a0,44(sp)
    93d4:	c0190913          	addi	s2,s2,-1023
    93d8:	00c79593          	slli	a1,a5,0xc
    93dc:	00c5d593          	srli	a1,a1,0xc
    93e0:	3ff007b7          	lui	a5,0x3ff00
    93e4:	00f5e5b3          	or	a1,a1,a5
    93e8:	04012c23          	sw	zero,88(sp)
    93ec:	0000d7b7          	lui	a5,0xd
    93f0:	8d87a603          	lw	a2,-1832(a5) # c8d8 <__device_handles_end+0x80>
    93f4:	8dc7a683          	lw	a3,-1828(a5)
    93f8:	bfdf80ef          	jal	ra,1ff4 <__subdf3>
    93fc:	0000d7b7          	lui	a5,0xd
    9400:	8e07a603          	lw	a2,-1824(a5) # c8e0 <__device_handles_end+0x88>
    9404:	8e47a683          	lw	a3,-1820(a5)
    9408:	e24f80ef          	jal	ra,1a2c <__muldf3>
    940c:	0000d7b7          	lui	a5,0xd
    9410:	8e87a603          	lw	a2,-1816(a5) # c8e8 <__device_handles_end+0x90>
    9414:	8ec7a683          	lw	a3,-1812(a5)
    9418:	f5cf70ef          	jal	ra,b74 <__adddf3>
    941c:	00050b93          	mv	s7,a0
    9420:	00090513          	mv	a0,s2
    9424:	00058a93          	mv	s5,a1
    9428:	bd8fa0ef          	jal	ra,3800 <__floatsidf>
    942c:	0000d7b7          	lui	a5,0xd
    9430:	8f07a603          	lw	a2,-1808(a5) # c8f0 <__device_handles_end+0x98>
    9434:	8f47a683          	lw	a3,-1804(a5)
    9438:	df4f80ef          	jal	ra,1a2c <__muldf3>
    943c:	00050613          	mv	a2,a0
    9440:	00058693          	mv	a3,a1
    9444:	000b8513          	mv	a0,s7
    9448:	000a8593          	mv	a1,s5
    944c:	f28f70ef          	jal	ra,b74 <__adddf3>
    9450:	00050b93          	mv	s7,a0
    9454:	00058a93          	mv	s5,a1
    9458:	b28fa0ef          	jal	ra,3780 <__fixdfsi>
    945c:	00050413          	mv	s0,a0
    9460:	00000613          	li	a2,0
    9464:	00000693          	li	a3,0
    9468:	000b8513          	mv	a0,s7
    946c:	000a8593          	mv	a1,s5
    9470:	9e0fa0ef          	jal	ra,3650 <__ledf2>
    9474:	02055063          	bgez	a0,9494 <_dtoa_r+0x2e8>
    9478:	00040513          	mv	a0,s0
    947c:	b84fa0ef          	jal	ra,3800 <__floatsidf>
    9480:	000b8613          	mv	a2,s7
    9484:	000a8693          	mv	a3,s5
    9488:	858fa0ef          	jal	ra,34e0 <__eqdf2>
    948c:	00050463          	beqz	a0,9494 <_dtoa_r+0x2e8>
    9490:	fff40413          	addi	s0,s0,-1
    9494:	00100713          	li	a4,1
    9498:	01600793          	li	a5,22
    949c:	02e12a23          	sw	a4,52(sp)
    94a0:	0287ea63          	bltu	a5,s0,94d4 <_dtoa_r+0x328>
    94a4:	0000d737          	lui	a4,0xd
    94a8:	00341793          	slli	a5,s0,0x3
    94ac:	b3870713          	addi	a4,a4,-1224 # cb38 <__mprec_tens>
    94b0:	00e787b3          	add	a5,a5,a4
    94b4:	0007a603          	lw	a2,0(a5)
    94b8:	0047a683          	lw	a3,4(a5)
    94bc:	02c12503          	lw	a0,44(sp)
    94c0:	03012583          	lw	a1,48(sp)
    94c4:	98cfa0ef          	jal	ra,3650 <__ledf2>
    94c8:	00055463          	bgez	a0,94d0 <_dtoa_r+0x324>
    94cc:	fff40413          	addi	s0,s0,-1
    94d0:	02012a23          	sw	zero,52(sp)
    94d4:	412a0933          	sub	s2,s4,s2
    94d8:	fff90c13          	addi	s8,s2,-1
    94dc:	00000b93          	li	s7,0
    94e0:	000c5863          	bgez	s8,94f0 <_dtoa_r+0x344>
    94e4:	00100b93          	li	s7,1
    94e8:	412b8bb3          	sub	s7,s7,s2
    94ec:	00000c13          	li	s8,0
    94f0:	0c044663          	bltz	s0,95bc <_dtoa_r+0x410>
    94f4:	008c0c33          	add	s8,s8,s0
    94f8:	02812423          	sw	s0,40(sp)
    94fc:	00000c93          	li	s9,0
    9500:	01412703          	lw	a4,20(sp)
    9504:	00900793          	li	a5,9
    9508:	14e7e863          	bltu	a5,a4,9658 <_dtoa_r+0x4ac>
    950c:	00500793          	li	a5,5
    9510:	00100913          	li	s2,1
    9514:	00e7d863          	bge	a5,a4,9524 <_dtoa_r+0x378>
    9518:	ffc70793          	addi	a5,a4,-4
    951c:	00f12a23          	sw	a5,20(sp)
    9520:	00000913          	li	s2,0
    9524:	01412703          	lw	a4,20(sp)
    9528:	00400793          	li	a5,4
    952c:	0af70063          	beq	a4,a5,95cc <_dtoa_r+0x420>
    9530:	00500793          	li	a5,5
    9534:	10f70063          	beq	a4,a5,9634 <_dtoa_r+0x488>
    9538:	00200793          	li	a5,2
    953c:	0ef70863          	beq	a4,a5,962c <_dtoa_r+0x480>
    9540:	00300793          	li	a5,3
    9544:	00012e23          	sw	zero,28(sp)
    9548:	0ef70a63          	beq	a4,a5,963c <_dtoa_r+0x490>
    954c:	00100793          	li	a5,1
    9550:	00f12e23          	sw	a5,28(sp)
    9554:	fff00d93          	li	s11,-1
    9558:	fff00d13          	li	s10,-1
    955c:	01200793          	li	a5,18
    9560:	02012023          	sw	zero,32(sp)
    9564:	08c0006f          	j	95f0 <_dtoa_r+0x444>
    9568:	06c12903          	lw	s2,108(sp)
    956c:	02000793          	li	a5,32
    9570:	012a0933          	add	s2,s4,s2
    9574:	43290593          	addi	a1,s2,1074
    9578:	02b7dc63          	bge	a5,a1,95b0 <_dtoa_r+0x404>
    957c:	04000513          	li	a0,64
    9580:	40b50533          	sub	a0,a0,a1
    9584:	41290593          	addi	a1,s2,1042
    9588:	00ab1533          	sll	a0,s6,a0
    958c:	00badab3          	srl	s5,s5,a1
    9590:	01556533          	or	a0,a0,s5
    9594:	a4cf90ef          	jal	ra,27e0 <__floatunsidf>
    9598:	fe1007b7          	lui	a5,0xfe100
    959c:	00b785b3          	add	a1,a5,a1
    95a0:	00100793          	li	a5,1
    95a4:	fff90913          	addi	s2,s2,-1
    95a8:	04f12c23          	sw	a5,88(sp)
    95ac:	e41ff06f          	j	93ec <_dtoa_r+0x240>
    95b0:	40b78533          	sub	a0,a5,a1
    95b4:	00aa9533          	sll	a0,s5,a0
    95b8:	fddff06f          	j	9594 <_dtoa_r+0x3e8>
    95bc:	408b8bb3          	sub	s7,s7,s0
    95c0:	40800cb3          	neg	s9,s0
    95c4:	02012423          	sw	zero,40(sp)
    95c8:	f39ff06f          	j	9500 <_dtoa_r+0x354>
    95cc:	00100793          	li	a5,1
    95d0:	00f12e23          	sw	a5,28(sp)
    95d4:	02012783          	lw	a5,32(sp)
    95d8:	08f04663          	bgtz	a5,9664 <_dtoa_r+0x4b8>
    95dc:	00100713          	li	a4,1
    95e0:	00100d93          	li	s11,1
    95e4:	00100d13          	li	s10,1
    95e8:	00100793          	li	a5,1
    95ec:	02e12023          	sw	a4,32(sp)
    95f0:	0244a683          	lw	a3,36(s1)
    95f4:	00400713          	li	a4,4
    95f8:	0006a223          	sw	zero,4(a3)
    95fc:	01470613          	addi	a2,a4,20
    9600:	0046a583          	lw	a1,4(a3)
    9604:	06c7f863          	bgeu	a5,a2,9674 <_dtoa_r+0x4c8>
    9608:	00048513          	mv	a0,s1
    960c:	158010ef          	jal	ra,a764 <_Balloc>
    9610:	00a12823          	sw	a0,16(sp)
    9614:	06051863          	bnez	a0,9684 <_dtoa_r+0x4d8>
    9618:	0000d6b7          	lui	a3,0xd
    961c:	0e868693          	addi	a3,a3,232 # d0e8 <_ctype_+0x220>
    9620:	00000613          	li	a2,0
    9624:	1aa00593          	li	a1,426
    9628:	c0dff06f          	j	9234 <_dtoa_r+0x88>
    962c:	00012e23          	sw	zero,28(sp)
    9630:	fa5ff06f          	j	95d4 <_dtoa_r+0x428>
    9634:	00100793          	li	a5,1
    9638:	00f12e23          	sw	a5,28(sp)
    963c:	02012783          	lw	a5,32(sp)
    9640:	00f40db3          	add	s11,s0,a5
    9644:	001d8d13          	addi	s10,s11,1
    9648:	000d0793          	mv	a5,s10
    964c:	fba042e3          	bgtz	s10,95f0 <_dtoa_r+0x444>
    9650:	00100793          	li	a5,1
    9654:	f9dff06f          	j	95f0 <_dtoa_r+0x444>
    9658:	00100913          	li	s2,1
    965c:	00012a23          	sw	zero,20(sp)
    9660:	eedff06f          	j	954c <_dtoa_r+0x3a0>
    9664:	02012d83          	lw	s11,32(sp)
    9668:	000d8d13          	mv	s10,s11
    966c:	000d8793          	mv	a5,s11
    9670:	f81ff06f          	j	95f0 <_dtoa_r+0x444>
    9674:	00158593          	addi	a1,a1,1
    9678:	00b6a223          	sw	a1,4(a3)
    967c:	00171713          	slli	a4,a4,0x1
    9680:	f7dff06f          	j	95fc <_dtoa_r+0x450>
    9684:	0244a783          	lw	a5,36(s1)
    9688:	01012703          	lw	a4,16(sp)
    968c:	00e7a023          	sw	a4,0(a5) # fe100000 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfe100001>
    9690:	00e00793          	li	a5,14
    9694:	19a7ea63          	bltu	a5,s10,9828 <_dtoa_r+0x67c>
    9698:	18090863          	beqz	s2,9828 <_dtoa_r+0x67c>
    969c:	24805263          	blez	s0,98e0 <_dtoa_r+0x734>
    96a0:	00f47793          	andi	a5,s0,15
    96a4:	0000d737          	lui	a4,0xd
    96a8:	b3870713          	addi	a4,a4,-1224 # cb38 <__mprec_tens>
    96ac:	00379793          	slli	a5,a5,0x3
    96b0:	40445a93          	srai	s5,s0,0x4
    96b4:	00e787b3          	add	a5,a5,a4
    96b8:	0000d937          	lui	s2,0xd
    96bc:	010af693          	andi	a3,s5,16
    96c0:	0007a703          	lw	a4,0(a5)
    96c4:	b1090913          	addi	s2,s2,-1264 # cb10 <__mprec_bigtens>
    96c8:	0047a783          	lw	a5,4(a5)
    96cc:	00200a13          	li	s4,2
    96d0:	02068c63          	beqz	a3,9708 <_dtoa_r+0x55c>
    96d4:	02092603          	lw	a2,32(s2)
    96d8:	02492683          	lw	a3,36(s2)
    96dc:	02c12503          	lw	a0,44(sp)
    96e0:	03012583          	lw	a1,48(sp)
    96e4:	02f12e23          	sw	a5,60(sp)
    96e8:	00e12c23          	sw	a4,24(sp)
    96ec:	c61f70ef          	jal	ra,134c <__divdf3>
    96f0:	03c12783          	lw	a5,60(sp)
    96f4:	01812703          	lw	a4,24(sp)
    96f8:	00fafa93          	andi	s5,s5,15
    96fc:	00050993          	mv	s3,a0
    9700:	00058b13          	mv	s6,a1
    9704:	00300a13          	li	s4,3
    9708:	1a0a9263          	bnez	s5,98ac <_dtoa_r+0x700>
    970c:	00098513          	mv	a0,s3
    9710:	00070613          	mv	a2,a4
    9714:	00078693          	mv	a3,a5
    9718:	000b0593          	mv	a1,s6
    971c:	c31f70ef          	jal	ra,134c <__divdf3>
    9720:	00050993          	mv	s3,a0
    9724:	00058b13          	mv	s6,a1
    9728:	03412783          	lw	a5,52(sp)
    972c:	24078263          	beqz	a5,9970 <_dtoa_r+0x7c4>
    9730:	0000d7b7          	lui	a5,0xd
    9734:	8907a603          	lw	a2,-1904(a5) # c890 <__device_handles_end+0x38>
    9738:	8947a683          	lw	a3,-1900(a5)
    973c:	00098513          	mv	a0,s3
    9740:	000b0593          	mv	a1,s6
    9744:	f0df90ef          	jal	ra,3650 <__ledf2>
    9748:	22055463          	bgez	a0,9970 <_dtoa_r+0x7c4>
    974c:	220d0863          	beqz	s10,997c <_dtoa_r+0x7d0>
    9750:	0db05863          	blez	s11,9820 <_dtoa_r+0x674>
    9754:	fff40793          	addi	a5,s0,-1
    9758:	00f12c23          	sw	a5,24(sp)
    975c:	0000d7b7          	lui	a5,0xd
    9760:	8f87a603          	lw	a2,-1800(a5) # c8f8 <__device_handles_end+0xa0>
    9764:	8fc7a683          	lw	a3,-1796(a5)
    9768:	00098513          	mv	a0,s3
    976c:	000b0593          	mv	a1,s6
    9770:	abcf80ef          	jal	ra,1a2c <__muldf3>
    9774:	00050993          	mv	s3,a0
    9778:	00058b13          	mv	s6,a1
    977c:	001a0a13          	addi	s4,s4,1
    9780:	000d8713          	mv	a4,s11
    9784:	000a0513          	mv	a0,s4
    9788:	04e12423          	sw	a4,72(sp)
    978c:	03612e23          	sw	s6,60(sp)
    9790:	05312023          	sw	s3,64(sp)
    9794:	86cfa0ef          	jal	ra,3800 <__floatsidf>
    9798:	000b0693          	mv	a3,s6
    979c:	00098613          	mv	a2,s3
    97a0:	a8cf80ef          	jal	ra,1a2c <__muldf3>
    97a4:	0000d6b7          	lui	a3,0xd
    97a8:	9006a603          	lw	a2,-1792(a3) # c900 <__device_handles_end+0xa8>
    97ac:	9046a683          	lw	a3,-1788(a3)
    97b0:	000b0913          	mv	s2,s6
    97b4:	00098a93          	mv	s5,s3
    97b8:	bbcf70ef          	jal	ra,b74 <__adddf3>
    97bc:	04812703          	lw	a4,72(sp)
    97c0:	fcc008b7          	lui	a7,0xfcc00
    97c4:	00050b13          	mv	s6,a0
    97c8:	00b88a33          	add	s4,a7,a1
    97cc:	1a071e63          	bnez	a4,9988 <_dtoa_r+0x7dc>
    97d0:	0000d737          	lui	a4,0xd
    97d4:	90872603          	lw	a2,-1784(a4) # c908 <__device_handles_end+0xb0>
    97d8:	90c72683          	lw	a3,-1780(a4)
    97dc:	00098513          	mv	a0,s3
    97e0:	00090593          	mv	a1,s2
    97e4:	811f80ef          	jal	ra,1ff4 <__subdf3>
    97e8:	000b0613          	mv	a2,s6
    97ec:	000a0693          	mv	a3,s4
    97f0:	00050993          	mv	s3,a0
    97f4:	00058913          	mv	s2,a1
    97f8:	d75f90ef          	jal	ra,356c <__gedf2>
    97fc:	06a040e3          	bgtz	a0,a05c <_dtoa_r+0xeb0>
    9800:	800007b7          	lui	a5,0x80000
    9804:	0147c7b3          	xor	a5,a5,s4
    9808:	000b0613          	mv	a2,s6
    980c:	00078693          	mv	a3,a5
    9810:	00098513          	mv	a0,s3
    9814:	00090593          	mv	a1,s2
    9818:	e39f90ef          	jal	ra,3650 <__ledf2>
    981c:	02054ae3          	bltz	a0,a050 <_dtoa_r+0xea4>
    9820:	02c12983          	lw	s3,44(sp)
    9824:	03012b03          	lw	s6,48(sp)
    9828:	06c12783          	lw	a5,108(sp)
    982c:	4e07cc63          	bltz	a5,9d24 <_dtoa_r+0xb78>
    9830:	00e00713          	li	a4,14
    9834:	4e874863          	blt	a4,s0,9d24 <_dtoa_r+0xb78>
    9838:	0000d737          	lui	a4,0xd
    983c:	00341793          	slli	a5,s0,0x3
    9840:	b3870713          	addi	a4,a4,-1224 # cb38 <__mprec_tens>
    9844:	00e787b3          	add	a5,a5,a4
    9848:	0007aa03          	lw	s4,0(a5) # 80000000 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000001>
    984c:	0047aa83          	lw	s5,4(a5)
    9850:	02012783          	lw	a5,32(sp)
    9854:	3607de63          	bgez	a5,9bd0 <_dtoa_r+0xa24>
    9858:	37a04c63          	bgtz	s10,9bd0 <_dtoa_r+0xa24>
    985c:	7e0d1a63          	bnez	s10,a050 <_dtoa_r+0xea4>
    9860:	0000d7b7          	lui	a5,0xd
    9864:	9087a603          	lw	a2,-1784(a5) # c908 <__device_handles_end+0xb0>
    9868:	90c7a683          	lw	a3,-1780(a5)
    986c:	000a0513          	mv	a0,s4
    9870:	000a8593          	mv	a1,s5
    9874:	9b8f80ef          	jal	ra,1a2c <__muldf3>
    9878:	00098613          	mv	a2,s3
    987c:	000b0693          	mv	a3,s6
    9880:	cedf90ef          	jal	ra,356c <__gedf2>
    9884:	00000a13          	li	s4,0
    9888:	00000913          	li	s2,0
    988c:	78055063          	bgez	a0,a00c <_dtoa_r+0xe60>
    9890:	01012783          	lw	a5,16(sp)
    9894:	01012703          	lw	a4,16(sp)
    9898:	00140413          	addi	s0,s0,1
    989c:	00178993          	addi	s3,a5,1
    98a0:	03100793          	li	a5,49
    98a4:	00f70023          	sb	a5,0(a4)
    98a8:	7700006f          	j	a018 <_dtoa_r+0xe6c>
    98ac:	001af693          	andi	a3,s5,1
    98b0:	02068263          	beqz	a3,98d4 <_dtoa_r+0x728>
    98b4:	00092603          	lw	a2,0(s2)
    98b8:	00492683          	lw	a3,4(s2)
    98bc:	00070513          	mv	a0,a4
    98c0:	00078593          	mv	a1,a5
    98c4:	968f80ef          	jal	ra,1a2c <__muldf3>
    98c8:	001a0a13          	addi	s4,s4,1
    98cc:	00050713          	mv	a4,a0
    98d0:	00058793          	mv	a5,a1
    98d4:	401ada93          	srai	s5,s5,0x1
    98d8:	00890913          	addi	s2,s2,8
    98dc:	e2dff06f          	j	9708 <_dtoa_r+0x55c>
    98e0:	00200a13          	li	s4,2
    98e4:	e40402e3          	beqz	s0,9728 <_dtoa_r+0x57c>
    98e8:	40800933          	neg	s2,s0
    98ec:	00f97793          	andi	a5,s2,15
    98f0:	0000d737          	lui	a4,0xd
    98f4:	b3870713          	addi	a4,a4,-1224 # cb38 <__mprec_tens>
    98f8:	00379793          	slli	a5,a5,0x3
    98fc:	00e787b3          	add	a5,a5,a4
    9900:	0007a603          	lw	a2,0(a5)
    9904:	0047a683          	lw	a3,4(a5)
    9908:	02c12503          	lw	a0,44(sp)
    990c:	03012583          	lw	a1,48(sp)
    9910:	0000dab7          	lui	s5,0xd
    9914:	40495913          	srai	s2,s2,0x4
    9918:	914f80ef          	jal	ra,1a2c <__muldf3>
    991c:	00050793          	mv	a5,a0
    9920:	00050993          	mv	s3,a0
    9924:	00058b13          	mv	s6,a1
    9928:	b10a8a93          	addi	s5,s5,-1264 # cb10 <__mprec_bigtens>
    992c:	00000713          	li	a4,0
    9930:	00091863          	bnez	s2,9940 <_dtoa_r+0x794>
    9934:	de070ae3          	beqz	a4,9728 <_dtoa_r+0x57c>
    9938:	00078993          	mv	s3,a5
    993c:	de9ff06f          	j	9724 <_dtoa_r+0x578>
    9940:	00197693          	andi	a3,s2,1
    9944:	02068063          	beqz	a3,9964 <_dtoa_r+0x7b8>
    9948:	000aa603          	lw	a2,0(s5)
    994c:	004aa683          	lw	a3,4(s5)
    9950:	00078513          	mv	a0,a5
    9954:	001a0a13          	addi	s4,s4,1
    9958:	8d4f80ef          	jal	ra,1a2c <__muldf3>
    995c:	00050793          	mv	a5,a0
    9960:	00100713          	li	a4,1
    9964:	40195913          	srai	s2,s2,0x1
    9968:	008a8a93          	addi	s5,s5,8
    996c:	fc5ff06f          	j	9930 <_dtoa_r+0x784>
    9970:	00812c23          	sw	s0,24(sp)
    9974:	000d0713          	mv	a4,s10
    9978:	e0dff06f          	j	9784 <_dtoa_r+0x5d8>
    997c:	00812c23          	sw	s0,24(sp)
    9980:	00000713          	li	a4,0
    9984:	e01ff06f          	j	9784 <_dtoa_r+0x5d8>
    9988:	fff70793          	addi	a5,a4,-1
    998c:	0000d6b7          	lui	a3,0xd
    9990:	b3868693          	addi	a3,a3,-1224 # cb38 <__mprec_tens>
    9994:	00379793          	slli	a5,a5,0x3
    9998:	00d787b3          	add	a5,a5,a3
    999c:	0007a603          	lw	a2,0(a5)
    99a0:	0047a683          	lw	a3,4(a5)
    99a4:	01012783          	lw	a5,16(sp)
    99a8:	00e787b3          	add	a5,a5,a4
    99ac:	02f12e23          	sw	a5,60(sp)
    99b0:	01c12783          	lw	a5,28(sp)
    99b4:	10078863          	beqz	a5,9ac4 <_dtoa_r+0x918>
    99b8:	0000d7b7          	lui	a5,0xd
    99bc:	9147a583          	lw	a1,-1772(a5) # c914 <__device_handles_end+0xbc>
    99c0:	04a12023          	sw	a0,64(sp)
    99c4:	9107a503          	lw	a0,-1776(a5)
    99c8:	985f70ef          	jal	ra,134c <__divdf3>
    99cc:	000b0613          	mv	a2,s6
    99d0:	000a0693          	mv	a3,s4
    99d4:	e20f80ef          	jal	ra,1ff4 <__subdf3>
    99d8:	0000d7b7          	lui	a5,0xd
    99dc:	8947a803          	lw	a6,-1900(a5) # c894 <__device_handles_end+0x3c>
    99e0:	8907a783          	lw	a5,-1904(a5)
    99e4:	01012983          	lw	s3,16(sp)
    99e8:	05012623          	sw	a6,76(sp)
    99ec:	04f12423          	sw	a5,72(sp)
    99f0:	0000d7b7          	lui	a5,0xd
    99f4:	8fc7a803          	lw	a6,-1796(a5) # c8fc <__device_handles_end+0xa4>
    99f8:	8f87a783          	lw	a5,-1800(a5)
    99fc:	00050a13          	mv	s4,a0
    9a00:	00058b13          	mv	s6,a1
    9a04:	04f12023          	sw	a5,64(sp)
    9a08:	05012223          	sw	a6,68(sp)
    9a0c:	00090593          	mv	a1,s2
    9a10:	000a8513          	mv	a0,s5
    9a14:	d6df90ef          	jal	ra,3780 <__fixdfsi>
    9a18:	04a12823          	sw	a0,80(sp)
    9a1c:	de5f90ef          	jal	ra,3800 <__floatsidf>
    9a20:	00050613          	mv	a2,a0
    9a24:	00058693          	mv	a3,a1
    9a28:	000a8513          	mv	a0,s5
    9a2c:	00090593          	mv	a1,s2
    9a30:	dc4f80ef          	jal	ra,1ff4 <__subdf3>
    9a34:	05012783          	lw	a5,80(sp)
    9a38:	00198993          	addi	s3,s3,1
    9a3c:	000a0613          	mv	a2,s4
    9a40:	03078793          	addi	a5,a5,48
    9a44:	fef98fa3          	sb	a5,-1(s3)
    9a48:	000b0693          	mv	a3,s6
    9a4c:	00050913          	mv	s2,a0
    9a50:	00058a93          	mv	s5,a1
    9a54:	bfdf90ef          	jal	ra,3650 <__ledf2>
    9a58:	14054c63          	bltz	a0,9bb0 <_dtoa_r+0xa04>
    9a5c:	04812503          	lw	a0,72(sp)
    9a60:	04c12583          	lw	a1,76(sp)
    9a64:	00090613          	mv	a2,s2
    9a68:	000a8693          	mv	a3,s5
    9a6c:	d88f80ef          	jal	ra,1ff4 <__subdf3>
    9a70:	000a0613          	mv	a2,s4
    9a74:	000b0693          	mv	a3,s6
    9a78:	bd9f90ef          	jal	ra,3650 <__ledf2>
    9a7c:	22054c63          	bltz	a0,9cb4 <_dtoa_r+0xb08>
    9a80:	03c12783          	lw	a5,60(sp)
    9a84:	d8f98ee3          	beq	s3,a5,9820 <_dtoa_r+0x674>
    9a88:	04012603          	lw	a2,64(sp)
    9a8c:	04412683          	lw	a3,68(sp)
    9a90:	000a0513          	mv	a0,s4
    9a94:	000b0593          	mv	a1,s6
    9a98:	f95f70ef          	jal	ra,1a2c <__muldf3>
    9a9c:	04012603          	lw	a2,64(sp)
    9aa0:	04412683          	lw	a3,68(sp)
    9aa4:	00050a13          	mv	s4,a0
    9aa8:	00058b13          	mv	s6,a1
    9aac:	00090513          	mv	a0,s2
    9ab0:	000a8593          	mv	a1,s5
    9ab4:	f79f70ef          	jal	ra,1a2c <__muldf3>
    9ab8:	00050a93          	mv	s5,a0
    9abc:	00058913          	mv	s2,a1
    9ac0:	f4dff06f          	j	9a0c <_dtoa_r+0x860>
    9ac4:	000a0593          	mv	a1,s4
    9ac8:	f65f70ef          	jal	ra,1a2c <__muldf3>
    9acc:	03c12783          	lw	a5,60(sp)
    9ad0:	01012983          	lw	s3,16(sp)
    9ad4:	04a12423          	sw	a0,72(sp)
    9ad8:	04f12023          	sw	a5,64(sp)
    9adc:	0000d7b7          	lui	a5,0xd
    9ae0:	8fc7a803          	lw	a6,-1796(a5) # c8fc <__device_handles_end+0xa4>
    9ae4:	8f87a783          	lw	a5,-1800(a5)
    9ae8:	00058b13          	mv	s6,a1
    9aec:	05012a23          	sw	a6,84(sp)
    9af0:	04f12823          	sw	a5,80(sp)
    9af4:	00090593          	mv	a1,s2
    9af8:	000a8513          	mv	a0,s5
    9afc:	c85f90ef          	jal	ra,3780 <__fixdfsi>
    9b00:	04a12e23          	sw	a0,92(sp)
    9b04:	cfdf90ef          	jal	ra,3800 <__floatsidf>
    9b08:	00050613          	mv	a2,a0
    9b0c:	00058693          	mv	a3,a1
    9b10:	000a8513          	mv	a0,s5
    9b14:	00090593          	mv	a1,s2
    9b18:	cdcf80ef          	jal	ra,1ff4 <__subdf3>
    9b1c:	05c12783          	lw	a5,92(sp)
    9b20:	00198993          	addi	s3,s3,1
    9b24:	00050a13          	mv	s4,a0
    9b28:	03078793          	addi	a5,a5,48
    9b2c:	fef98fa3          	sb	a5,-1(s3)
    9b30:	03c12783          	lw	a5,60(sp)
    9b34:	00058913          	mv	s2,a1
    9b38:	08f99063          	bne	s3,a5,9bb8 <_dtoa_r+0xa0c>
    9b3c:	0000dab7          	lui	s5,0xd
    9b40:	910aa603          	lw	a2,-1776(s5) # c910 <__device_handles_end+0xb8>
    9b44:	914aa683          	lw	a3,-1772(s5)
    9b48:	04812503          	lw	a0,72(sp)
    9b4c:	000b0593          	mv	a1,s6
    9b50:	824f70ef          	jal	ra,b74 <__adddf3>
    9b54:	00050613          	mv	a2,a0
    9b58:	00058693          	mv	a3,a1
    9b5c:	000a0513          	mv	a0,s4
    9b60:	00090593          	mv	a1,s2
    9b64:	a09f90ef          	jal	ra,356c <__gedf2>
    9b68:	14a04663          	bgtz	a0,9cb4 <_dtoa_r+0xb08>
    9b6c:	04812603          	lw	a2,72(sp)
    9b70:	910aa503          	lw	a0,-1776(s5)
    9b74:	914aa583          	lw	a1,-1772(s5)
    9b78:	000b0693          	mv	a3,s6
    9b7c:	c78f80ef          	jal	ra,1ff4 <__subdf3>
    9b80:	00050613          	mv	a2,a0
    9b84:	00058693          	mv	a3,a1
    9b88:	000a0513          	mv	a0,s4
    9b8c:	00090593          	mv	a1,s2
    9b90:	ac1f90ef          	jal	ra,3650 <__ledf2>
    9b94:	c80556e3          	bgez	a0,9820 <_dtoa_r+0x674>
    9b98:	03000793          	li	a5,48
    9b9c:	04012983          	lw	s3,64(sp)
    9ba0:	fff98713          	addi	a4,s3,-1
    9ba4:	04e12023          	sw	a4,64(sp)
    9ba8:	fff9c703          	lbu	a4,-1(s3)
    9bac:	fef708e3          	beq	a4,a5,9b9c <_dtoa_r+0x9f0>
    9bb0:	01812403          	lw	s0,24(sp)
    9bb4:	0d00006f          	j	9c84 <_dtoa_r+0xad8>
    9bb8:	05012603          	lw	a2,80(sp)
    9bbc:	05412683          	lw	a3,84(sp)
    9bc0:	e6df70ef          	jal	ra,1a2c <__muldf3>
    9bc4:	00050a93          	mv	s5,a0
    9bc8:	00058913          	mv	s2,a1
    9bcc:	f29ff06f          	j	9af4 <_dtoa_r+0x948>
    9bd0:	01012783          	lw	a5,16(sp)
    9bd4:	000b0c93          	mv	s9,s6
    9bd8:	00098d93          	mv	s11,s3
    9bdc:	00178c13          	addi	s8,a5,1
    9be0:	01a78d33          	add	s10,a5,s10
    9be4:	0000d7b7          	lui	a5,0xd
    9be8:	8f87ab03          	lw	s6,-1800(a5) # c8f8 <__device_handles_end+0xa0>
    9bec:	8fc7ab83          	lw	s7,-1796(a5)
    9bf0:	000a0613          	mv	a2,s4
    9bf4:	000a8693          	mv	a3,s5
    9bf8:	000d8513          	mv	a0,s11
    9bfc:	000c8593          	mv	a1,s9
    9c00:	f4cf70ef          	jal	ra,134c <__divdf3>
    9c04:	b7df90ef          	jal	ra,3780 <__fixdfsi>
    9c08:	00050913          	mv	s2,a0
    9c0c:	bf5f90ef          	jal	ra,3800 <__floatsidf>
    9c10:	000a0613          	mv	a2,s4
    9c14:	000a8693          	mv	a3,s5
    9c18:	e15f70ef          	jal	ra,1a2c <__muldf3>
    9c1c:	00058693          	mv	a3,a1
    9c20:	00050613          	mv	a2,a0
    9c24:	000c8593          	mv	a1,s9
    9c28:	000d8513          	mv	a0,s11
    9c2c:	bc8f80ef          	jal	ra,1ff4 <__subdf3>
    9c30:	03090693          	addi	a3,s2,48
    9c34:	fedc0fa3          	sb	a3,-1(s8)
    9c38:	000c0993          	mv	s3,s8
    9c3c:	0b8d1e63          	bne	s10,s8,9cf8 <_dtoa_r+0xb4c>
    9c40:	00050613          	mv	a2,a0
    9c44:	00058693          	mv	a3,a1
    9c48:	f2df60ef          	jal	ra,b74 <__adddf3>
    9c4c:	000a0613          	mv	a2,s4
    9c50:	000a8693          	mv	a3,s5
    9c54:	00050b93          	mv	s7,a0
    9c58:	00058b13          	mv	s6,a1
    9c5c:	911f90ef          	jal	ra,356c <__gedf2>
    9c60:	04a04863          	bgtz	a0,9cb0 <_dtoa_r+0xb04>
    9c64:	000a0613          	mv	a2,s4
    9c68:	000a8693          	mv	a3,s5
    9c6c:	000b8513          	mv	a0,s7
    9c70:	000b0593          	mv	a1,s6
    9c74:	86df90ef          	jal	ra,34e0 <__eqdf2>
    9c78:	00051663          	bnez	a0,9c84 <_dtoa_r+0xad8>
    9c7c:	00197913          	andi	s2,s2,1
    9c80:	02091863          	bnez	s2,9cb0 <_dtoa_r+0xb04>
    9c84:	00c12583          	lw	a1,12(sp)
    9c88:	00048513          	mv	a0,s1
    9c8c:	3d9000ef          	jal	ra,a864 <_Bfree>
    9c90:	03812783          	lw	a5,56(sp)
    9c94:	00098023          	sb	zero,0(s3)
    9c98:	00140513          	addi	a0,s0,1
    9c9c:	00a7a023          	sw	a0,0(a5)
    9ca0:	02412783          	lw	a5,36(sp)
    9ca4:	e4078a63          	beqz	a5,92f8 <_dtoa_r+0x14c>
    9ca8:	0137a023          	sw	s3,0(a5)
    9cac:	e4cff06f          	j	92f8 <_dtoa_r+0x14c>
    9cb0:	00812c23          	sw	s0,24(sp)
    9cb4:	00098793          	mv	a5,s3
    9cb8:	03900713          	li	a4,57
    9cbc:	00078993          	mv	s3,a5
    9cc0:	fff7c683          	lbu	a3,-1(a5)
    9cc4:	fff78793          	addi	a5,a5,-1
    9cc8:	02e69063          	bne	a3,a4,9ce8 <_dtoa_r+0xb3c>
    9ccc:	01012683          	lw	a3,16(sp)
    9cd0:	fef696e3          	bne	a3,a5,9cbc <_dtoa_r+0xb10>
    9cd4:	01812703          	lw	a4,24(sp)
    9cd8:	00170713          	addi	a4,a4,1
    9cdc:	00e12c23          	sw	a4,24(sp)
    9ce0:	03000713          	li	a4,48
    9ce4:	00e68023          	sb	a4,0(a3)
    9ce8:	0007c703          	lbu	a4,0(a5)
    9cec:	00170713          	addi	a4,a4,1
    9cf0:	00e78023          	sb	a4,0(a5)
    9cf4:	ebdff06f          	j	9bb0 <_dtoa_r+0xa04>
    9cf8:	000b0613          	mv	a2,s6
    9cfc:	000b8693          	mv	a3,s7
    9d00:	d2df70ef          	jal	ra,1a2c <__muldf3>
    9d04:	00000613          	li	a2,0
    9d08:	00000693          	li	a3,0
    9d0c:	00050d93          	mv	s11,a0
    9d10:	00058c93          	mv	s9,a1
    9d14:	001c0c13          	addi	s8,s8,1
    9d18:	fc8f90ef          	jal	ra,34e0 <__eqdf2>
    9d1c:	ec051ae3          	bnez	a0,9bf0 <_dtoa_r+0xa44>
    9d20:	f65ff06f          	j	9c84 <_dtoa_r+0xad8>
    9d24:	01c12703          	lw	a4,28(sp)
    9d28:	16070c63          	beqz	a4,9ea0 <_dtoa_r+0xcf4>
    9d2c:	01412683          	lw	a3,20(sp)
    9d30:	00100713          	li	a4,1
    9d34:	12d74463          	blt	a4,a3,9e5c <_dtoa_r+0xcb0>
    9d38:	05812703          	lw	a4,88(sp)
    9d3c:	43378793          	addi	a5,a5,1075
    9d40:	00071863          	bnez	a4,9d50 <_dtoa_r+0xba4>
    9d44:	06812703          	lw	a4,104(sp)
    9d48:	03600793          	li	a5,54
    9d4c:	40e787b3          	sub	a5,a5,a4
    9d50:	000c8a13          	mv	s4,s9
    9d54:	000b8a93          	mv	s5,s7
    9d58:	00100593          	li	a1,1
    9d5c:	00048513          	mv	a0,s1
    9d60:	00fb8bb3          	add	s7,s7,a5
    9d64:	00fc0c33          	add	s8,s8,a5
    9d68:	5d5000ef          	jal	ra,ab3c <__i2b>
    9d6c:	00050913          	mv	s2,a0
    9d70:	03505063          	blez	s5,9d90 <_dtoa_r+0xbe4>
    9d74:	01805e63          	blez	s8,9d90 <_dtoa_r+0xbe4>
    9d78:	000a8793          	mv	a5,s5
    9d7c:	015c5463          	bge	s8,s5,9d84 <_dtoa_r+0xbd8>
    9d80:	000c0793          	mv	a5,s8
    9d84:	40fb8bb3          	sub	s7,s7,a5
    9d88:	40fa8ab3          	sub	s5,s5,a5
    9d8c:	40fc0c33          	sub	s8,s8,a5
    9d90:	060c8263          	beqz	s9,9df4 <_dtoa_r+0xc48>
    9d94:	01c12783          	lw	a5,28(sp)
    9d98:	10078c63          	beqz	a5,9eb0 <_dtoa_r+0xd04>
    9d9c:	05405063          	blez	s4,9ddc <_dtoa_r+0xc30>
    9da0:	00090593          	mv	a1,s2
    9da4:	000a0613          	mv	a2,s4
    9da8:	00048513          	mv	a0,s1
    9dac:	7ed000ef          	jal	ra,ad98 <__pow5mult>
    9db0:	00c12603          	lw	a2,12(sp)
    9db4:	00050593          	mv	a1,a0
    9db8:	00050913          	mv	s2,a0
    9dbc:	00048513          	mv	a0,s1
    9dc0:	5d1000ef          	jal	ra,ab90 <__multiply>
    9dc4:	00c12583          	lw	a1,12(sp)
    9dc8:	00a12c23          	sw	a0,24(sp)
    9dcc:	00048513          	mv	a0,s1
    9dd0:	295000ef          	jal	ra,a864 <_Bfree>
    9dd4:	01812783          	lw	a5,24(sp)
    9dd8:	00f12623          	sw	a5,12(sp)
    9ddc:	414c8633          	sub	a2,s9,s4
    9de0:	014c8a63          	beq	s9,s4,9df4 <_dtoa_r+0xc48>
    9de4:	00c12583          	lw	a1,12(sp)
    9de8:	00048513          	mv	a0,s1
    9dec:	7ad000ef          	jal	ra,ad98 <__pow5mult>
    9df0:	00a12623          	sw	a0,12(sp)
    9df4:	00100593          	li	a1,1
    9df8:	00048513          	mv	a0,s1
    9dfc:	541000ef          	jal	ra,ab3c <__i2b>
    9e00:	02812783          	lw	a5,40(sp)
    9e04:	00050a13          	mv	s4,a0
    9e08:	0af05863          	blez	a5,9eb8 <_dtoa_r+0xd0c>
    9e0c:	00078613          	mv	a2,a5
    9e10:	00050593          	mv	a1,a0
    9e14:	00048513          	mv	a0,s1
    9e18:	781000ef          	jal	ra,ad98 <__pow5mult>
    9e1c:	01412703          	lw	a4,20(sp)
    9e20:	00100793          	li	a5,1
    9e24:	00050a13          	mv	s4,a0
    9e28:	00000c93          	li	s9,0
    9e2c:	0ae7c463          	blt	a5,a4,9ed4 <_dtoa_r+0xd28>
    9e30:	00000c93          	li	s9,0
    9e34:	08099a63          	bnez	s3,9ec8 <_dtoa_r+0xd1c>
    9e38:	00cb1793          	slli	a5,s6,0xc
    9e3c:	08079663          	bnez	a5,9ec8 <_dtoa_r+0xd1c>
    9e40:	7ff005b7          	lui	a1,0x7ff00
    9e44:	00bb7b33          	and	s6,s6,a1
    9e48:	080b0063          	beqz	s6,9ec8 <_dtoa_r+0xd1c>
    9e4c:	001b8b93          	addi	s7,s7,1
    9e50:	001c0c13          	addi	s8,s8,1
    9e54:	00100c93          	li	s9,1
    9e58:	0700006f          	j	9ec8 <_dtoa_r+0xd1c>
    9e5c:	fffd0a13          	addi	s4,s10,-1
    9e60:	014ccc63          	blt	s9,s4,9e78 <_dtoa_r+0xccc>
    9e64:	414c8a33          	sub	s4,s9,s4
    9e68:	020d5663          	bgez	s10,9e94 <_dtoa_r+0xce8>
    9e6c:	41ab8ab3          	sub	s5,s7,s10
    9e70:	00000793          	li	a5,0
    9e74:	ee5ff06f          	j	9d58 <_dtoa_r+0xbac>
    9e78:	02812783          	lw	a5,40(sp)
    9e7c:	419a0cb3          	sub	s9,s4,s9
    9e80:	019787b3          	add	a5,a5,s9
    9e84:	02f12423          	sw	a5,40(sp)
    9e88:	000a0c93          	mv	s9,s4
    9e8c:	00000a13          	li	s4,0
    9e90:	fd9ff06f          	j	9e68 <_dtoa_r+0xcbc>
    9e94:	000b8a93          	mv	s5,s7
    9e98:	000d0793          	mv	a5,s10
    9e9c:	ebdff06f          	j	9d58 <_dtoa_r+0xbac>
    9ea0:	000c8a13          	mv	s4,s9
    9ea4:	000b8a93          	mv	s5,s7
    9ea8:	00000913          	li	s2,0
    9eac:	ec5ff06f          	j	9d70 <_dtoa_r+0xbc4>
    9eb0:	000c8613          	mv	a2,s9
    9eb4:	f31ff06f          	j	9de4 <_dtoa_r+0xc38>
    9eb8:	01412703          	lw	a4,20(sp)
    9ebc:	00100793          	li	a5,1
    9ec0:	00000c93          	li	s9,0
    9ec4:	f6e7d6e3          	bge	a5,a4,9e30 <_dtoa_r+0xc84>
    9ec8:	02812783          	lw	a5,40(sp)
    9ecc:	00100513          	li	a0,1
    9ed0:	02078263          	beqz	a5,9ef4 <_dtoa_r+0xd48>
    9ed4:	010a2783          	lw	a5,16(s4)
    9ed8:	00378793          	addi	a5,a5,3
    9edc:	00279793          	slli	a5,a5,0x2
    9ee0:	00fa07b3          	add	a5,s4,a5
    9ee4:	0047a503          	lw	a0,4(a5)
    9ee8:	331000ef          	jal	ra,aa18 <__hi0bits>
    9eec:	02000793          	li	a5,32
    9ef0:	40a78533          	sub	a0,a5,a0
    9ef4:	00ac0533          	add	a0,s8,a0
    9ef8:	01f57513          	andi	a0,a0,31
    9efc:	0c050463          	beqz	a0,9fc4 <_dtoa_r+0xe18>
    9f00:	02000793          	li	a5,32
    9f04:	40a787b3          	sub	a5,a5,a0
    9f08:	00400713          	li	a4,4
    9f0c:	0af75863          	bge	a4,a5,9fbc <_dtoa_r+0xe10>
    9f10:	01c00793          	li	a5,28
    9f14:	40a78533          	sub	a0,a5,a0
    9f18:	00ab8bb3          	add	s7,s7,a0
    9f1c:	00aa8ab3          	add	s5,s5,a0
    9f20:	00ac0c33          	add	s8,s8,a0
    9f24:	01705c63          	blez	s7,9f3c <_dtoa_r+0xd90>
    9f28:	00c12583          	lw	a1,12(sp)
    9f2c:	000b8613          	mv	a2,s7
    9f30:	00048513          	mv	a0,s1
    9f34:	7a9000ef          	jal	ra,aedc <__lshift>
    9f38:	00a12623          	sw	a0,12(sp)
    9f3c:	01805c63          	blez	s8,9f54 <_dtoa_r+0xda8>
    9f40:	000a0593          	mv	a1,s4
    9f44:	000c0613          	mv	a2,s8
    9f48:	00048513          	mv	a0,s1
    9f4c:	791000ef          	jal	ra,aedc <__lshift>
    9f50:	00050a13          	mv	s4,a0
    9f54:	03412783          	lw	a5,52(sp)
    9f58:	06078a63          	beqz	a5,9fcc <_dtoa_r+0xe20>
    9f5c:	00c12503          	lw	a0,12(sp)
    9f60:	000a0593          	mv	a1,s4
    9f64:	0fc010ef          	jal	ra,b060 <__mcmp>
    9f68:	06055263          	bgez	a0,9fcc <_dtoa_r+0xe20>
    9f6c:	00c12583          	lw	a1,12(sp)
    9f70:	00000693          	li	a3,0
    9f74:	00a00613          	li	a2,10
    9f78:	00048513          	mv	a0,s1
    9f7c:	17d000ef          	jal	ra,a8f8 <__multadd>
    9f80:	01c12783          	lw	a5,28(sp)
    9f84:	00a12623          	sw	a0,12(sp)
    9f88:	fff40413          	addi	s0,s0,-1
    9f8c:	3a078263          	beqz	a5,a330 <_dtoa_r+0x1184>
    9f90:	00090593          	mv	a1,s2
    9f94:	00000693          	li	a3,0
    9f98:	00a00613          	li	a2,10
    9f9c:	00048513          	mv	a0,s1
    9fa0:	159000ef          	jal	ra,a8f8 <__multadd>
    9fa4:	00050913          	mv	s2,a0
    9fa8:	0db04863          	bgtz	s11,a078 <_dtoa_r+0xecc>
    9fac:	01412703          	lw	a4,20(sp)
    9fb0:	00200793          	li	a5,2
    9fb4:	02e7c663          	blt	a5,a4,9fe0 <_dtoa_r+0xe34>
    9fb8:	0c00006f          	j	a078 <_dtoa_r+0xecc>
    9fbc:	f6e784e3          	beq	a5,a4,9f24 <_dtoa_r+0xd78>
    9fc0:	00078513          	mv	a0,a5
    9fc4:	01c50513          	addi	a0,a0,28
    9fc8:	f51ff06f          	j	9f18 <_dtoa_r+0xd6c>
    9fcc:	0ba04063          	bgtz	s10,a06c <_dtoa_r+0xec0>
    9fd0:	01412703          	lw	a4,20(sp)
    9fd4:	00200793          	li	a5,2
    9fd8:	08e7da63          	bge	a5,a4,a06c <_dtoa_r+0xec0>
    9fdc:	000d0d93          	mv	s11,s10
    9fe0:	020d9663          	bnez	s11,a00c <_dtoa_r+0xe60>
    9fe4:	000a0593          	mv	a1,s4
    9fe8:	00000693          	li	a3,0
    9fec:	00500613          	li	a2,5
    9ff0:	00048513          	mv	a0,s1
    9ff4:	105000ef          	jal	ra,a8f8 <__multadd>
    9ff8:	00050a13          	mv	s4,a0
    9ffc:	00050593          	mv	a1,a0
    a000:	00c12503          	lw	a0,12(sp)
    a004:	05c010ef          	jal	ra,b060 <__mcmp>
    a008:	88a044e3          	bgtz	a0,9890 <_dtoa_r+0x6e4>
    a00c:	02012783          	lw	a5,32(sp)
    a010:	01012983          	lw	s3,16(sp)
    a014:	fff7c413          	not	s0,a5
    a018:	00000b13          	li	s6,0
    a01c:	000a0593          	mv	a1,s4
    a020:	00048513          	mv	a0,s1
    a024:	041000ef          	jal	ra,a864 <_Bfree>
    a028:	c4090ee3          	beqz	s2,9c84 <_dtoa_r+0xad8>
    a02c:	000b0a63          	beqz	s6,a040 <_dtoa_r+0xe94>
    a030:	012b0863          	beq	s6,s2,a040 <_dtoa_r+0xe94>
    a034:	000b0593          	mv	a1,s6
    a038:	00048513          	mv	a0,s1
    a03c:	029000ef          	jal	ra,a864 <_Bfree>
    a040:	00090593          	mv	a1,s2
    a044:	00048513          	mv	a0,s1
    a048:	01d000ef          	jal	ra,a864 <_Bfree>
    a04c:	c39ff06f          	j	9c84 <_dtoa_r+0xad8>
    a050:	00000a13          	li	s4,0
    a054:	00000913          	li	s2,0
    a058:	fb5ff06f          	j	a00c <_dtoa_r+0xe60>
    a05c:	01812403          	lw	s0,24(sp)
    a060:	00000a13          	li	s4,0
    a064:	00000913          	li	s2,0
    a068:	829ff06f          	j	9890 <_dtoa_r+0x6e4>
    a06c:	01c12783          	lw	a5,28(sp)
    a070:	000d0d93          	mv	s11,s10
    a074:	2c078663          	beqz	a5,a340 <_dtoa_r+0x1194>
    a078:	01505c63          	blez	s5,a090 <_dtoa_r+0xee4>
    a07c:	00090593          	mv	a1,s2
    a080:	000a8613          	mv	a2,s5
    a084:	00048513          	mv	a0,s1
    a088:	655000ef          	jal	ra,aedc <__lshift>
    a08c:	00050913          	mv	s2,a0
    a090:	00090513          	mv	a0,s2
    a094:	040c8a63          	beqz	s9,a0e8 <_dtoa_r+0xf3c>
    a098:	00492583          	lw	a1,4(s2)
    a09c:	00048513          	mv	a0,s1
    a0a0:	6c4000ef          	jal	ra,a764 <_Balloc>
    a0a4:	00050a93          	mv	s5,a0
    a0a8:	00051c63          	bnez	a0,a0c0 <_dtoa_r+0xf14>
    a0ac:	0000d6b7          	lui	a3,0xd
    a0b0:	0e868693          	addi	a3,a3,232 # d0e8 <_ctype_+0x220>
    a0b4:	00000613          	li	a2,0
    a0b8:	2ea00593          	li	a1,746
    a0bc:	978ff06f          	j	9234 <_dtoa_r+0x88>
    a0c0:	01092603          	lw	a2,16(s2)
    a0c4:	00c90593          	addi	a1,s2,12
    a0c8:	00c50513          	addi	a0,a0,12
    a0cc:	00260613          	addi	a2,a2,2
    a0d0:	00261613          	slli	a2,a2,0x2
    a0d4:	bccf90ef          	jal	ra,34a0 <memcpy>
    a0d8:	00100613          	li	a2,1
    a0dc:	000a8593          	mv	a1,s5
    a0e0:	00048513          	mv	a0,s1
    a0e4:	5f9000ef          	jal	ra,aedc <__lshift>
    a0e8:	01012783          	lw	a5,16(sp)
    a0ec:	00090b13          	mv	s6,s2
    a0f0:	00050913          	mv	s2,a0
    a0f4:	00178c13          	addi	s8,a5,1
    a0f8:	01b787b3          	add	a5,a5,s11
    a0fc:	00f12c23          	sw	a5,24(sp)
    a100:	0019fd93          	andi	s11,s3,1
    a104:	00c12503          	lw	a0,12(sp)
    a108:	000a0593          	mv	a1,s4
    a10c:	fffc0d13          	addi	s10,s8,-1
    a110:	ed1fe0ef          	jal	ra,8fe0 <quorem>
    a114:	00050c93          	mv	s9,a0
    a118:	03050a93          	addi	s5,a0,48
    a11c:	00c12503          	lw	a0,12(sp)
    a120:	000b0593          	mv	a1,s6
    a124:	73d000ef          	jal	ra,b060 <__mcmp>
    a128:	000a0593          	mv	a1,s4
    a12c:	00050b93          	mv	s7,a0
    a130:	00090613          	mv	a2,s2
    a134:	00048513          	mv	a0,s1
    a138:	77d000ef          	jal	ra,b0b4 <__mdiff>
    a13c:	00c52683          	lw	a3,12(a0)
    a140:	00050593          	mv	a1,a0
    a144:	00100713          	li	a4,1
    a148:	00069c63          	bnez	a3,a160 <_dtoa_r+0xfb4>
    a14c:	00a12e23          	sw	a0,28(sp)
    a150:	00c12503          	lw	a0,12(sp)
    a154:	70d000ef          	jal	ra,b060 <__mcmp>
    a158:	01c12583          	lw	a1,28(sp)
    a15c:	00050713          	mv	a4,a0
    a160:	00048513          	mv	a0,s1
    a164:	00e12e23          	sw	a4,28(sp)
    a168:	6fc000ef          	jal	ra,a864 <_Bfree>
    a16c:	01412783          	lw	a5,20(sp)
    a170:	01c12703          	lw	a4,28(sp)
    a174:	000c0993          	mv	s3,s8
    a178:	00e7e6b3          	or	a3,a5,a4
    a17c:	01b6e6b3          	or	a3,a3,s11
    a180:	00069e63          	bnez	a3,a19c <_dtoa_r+0xff0>
    a184:	03900713          	li	a4,57
    a188:	06ea8063          	beq	s5,a4,a1e8 <_dtoa_r+0x103c>
    a18c:	01705463          	blez	s7,a194 <_dtoa_r+0xfe8>
    a190:	031c8a93          	addi	s5,s9,49
    a194:	015d0023          	sb	s5,0(s10)
    a198:	e85ff06f          	j	a01c <_dtoa_r+0xe70>
    a19c:	000bca63          	bltz	s7,a1b0 <_dtoa_r+0x1004>
    a1a0:	01412783          	lw	a5,20(sp)
    a1a4:	0177ebb3          	or	s7,a5,s7
    a1a8:	01bbebb3          	or	s7,s7,s11
    a1ac:	060b9463          	bnez	s7,a214 <_dtoa_r+0x1068>
    a1b0:	fee052e3          	blez	a4,a194 <_dtoa_r+0xfe8>
    a1b4:	00c12583          	lw	a1,12(sp)
    a1b8:	00100613          	li	a2,1
    a1bc:	00048513          	mv	a0,s1
    a1c0:	51d000ef          	jal	ra,aedc <__lshift>
    a1c4:	000a0593          	mv	a1,s4
    a1c8:	00a12623          	sw	a0,12(sp)
    a1cc:	695000ef          	jal	ra,b060 <__mcmp>
    a1d0:	00a04863          	bgtz	a0,a1e0 <_dtoa_r+0x1034>
    a1d4:	fc0510e3          	bnez	a0,a194 <_dtoa_r+0xfe8>
    a1d8:	001af713          	andi	a4,s5,1
    a1dc:	fa070ce3          	beqz	a4,a194 <_dtoa_r+0xfe8>
    a1e0:	03900713          	li	a4,57
    a1e4:	faea96e3          	bne	s5,a4,a190 <_dtoa_r+0xfe4>
    a1e8:	03900793          	li	a5,57
    a1ec:	00fd0023          	sb	a5,0(s10)
    a1f0:	00098793          	mv	a5,s3
    a1f4:	03900693          	li	a3,57
    a1f8:	00078993          	mv	s3,a5
    a1fc:	fff9c703          	lbu	a4,-1(s3)
    a200:	fff78793          	addi	a5,a5,-1
    a204:	0ed70c63          	beq	a4,a3,a2fc <_dtoa_r+0x1150>
    a208:	00170713          	addi	a4,a4,1
    a20c:	00e78023          	sb	a4,0(a5)
    a210:	e0dff06f          	j	a01c <_dtoa_r+0xe70>
    a214:	00e05c63          	blez	a4,a22c <_dtoa_r+0x1080>
    a218:	03900713          	li	a4,57
    a21c:	fcea86e3          	beq	s5,a4,a1e8 <_dtoa_r+0x103c>
    a220:	001a8793          	addi	a5,s5,1
    a224:	00fd0023          	sb	a5,0(s10)
    a228:	df5ff06f          	j	a01c <_dtoa_r+0xe70>
    a22c:	01812783          	lw	a5,24(sp)
    a230:	ff5c0fa3          	sb	s5,-1(s8)
    a234:	09878063          	beq	a5,s8,a2b4 <_dtoa_r+0x1108>
    a238:	00c12583          	lw	a1,12(sp)
    a23c:	00000693          	li	a3,0
    a240:	00a00613          	li	a2,10
    a244:	00048513          	mv	a0,s1
    a248:	6b0000ef          	jal	ra,a8f8 <__multadd>
    a24c:	00a12623          	sw	a0,12(sp)
    a250:	00000693          	li	a3,0
    a254:	00a00613          	li	a2,10
    a258:	000b0593          	mv	a1,s6
    a25c:	00048513          	mv	a0,s1
    a260:	012b1c63          	bne	s6,s2,a278 <_dtoa_r+0x10cc>
    a264:	694000ef          	jal	ra,a8f8 <__multadd>
    a268:	00050b13          	mv	s6,a0
    a26c:	00050913          	mv	s2,a0
    a270:	001c0c13          	addi	s8,s8,1
    a274:	e91ff06f          	j	a104 <_dtoa_r+0xf58>
    a278:	680000ef          	jal	ra,a8f8 <__multadd>
    a27c:	00090593          	mv	a1,s2
    a280:	00050b13          	mv	s6,a0
    a284:	00000693          	li	a3,0
    a288:	00a00613          	li	a2,10
    a28c:	00048513          	mv	a0,s1
    a290:	668000ef          	jal	ra,a8f8 <__multadd>
    a294:	00050913          	mv	s2,a0
    a298:	fd9ff06f          	j	a270 <_dtoa_r+0x10c4>
    a29c:	00100993          	li	s3,1
    a2a0:	01b05463          	blez	s11,a2a8 <_dtoa_r+0x10fc>
    a2a4:	000d8993          	mv	s3,s11
    a2a8:	01012783          	lw	a5,16(sp)
    a2ac:	00000b13          	li	s6,0
    a2b0:	013789b3          	add	s3,a5,s3
    a2b4:	00c12583          	lw	a1,12(sp)
    a2b8:	00100613          	li	a2,1
    a2bc:	00048513          	mv	a0,s1
    a2c0:	41d000ef          	jal	ra,aedc <__lshift>
    a2c4:	000a0593          	mv	a1,s4
    a2c8:	00a12623          	sw	a0,12(sp)
    a2cc:	595000ef          	jal	ra,b060 <__mcmp>
    a2d0:	f2a040e3          	bgtz	a0,a1f0 <_dtoa_r+0x1044>
    a2d4:	00051663          	bnez	a0,a2e0 <_dtoa_r+0x1134>
    a2d8:	001af793          	andi	a5,s5,1
    a2dc:	f0079ae3          	bnez	a5,a1f0 <_dtoa_r+0x1044>
    a2e0:	00098793          	mv	a5,s3
    a2e4:	03000713          	li	a4,48
    a2e8:	00078993          	mv	s3,a5
    a2ec:	fff7c683          	lbu	a3,-1(a5)
    a2f0:	fff78793          	addi	a5,a5,-1
    a2f4:	fee68ae3          	beq	a3,a4,a2e8 <_dtoa_r+0x113c>
    a2f8:	d25ff06f          	j	a01c <_dtoa_r+0xe70>
    a2fc:	01012703          	lw	a4,16(sp)
    a300:	eef71ce3          	bne	a4,a5,a1f8 <_dtoa_r+0x104c>
    a304:	03100793          	li	a5,49
    a308:	00140413          	addi	s0,s0,1
    a30c:	00f70023          	sb	a5,0(a4)
    a310:	d0dff06f          	j	a01c <_dtoa_r+0xe70>
    a314:	02412783          	lw	a5,36(sp)
    a318:	0000d537          	lui	a0,0xd
    a31c:	00078463          	beqz	a5,a324 <_dtoa_r+0x1178>
    a320:	fc1fe06f          	j	92e0 <_dtoa_r+0x134>
    a324:	05c50793          	addi	a5,a0,92 # d05c <_ctype_+0x194>
    a328:	00f12823          	sw	a5,16(sp)
    a32c:	fcdfe06f          	j	92f8 <_dtoa_r+0x14c>
    a330:	01b04863          	bgtz	s11,a340 <_dtoa_r+0x1194>
    a334:	01412703          	lw	a4,20(sp)
    a338:	00200793          	li	a5,2
    a33c:	cae7c2e3          	blt	a5,a4,9fe0 <_dtoa_r+0xe34>
    a340:	00000993          	li	s3,0
    a344:	00c12503          	lw	a0,12(sp)
    a348:	000a0593          	mv	a1,s4
    a34c:	c95fe0ef          	jal	ra,8fe0 <quorem>
    a350:	01012783          	lw	a5,16(sp)
    a354:	03050a93          	addi	s5,a0,48
    a358:	01378733          	add	a4,a5,s3
    a35c:	01570023          	sb	s5,0(a4)
    a360:	00198993          	addi	s3,s3,1
    a364:	f3b9dce3          	bge	s3,s11,a29c <_dtoa_r+0x10f0>
    a368:	00c12583          	lw	a1,12(sp)
    a36c:	00000693          	li	a3,0
    a370:	00a00613          	li	a2,10
    a374:	00048513          	mv	a0,s1
    a378:	580000ef          	jal	ra,a8f8 <__multadd>
    a37c:	00a12623          	sw	a0,12(sp)
    a380:	fc5ff06f          	j	a344 <_dtoa_r+0x1198>

0000a384 <std>:
    a384:	ff010113          	addi	sp,sp,-16
    a388:	00812423          	sw	s0,8(sp)
    a38c:	00112623          	sw	ra,12(sp)
    a390:	00050413          	mv	s0,a0
    a394:	00b51623          	sh	a1,12(a0)
    a398:	00c51723          	sh	a2,14(a0)
    a39c:	00052023          	sw	zero,0(a0)
    a3a0:	00052223          	sw	zero,4(a0)
    a3a4:	00052423          	sw	zero,8(a0)
    a3a8:	06052223          	sw	zero,100(a0)
    a3ac:	00052823          	sw	zero,16(a0)
    a3b0:	00052a23          	sw	zero,20(a0)
    a3b4:	00052c23          	sw	zero,24(a0)
    a3b8:	00800613          	li	a2,8
    a3bc:	00000593          	li	a1,0
    a3c0:	05c50513          	addi	a0,a0,92
    a3c4:	900f90ef          	jal	ra,34c4 <memset>
    a3c8:	0000c7b7          	lui	a5,0xc
    a3cc:	93478793          	addi	a5,a5,-1740 # b934 <__sread>
    a3d0:	02f42223          	sw	a5,36(s0)
    a3d4:	0000c7b7          	lui	a5,0xc
    a3d8:	98478793          	addi	a5,a5,-1660 # b984 <__swrite>
    a3dc:	02f42423          	sw	a5,40(s0)
    a3e0:	0000c7b7          	lui	a5,0xc
    a3e4:	a0878793          	addi	a5,a5,-1528 # ba08 <__sseek>
    a3e8:	02f42623          	sw	a5,44(s0)
    a3ec:	0000c7b7          	lui	a5,0xc
    a3f0:	a6078793          	addi	a5,a5,-1440 # ba60 <__sclose>
    a3f4:	00c12083          	lw	ra,12(sp)
    a3f8:	02842023          	sw	s0,32(s0)
    a3fc:	02f42823          	sw	a5,48(s0)
    a400:	00812403          	lw	s0,8(sp)
    a404:	01010113          	addi	sp,sp,16
    a408:	00008067          	ret

0000a40c <_cleanup_r>:
    a40c:	0000c5b7          	lui	a1,0xc
    a410:	00058593          	mv	a1,a1
    a414:	2580006f          	j	a66c <_fwalk_reent>

0000a418 <__sfmoreglue>:
    a418:	ff010113          	addi	sp,sp,-16
    a41c:	00912223          	sw	s1,4(sp)
    a420:	06800613          	li	a2,104
    a424:	fff58493          	addi	s1,a1,-1 # bfff <__sflush_r+0x1f3>
    a428:	02c484b3          	mul	s1,s1,a2
    a42c:	01212023          	sw	s2,0(sp)
    a430:	00058913          	mv	s2,a1
    a434:	00812423          	sw	s0,8(sp)
    a438:	00112623          	sw	ra,12(sp)
    a43c:	07448593          	addi	a1,s1,116
    a440:	a51fd0ef          	jal	ra,7e90 <_malloc_r>
    a444:	00050413          	mv	s0,a0
    a448:	02050063          	beqz	a0,a468 <__sfmoreglue+0x50>
    a44c:	00052023          	sw	zero,0(a0)
    a450:	01252223          	sw	s2,4(a0)
    a454:	00c50513          	addi	a0,a0,12
    a458:	00a42423          	sw	a0,8(s0)
    a45c:	06848613          	addi	a2,s1,104
    a460:	00000593          	li	a1,0
    a464:	860f90ef          	jal	ra,34c4 <memset>
    a468:	00c12083          	lw	ra,12(sp)
    a46c:	00040513          	mv	a0,s0
    a470:	00812403          	lw	s0,8(sp)
    a474:	00412483          	lw	s1,4(sp)
    a478:	00012903          	lw	s2,0(sp)
    a47c:	01010113          	addi	sp,sp,16
    a480:	00008067          	ret

0000a484 <__sfp_lock_acquire>:
    a484:	00213537          	lui	a0,0x213
    a488:	7c450513          	addi	a0,a0,1988 # 2137c4 <__lock___sfp_recursive_mutex>
    a48c:	958fb06f          	j	55e4 <__retarget_lock_acquire_recursive>

0000a490 <__sfp_lock_release>:
    a490:	00213537          	lui	a0,0x213
    a494:	7c450513          	addi	a0,a0,1988 # 2137c4 <__lock___sfp_recursive_mutex>
    a498:	958fb06f          	j	55f0 <__retarget_lock_release_recursive>

0000a49c <__sinit_lock_acquire>:
    a49c:	00213537          	lui	a0,0x213
    a4a0:	7d850513          	addi	a0,a0,2008 # 2137d8 <__lock___sinit_recursive_mutex>
    a4a4:	940fb06f          	j	55e4 <__retarget_lock_acquire_recursive>

0000a4a8 <__sinit_lock_release>:
    a4a8:	00213537          	lui	a0,0x213
    a4ac:	7d850513          	addi	a0,a0,2008 # 2137d8 <__lock___sinit_recursive_mutex>
    a4b0:	940fb06f          	j	55f0 <__retarget_lock_release_recursive>

0000a4b4 <__sinit>:
    a4b4:	ff010113          	addi	sp,sp,-16
    a4b8:	00812423          	sw	s0,8(sp)
    a4bc:	00112623          	sw	ra,12(sp)
    a4c0:	00050413          	mv	s0,a0
    a4c4:	fd9ff0ef          	jal	ra,a49c <__sinit_lock_acquire>
    a4c8:	01842783          	lw	a5,24(s0)
    a4cc:	00078a63          	beqz	a5,a4e0 <__sinit+0x2c>
    a4d0:	00812403          	lw	s0,8(sp)
    a4d4:	00c12083          	lw	ra,12(sp)
    a4d8:	01010113          	addi	sp,sp,16
    a4dc:	fcdff06f          	j	a4a8 <__sinit_lock_release>
    a4e0:	0000a7b7          	lui	a5,0xa
    a4e4:	40c78793          	addi	a5,a5,1036 # a40c <_cleanup_r>
    a4e8:	02f42423          	sw	a5,40(s0)
    a4ec:	0000d7b7          	lui	a5,0xd
    a4f0:	9287a783          	lw	a5,-1752(a5) # c928 <_global_impure_ptr>
    a4f4:	04042423          	sw	zero,72(s0)
    a4f8:	04042623          	sw	zero,76(s0)
    a4fc:	04042823          	sw	zero,80(s0)
    a500:	00879663          	bne	a5,s0,a50c <__sinit+0x58>
    a504:	00100793          	li	a5,1
    a508:	00f42c23          	sw	a5,24(s0)
    a50c:	00040513          	mv	a0,s0
    a510:	05c000ef          	jal	ra,a56c <__sfp>
    a514:	00a42223          	sw	a0,4(s0)
    a518:	00040513          	mv	a0,s0
    a51c:	050000ef          	jal	ra,a56c <__sfp>
    a520:	00a42423          	sw	a0,8(s0)
    a524:	00040513          	mv	a0,s0
    a528:	044000ef          	jal	ra,a56c <__sfp>
    a52c:	00a42623          	sw	a0,12(s0)
    a530:	00442503          	lw	a0,4(s0)
    a534:	00000613          	li	a2,0
    a538:	00400593          	li	a1,4
    a53c:	e49ff0ef          	jal	ra,a384 <std>
    a540:	00842503          	lw	a0,8(s0)
    a544:	00100613          	li	a2,1
    a548:	00900593          	li	a1,9
    a54c:	e39ff0ef          	jal	ra,a384 <std>
    a550:	00c42503          	lw	a0,12(s0)
    a554:	00200613          	li	a2,2
    a558:	01200593          	li	a1,18
    a55c:	e29ff0ef          	jal	ra,a384 <std>
    a560:	00100793          	li	a5,1
    a564:	00f42c23          	sw	a5,24(s0)
    a568:	f69ff06f          	j	a4d0 <__sinit+0x1c>

0000a56c <__sfp>:
    a56c:	ff010113          	addi	sp,sp,-16
    a570:	00912223          	sw	s1,4(sp)
    a574:	01212023          	sw	s2,0(sp)
    a578:	00112623          	sw	ra,12(sp)
    a57c:	00812423          	sw	s0,8(sp)
    a580:	00050913          	mv	s2,a0
    a584:	f01ff0ef          	jal	ra,a484 <__sfp_lock_acquire>
    a588:	0000d7b7          	lui	a5,0xd
    a58c:	9287a483          	lw	s1,-1752(a5) # c928 <_global_impure_ptr>
    a590:	0184a783          	lw	a5,24(s1)
    a594:	00079663          	bnez	a5,a5a0 <__sfp+0x34>
    a598:	00048513          	mv	a0,s1
    a59c:	f19ff0ef          	jal	ra,a4b4 <__sinit>
    a5a0:	04848493          	addi	s1,s1,72
    a5a4:	0084a403          	lw	s0,8(s1)
    a5a8:	0044a783          	lw	a5,4(s1)
    a5ac:	fff78793          	addi	a5,a5,-1
    a5b0:	0007da63          	bgez	a5,a5c4 <__sfp+0x58>
    a5b4:	0004a783          	lw	a5,0(s1)
    a5b8:	08078663          	beqz	a5,a644 <__sfp+0xd8>
    a5bc:	0004a483          	lw	s1,0(s1)
    a5c0:	fe5ff06f          	j	a5a4 <__sfp+0x38>
    a5c4:	00c41703          	lh	a4,12(s0)
    a5c8:	06071a63          	bnez	a4,a63c <__sfp+0xd0>
    a5cc:	ffff07b7          	lui	a5,0xffff0
    a5d0:	00178793          	addi	a5,a5,1 # ffff0001 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff0002>
    a5d4:	00f42623          	sw	a5,12(s0)
    a5d8:	05840513          	addi	a0,s0,88
    a5dc:	06042223          	sw	zero,100(s0)
    a5e0:	fd9fa0ef          	jal	ra,55b8 <__retarget_lock_init_recursive>
    a5e4:	eadff0ef          	jal	ra,a490 <__sfp_lock_release>
    a5e8:	00800613          	li	a2,8
    a5ec:	00042023          	sw	zero,0(s0)
    a5f0:	00042423          	sw	zero,8(s0)
    a5f4:	00042223          	sw	zero,4(s0)
    a5f8:	00042823          	sw	zero,16(s0)
    a5fc:	00042a23          	sw	zero,20(s0)
    a600:	00042c23          	sw	zero,24(s0)
    a604:	00000593          	li	a1,0
    a608:	05c40513          	addi	a0,s0,92
    a60c:	eb9f80ef          	jal	ra,34c4 <memset>
    a610:	02042a23          	sw	zero,52(s0)
    a614:	02042c23          	sw	zero,56(s0)
    a618:	04042423          	sw	zero,72(s0)
    a61c:	04042623          	sw	zero,76(s0)
    a620:	00c12083          	lw	ra,12(sp)
    a624:	00040513          	mv	a0,s0
    a628:	00812403          	lw	s0,8(sp)
    a62c:	00412483          	lw	s1,4(sp)
    a630:	00012903          	lw	s2,0(sp)
    a634:	01010113          	addi	sp,sp,16
    a638:	00008067          	ret
    a63c:	06840413          	addi	s0,s0,104
    a640:	f6dff06f          	j	a5ac <__sfp+0x40>
    a644:	00400593          	li	a1,4
    a648:	00090513          	mv	a0,s2
    a64c:	dcdff0ef          	jal	ra,a418 <__sfmoreglue>
    a650:	00a4a023          	sw	a0,0(s1)
    a654:	00050413          	mv	s0,a0
    a658:	f60512e3          	bnez	a0,a5bc <__sfp+0x50>
    a65c:	e35ff0ef          	jal	ra,a490 <__sfp_lock_release>
    a660:	00c00793          	li	a5,12
    a664:	00f92023          	sw	a5,0(s2)
    a668:	fb9ff06f          	j	a620 <__sfp+0xb4>

0000a66c <_fwalk_reent>:
    a66c:	fd010113          	addi	sp,sp,-48
    a670:	02812423          	sw	s0,40(sp)
    a674:	03212023          	sw	s2,32(sp)
    a678:	01312e23          	sw	s3,28(sp)
    a67c:	01412c23          	sw	s4,24(sp)
    a680:	01612823          	sw	s6,16(sp)
    a684:	01712623          	sw	s7,12(sp)
    a688:	02112623          	sw	ra,44(sp)
    a68c:	02912223          	sw	s1,36(sp)
    a690:	01512a23          	sw	s5,20(sp)
    a694:	00050913          	mv	s2,a0
    a698:	00058a13          	mv	s4,a1
    a69c:	04850413          	addi	s0,a0,72
    a6a0:	00000993          	li	s3,0
    a6a4:	00100b13          	li	s6,1
    a6a8:	fff00b93          	li	s7,-1
    a6ac:	00842483          	lw	s1,8(s0)
    a6b0:	00442a83          	lw	s5,4(s0)
    a6b4:	fffa8a93          	addi	s5,s5,-1
    a6b8:	020ade63          	bgez	s5,a6f4 <_fwalk_reent+0x88>
    a6bc:	00042403          	lw	s0,0(s0)
    a6c0:	fe0416e3          	bnez	s0,a6ac <_fwalk_reent+0x40>
    a6c4:	02c12083          	lw	ra,44(sp)
    a6c8:	02812403          	lw	s0,40(sp)
    a6cc:	02412483          	lw	s1,36(sp)
    a6d0:	02012903          	lw	s2,32(sp)
    a6d4:	01812a03          	lw	s4,24(sp)
    a6d8:	01412a83          	lw	s5,20(sp)
    a6dc:	01012b03          	lw	s6,16(sp)
    a6e0:	00c12b83          	lw	s7,12(sp)
    a6e4:	00098513          	mv	a0,s3
    a6e8:	01c12983          	lw	s3,28(sp)
    a6ec:	03010113          	addi	sp,sp,48
    a6f0:	00008067          	ret
    a6f4:	00c4d783          	lhu	a5,12(s1)
    a6f8:	00fb7e63          	bgeu	s6,a5,a714 <_fwalk_reent+0xa8>
    a6fc:	00e49783          	lh	a5,14(s1)
    a700:	01778a63          	beq	a5,s7,a714 <_fwalk_reent+0xa8>
    a704:	00048593          	mv	a1,s1
    a708:	00090513          	mv	a0,s2
    a70c:	000a00e7          	jalr	s4
    a710:	00a9e9b3          	or	s3,s3,a0
    a714:	06848493          	addi	s1,s1,104
    a718:	f9dff06f          	j	a6b4 <_fwalk_reent+0x48>

0000a71c <_localeconv_r>:
    a71c:	00213537          	lui	a0,0x213
    a720:	6f050513          	addi	a0,a0,1776 # 2136f0 <__global_locale+0xf0>
    a724:	00008067          	ret

0000a728 <memchr>:
    a728:	0ff5f593          	andi	a1,a1,255
    a72c:	00c50633          	add	a2,a0,a2
    a730:	00c51663          	bne	a0,a2,a73c <memchr+0x14>
    a734:	00000513          	li	a0,0
    a738:	00008067          	ret
    a73c:	00054783          	lbu	a5,0(a0)
    a740:	feb78ce3          	beq	a5,a1,a738 <memchr+0x10>
    a744:	00150513          	addi	a0,a0,1
    a748:	fe9ff06f          	j	a730 <memchr+0x8>

0000a74c <__malloc_lock>:
    a74c:	00213537          	lui	a0,0x213
    a750:	7b050513          	addi	a0,a0,1968 # 2137b0 <__lock___malloc_recursive_mutex>
    a754:	e91fa06f          	j	55e4 <__retarget_lock_acquire_recursive>

0000a758 <__malloc_unlock>:
    a758:	00213537          	lui	a0,0x213
    a75c:	7b050513          	addi	a0,a0,1968 # 2137b0 <__lock___malloc_recursive_mutex>
    a760:	e91fa06f          	j	55f0 <__retarget_lock_release_recursive>

0000a764 <_Balloc>:
    a764:	02452783          	lw	a5,36(a0)
    a768:	ff010113          	addi	sp,sp,-16
    a76c:	00812423          	sw	s0,8(sp)
    a770:	00912223          	sw	s1,4(sp)
    a774:	00112623          	sw	ra,12(sp)
    a778:	01212023          	sw	s2,0(sp)
    a77c:	00050413          	mv	s0,a0
    a780:	00058493          	mv	s1,a1
    a784:	04079063          	bnez	a5,a7c4 <_Balloc+0x60>
    a788:	01000513          	li	a0,16
    a78c:	df0fd0ef          	jal	ra,7d7c <malloc>
    a790:	02a42223          	sw	a0,36(s0)
    a794:	02051063          	bnez	a0,a7b4 <_Balloc+0x50>
    a798:	0000d6b7          	lui	a3,0xd
    a79c:	0000d537          	lui	a0,0xd
    a7a0:	06c68693          	addi	a3,a3,108 # d06c <_ctype_+0x1a4>
    a7a4:	00000613          	li	a2,0
    a7a8:	06600593          	li	a1,102
    a7ac:	15c50513          	addi	a0,a0,348 # d15c <__sf_fake_stdout+0x20>
    a7b0:	5bc010ef          	jal	ra,bd6c <__assert_func>
    a7b4:	00052223          	sw	zero,4(a0)
    a7b8:	00052423          	sw	zero,8(a0)
    a7bc:	00052023          	sw	zero,0(a0)
    a7c0:	00052623          	sw	zero,12(a0)
    a7c4:	02442903          	lw	s2,36(s0)
    a7c8:	00c92783          	lw	a5,12(s2)
    a7cc:	04078463          	beqz	a5,a814 <_Balloc+0xb0>
    a7d0:	02442703          	lw	a4,36(s0)
    a7d4:	00249793          	slli	a5,s1,0x2
    a7d8:	00c72703          	lw	a4,12(a4)
    a7dc:	00f707b3          	add	a5,a4,a5
    a7e0:	0007a503          	lw	a0,0(a5)
    a7e4:	06051663          	bnez	a0,a850 <_Balloc+0xec>
    a7e8:	00100913          	li	s2,1
    a7ec:	00991933          	sll	s2,s2,s1
    a7f0:	00590613          	addi	a2,s2,5
    a7f4:	00261613          	slli	a2,a2,0x2
    a7f8:	00100593          	li	a1,1
    a7fc:	00040513          	mv	a0,s0
    a800:	40d000ef          	jal	ra,b40c <_calloc_r>
    a804:	02050863          	beqz	a0,a834 <_Balloc+0xd0>
    a808:	00952223          	sw	s1,4(a0)
    a80c:	01252423          	sw	s2,8(a0)
    a810:	0480006f          	j	a858 <_Balloc+0xf4>
    a814:	02100613          	li	a2,33
    a818:	00400593          	li	a1,4
    a81c:	00040513          	mv	a0,s0
    a820:	3ed000ef          	jal	ra,b40c <_calloc_r>
    a824:	02442783          	lw	a5,36(s0)
    a828:	00a92623          	sw	a0,12(s2)
    a82c:	00c7a783          	lw	a5,12(a5)
    a830:	fa0790e3          	bnez	a5,a7d0 <_Balloc+0x6c>
    a834:	00000513          	li	a0,0
    a838:	00c12083          	lw	ra,12(sp)
    a83c:	00812403          	lw	s0,8(sp)
    a840:	00412483          	lw	s1,4(sp)
    a844:	00012903          	lw	s2,0(sp)
    a848:	01010113          	addi	sp,sp,16
    a84c:	00008067          	ret
    a850:	00052703          	lw	a4,0(a0)
    a854:	00e7a023          	sw	a4,0(a5)
    a858:	00052823          	sw	zero,16(a0)
    a85c:	00052623          	sw	zero,12(a0)
    a860:	fd9ff06f          	j	a838 <_Balloc+0xd4>

0000a864 <_Bfree>:
    a864:	02452783          	lw	a5,36(a0)
    a868:	ff010113          	addi	sp,sp,-16
    a86c:	00812423          	sw	s0,8(sp)
    a870:	00912223          	sw	s1,4(sp)
    a874:	00112623          	sw	ra,12(sp)
    a878:	00050493          	mv	s1,a0
    a87c:	00058413          	mv	s0,a1
    a880:	04079063          	bnez	a5,a8c0 <_Bfree+0x5c>
    a884:	01000513          	li	a0,16
    a888:	cf4fd0ef          	jal	ra,7d7c <malloc>
    a88c:	02a4a223          	sw	a0,36(s1)
    a890:	02051063          	bnez	a0,a8b0 <_Bfree+0x4c>
    a894:	0000d6b7          	lui	a3,0xd
    a898:	0000d537          	lui	a0,0xd
    a89c:	06c68693          	addi	a3,a3,108 # d06c <_ctype_+0x1a4>
    a8a0:	00000613          	li	a2,0
    a8a4:	08a00593          	li	a1,138
    a8a8:	15c50513          	addi	a0,a0,348 # d15c <__sf_fake_stdout+0x20>
    a8ac:	4c0010ef          	jal	ra,bd6c <__assert_func>
    a8b0:	00052223          	sw	zero,4(a0)
    a8b4:	00052423          	sw	zero,8(a0)
    a8b8:	00052023          	sw	zero,0(a0)
    a8bc:	00052623          	sw	zero,12(a0)
    a8c0:	02040263          	beqz	s0,a8e4 <_Bfree+0x80>
    a8c4:	0244a683          	lw	a3,36(s1)
    a8c8:	00442783          	lw	a5,4(s0)
    a8cc:	00279713          	slli	a4,a5,0x2
    a8d0:	00c6a783          	lw	a5,12(a3)
    a8d4:	00e787b3          	add	a5,a5,a4
    a8d8:	0007a703          	lw	a4,0(a5)
    a8dc:	00e42023          	sw	a4,0(s0)
    a8e0:	0087a023          	sw	s0,0(a5)
    a8e4:	00c12083          	lw	ra,12(sp)
    a8e8:	00812403          	lw	s0,8(sp)
    a8ec:	00412483          	lw	s1,4(sp)
    a8f0:	01010113          	addi	sp,sp,16
    a8f4:	00008067          	ret

0000a8f8 <__multadd>:
    a8f8:	fe010113          	addi	sp,sp,-32
    a8fc:	00812c23          	sw	s0,24(sp)
    a900:	01212823          	sw	s2,16(sp)
    a904:	01312623          	sw	s3,12(sp)
    a908:	0105a903          	lw	s2,16(a1)
    a90c:	00058413          	mv	s0,a1
    a910:	00068993          	mv	s3,a3
    a914:	01458693          	addi	a3,a1,20
    a918:	000105b7          	lui	a1,0x10
    a91c:	00912a23          	sw	s1,20(sp)
    a920:	00112e23          	sw	ra,28(sp)
    a924:	00050493          	mv	s1,a0
    a928:	01412423          	sw	s4,8(sp)
    a92c:	00000513          	li	a0,0
    a930:	fff58593          	addi	a1,a1,-1 # ffff <stacks+0xa5f>
    a934:	0006a783          	lw	a5,0(a3)
    a938:	00468693          	addi	a3,a3,4
    a93c:	00150513          	addi	a0,a0,1
    a940:	00b7f733          	and	a4,a5,a1
    a944:	02c70733          	mul	a4,a4,a2
    a948:	0107d793          	srli	a5,a5,0x10
    a94c:	02c787b3          	mul	a5,a5,a2
    a950:	01370733          	add	a4,a4,s3
    a954:	01075813          	srli	a6,a4,0x10
    a958:	00b77733          	and	a4,a4,a1
    a95c:	010787b3          	add	a5,a5,a6
    a960:	0107d993          	srli	s3,a5,0x10
    a964:	01079793          	slli	a5,a5,0x10
    a968:	00e787b3          	add	a5,a5,a4
    a96c:	fef6ae23          	sw	a5,-4(a3)
    a970:	fd2542e3          	blt	a0,s2,a934 <__multadd+0x3c>
    a974:	08098063          	beqz	s3,a9f4 <__multadd+0xfc>
    a978:	00842783          	lw	a5,8(s0)
    a97c:	06f94063          	blt	s2,a5,a9dc <__multadd+0xe4>
    a980:	00442583          	lw	a1,4(s0)
    a984:	00048513          	mv	a0,s1
    a988:	00158593          	addi	a1,a1,1
    a98c:	dd9ff0ef          	jal	ra,a764 <_Balloc>
    a990:	00050a13          	mv	s4,a0
    a994:	02051063          	bnez	a0,a9b4 <__multadd+0xbc>
    a998:	0000d6b7          	lui	a3,0xd
    a99c:	0000d537          	lui	a0,0xd
    a9a0:	0e868693          	addi	a3,a3,232 # d0e8 <_ctype_+0x220>
    a9a4:	00000613          	li	a2,0
    a9a8:	0b500593          	li	a1,181
    a9ac:	15c50513          	addi	a0,a0,348 # d15c <__sf_fake_stdout+0x20>
    a9b0:	3bc010ef          	jal	ra,bd6c <__assert_func>
    a9b4:	01042603          	lw	a2,16(s0)
    a9b8:	00c40593          	addi	a1,s0,12
    a9bc:	00c50513          	addi	a0,a0,12
    a9c0:	00260613          	addi	a2,a2,2
    a9c4:	00261613          	slli	a2,a2,0x2
    a9c8:	ad9f80ef          	jal	ra,34a0 <memcpy>
    a9cc:	00040593          	mv	a1,s0
    a9d0:	00048513          	mv	a0,s1
    a9d4:	e91ff0ef          	jal	ra,a864 <_Bfree>
    a9d8:	000a0413          	mv	s0,s4
    a9dc:	00490793          	addi	a5,s2,4
    a9e0:	00279793          	slli	a5,a5,0x2
    a9e4:	00f407b3          	add	a5,s0,a5
    a9e8:	0137a223          	sw	s3,4(a5)
    a9ec:	00190913          	addi	s2,s2,1
    a9f0:	01242823          	sw	s2,16(s0)
    a9f4:	01c12083          	lw	ra,28(sp)
    a9f8:	00040513          	mv	a0,s0
    a9fc:	01812403          	lw	s0,24(sp)
    aa00:	01412483          	lw	s1,20(sp)
    aa04:	01012903          	lw	s2,16(sp)
    aa08:	00c12983          	lw	s3,12(sp)
    aa0c:	00812a03          	lw	s4,8(sp)
    aa10:	02010113          	addi	sp,sp,32
    aa14:	00008067          	ret

0000aa18 <__hi0bits>:
    aa18:	ffff0737          	lui	a4,0xffff0
    aa1c:	00e57733          	and	a4,a0,a4
    aa20:	00050793          	mv	a5,a0
    aa24:	00000513          	li	a0,0
    aa28:	00071663          	bnez	a4,aa34 <__hi0bits+0x1c>
    aa2c:	01079793          	slli	a5,a5,0x10
    aa30:	01000513          	li	a0,16
    aa34:	ff000737          	lui	a4,0xff000
    aa38:	00e7f733          	and	a4,a5,a4
    aa3c:	00071663          	bnez	a4,aa48 <__hi0bits+0x30>
    aa40:	00850513          	addi	a0,a0,8
    aa44:	00879793          	slli	a5,a5,0x8
    aa48:	f0000737          	lui	a4,0xf0000
    aa4c:	00e7f733          	and	a4,a5,a4
    aa50:	00071663          	bnez	a4,aa5c <__hi0bits+0x44>
    aa54:	00450513          	addi	a0,a0,4
    aa58:	00479793          	slli	a5,a5,0x4
    aa5c:	c0000737          	lui	a4,0xc0000
    aa60:	00e7f733          	and	a4,a5,a4
    aa64:	00071663          	bnez	a4,aa70 <__hi0bits+0x58>
    aa68:	00250513          	addi	a0,a0,2
    aa6c:	00279793          	slli	a5,a5,0x2
    aa70:	0007cc63          	bltz	a5,aa88 <__hi0bits+0x70>
    aa74:	40000737          	lui	a4,0x40000
    aa78:	00e7f7b3          	and	a5,a5,a4
    aa7c:	00150513          	addi	a0,a0,1
    aa80:	00079463          	bnez	a5,aa88 <__hi0bits+0x70>
    aa84:	02000513          	li	a0,32
    aa88:	00008067          	ret

0000aa8c <__lo0bits>:
    aa8c:	00052783          	lw	a5,0(a0)
    aa90:	00050713          	mv	a4,a0
    aa94:	0077f693          	andi	a3,a5,7
    aa98:	02068c63          	beqz	a3,aad0 <__lo0bits+0x44>
    aa9c:	0017f693          	andi	a3,a5,1
    aaa0:	00000513          	li	a0,0
    aaa4:	08069a63          	bnez	a3,ab38 <__lo0bits+0xac>
    aaa8:	0027f693          	andi	a3,a5,2
    aaac:	00068a63          	beqz	a3,aac0 <__lo0bits+0x34>
    aab0:	0017d793          	srli	a5,a5,0x1
    aab4:	00f72023          	sw	a5,0(a4) # 40000000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3d050f80>
    aab8:	00100513          	li	a0,1
    aabc:	00008067          	ret
    aac0:	0027d793          	srli	a5,a5,0x2
    aac4:	00f72023          	sw	a5,0(a4)
    aac8:	00200513          	li	a0,2
    aacc:	00008067          	ret
    aad0:	01079693          	slli	a3,a5,0x10
    aad4:	0106d693          	srli	a3,a3,0x10
    aad8:	00000513          	li	a0,0
    aadc:	00069663          	bnez	a3,aae8 <__lo0bits+0x5c>
    aae0:	0107d793          	srli	a5,a5,0x10
    aae4:	01000513          	li	a0,16
    aae8:	0ff7f693          	andi	a3,a5,255
    aaec:	00069663          	bnez	a3,aaf8 <__lo0bits+0x6c>
    aaf0:	00850513          	addi	a0,a0,8
    aaf4:	0087d793          	srli	a5,a5,0x8
    aaf8:	00f7f693          	andi	a3,a5,15
    aafc:	00069663          	bnez	a3,ab08 <__lo0bits+0x7c>
    ab00:	00450513          	addi	a0,a0,4
    ab04:	0047d793          	srli	a5,a5,0x4
    ab08:	0037f693          	andi	a3,a5,3
    ab0c:	00069663          	bnez	a3,ab18 <__lo0bits+0x8c>
    ab10:	00250513          	addi	a0,a0,2
    ab14:	0027d793          	srli	a5,a5,0x2
    ab18:	0017f693          	andi	a3,a5,1
    ab1c:	00069863          	bnez	a3,ab2c <__lo0bits+0xa0>
    ab20:	0017d793          	srli	a5,a5,0x1
    ab24:	00150513          	addi	a0,a0,1
    ab28:	00078663          	beqz	a5,ab34 <__lo0bits+0xa8>
    ab2c:	00f72023          	sw	a5,0(a4)
    ab30:	00008067          	ret
    ab34:	02000513          	li	a0,32
    ab38:	00008067          	ret

0000ab3c <__i2b>:
    ab3c:	ff010113          	addi	sp,sp,-16
    ab40:	00812423          	sw	s0,8(sp)
    ab44:	00058413          	mv	s0,a1
    ab48:	00100593          	li	a1,1
    ab4c:	00112623          	sw	ra,12(sp)
    ab50:	c15ff0ef          	jal	ra,a764 <_Balloc>
    ab54:	02051063          	bnez	a0,ab74 <__i2b+0x38>
    ab58:	0000d6b7          	lui	a3,0xd
    ab5c:	0000d537          	lui	a0,0xd
    ab60:	0e868693          	addi	a3,a3,232 # d0e8 <_ctype_+0x220>
    ab64:	00000613          	li	a2,0
    ab68:	14000593          	li	a1,320
    ab6c:	15c50513          	addi	a0,a0,348 # d15c <__sf_fake_stdout+0x20>
    ab70:	1fc010ef          	jal	ra,bd6c <__assert_func>
    ab74:	00c12083          	lw	ra,12(sp)
    ab78:	00852a23          	sw	s0,20(a0)
    ab7c:	00812403          	lw	s0,8(sp)
    ab80:	00100713          	li	a4,1
    ab84:	00e52823          	sw	a4,16(a0)
    ab88:	01010113          	addi	sp,sp,16
    ab8c:	00008067          	ret

0000ab90 <__multiply>:
    ab90:	0105a703          	lw	a4,16(a1)
    ab94:	01062783          	lw	a5,16(a2)
    ab98:	fe010113          	addi	sp,sp,-32
    ab9c:	00812c23          	sw	s0,24(sp)
    aba0:	01212823          	sw	s2,16(sp)
    aba4:	00112e23          	sw	ra,28(sp)
    aba8:	00912a23          	sw	s1,20(sp)
    abac:	01312623          	sw	s3,12(sp)
    abb0:	01412423          	sw	s4,8(sp)
    abb4:	00058413          	mv	s0,a1
    abb8:	00060913          	mv	s2,a2
    abbc:	00f75663          	bge	a4,a5,abc8 <__multiply+0x38>
    abc0:	00060413          	mv	s0,a2
    abc4:	00058913          	mv	s2,a1
    abc8:	01042a03          	lw	s4,16(s0)
    abcc:	01092983          	lw	s3,16(s2)
    abd0:	00842783          	lw	a5,8(s0)
    abd4:	00442583          	lw	a1,4(s0)
    abd8:	013a04b3          	add	s1,s4,s3
    abdc:	0097d463          	bge	a5,s1,abe4 <__multiply+0x54>
    abe0:	00158593          	addi	a1,a1,1
    abe4:	b81ff0ef          	jal	ra,a764 <_Balloc>
    abe8:	02051063          	bnez	a0,ac08 <__multiply+0x78>
    abec:	0000d6b7          	lui	a3,0xd
    abf0:	0000d537          	lui	a0,0xd
    abf4:	0e868693          	addi	a3,a3,232 # d0e8 <_ctype_+0x220>
    abf8:	00000613          	li	a2,0
    abfc:	15d00593          	li	a1,349
    ac00:	15c50513          	addi	a0,a0,348 # d15c <__sf_fake_stdout+0x20>
    ac04:	168010ef          	jal	ra,bd6c <__assert_func>
    ac08:	01450693          	addi	a3,a0,20
    ac0c:	00249813          	slli	a6,s1,0x2
    ac10:	01068833          	add	a6,a3,a6
    ac14:	00068793          	mv	a5,a3
    ac18:	0707ec63          	bltu	a5,a6,ac90 <__multiply+0x100>
    ac1c:	01440313          	addi	t1,s0,20
    ac20:	002a1593          	slli	a1,s4,0x2
    ac24:	01490613          	addi	a2,s2,20
    ac28:	00299893          	slli	a7,s3,0x2
    ac2c:	00b305b3          	add	a1,t1,a1
    ac30:	01540793          	addi	a5,s0,21
    ac34:	011608b3          	add	a7,a2,a7
    ac38:	00400e13          	li	t3,4
    ac3c:	00f5ea63          	bltu	a1,a5,ac50 <__multiply+0xc0>
    ac40:	40858433          	sub	s0,a1,s0
    ac44:	feb40413          	addi	s0,s0,-21
    ac48:	ffc47413          	andi	s0,s0,-4
    ac4c:	00440e13          	addi	t3,s0,4
    ac50:	00010eb7          	lui	t4,0x10
    ac54:	fffe8e93          	addi	t4,t4,-1 # ffff <stacks+0xa5f>
    ac58:	05166263          	bltu	a2,a7,ac9c <__multiply+0x10c>
    ac5c:	00905863          	blez	s1,ac6c <__multiply+0xdc>
    ac60:	ffc82783          	lw	a5,-4(a6)
    ac64:	ffc80813          	addi	a6,a6,-4
    ac68:	12078463          	beqz	a5,ad90 <__multiply+0x200>
    ac6c:	01c12083          	lw	ra,28(sp)
    ac70:	01812403          	lw	s0,24(sp)
    ac74:	00952823          	sw	s1,16(a0)
    ac78:	01012903          	lw	s2,16(sp)
    ac7c:	01412483          	lw	s1,20(sp)
    ac80:	00c12983          	lw	s3,12(sp)
    ac84:	00812a03          	lw	s4,8(sp)
    ac88:	02010113          	addi	sp,sp,32
    ac8c:	00008067          	ret
    ac90:	0007a023          	sw	zero,0(a5)
    ac94:	00478793          	addi	a5,a5,4
    ac98:	f81ff06f          	j	ac18 <__multiply+0x88>
    ac9c:	00062f83          	lw	t6,0(a2)
    aca0:	01dfffb3          	and	t6,t6,t4
    aca4:	060f8663          	beqz	t6,ad10 <__multiply+0x180>
    aca8:	00068393          	mv	t2,a3
    acac:	00030293          	mv	t0,t1
    acb0:	00000913          	li	s2,0
    acb4:	0002a703          	lw	a4,0(t0)
    acb8:	0003a403          	lw	s0,0(t2)
    acbc:	00438393          	addi	t2,t2,4
    acc0:	01d77f33          	and	t5,a4,t4
    acc4:	03ff0f33          	mul	t5,t5,t6
    acc8:	01d477b3          	and	a5,s0,t4
    accc:	01045413          	srli	s0,s0,0x10
    acd0:	00428293          	addi	t0,t0,4
    acd4:	00ff0f33          	add	t5,t5,a5
    acd8:	01075793          	srli	a5,a4,0x10
    acdc:	03f787b3          	mul	a5,a5,t6
    ace0:	012f0f33          	add	t5,t5,s2
    ace4:	010f5713          	srli	a4,t5,0x10
    ace8:	01df7f33          	and	t5,t5,t4
    acec:	008787b3          	add	a5,a5,s0
    acf0:	00e787b3          	add	a5,a5,a4
    acf4:	0107d913          	srli	s2,a5,0x10
    acf8:	01079793          	slli	a5,a5,0x10
    acfc:	01e7e7b3          	or	a5,a5,t5
    ad00:	fef3ae23          	sw	a5,-4(t2)
    ad04:	fab2e8e3          	bltu	t0,a1,acb4 <__multiply+0x124>
    ad08:	01c687b3          	add	a5,a3,t3
    ad0c:	0127a023          	sw	s2,0(a5)
    ad10:	00265383          	lhu	t2,2(a2)
    ad14:	06038863          	beqz	t2,ad84 <__multiply+0x1f4>
    ad18:	0006a783          	lw	a5,0(a3)
    ad1c:	00068f93          	mv	t6,a3
    ad20:	00030f13          	mv	t5,t1
    ad24:	00000293          	li	t0,0
    ad28:	000f2703          	lw	a4,0(t5)
    ad2c:	002fd403          	lhu	s0,2(t6)
    ad30:	01d7f7b3          	and	a5,a5,t4
    ad34:	01d77733          	and	a4,a4,t4
    ad38:	02770733          	mul	a4,a4,t2
    ad3c:	004f8f93          	addi	t6,t6,4
    ad40:	004f0f13          	addi	t5,t5,4
    ad44:	00870733          	add	a4,a4,s0
    ad48:	00570733          	add	a4,a4,t0
    ad4c:	01071293          	slli	t0,a4,0x10
    ad50:	00f2e7b3          	or	a5,t0,a5
    ad54:	feffae23          	sw	a5,-4(t6)
    ad58:	ffef5783          	lhu	a5,-2(t5)
    ad5c:	000fa283          	lw	t0,0(t6)
    ad60:	01075713          	srli	a4,a4,0x10
    ad64:	027787b3          	mul	a5,a5,t2
    ad68:	01d2f2b3          	and	t0,t0,t4
    ad6c:	005787b3          	add	a5,a5,t0
    ad70:	00e787b3          	add	a5,a5,a4
    ad74:	0107d293          	srli	t0,a5,0x10
    ad78:	fabf68e3          	bltu	t5,a1,ad28 <__multiply+0x198>
    ad7c:	01c68733          	add	a4,a3,t3
    ad80:	00f72023          	sw	a5,0(a4)
    ad84:	00460613          	addi	a2,a2,4
    ad88:	00468693          	addi	a3,a3,4
    ad8c:	ecdff06f          	j	ac58 <__multiply+0xc8>
    ad90:	fff48493          	addi	s1,s1,-1
    ad94:	ec9ff06f          	j	ac5c <__multiply+0xcc>

0000ad98 <__pow5mult>:
    ad98:	fe010113          	addi	sp,sp,-32
    ad9c:	00912a23          	sw	s1,20(sp)
    ada0:	01212823          	sw	s2,16(sp)
    ada4:	01312623          	sw	s3,12(sp)
    ada8:	00112e23          	sw	ra,28(sp)
    adac:	00812c23          	sw	s0,24(sp)
    adb0:	01412423          	sw	s4,8(sp)
    adb4:	00367793          	andi	a5,a2,3
    adb8:	00050913          	mv	s2,a0
    adbc:	00060493          	mv	s1,a2
    adc0:	00058993          	mv	s3,a1
    adc4:	02078463          	beqz	a5,adec <__pow5mult+0x54>
    adc8:	fff78793          	addi	a5,a5,-1
    adcc:	0000d737          	lui	a4,0xd
    add0:	1c070713          	addi	a4,a4,448 # d1c0 <p05.0>
    add4:	00279793          	slli	a5,a5,0x2
    add8:	00f707b3          	add	a5,a4,a5
    addc:	0007a603          	lw	a2,0(a5)
    ade0:	00000693          	li	a3,0
    ade4:	b15ff0ef          	jal	ra,a8f8 <__multadd>
    ade8:	00050993          	mv	s3,a0
    adec:	4024d493          	srai	s1,s1,0x2
    adf0:	0c048463          	beqz	s1,aeb8 <__pow5mult+0x120>
    adf4:	02492783          	lw	a5,36(s2)
    adf8:	04079063          	bnez	a5,ae38 <__pow5mult+0xa0>
    adfc:	01000513          	li	a0,16
    ae00:	f7dfc0ef          	jal	ra,7d7c <malloc>
    ae04:	02a92223          	sw	a0,36(s2)
    ae08:	02051063          	bnez	a0,ae28 <__pow5mult+0x90>
    ae0c:	0000d6b7          	lui	a3,0xd
    ae10:	0000d537          	lui	a0,0xd
    ae14:	06c68693          	addi	a3,a3,108 # d06c <_ctype_+0x1a4>
    ae18:	00000613          	li	a2,0
    ae1c:	1ae00593          	li	a1,430
    ae20:	15c50513          	addi	a0,a0,348 # d15c <__sf_fake_stdout+0x20>
    ae24:	749000ef          	jal	ra,bd6c <__assert_func>
    ae28:	00052223          	sw	zero,4(a0)
    ae2c:	00052423          	sw	zero,8(a0)
    ae30:	00052023          	sw	zero,0(a0)
    ae34:	00052623          	sw	zero,12(a0)
    ae38:	02492a03          	lw	s4,36(s2)
    ae3c:	008a2403          	lw	s0,8(s4)
    ae40:	00041e63          	bnez	s0,ae5c <__pow5mult+0xc4>
    ae44:	27100593          	li	a1,625
    ae48:	00090513          	mv	a0,s2
    ae4c:	cf1ff0ef          	jal	ra,ab3c <__i2b>
    ae50:	00aa2423          	sw	a0,8(s4)
    ae54:	00050413          	mv	s0,a0
    ae58:	00052023          	sw	zero,0(a0)
    ae5c:	0014f793          	andi	a5,s1,1
    ae60:	02078463          	beqz	a5,ae88 <__pow5mult+0xf0>
    ae64:	00098593          	mv	a1,s3
    ae68:	00040613          	mv	a2,s0
    ae6c:	00090513          	mv	a0,s2
    ae70:	d21ff0ef          	jal	ra,ab90 <__multiply>
    ae74:	00050a13          	mv	s4,a0
    ae78:	00098593          	mv	a1,s3
    ae7c:	00090513          	mv	a0,s2
    ae80:	9e5ff0ef          	jal	ra,a864 <_Bfree>
    ae84:	000a0993          	mv	s3,s4
    ae88:	4014d493          	srai	s1,s1,0x1
    ae8c:	02048663          	beqz	s1,aeb8 <__pow5mult+0x120>
    ae90:	00042503          	lw	a0,0(s0)
    ae94:	00051e63          	bnez	a0,aeb0 <__pow5mult+0x118>
    ae98:	00040613          	mv	a2,s0
    ae9c:	00040593          	mv	a1,s0
    aea0:	00090513          	mv	a0,s2
    aea4:	cedff0ef          	jal	ra,ab90 <__multiply>
    aea8:	00a42023          	sw	a0,0(s0)
    aeac:	00052023          	sw	zero,0(a0)
    aeb0:	00050413          	mv	s0,a0
    aeb4:	fa9ff06f          	j	ae5c <__pow5mult+0xc4>
    aeb8:	01c12083          	lw	ra,28(sp)
    aebc:	01812403          	lw	s0,24(sp)
    aec0:	01412483          	lw	s1,20(sp)
    aec4:	01012903          	lw	s2,16(sp)
    aec8:	00812a03          	lw	s4,8(sp)
    aecc:	00098513          	mv	a0,s3
    aed0:	00c12983          	lw	s3,12(sp)
    aed4:	02010113          	addi	sp,sp,32
    aed8:	00008067          	ret

0000aedc <__lshift>:
    aedc:	fe010113          	addi	sp,sp,-32
    aee0:	00812c23          	sw	s0,24(sp)
    aee4:	00058413          	mv	s0,a1
    aee8:	01612023          	sw	s6,0(sp)
    aeec:	01042b03          	lw	s6,16(s0)
    aef0:	00912a23          	sw	s1,20(sp)
    aef4:	0045a583          	lw	a1,4(a1)
    aef8:	40565493          	srai	s1,a2,0x5
    aefc:	00842783          	lw	a5,8(s0)
    af00:	01648b33          	add	s6,s1,s6
    af04:	01212823          	sw	s2,16(sp)
    af08:	01412423          	sw	s4,8(sp)
    af0c:	01512223          	sw	s5,4(sp)
    af10:	00112e23          	sw	ra,28(sp)
    af14:	01312623          	sw	s3,12(sp)
    af18:	00050a93          	mv	s5,a0
    af1c:	00060913          	mv	s2,a2
    af20:	001b0a13          	addi	s4,s6,1
    af24:	0347c863          	blt	a5,s4,af54 <__lshift+0x78>
    af28:	000a8513          	mv	a0,s5
    af2c:	839ff0ef          	jal	ra,a764 <_Balloc>
    af30:	00050993          	mv	s3,a0
    af34:	02051663          	bnez	a0,af60 <__lshift+0x84>
    af38:	0000d6b7          	lui	a3,0xd
    af3c:	0000d537          	lui	a0,0xd
    af40:	0e868693          	addi	a3,a3,232 # d0e8 <_ctype_+0x220>
    af44:	00000613          	li	a2,0
    af48:	1d900593          	li	a1,473
    af4c:	15c50513          	addi	a0,a0,348 # d15c <__sf_fake_stdout+0x20>
    af50:	61d000ef          	jal	ra,bd6c <__assert_func>
    af54:	00158593          	addi	a1,a1,1
    af58:	00179793          	slli	a5,a5,0x1
    af5c:	fc9ff06f          	j	af24 <__lshift+0x48>
    af60:	01450793          	addi	a5,a0,20
    af64:	00078693          	mv	a3,a5
    af68:	00000713          	li	a4,0
    af6c:	00468693          	addi	a3,a3,4
    af70:	0c974663          	blt	a4,s1,b03c <__lshift+0x160>
    af74:	0004d463          	bgez	s1,af7c <__lshift+0xa0>
    af78:	00000493          	li	s1,0
    af7c:	00249493          	slli	s1,s1,0x2
    af80:	009786b3          	add	a3,a5,s1
    af84:	01042783          	lw	a5,16(s0)
    af88:	01440713          	addi	a4,s0,20
    af8c:	01f97613          	andi	a2,s2,31
    af90:	00279793          	slli	a5,a5,0x2
    af94:	00f707b3          	add	a5,a4,a5
    af98:	0a060863          	beqz	a2,b048 <__lshift+0x16c>
    af9c:	02000813          	li	a6,32
    afa0:	40c80833          	sub	a6,a6,a2
    afa4:	00068893          	mv	a7,a3
    afa8:	00000593          	li	a1,0
    afac:	00072503          	lw	a0,0(a4)
    afb0:	00488893          	addi	a7,a7,4 # fcc00004 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfcc00005>
    afb4:	00470713          	addi	a4,a4,4
    afb8:	00c51533          	sll	a0,a0,a2
    afbc:	00b565b3          	or	a1,a0,a1
    afc0:	feb8ae23          	sw	a1,-4(a7)
    afc4:	ffc72583          	lw	a1,-4(a4)
    afc8:	0105d5b3          	srl	a1,a1,a6
    afcc:	fef760e3          	bltu	a4,a5,afac <__lshift+0xd0>
    afd0:	01540713          	addi	a4,s0,21
    afd4:	00400613          	li	a2,4
    afd8:	00e7ea63          	bltu	a5,a4,afec <__lshift+0x110>
    afdc:	408787b3          	sub	a5,a5,s0
    afe0:	feb78793          	addi	a5,a5,-21
    afe4:	ffc7f793          	andi	a5,a5,-4
    afe8:	00478613          	addi	a2,a5,4
    afec:	00c686b3          	add	a3,a3,a2
    aff0:	00b6a023          	sw	a1,0(a3)
    aff4:	00058463          	beqz	a1,affc <__lshift+0x120>
    aff8:	002b0a13          	addi	s4,s6,2
    affc:	fffa0a13          	addi	s4,s4,-1
    b000:	0149a823          	sw	s4,16(s3)
    b004:	000a8513          	mv	a0,s5
    b008:	00040593          	mv	a1,s0
    b00c:	859ff0ef          	jal	ra,a864 <_Bfree>
    b010:	01c12083          	lw	ra,28(sp)
    b014:	01812403          	lw	s0,24(sp)
    b018:	01412483          	lw	s1,20(sp)
    b01c:	01012903          	lw	s2,16(sp)
    b020:	00812a03          	lw	s4,8(sp)
    b024:	00412a83          	lw	s5,4(sp)
    b028:	00012b03          	lw	s6,0(sp)
    b02c:	00098513          	mv	a0,s3
    b030:	00c12983          	lw	s3,12(sp)
    b034:	02010113          	addi	sp,sp,32
    b038:	00008067          	ret
    b03c:	fe06ae23          	sw	zero,-4(a3)
    b040:	00170713          	addi	a4,a4,1
    b044:	f29ff06f          	j	af6c <__lshift+0x90>
    b048:	00072603          	lw	a2,0(a4)
    b04c:	00470713          	addi	a4,a4,4
    b050:	00468693          	addi	a3,a3,4
    b054:	fec6ae23          	sw	a2,-4(a3)
    b058:	fef768e3          	bltu	a4,a5,b048 <__lshift+0x16c>
    b05c:	fa1ff06f          	j	affc <__lshift+0x120>

0000b060 <__mcmp>:
    b060:	01052683          	lw	a3,16(a0)
    b064:	0105a703          	lw	a4,16(a1)
    b068:	00050793          	mv	a5,a0
    b06c:	40e68533          	sub	a0,a3,a4
    b070:	04e69063          	bne	a3,a4,b0b0 <__mcmp+0x50>
    b074:	00271713          	slli	a4,a4,0x2
    b078:	01478793          	addi	a5,a5,20
    b07c:	01458593          	addi	a1,a1,20
    b080:	00e786b3          	add	a3,a5,a4
    b084:	00e585b3          	add	a1,a1,a4
    b088:	ffc6a603          	lw	a2,-4(a3)
    b08c:	ffc5a703          	lw	a4,-4(a1)
    b090:	ffc68693          	addi	a3,a3,-4
    b094:	ffc58593          	addi	a1,a1,-4
    b098:	00e60a63          	beq	a2,a4,b0ac <__mcmp+0x4c>
    b09c:	fff00513          	li	a0,-1
    b0a0:	00e66863          	bltu	a2,a4,b0b0 <__mcmp+0x50>
    b0a4:	00100513          	li	a0,1
    b0a8:	00008067          	ret
    b0ac:	fcd7eee3          	bltu	a5,a3,b088 <__mcmp+0x28>
    b0b0:	00008067          	ret

0000b0b4 <__mdiff>:
    b0b4:	fe010113          	addi	sp,sp,-32
    b0b8:	00812c23          	sw	s0,24(sp)
    b0bc:	00058413          	mv	s0,a1
    b0c0:	01212823          	sw	s2,16(sp)
    b0c4:	00060593          	mv	a1,a2
    b0c8:	00050913          	mv	s2,a0
    b0cc:	00040513          	mv	a0,s0
    b0d0:	00912a23          	sw	s1,20(sp)
    b0d4:	00112e23          	sw	ra,28(sp)
    b0d8:	01312623          	sw	s3,12(sp)
    b0dc:	00060493          	mv	s1,a2
    b0e0:	f81ff0ef          	jal	ra,b060 <__mcmp>
    b0e4:	04051c63          	bnez	a0,b13c <__mdiff+0x88>
    b0e8:	00000593          	li	a1,0
    b0ec:	00090513          	mv	a0,s2
    b0f0:	e74ff0ef          	jal	ra,a764 <_Balloc>
    b0f4:	02051063          	bnez	a0,b114 <__mdiff+0x60>
    b0f8:	0000d6b7          	lui	a3,0xd
    b0fc:	0e868693          	addi	a3,a3,232 # d0e8 <_ctype_+0x220>
    b100:	00000613          	li	a2,0
    b104:	23200593          	li	a1,562
    b108:	0000d537          	lui	a0,0xd
    b10c:	15c50513          	addi	a0,a0,348 # d15c <__sf_fake_stdout+0x20>
    b110:	45d000ef          	jal	ra,bd6c <__assert_func>
    b114:	00100793          	li	a5,1
    b118:	00f52823          	sw	a5,16(a0)
    b11c:	00052a23          	sw	zero,20(a0)
    b120:	01c12083          	lw	ra,28(sp)
    b124:	01812403          	lw	s0,24(sp)
    b128:	01412483          	lw	s1,20(sp)
    b12c:	01012903          	lw	s2,16(sp)
    b130:	00c12983          	lw	s3,12(sp)
    b134:	02010113          	addi	sp,sp,32
    b138:	00008067          	ret
    b13c:	00100993          	li	s3,1
    b140:	00054a63          	bltz	a0,b154 <__mdiff+0xa0>
    b144:	00048793          	mv	a5,s1
    b148:	00000993          	li	s3,0
    b14c:	00040493          	mv	s1,s0
    b150:	00078413          	mv	s0,a5
    b154:	0044a583          	lw	a1,4(s1)
    b158:	00090513          	mv	a0,s2
    b15c:	e08ff0ef          	jal	ra,a764 <_Balloc>
    b160:	00051c63          	bnez	a0,b178 <__mdiff+0xc4>
    b164:	0000d6b7          	lui	a3,0xd
    b168:	0e868693          	addi	a3,a3,232 # d0e8 <_ctype_+0x220>
    b16c:	00000613          	li	a2,0
    b170:	24000593          	li	a1,576
    b174:	f95ff06f          	j	b108 <__mdiff+0x54>
    b178:	0104a803          	lw	a6,16(s1)
    b17c:	01042703          	lw	a4,16(s0)
    b180:	01448893          	addi	a7,s1,20
    b184:	00281693          	slli	a3,a6,0x2
    b188:	01440793          	addi	a5,s0,20
    b18c:	00271713          	slli	a4,a4,0x2
    b190:	00010eb7          	lui	t4,0x10
    b194:	01352623          	sw	s3,12(a0)
    b198:	00d886b3          	add	a3,a7,a3
    b19c:	00e787b3          	add	a5,a5,a4
    b1a0:	01450613          	addi	a2,a0,20
    b1a4:	01400e13          	li	t3,20
    b1a8:	00000313          	li	t1,0
    b1ac:	fffe8e93          	addi	t4,t4,-1 # ffff <stacks+0xa5f>
    b1b0:	01c48733          	add	a4,s1,t3
    b1b4:	00072703          	lw	a4,0(a4)
    b1b8:	01c405b3          	add	a1,s0,t3
    b1bc:	0005af03          	lw	t5,0(a1)
    b1c0:	01d775b3          	and	a1,a4,t4
    b1c4:	006585b3          	add	a1,a1,t1
    b1c8:	01df7333          	and	t1,t5,t4
    b1cc:	406585b3          	sub	a1,a1,t1
    b1d0:	010f5f13          	srli	t5,t5,0x10
    b1d4:	01075713          	srli	a4,a4,0x10
    b1d8:	4105d313          	srai	t1,a1,0x10
    b1dc:	41e70733          	sub	a4,a4,t5
    b1e0:	00670733          	add	a4,a4,t1
    b1e4:	41075313          	srai	t1,a4,0x10
    b1e8:	01d5f5b3          	and	a1,a1,t4
    b1ec:	01071713          	slli	a4,a4,0x10
    b1f0:	01c50f33          	add	t5,a0,t3
    b1f4:	00b76733          	or	a4,a4,a1
    b1f8:	004e0e13          	addi	t3,t3,4 # 31004 <W1+0x10c64>
    b1fc:	00ef2023          	sw	a4,0(t5)
    b200:	008e0733          	add	a4,t3,s0
    b204:	faf766e3          	bltu	a4,a5,b1b0 <__mdiff+0xfc>
    b208:	01540593          	addi	a1,s0,21
    b20c:	00400713          	li	a4,4
    b210:	00b7ea63          	bltu	a5,a1,b224 <__mdiff+0x170>
    b214:	408787b3          	sub	a5,a5,s0
    b218:	feb78793          	addi	a5,a5,-21
    b21c:	ffc7f793          	andi	a5,a5,-4
    b220:	00478713          	addi	a4,a5,4
    b224:	00e888b3          	add	a7,a7,a4
    b228:	00010e37          	lui	t3,0x10
    b22c:	00e60733          	add	a4,a2,a4
    b230:	00070e93          	mv	t4,a4
    b234:	00088593          	mv	a1,a7
    b238:	fffe0e13          	addi	t3,t3,-1 # ffff <stacks+0xa5f>
    b23c:	02d5ea63          	bltu	a1,a3,b270 <__mdiff+0x1bc>
    b240:	ffd88613          	addi	a2,a7,-3
    b244:	00000793          	li	a5,0
    b248:	00c6e863          	bltu	a3,a2,b258 <__mdiff+0x1a4>
    b24c:	00368693          	addi	a3,a3,3
    b250:	411687b3          	sub	a5,a3,a7
    b254:	ffc7f793          	andi	a5,a5,-4
    b258:	00f707b3          	add	a5,a4,a5
    b25c:	ffc7a703          	lw	a4,-4(a5)
    b260:	ffc78793          	addi	a5,a5,-4
    b264:	04070263          	beqz	a4,b2a8 <__mdiff+0x1f4>
    b268:	01052823          	sw	a6,16(a0)
    b26c:	eb5ff06f          	j	b120 <__mdiff+0x6c>
    b270:	0005a783          	lw	a5,0(a1)
    b274:	004e8e93          	addi	t4,t4,4
    b278:	00458593          	addi	a1,a1,4
    b27c:	01c7f633          	and	a2,a5,t3
    b280:	00660633          	add	a2,a2,t1
    b284:	41065313          	srai	t1,a2,0x10
    b288:	0107d793          	srli	a5,a5,0x10
    b28c:	006787b3          	add	a5,a5,t1
    b290:	4107d313          	srai	t1,a5,0x10
    b294:	01c67633          	and	a2,a2,t3
    b298:	01079793          	slli	a5,a5,0x10
    b29c:	00c7e7b3          	or	a5,a5,a2
    b2a0:	fefeae23          	sw	a5,-4(t4)
    b2a4:	f99ff06f          	j	b23c <__mdiff+0x188>
    b2a8:	fff80813          	addi	a6,a6,-1
    b2ac:	fb1ff06f          	j	b25c <__mdiff+0x1a8>

0000b2b0 <__d2b>:
    b2b0:	fd010113          	addi	sp,sp,-48
    b2b4:	02912223          	sw	s1,36(sp)
    b2b8:	00058493          	mv	s1,a1
    b2bc:	00100593          	li	a1,1
    b2c0:	02812423          	sw	s0,40(sp)
    b2c4:	03212023          	sw	s2,32(sp)
    b2c8:	01312e23          	sw	s3,28(sp)
    b2cc:	02112623          	sw	ra,44(sp)
    b2d0:	01412c23          	sw	s4,24(sp)
    b2d4:	00060413          	mv	s0,a2
    b2d8:	00068993          	mv	s3,a3
    b2dc:	00070913          	mv	s2,a4
    b2e0:	c84ff0ef          	jal	ra,a764 <_Balloc>
    b2e4:	02051063          	bnez	a0,b304 <__d2b+0x54>
    b2e8:	0000d6b7          	lui	a3,0xd
    b2ec:	0000d537          	lui	a0,0xd
    b2f0:	0e868693          	addi	a3,a3,232 # d0e8 <_ctype_+0x220>
    b2f4:	00000613          	li	a2,0
    b2f8:	30a00593          	li	a1,778
    b2fc:	15c50513          	addi	a0,a0,348 # d15c <__sf_fake_stdout+0x20>
    b300:	26d000ef          	jal	ra,bd6c <__assert_func>
    b304:	00100737          	lui	a4,0x100
    b308:	fff70793          	addi	a5,a4,-1 # fffff <digits+0x7525f>
    b30c:	0087f7b3          	and	a5,a5,s0
    b310:	01445413          	srli	s0,s0,0x14
    b314:	7ff47413          	andi	s0,s0,2047
    b318:	00050a13          	mv	s4,a0
    b31c:	08041a63          	bnez	s0,b3b0 <__d2b+0x100>
    b320:	00f12623          	sw	a5,12(sp)
    b324:	08048e63          	beqz	s1,b3c0 <__d2b+0x110>
    b328:	00810513          	addi	a0,sp,8
    b32c:	00912423          	sw	s1,8(sp)
    b330:	f5cff0ef          	jal	ra,aa8c <__lo0bits>
    b334:	00812683          	lw	a3,8(sp)
    b338:	08050063          	beqz	a0,b3b8 <__d2b+0x108>
    b33c:	00c12703          	lw	a4,12(sp)
    b340:	02000793          	li	a5,32
    b344:	40a787b3          	sub	a5,a5,a0
    b348:	00f717b3          	sll	a5,a4,a5
    b34c:	00d7e7b3          	or	a5,a5,a3
    b350:	00a75733          	srl	a4,a4,a0
    b354:	00fa2a23          	sw	a5,20(s4)
    b358:	00e12623          	sw	a4,12(sp)
    b35c:	00c12483          	lw	s1,12(sp)
    b360:	009a2c23          	sw	s1,24(s4)
    b364:	009034b3          	snez	s1,s1
    b368:	00148493          	addi	s1,s1,1
    b36c:	009a2823          	sw	s1,16(s4)
    b370:	06040a63          	beqz	s0,b3e4 <__d2b+0x134>
    b374:	bcd40413          	addi	s0,s0,-1075
    b378:	00a40433          	add	s0,s0,a0
    b37c:	03500793          	li	a5,53
    b380:	0089a023          	sw	s0,0(s3)
    b384:	40a78533          	sub	a0,a5,a0
    b388:	00a92023          	sw	a0,0(s2)
    b38c:	02c12083          	lw	ra,44(sp)
    b390:	02812403          	lw	s0,40(sp)
    b394:	02412483          	lw	s1,36(sp)
    b398:	02012903          	lw	s2,32(sp)
    b39c:	01c12983          	lw	s3,28(sp)
    b3a0:	000a0513          	mv	a0,s4
    b3a4:	01812a03          	lw	s4,24(sp)
    b3a8:	03010113          	addi	sp,sp,48
    b3ac:	00008067          	ret
    b3b0:	00e7e7b3          	or	a5,a5,a4
    b3b4:	f6dff06f          	j	b320 <__d2b+0x70>
    b3b8:	00da2a23          	sw	a3,20(s4)
    b3bc:	fa1ff06f          	j	b35c <__d2b+0xac>
    b3c0:	00c10513          	addi	a0,sp,12
    b3c4:	ec8ff0ef          	jal	ra,aa8c <__lo0bits>
    b3c8:	00c12783          	lw	a5,12(sp)
    b3cc:	02050513          	addi	a0,a0,32
    b3d0:	00100493          	li	s1,1
    b3d4:	00fa2a23          	sw	a5,20(s4)
    b3d8:	00100793          	li	a5,1
    b3dc:	00fa2823          	sw	a5,16(s4)
    b3e0:	f91ff06f          	j	b370 <__d2b+0xc0>
    b3e4:	bce50793          	addi	a5,a0,-1074
    b3e8:	00f9a023          	sw	a5,0(s3)
    b3ec:	00249793          	slli	a5,s1,0x2
    b3f0:	00fa07b3          	add	a5,s4,a5
    b3f4:	0107a503          	lw	a0,16(a5)
    b3f8:	00549493          	slli	s1,s1,0x5
    b3fc:	e1cff0ef          	jal	ra,aa18 <__hi0bits>
    b400:	40a484b3          	sub	s1,s1,a0
    b404:	00992023          	sw	s1,0(s2)
    b408:	f85ff06f          	j	b38c <__d2b+0xdc>

0000b40c <_calloc_r>:
    b40c:	02c58633          	mul	a2,a1,a2
    b410:	fe010113          	addi	sp,sp,-32
    b414:	00812c23          	sw	s0,24(sp)
    b418:	00112e23          	sw	ra,28(sp)
    b41c:	00060593          	mv	a1,a2
    b420:	00c12623          	sw	a2,12(sp)
    b424:	a6dfc0ef          	jal	ra,7e90 <_malloc_r>
    b428:	00050413          	mv	s0,a0
    b42c:	00050863          	beqz	a0,b43c <_calloc_r+0x30>
    b430:	00c12603          	lw	a2,12(sp)
    b434:	00000593          	li	a1,0
    b438:	88cf80ef          	jal	ra,34c4 <memset>
    b43c:	01c12083          	lw	ra,28(sp)
    b440:	00040513          	mv	a0,s0
    b444:	01812403          	lw	s0,24(sp)
    b448:	02010113          	addi	sp,sp,32
    b44c:	00008067          	ret

0000b450 <__sfputc_r>:
    b450:	00862783          	lw	a5,8(a2)
    b454:	fff78793          	addi	a5,a5,-1
    b458:	00f62423          	sw	a5,8(a2)
    b45c:	0007dc63          	bgez	a5,b474 <__sfputc_r+0x24>
    b460:	01862703          	lw	a4,24(a2)
    b464:	00e7c663          	blt	a5,a4,b470 <__sfputc_r+0x20>
    b468:	00a00793          	li	a5,10
    b46c:	00f59463          	bne	a1,a5,b474 <__sfputc_r+0x24>
    b470:	5f80006f          	j	ba68 <__swbuf_r>
    b474:	00062783          	lw	a5,0(a2)
    b478:	00058513          	mv	a0,a1
    b47c:	00178713          	addi	a4,a5,1
    b480:	00e62023          	sw	a4,0(a2)
    b484:	00b78023          	sb	a1,0(a5)
    b488:	00008067          	ret

0000b48c <__sfputs_r>:
    b48c:	fe010113          	addi	sp,sp,-32
    b490:	00812c23          	sw	s0,24(sp)
    b494:	00912a23          	sw	s1,20(sp)
    b498:	01212823          	sw	s2,16(sp)
    b49c:	01312623          	sw	s3,12(sp)
    b4a0:	01412423          	sw	s4,8(sp)
    b4a4:	00112e23          	sw	ra,28(sp)
    b4a8:	00050913          	mv	s2,a0
    b4ac:	00058993          	mv	s3,a1
    b4b0:	00060413          	mv	s0,a2
    b4b4:	00d604b3          	add	s1,a2,a3
    b4b8:	fff00a13          	li	s4,-1
    b4bc:	00941663          	bne	s0,s1,b4c8 <__sfputs_r+0x3c>
    b4c0:	00000513          	li	a0,0
    b4c4:	01c0006f          	j	b4e0 <__sfputs_r+0x54>
    b4c8:	00044583          	lbu	a1,0(s0)
    b4cc:	00098613          	mv	a2,s3
    b4d0:	00090513          	mv	a0,s2
    b4d4:	f7dff0ef          	jal	ra,b450 <__sfputc_r>
    b4d8:	00140413          	addi	s0,s0,1
    b4dc:	ff4510e3          	bne	a0,s4,b4bc <__sfputs_r+0x30>
    b4e0:	01c12083          	lw	ra,28(sp)
    b4e4:	01812403          	lw	s0,24(sp)
    b4e8:	01412483          	lw	s1,20(sp)
    b4ec:	01012903          	lw	s2,16(sp)
    b4f0:	00c12983          	lw	s3,12(sp)
    b4f4:	00812a03          	lw	s4,8(sp)
    b4f8:	02010113          	addi	sp,sp,32
    b4fc:	00008067          	ret

0000b500 <_vfiprintf_r>:
    b500:	f5010113          	addi	sp,sp,-176
    b504:	0a812423          	sw	s0,168(sp)
    b508:	0a912223          	sw	s1,164(sp)
    b50c:	0b212023          	sw	s2,160(sp)
    b510:	09312e23          	sw	s3,156(sp)
    b514:	0a112623          	sw	ra,172(sp)
    b518:	09412c23          	sw	s4,152(sp)
    b51c:	09512a23          	sw	s5,148(sp)
    b520:	09612823          	sw	s6,144(sp)
    b524:	09712623          	sw	s7,140(sp)
    b528:	09812423          	sw	s8,136(sp)
    b52c:	09912223          	sw	s9,132(sp)
    b530:	09a12023          	sw	s10,128(sp)
    b534:	07b12e23          	sw	s11,124(sp)
    b538:	00050993          	mv	s3,a0
    b53c:	00058413          	mv	s0,a1
    b540:	00060913          	mv	s2,a2
    b544:	00068493          	mv	s1,a3
    b548:	00050863          	beqz	a0,b558 <_vfiprintf_r+0x58>
    b54c:	01852783          	lw	a5,24(a0)
    b550:	00079463          	bnez	a5,b558 <_vfiprintf_r+0x58>
    b554:	f61fe0ef          	jal	ra,a4b4 <__sinit>
    b558:	0000d7b7          	lui	a5,0xd
    b55c:	11c78793          	addi	a5,a5,284 # d11c <__sf_fake_stdin>
    b560:	08f41c63          	bne	s0,a5,b5f8 <_vfiprintf_r+0xf8>
    b564:	0049a403          	lw	s0,4(s3)
    b568:	06442783          	lw	a5,100(s0)
    b56c:	0017f793          	andi	a5,a5,1
    b570:	00079c63          	bnez	a5,b588 <_vfiprintf_r+0x88>
    b574:	00c45783          	lhu	a5,12(s0)
    b578:	2007f793          	andi	a5,a5,512
    b57c:	00079663          	bnez	a5,b588 <_vfiprintf_r+0x88>
    b580:	05842503          	lw	a0,88(s0)
    b584:	860fa0ef          	jal	ra,55e4 <__retarget_lock_acquire_recursive>
    b588:	00c45783          	lhu	a5,12(s0)
    b58c:	0087f793          	andi	a5,a5,8
    b590:	00078663          	beqz	a5,b59c <_vfiprintf_r+0x9c>
    b594:	01042783          	lw	a5,16(s0)
    b598:	0a079063          	bnez	a5,b638 <_vfiprintf_r+0x138>
    b59c:	00040593          	mv	a1,s0
    b5a0:	00098513          	mv	a0,s3
    b5a4:	650000ef          	jal	ra,bbf4 <__swsetup_r>
    b5a8:	08050863          	beqz	a0,b638 <_vfiprintf_r+0x138>
    b5ac:	06442783          	lw	a5,100(s0)
    b5b0:	0017f793          	andi	a5,a5,1
    b5b4:	06078663          	beqz	a5,b620 <_vfiprintf_r+0x120>
    b5b8:	fff00513          	li	a0,-1
    b5bc:	0ac12083          	lw	ra,172(sp)
    b5c0:	0a812403          	lw	s0,168(sp)
    b5c4:	0a412483          	lw	s1,164(sp)
    b5c8:	0a012903          	lw	s2,160(sp)
    b5cc:	09c12983          	lw	s3,156(sp)
    b5d0:	09812a03          	lw	s4,152(sp)
    b5d4:	09412a83          	lw	s5,148(sp)
    b5d8:	09012b03          	lw	s6,144(sp)
    b5dc:	08c12b83          	lw	s7,140(sp)
    b5e0:	08812c03          	lw	s8,136(sp)
    b5e4:	08412c83          	lw	s9,132(sp)
    b5e8:	08012d03          	lw	s10,128(sp)
    b5ec:	07c12d83          	lw	s11,124(sp)
    b5f0:	0b010113          	addi	sp,sp,176
    b5f4:	00008067          	ret
    b5f8:	0000d7b7          	lui	a5,0xd
    b5fc:	13c78793          	addi	a5,a5,316 # d13c <__sf_fake_stdout>
    b600:	00f41663          	bne	s0,a5,b60c <_vfiprintf_r+0x10c>
    b604:	0089a403          	lw	s0,8(s3)
    b608:	f61ff06f          	j	b568 <_vfiprintf_r+0x68>
    b60c:	0000d7b7          	lui	a5,0xd
    b610:	0fc78793          	addi	a5,a5,252 # d0fc <__sf_fake_stderr>
    b614:	f4f41ae3          	bne	s0,a5,b568 <_vfiprintf_r+0x68>
    b618:	00c9a403          	lw	s0,12(s3)
    b61c:	f4dff06f          	j	b568 <_vfiprintf_r+0x68>
    b620:	00c45783          	lhu	a5,12(s0)
    b624:	2007f793          	andi	a5,a5,512
    b628:	f80798e3          	bnez	a5,b5b8 <_vfiprintf_r+0xb8>
    b62c:	05842503          	lw	a0,88(s0)
    b630:	fc1f90ef          	jal	ra,55f0 <__retarget_lock_release_recursive>
    b634:	f85ff06f          	j	b5b8 <_vfiprintf_r+0xb8>
    b638:	02000793          	li	a5,32
    b63c:	02f104a3          	sb	a5,41(sp)
    b640:	00008ab7          	lui	s5,0x8
    b644:	03000793          	li	a5,48
    b648:	02012223          	sw	zero,36(sp)
    b64c:	02f10523          	sb	a5,42(sp)
    b650:	00912623          	sw	s1,12(sp)
    b654:	02500c93          	li	s9,37
    b658:	0000db37          	lui	s6,0xd
    b65c:	0000dbb7          	lui	s7,0xd
    b660:	0000dd37          	lui	s10,0xd
    b664:	0000bc37          	lui	s8,0xb
    b668:	200a8a93          	addi	s5,s5,512 # 8200 <_printf_float>
    b66c:	00090493          	mv	s1,s2
    b670:	0004c783          	lbu	a5,0(s1)
    b674:	00078463          	beqz	a5,b67c <_vfiprintf_r+0x17c>
    b678:	0d979c63          	bne	a5,s9,b750 <_vfiprintf_r+0x250>
    b67c:	41248db3          	sub	s11,s1,s2
    b680:	03248663          	beq	s1,s2,b6ac <_vfiprintf_r+0x1ac>
    b684:	000d8693          	mv	a3,s11
    b688:	00090613          	mv	a2,s2
    b68c:	00040593          	mv	a1,s0
    b690:	00098513          	mv	a0,s3
    b694:	df9ff0ef          	jal	ra,b48c <__sfputs_r>
    b698:	fff00793          	li	a5,-1
    b69c:	24f50463          	beq	a0,a5,b8e4 <_vfiprintf_r+0x3e4>
    b6a0:	02412783          	lw	a5,36(sp)
    b6a4:	01b787b3          	add	a5,a5,s11
    b6a8:	02f12223          	sw	a5,36(sp)
    b6ac:	0004c783          	lbu	a5,0(s1)
    b6b0:	22078a63          	beqz	a5,b8e4 <_vfiprintf_r+0x3e4>
    b6b4:	fff00793          	li	a5,-1
    b6b8:	00148913          	addi	s2,s1,1
    b6bc:	00012823          	sw	zero,16(sp)
    b6c0:	00012e23          	sw	zero,28(sp)
    b6c4:	00f12a23          	sw	a5,20(sp)
    b6c8:	00012c23          	sw	zero,24(sp)
    b6cc:	040109a3          	sb	zero,83(sp)
    b6d0:	06012423          	sw	zero,104(sp)
    b6d4:	00100d93          	li	s11,1
    b6d8:	00094583          	lbu	a1,0(s2)
    b6dc:	00500613          	li	a2,5
    b6e0:	1ccb0513          	addi	a0,s6,460 # d1cc <p05.0+0xc>
    b6e4:	844ff0ef          	jal	ra,a728 <memchr>
    b6e8:	01012783          	lw	a5,16(sp)
    b6ec:	00190493          	addi	s1,s2,1
    b6f0:	06051463          	bnez	a0,b758 <_vfiprintf_r+0x258>
    b6f4:	0107f713          	andi	a4,a5,16
    b6f8:	00070663          	beqz	a4,b704 <_vfiprintf_r+0x204>
    b6fc:	02000713          	li	a4,32
    b700:	04e109a3          	sb	a4,83(sp)
    b704:	0087f713          	andi	a4,a5,8
    b708:	00070663          	beqz	a4,b714 <_vfiprintf_r+0x214>
    b70c:	02b00713          	li	a4,43
    b710:	04e109a3          	sb	a4,83(sp)
    b714:	00094683          	lbu	a3,0(s2)
    b718:	02a00713          	li	a4,42
    b71c:	04e68c63          	beq	a3,a4,b774 <_vfiprintf_r+0x274>
    b720:	01c12783          	lw	a5,28(sp)
    b724:	00090493          	mv	s1,s2
    b728:	00000693          	li	a3,0
    b72c:	00900613          	li	a2,9
    b730:	00a00513          	li	a0,10
    b734:	0004c703          	lbu	a4,0(s1)
    b738:	00148593          	addi	a1,s1,1
    b73c:	fd070713          	addi	a4,a4,-48
    b740:	08e67c63          	bgeu	a2,a4,b7d8 <_vfiprintf_r+0x2d8>
    b744:	04068463          	beqz	a3,b78c <_vfiprintf_r+0x28c>
    b748:	00f12e23          	sw	a5,28(sp)
    b74c:	0400006f          	j	b78c <_vfiprintf_r+0x28c>
    b750:	00148493          	addi	s1,s1,1
    b754:	f1dff06f          	j	b670 <_vfiprintf_r+0x170>
    b758:	1ccb0713          	addi	a4,s6,460
    b75c:	40e50533          	sub	a0,a0,a4
    b760:	00ad9533          	sll	a0,s11,a0
    b764:	00a7e7b3          	or	a5,a5,a0
    b768:	00f12823          	sw	a5,16(sp)
    b76c:	00048913          	mv	s2,s1
    b770:	f69ff06f          	j	b6d8 <_vfiprintf_r+0x1d8>
    b774:	00c12703          	lw	a4,12(sp)
    b778:	00470693          	addi	a3,a4,4
    b77c:	00072703          	lw	a4,0(a4)
    b780:	00d12623          	sw	a3,12(sp)
    b784:	04074063          	bltz	a4,b7c4 <_vfiprintf_r+0x2c4>
    b788:	00e12e23          	sw	a4,28(sp)
    b78c:	0004c703          	lbu	a4,0(s1)
    b790:	02e00793          	li	a5,46
    b794:	08f71663          	bne	a4,a5,b820 <_vfiprintf_r+0x320>
    b798:	0014c703          	lbu	a4,1(s1)
    b79c:	02a00793          	li	a5,42
    b7a0:	04f71a63          	bne	a4,a5,b7f4 <_vfiprintf_r+0x2f4>
    b7a4:	00c12783          	lw	a5,12(sp)
    b7a8:	00248493          	addi	s1,s1,2
    b7ac:	00478713          	addi	a4,a5,4
    b7b0:	0007a783          	lw	a5,0(a5)
    b7b4:	00e12623          	sw	a4,12(sp)
    b7b8:	0207ca63          	bltz	a5,b7ec <_vfiprintf_r+0x2ec>
    b7bc:	00f12a23          	sw	a5,20(sp)
    b7c0:	0600006f          	j	b820 <_vfiprintf_r+0x320>
    b7c4:	40e00733          	neg	a4,a4
    b7c8:	0027e793          	ori	a5,a5,2
    b7cc:	00e12e23          	sw	a4,28(sp)
    b7d0:	00f12823          	sw	a5,16(sp)
    b7d4:	fb9ff06f          	j	b78c <_vfiprintf_r+0x28c>
    b7d8:	02a787b3          	mul	a5,a5,a0
    b7dc:	00058493          	mv	s1,a1
    b7e0:	00100693          	li	a3,1
    b7e4:	00e787b3          	add	a5,a5,a4
    b7e8:	f4dff06f          	j	b734 <_vfiprintf_r+0x234>
    b7ec:	fff00793          	li	a5,-1
    b7f0:	fcdff06f          	j	b7bc <_vfiprintf_r+0x2bc>
    b7f4:	00148493          	addi	s1,s1,1
    b7f8:	00012a23          	sw	zero,20(sp)
    b7fc:	00000693          	li	a3,0
    b800:	00000793          	li	a5,0
    b804:	00900613          	li	a2,9
    b808:	00a00513          	li	a0,10
    b80c:	0004c703          	lbu	a4,0(s1)
    b810:	00148593          	addi	a1,s1,1
    b814:	fd070713          	addi	a4,a4,-48
    b818:	08e67263          	bgeu	a2,a4,b89c <_vfiprintf_r+0x39c>
    b81c:	fa0690e3          	bnez	a3,b7bc <_vfiprintf_r+0x2bc>
    b820:	0004c583          	lbu	a1,0(s1)
    b824:	00300613          	li	a2,3
    b828:	1d4b8513          	addi	a0,s7,468 # d1d4 <p05.0+0x14>
    b82c:	efdfe0ef          	jal	ra,a728 <memchr>
    b830:	02050263          	beqz	a0,b854 <_vfiprintf_r+0x354>
    b834:	1d4b8793          	addi	a5,s7,468
    b838:	40f50533          	sub	a0,a0,a5
    b83c:	04000793          	li	a5,64
    b840:	00a797b3          	sll	a5,a5,a0
    b844:	01012503          	lw	a0,16(sp)
    b848:	00148493          	addi	s1,s1,1
    b84c:	00f56533          	or	a0,a0,a5
    b850:	00a12823          	sw	a0,16(sp)
    b854:	0004c583          	lbu	a1,0(s1)
    b858:	00600613          	li	a2,6
    b85c:	1d8d0513          	addi	a0,s10,472 # d1d8 <p05.0+0x18>
    b860:	00148913          	addi	s2,s1,1
    b864:	02b10423          	sb	a1,40(sp)
    b868:	ec1fe0ef          	jal	ra,a728 <memchr>
    b86c:	0a050663          	beqz	a0,b918 <_vfiprintf_r+0x418>
    b870:	040a9863          	bnez	s5,b8c0 <_vfiprintf_r+0x3c0>
    b874:	01012703          	lw	a4,16(sp)
    b878:	00c12783          	lw	a5,12(sp)
    b87c:	10077713          	andi	a4,a4,256
    b880:	02070863          	beqz	a4,b8b0 <_vfiprintf_r+0x3b0>
    b884:	00478793          	addi	a5,a5,4
    b888:	00f12623          	sw	a5,12(sp)
    b88c:	02412783          	lw	a5,36(sp)
    b890:	014787b3          	add	a5,a5,s4
    b894:	02f12223          	sw	a5,36(sp)
    b898:	dd5ff06f          	j	b66c <_vfiprintf_r+0x16c>
    b89c:	02a787b3          	mul	a5,a5,a0
    b8a0:	00058493          	mv	s1,a1
    b8a4:	00100693          	li	a3,1
    b8a8:	00e787b3          	add	a5,a5,a4
    b8ac:	f61ff06f          	j	b80c <_vfiprintf_r+0x30c>
    b8b0:	00778793          	addi	a5,a5,7
    b8b4:	ff87f793          	andi	a5,a5,-8
    b8b8:	00878793          	addi	a5,a5,8
    b8bc:	fcdff06f          	j	b888 <_vfiprintf_r+0x388>
    b8c0:	00c10713          	addi	a4,sp,12
    b8c4:	48cc0693          	addi	a3,s8,1164 # b48c <__sfputs_r>
    b8c8:	00040613          	mv	a2,s0
    b8cc:	01010593          	addi	a1,sp,16
    b8d0:	00098513          	mv	a0,s3
    b8d4:	92dfc0ef          	jal	ra,8200 <_printf_float>
    b8d8:	fff00793          	li	a5,-1
    b8dc:	00050a13          	mv	s4,a0
    b8e0:	faf516e3          	bne	a0,a5,b88c <_vfiprintf_r+0x38c>
    b8e4:	06442783          	lw	a5,100(s0)
    b8e8:	0017f793          	andi	a5,a5,1
    b8ec:	00079c63          	bnez	a5,b904 <_vfiprintf_r+0x404>
    b8f0:	00c45783          	lhu	a5,12(s0)
    b8f4:	2007f793          	andi	a5,a5,512
    b8f8:	00079663          	bnez	a5,b904 <_vfiprintf_r+0x404>
    b8fc:	05842503          	lw	a0,88(s0)
    b900:	cf1f90ef          	jal	ra,55f0 <__retarget_lock_release_recursive>
    b904:	00c45783          	lhu	a5,12(s0)
    b908:	0407f793          	andi	a5,a5,64
    b90c:	ca0796e3          	bnez	a5,b5b8 <_vfiprintf_r+0xb8>
    b910:	02412503          	lw	a0,36(sp)
    b914:	ca9ff06f          	j	b5bc <_vfiprintf_r+0xbc>
    b918:	00c10713          	addi	a4,sp,12
    b91c:	48cc0693          	addi	a3,s8,1164
    b920:	00040613          	mv	a2,s0
    b924:	01010593          	addi	a1,sp,16
    b928:	00098513          	mv	a0,s3
    b92c:	a18fd0ef          	jal	ra,8b44 <_printf_i>
    b930:	fa9ff06f          	j	b8d8 <_vfiprintf_r+0x3d8>

0000b934 <__sread>:
    b934:	ff010113          	addi	sp,sp,-16
    b938:	00812423          	sw	s0,8(sp)
    b93c:	00058413          	mv	s0,a1
    b940:	00e59583          	lh	a1,14(a1)
    b944:	00112623          	sw	ra,12(sp)
    b948:	20d000ef          	jal	ra,c354 <_read_r>
    b94c:	02054063          	bltz	a0,b96c <__sread+0x38>
    b950:	05442783          	lw	a5,84(s0)
    b954:	00a787b3          	add	a5,a5,a0
    b958:	04f42a23          	sw	a5,84(s0)
    b95c:	00c12083          	lw	ra,12(sp)
    b960:	00812403          	lw	s0,8(sp)
    b964:	01010113          	addi	sp,sp,16
    b968:	00008067          	ret
    b96c:	00c45783          	lhu	a5,12(s0)
    b970:	fffff737          	lui	a4,0xfffff
    b974:	fff70713          	addi	a4,a4,-1 # ffffefff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfffff000>
    b978:	00e7f7b3          	and	a5,a5,a4
    b97c:	00f41623          	sh	a5,12(s0)
    b980:	fddff06f          	j	b95c <__sread+0x28>

0000b984 <__swrite>:
    b984:	00c5d783          	lhu	a5,12(a1)
    b988:	fe010113          	addi	sp,sp,-32
    b98c:	00812c23          	sw	s0,24(sp)
    b990:	00912a23          	sw	s1,20(sp)
    b994:	01212823          	sw	s2,16(sp)
    b998:	01312623          	sw	s3,12(sp)
    b99c:	00112e23          	sw	ra,28(sp)
    b9a0:	1007f793          	andi	a5,a5,256
    b9a4:	00050493          	mv	s1,a0
    b9a8:	00058413          	mv	s0,a1
    b9ac:	00060913          	mv	s2,a2
    b9b0:	00068993          	mv	s3,a3
    b9b4:	00078a63          	beqz	a5,b9c8 <__swrite+0x44>
    b9b8:	00e59583          	lh	a1,14(a1)
    b9bc:	00200693          	li	a3,2
    b9c0:	00000613          	li	a2,0
    b9c4:	760000ef          	jal	ra,c124 <_lseek_r>
    b9c8:	00c45783          	lhu	a5,12(s0)
    b9cc:	fffff737          	lui	a4,0xfffff
    b9d0:	fff70713          	addi	a4,a4,-1 # ffffefff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfffff000>
    b9d4:	00e7f7b3          	and	a5,a5,a4
    b9d8:	00e41583          	lh	a1,14(s0)
    b9dc:	00f41623          	sh	a5,12(s0)
    b9e0:	01812403          	lw	s0,24(sp)
    b9e4:	01c12083          	lw	ra,28(sp)
    b9e8:	00098693          	mv	a3,s3
    b9ec:	00090613          	mv	a2,s2
    b9f0:	00c12983          	lw	s3,12(sp)
    b9f4:	01012903          	lw	s2,16(sp)
    b9f8:	00048513          	mv	a0,s1
    b9fc:	01412483          	lw	s1,20(sp)
    ba00:	02010113          	addi	sp,sp,32
    ba04:	19c0006f          	j	bba0 <_write_r>

0000ba08 <__sseek>:
    ba08:	ff010113          	addi	sp,sp,-16
    ba0c:	00812423          	sw	s0,8(sp)
    ba10:	00058413          	mv	s0,a1
    ba14:	00e59583          	lh	a1,14(a1)
    ba18:	00112623          	sw	ra,12(sp)
    ba1c:	708000ef          	jal	ra,c124 <_lseek_r>
    ba20:	fff00793          	li	a5,-1
    ba24:	00c45703          	lhu	a4,12(s0)
    ba28:	02f51263          	bne	a0,a5,ba4c <__sseek+0x44>
    ba2c:	fffff7b7          	lui	a5,0xfffff
    ba30:	fff78793          	addi	a5,a5,-1 # ffffefff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfffff000>
    ba34:	00e7f7b3          	and	a5,a5,a4
    ba38:	00f41623          	sh	a5,12(s0)
    ba3c:	00c12083          	lw	ra,12(sp)
    ba40:	00812403          	lw	s0,8(sp)
    ba44:	01010113          	addi	sp,sp,16
    ba48:	00008067          	ret
    ba4c:	000017b7          	lui	a5,0x1
    ba50:	00f767b3          	or	a5,a4,a5
    ba54:	00f41623          	sh	a5,12(s0)
    ba58:	04a42a23          	sw	a0,84(s0)
    ba5c:	fe1ff06f          	j	ba3c <__sseek+0x34>

0000ba60 <__sclose>:
    ba60:	00e59583          	lh	a1,14(a1)
    ba64:	35c0006f          	j	bdc0 <_close_r>

0000ba68 <__swbuf_r>:
    ba68:	fe010113          	addi	sp,sp,-32
    ba6c:	00812c23          	sw	s0,24(sp)
    ba70:	00912a23          	sw	s1,20(sp)
    ba74:	01212823          	sw	s2,16(sp)
    ba78:	00112e23          	sw	ra,28(sp)
    ba7c:	01312623          	sw	s3,12(sp)
    ba80:	00050493          	mv	s1,a0
    ba84:	00058913          	mv	s2,a1
    ba88:	00060413          	mv	s0,a2
    ba8c:	00050863          	beqz	a0,ba9c <__swbuf_r+0x34>
    ba90:	01852783          	lw	a5,24(a0)
    ba94:	00079463          	bnez	a5,ba9c <__swbuf_r+0x34>
    ba98:	a1dfe0ef          	jal	ra,a4b4 <__sinit>
    ba9c:	0000d7b7          	lui	a5,0xd
    baa0:	11c78793          	addi	a5,a5,284 # d11c <__sf_fake_stdin>
    baa4:	0af41e63          	bne	s0,a5,bb60 <__swbuf_r+0xf8>
    baa8:	0044a403          	lw	s0,4(s1)
    baac:	01842783          	lw	a5,24(s0)
    bab0:	00f42423          	sw	a5,8(s0)
    bab4:	00c45783          	lhu	a5,12(s0)
    bab8:	0087f793          	andi	a5,a5,8
    babc:	0c078663          	beqz	a5,bb88 <__swbuf_r+0x120>
    bac0:	01042783          	lw	a5,16(s0)
    bac4:	0c078263          	beqz	a5,bb88 <__swbuf_r+0x120>
    bac8:	01042783          	lw	a5,16(s0)
    bacc:	00042503          	lw	a0,0(s0)
    bad0:	0ff97993          	andi	s3,s2,255
    bad4:	0ff97913          	andi	s2,s2,255
    bad8:	40f50533          	sub	a0,a0,a5
    badc:	01442783          	lw	a5,20(s0)
    bae0:	00f54a63          	blt	a0,a5,baf4 <__swbuf_r+0x8c>
    bae4:	00040593          	mv	a1,s0
    bae8:	00048513          	mv	a0,s1
    baec:	514000ef          	jal	ra,c000 <_fflush_r>
    baf0:	0a051463          	bnez	a0,bb98 <__swbuf_r+0x130>
    baf4:	00842783          	lw	a5,8(s0)
    baf8:	00150513          	addi	a0,a0,1
    bafc:	fff78793          	addi	a5,a5,-1
    bb00:	00f42423          	sw	a5,8(s0)
    bb04:	00042783          	lw	a5,0(s0)
    bb08:	00178713          	addi	a4,a5,1
    bb0c:	00e42023          	sw	a4,0(s0)
    bb10:	01378023          	sb	s3,0(a5)
    bb14:	01442783          	lw	a5,20(s0)
    bb18:	00a78c63          	beq	a5,a0,bb30 <__swbuf_r+0xc8>
    bb1c:	00c45783          	lhu	a5,12(s0)
    bb20:	0017f793          	andi	a5,a5,1
    bb24:	00078e63          	beqz	a5,bb40 <__swbuf_r+0xd8>
    bb28:	00a00793          	li	a5,10
    bb2c:	00f91a63          	bne	s2,a5,bb40 <__swbuf_r+0xd8>
    bb30:	00040593          	mv	a1,s0
    bb34:	00048513          	mv	a0,s1
    bb38:	4c8000ef          	jal	ra,c000 <_fflush_r>
    bb3c:	04051e63          	bnez	a0,bb98 <__swbuf_r+0x130>
    bb40:	01c12083          	lw	ra,28(sp)
    bb44:	01812403          	lw	s0,24(sp)
    bb48:	01412483          	lw	s1,20(sp)
    bb4c:	00c12983          	lw	s3,12(sp)
    bb50:	00090513          	mv	a0,s2
    bb54:	01012903          	lw	s2,16(sp)
    bb58:	02010113          	addi	sp,sp,32
    bb5c:	00008067          	ret
    bb60:	0000d7b7          	lui	a5,0xd
    bb64:	13c78793          	addi	a5,a5,316 # d13c <__sf_fake_stdout>
    bb68:	00f41663          	bne	s0,a5,bb74 <__swbuf_r+0x10c>
    bb6c:	0084a403          	lw	s0,8(s1)
    bb70:	f3dff06f          	j	baac <__swbuf_r+0x44>
    bb74:	0000d7b7          	lui	a5,0xd
    bb78:	0fc78793          	addi	a5,a5,252 # d0fc <__sf_fake_stderr>
    bb7c:	f2f418e3          	bne	s0,a5,baac <__swbuf_r+0x44>
    bb80:	00c4a403          	lw	s0,12(s1)
    bb84:	f29ff06f          	j	baac <__swbuf_r+0x44>
    bb88:	00040593          	mv	a1,s0
    bb8c:	00048513          	mv	a0,s1
    bb90:	064000ef          	jal	ra,bbf4 <__swsetup_r>
    bb94:	f2050ae3          	beqz	a0,bac8 <__swbuf_r+0x60>
    bb98:	fff00913          	li	s2,-1
    bb9c:	fa5ff06f          	j	bb40 <__swbuf_r+0xd8>

0000bba0 <_write_r>:
    bba0:	ff010113          	addi	sp,sp,-16
    bba4:	00812423          	sw	s0,8(sp)
    bba8:	00912223          	sw	s1,4(sp)
    bbac:	00050413          	mv	s0,a0
    bbb0:	0000d4b7          	lui	s1,0xd
    bbb4:	00058513          	mv	a0,a1
    bbb8:	00060593          	mv	a1,a2
    bbbc:	00068613          	mv	a2,a3
    bbc0:	00112623          	sw	ra,12(sp)
    bbc4:	2604a823          	sw	zero,624(s1) # d270 <errno>
    bbc8:	959f90ef          	jal	ra,5520 <_write>
    bbcc:	fff00793          	li	a5,-1
    bbd0:	00f51863          	bne	a0,a5,bbe0 <_write_r+0x40>
    bbd4:	2704a783          	lw	a5,624(s1)
    bbd8:	00078463          	beqz	a5,bbe0 <_write_r+0x40>
    bbdc:	00f42023          	sw	a5,0(s0)
    bbe0:	00c12083          	lw	ra,12(sp)
    bbe4:	00812403          	lw	s0,8(sp)
    bbe8:	00412483          	lw	s1,4(sp)
    bbec:	01010113          	addi	sp,sp,16
    bbf0:	00008067          	ret

0000bbf4 <__swsetup_r>:
    bbf4:	ff010113          	addi	sp,sp,-16
    bbf8:	002137b7          	lui	a5,0x213
    bbfc:	00912223          	sw	s1,4(sp)
    bc00:	79c7a483          	lw	s1,1948(a5) # 21379c <_impure_ptr>
    bc04:	00812423          	sw	s0,8(sp)
    bc08:	01212023          	sw	s2,0(sp)
    bc0c:	00112623          	sw	ra,12(sp)
    bc10:	00050913          	mv	s2,a0
    bc14:	00058413          	mv	s0,a1
    bc18:	00048a63          	beqz	s1,bc2c <__swsetup_r+0x38>
    bc1c:	0184a783          	lw	a5,24(s1)
    bc20:	00079663          	bnez	a5,bc2c <__swsetup_r+0x38>
    bc24:	00048513          	mv	a0,s1
    bc28:	88dfe0ef          	jal	ra,a4b4 <__sinit>
    bc2c:	0000d7b7          	lui	a5,0xd
    bc30:	11c78793          	addi	a5,a5,284 # d11c <__sf_fake_stdin>
    bc34:	02f41e63          	bne	s0,a5,bc70 <__swsetup_r+0x7c>
    bc38:	0044a403          	lw	s0,4(s1)
    bc3c:	00c41783          	lh	a5,12(s0)
    bc40:	01079713          	slli	a4,a5,0x10
    bc44:	0087f693          	andi	a3,a5,8
    bc48:	01075713          	srli	a4,a4,0x10
    bc4c:	08069a63          	bnez	a3,bce0 <__swsetup_r+0xec>
    bc50:	01077693          	andi	a3,a4,16
    bc54:	04069263          	bnez	a3,bc98 <__swsetup_r+0xa4>
    bc58:	00900713          	li	a4,9
    bc5c:	00e92023          	sw	a4,0(s2)
    bc60:	0407e793          	ori	a5,a5,64
    bc64:	00f41623          	sh	a5,12(s0)
    bc68:	fff00513          	li	a0,-1
    bc6c:	0d00006f          	j	bd3c <__swsetup_r+0x148>
    bc70:	0000d7b7          	lui	a5,0xd
    bc74:	13c78793          	addi	a5,a5,316 # d13c <__sf_fake_stdout>
    bc78:	00f41663          	bne	s0,a5,bc84 <__swsetup_r+0x90>
    bc7c:	0084a403          	lw	s0,8(s1)
    bc80:	fbdff06f          	j	bc3c <__swsetup_r+0x48>
    bc84:	0000d7b7          	lui	a5,0xd
    bc88:	0fc78793          	addi	a5,a5,252 # d0fc <__sf_fake_stderr>
    bc8c:	faf418e3          	bne	s0,a5,bc3c <__swsetup_r+0x48>
    bc90:	00c4a403          	lw	s0,12(s1)
    bc94:	fa9ff06f          	j	bc3c <__swsetup_r+0x48>
    bc98:	00477713          	andi	a4,a4,4
    bc9c:	02070c63          	beqz	a4,bcd4 <__swsetup_r+0xe0>
    bca0:	03442583          	lw	a1,52(s0)
    bca4:	00058c63          	beqz	a1,bcbc <__swsetup_r+0xc8>
    bca8:	04440793          	addi	a5,s0,68
    bcac:	00f58663          	beq	a1,a5,bcb8 <__swsetup_r+0xc4>
    bcb0:	00090513          	mv	a0,s2
    bcb4:	8d8fc0ef          	jal	ra,7d8c <_free_r>
    bcb8:	02042a23          	sw	zero,52(s0)
    bcbc:	00c45783          	lhu	a5,12(s0)
    bcc0:	00042223          	sw	zero,4(s0)
    bcc4:	fdb7f793          	andi	a5,a5,-37
    bcc8:	00f41623          	sh	a5,12(s0)
    bccc:	01042783          	lw	a5,16(s0)
    bcd0:	00f42023          	sw	a5,0(s0)
    bcd4:	00c45783          	lhu	a5,12(s0)
    bcd8:	0087e793          	ori	a5,a5,8
    bcdc:	00f41623          	sh	a5,12(s0)
    bce0:	01042783          	lw	a5,16(s0)
    bce4:	02079063          	bnez	a5,bd04 <__swsetup_r+0x110>
    bce8:	00c45783          	lhu	a5,12(s0)
    bcec:	20000713          	li	a4,512
    bcf0:	2807f793          	andi	a5,a5,640
    bcf4:	00e78863          	beq	a5,a4,bd04 <__swsetup_r+0x110>
    bcf8:	00040593          	mv	a1,s0
    bcfc:	00090513          	mv	a0,s2
    bd00:	508000ef          	jal	ra,c208 <__smakebuf_r>
    bd04:	00c41783          	lh	a5,12(s0)
    bd08:	01079713          	slli	a4,a5,0x10
    bd0c:	0017f693          	andi	a3,a5,1
    bd10:	01075713          	srli	a4,a4,0x10
    bd14:	04068063          	beqz	a3,bd54 <__swsetup_r+0x160>
    bd18:	01442683          	lw	a3,20(s0)
    bd1c:	00042423          	sw	zero,8(s0)
    bd20:	40d006b3          	neg	a3,a3
    bd24:	00d42c23          	sw	a3,24(s0)
    bd28:	01042683          	lw	a3,16(s0)
    bd2c:	00000513          	li	a0,0
    bd30:	00069663          	bnez	a3,bd3c <__swsetup_r+0x148>
    bd34:	08077713          	andi	a4,a4,128
    bd38:	f20714e3          	bnez	a4,bc60 <__swsetup_r+0x6c>
    bd3c:	00c12083          	lw	ra,12(sp)
    bd40:	00812403          	lw	s0,8(sp)
    bd44:	00412483          	lw	s1,4(sp)
    bd48:	00012903          	lw	s2,0(sp)
    bd4c:	01010113          	addi	sp,sp,16
    bd50:	00008067          	ret
    bd54:	00277693          	andi	a3,a4,2
    bd58:	00000613          	li	a2,0
    bd5c:	00069463          	bnez	a3,bd64 <__swsetup_r+0x170>
    bd60:	01442603          	lw	a2,20(s0)
    bd64:	00c42423          	sw	a2,8(s0)
    bd68:	fc1ff06f          	j	bd28 <__swsetup_r+0x134>

0000bd6c <__assert_func>:
    bd6c:	002137b7          	lui	a5,0x213
    bd70:	79c7a783          	lw	a5,1948(a5) # 21379c <_impure_ptr>
    bd74:	ff010113          	addi	sp,sp,-16
    bd78:	00060813          	mv	a6,a2
    bd7c:	00112623          	sw	ra,12(sp)
    bd80:	00050893          	mv	a7,a0
    bd84:	00058713          	mv	a4,a1
    bd88:	00c7a503          	lw	a0,12(a5)
    bd8c:	00068613          	mv	a2,a3
    bd90:	02080063          	beqz	a6,bdb0 <__assert_func+0x44>
    bd94:	0000d7b7          	lui	a5,0xd
    bd98:	1e078793          	addi	a5,a5,480 # d1e0 <p05.0+0x20>
    bd9c:	0000d5b7          	lui	a1,0xd
    bda0:	00088693          	mv	a3,a7
    bda4:	1f058593          	addi	a1,a1,496 # d1f0 <p05.0+0x30>
    bda8:	334000ef          	jal	ra,c0dc <fiprintf>
    bdac:	62c000ef          	jal	ra,c3d8 <abort>
    bdb0:	0000d837          	lui	a6,0xd
    bdb4:	1ec80793          	addi	a5,a6,492 # d1ec <p05.0+0x2c>
    bdb8:	1ec80813          	addi	a6,a6,492
    bdbc:	fe1ff06f          	j	bd9c <__assert_func+0x30>

0000bdc0 <_close_r>:
    bdc0:	ff010113          	addi	sp,sp,-16
    bdc4:	00812423          	sw	s0,8(sp)
    bdc8:	00912223          	sw	s1,4(sp)
    bdcc:	00050413          	mv	s0,a0
    bdd0:	0000d4b7          	lui	s1,0xd
    bdd4:	00058513          	mv	a0,a1
    bdd8:	00112623          	sw	ra,12(sp)
    bddc:	2604a823          	sw	zero,624(s1) # d270 <errno>
    bde0:	f4cf90ef          	jal	ra,552c <_close>
    bde4:	fff00793          	li	a5,-1
    bde8:	00f51863          	bne	a0,a5,bdf8 <_close_r+0x38>
    bdec:	2704a783          	lw	a5,624(s1)
    bdf0:	00078463          	beqz	a5,bdf8 <_close_r+0x38>
    bdf4:	00f42023          	sw	a5,0(s0)
    bdf8:	00c12083          	lw	ra,12(sp)
    bdfc:	00812403          	lw	s0,8(sp)
    be00:	00412483          	lw	s1,4(sp)
    be04:	01010113          	addi	sp,sp,16
    be08:	00008067          	ret

0000be0c <__sflush_r>:
    be0c:	00c5d783          	lhu	a5,12(a1)
    be10:	fe010113          	addi	sp,sp,-32
    be14:	00812c23          	sw	s0,24(sp)
    be18:	00912a23          	sw	s1,20(sp)
    be1c:	00112e23          	sw	ra,28(sp)
    be20:	01212823          	sw	s2,16(sp)
    be24:	01312623          	sw	s3,12(sp)
    be28:	0087f713          	andi	a4,a5,8
    be2c:	00050493          	mv	s1,a0
    be30:	00058413          	mv	s0,a1
    be34:	16071263          	bnez	a4,bf98 <__sflush_r+0x18c>
    be38:	0045a703          	lw	a4,4(a1)
    be3c:	00e04a63          	bgtz	a4,be50 <__sflush_r+0x44>
    be40:	0405a703          	lw	a4,64(a1)
    be44:	00e04663          	bgtz	a4,be50 <__sflush_r+0x44>
    be48:	00000513          	li	a0,0
    be4c:	1240006f          	j	bf70 <__sflush_r+0x164>
    be50:	02c42703          	lw	a4,44(s0)
    be54:	fe070ae3          	beqz	a4,be48 <__sflush_r+0x3c>
    be58:	000016b7          	lui	a3,0x1
    be5c:	0004a903          	lw	s2,0(s1)
    be60:	00d7f7b3          	and	a5,a5,a3
    be64:	0004a023          	sw	zero,0(s1)
    be68:	0c078063          	beqz	a5,bf28 <__sflush_r+0x11c>
    be6c:	05442503          	lw	a0,84(s0)
    be70:	00c45783          	lhu	a5,12(s0)
    be74:	0047f793          	andi	a5,a5,4
    be78:	00078e63          	beqz	a5,be94 <__sflush_r+0x88>
    be7c:	00442783          	lw	a5,4(s0)
    be80:	40f50533          	sub	a0,a0,a5
    be84:	03442783          	lw	a5,52(s0)
    be88:	00078663          	beqz	a5,be94 <__sflush_r+0x88>
    be8c:	04042783          	lw	a5,64(s0)
    be90:	40f50533          	sub	a0,a0,a5
    be94:	02c42783          	lw	a5,44(s0)
    be98:	02042583          	lw	a1,32(s0)
    be9c:	00050613          	mv	a2,a0
    bea0:	00000693          	li	a3,0
    bea4:	00048513          	mv	a0,s1
    bea8:	000780e7          	jalr	a5
    beac:	fff00793          	li	a5,-1
    beb0:	00c45703          	lhu	a4,12(s0)
    beb4:	02f51263          	bne	a0,a5,bed8 <__sflush_r+0xcc>
    beb8:	0004a683          	lw	a3,0(s1)
    bebc:	01d00793          	li	a5,29
    bec0:	0cd7e663          	bltu	a5,a3,bf8c <__sflush_r+0x180>
    bec4:	204007b7          	lui	a5,0x20400
    bec8:	00178793          	addi	a5,a5,1 # 20400001 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d450f81>
    becc:	00d7d7b3          	srl	a5,a5,a3
    bed0:	0017f793          	andi	a5,a5,1
    bed4:	0a078c63          	beqz	a5,bf8c <__sflush_r+0x180>
    bed8:	01042783          	lw	a5,16(s0)
    bedc:	00042223          	sw	zero,4(s0)
    bee0:	00f42023          	sw	a5,0(s0)
    bee4:	000017b7          	lui	a5,0x1
    bee8:	00f77733          	and	a4,a4,a5
    beec:	00070c63          	beqz	a4,bf04 <__sflush_r+0xf8>
    bef0:	fff00793          	li	a5,-1
    bef4:	00f51663          	bne	a0,a5,bf00 <__sflush_r+0xf4>
    bef8:	0004a783          	lw	a5,0(s1)
    befc:	00079463          	bnez	a5,bf04 <__sflush_r+0xf8>
    bf00:	04a42a23          	sw	a0,84(s0)
    bf04:	03442583          	lw	a1,52(s0)
    bf08:	0124a023          	sw	s2,0(s1)
    bf0c:	f2058ee3          	beqz	a1,be48 <__sflush_r+0x3c>
    bf10:	04440793          	addi	a5,s0,68
    bf14:	00f58663          	beq	a1,a5,bf20 <__sflush_r+0x114>
    bf18:	00048513          	mv	a0,s1
    bf1c:	e71fb0ef          	jal	ra,7d8c <_free_r>
    bf20:	02042a23          	sw	zero,52(s0)
    bf24:	f25ff06f          	j	be48 <__sflush_r+0x3c>
    bf28:	02042583          	lw	a1,32(s0)
    bf2c:	00100693          	li	a3,1
    bf30:	00000613          	li	a2,0
    bf34:	00048513          	mv	a0,s1
    bf38:	000700e7          	jalr	a4
    bf3c:	fff00793          	li	a5,-1
    bf40:	f2f518e3          	bne	a0,a5,be70 <__sflush_r+0x64>
    bf44:	0004a783          	lw	a5,0(s1)
    bf48:	f20784e3          	beqz	a5,be70 <__sflush_r+0x64>
    bf4c:	01d00713          	li	a4,29
    bf50:	00e78663          	beq	a5,a4,bf5c <__sflush_r+0x150>
    bf54:	01600713          	li	a4,22
    bf58:	00e79663          	bne	a5,a4,bf64 <__sflush_r+0x158>
    bf5c:	0124a023          	sw	s2,0(s1)
    bf60:	ee9ff06f          	j	be48 <__sflush_r+0x3c>
    bf64:	00c45783          	lhu	a5,12(s0)
    bf68:	0407e793          	ori	a5,a5,64
    bf6c:	00f41623          	sh	a5,12(s0)
    bf70:	01c12083          	lw	ra,28(sp)
    bf74:	01812403          	lw	s0,24(sp)
    bf78:	01412483          	lw	s1,20(sp)
    bf7c:	01012903          	lw	s2,16(sp)
    bf80:	00c12983          	lw	s3,12(sp)
    bf84:	02010113          	addi	sp,sp,32
    bf88:	00008067          	ret
    bf8c:	04076713          	ori	a4,a4,64
    bf90:	00e41623          	sh	a4,12(s0)
    bf94:	fddff06f          	j	bf70 <__sflush_r+0x164>
    bf98:	0105a983          	lw	s3,16(a1)
    bf9c:	ea0986e3          	beqz	s3,be48 <__sflush_r+0x3c>
    bfa0:	0005a903          	lw	s2,0(a1)
    bfa4:	0037f793          	andi	a5,a5,3
    bfa8:	0135a023          	sw	s3,0(a1)
    bfac:	41390933          	sub	s2,s2,s3
    bfb0:	00000713          	li	a4,0
    bfb4:	00079463          	bnez	a5,bfbc <__sflush_r+0x1b0>
    bfb8:	0145a703          	lw	a4,20(a1)
    bfbc:	00e42423          	sw	a4,8(s0)
    bfc0:	e92054e3          	blez	s2,be48 <__sflush_r+0x3c>
    bfc4:	02842783          	lw	a5,40(s0)
    bfc8:	02042583          	lw	a1,32(s0)
    bfcc:	00090693          	mv	a3,s2
    bfd0:	00098613          	mv	a2,s3
    bfd4:	00048513          	mv	a0,s1
    bfd8:	000780e7          	jalr	a5 # 1000 <__adddf3+0x48c>
    bfdc:	00a04c63          	bgtz	a0,bff4 <__sflush_r+0x1e8>
    bfe0:	00c45783          	lhu	a5,12(s0)
    bfe4:	fff00513          	li	a0,-1
    bfe8:	0407e793          	ori	a5,a5,64
    bfec:	00f41623          	sh	a5,12(s0)
    bff0:	f81ff06f          	j	bf70 <__sflush_r+0x164>
    bff4:	00a989b3          	add	s3,s3,a0
    bff8:	40a90933          	sub	s2,s2,a0
    bffc:	fc5ff06f          	j	bfc0 <__sflush_r+0x1b4>

0000c000 <_fflush_r>:
    c000:	0105a783          	lw	a5,16(a1)
    c004:	ff010113          	addi	sp,sp,-16
    c008:	00112623          	sw	ra,12(sp)
    c00c:	00812423          	sw	s0,8(sp)
    c010:	00912223          	sw	s1,4(sp)
    c014:	02079063          	bnez	a5,c034 <_fflush_r+0x34>
    c018:	00000493          	li	s1,0
    c01c:	00c12083          	lw	ra,12(sp)
    c020:	00812403          	lw	s0,8(sp)
    c024:	00048513          	mv	a0,s1
    c028:	00412483          	lw	s1,4(sp)
    c02c:	01010113          	addi	sp,sp,16
    c030:	00008067          	ret
    c034:	00050493          	mv	s1,a0
    c038:	00058413          	mv	s0,a1
    c03c:	00050863          	beqz	a0,c04c <_fflush_r+0x4c>
    c040:	01852783          	lw	a5,24(a0)
    c044:	00079463          	bnez	a5,c04c <_fflush_r+0x4c>
    c048:	c6cfe0ef          	jal	ra,a4b4 <__sinit>
    c04c:	0000d7b7          	lui	a5,0xd
    c050:	11c78793          	addi	a5,a5,284 # d11c <__sf_fake_stdin>
    c054:	06f41063          	bne	s0,a5,c0b4 <_fflush_r+0xb4>
    c058:	0044a403          	lw	s0,4(s1)
    c05c:	00c41783          	lh	a5,12(s0)
    c060:	fa078ce3          	beqz	a5,c018 <_fflush_r+0x18>
    c064:	06442703          	lw	a4,100(s0)
    c068:	00177713          	andi	a4,a4,1
    c06c:	00071a63          	bnez	a4,c080 <_fflush_r+0x80>
    c070:	2007f793          	andi	a5,a5,512
    c074:	00079663          	bnez	a5,c080 <_fflush_r+0x80>
    c078:	05842503          	lw	a0,88(s0)
    c07c:	d68f90ef          	jal	ra,55e4 <__retarget_lock_acquire_recursive>
    c080:	00048513          	mv	a0,s1
    c084:	00040593          	mv	a1,s0
    c088:	d85ff0ef          	jal	ra,be0c <__sflush_r>
    c08c:	06442783          	lw	a5,100(s0)
    c090:	00050493          	mv	s1,a0
    c094:	0017f793          	andi	a5,a5,1
    c098:	f80792e3          	bnez	a5,c01c <_fflush_r+0x1c>
    c09c:	00c45783          	lhu	a5,12(s0)
    c0a0:	2007f793          	andi	a5,a5,512
    c0a4:	f6079ce3          	bnez	a5,c01c <_fflush_r+0x1c>
    c0a8:	05842503          	lw	a0,88(s0)
    c0ac:	d44f90ef          	jal	ra,55f0 <__retarget_lock_release_recursive>
    c0b0:	f6dff06f          	j	c01c <_fflush_r+0x1c>
    c0b4:	0000d7b7          	lui	a5,0xd
    c0b8:	13c78793          	addi	a5,a5,316 # d13c <__sf_fake_stdout>
    c0bc:	00f41663          	bne	s0,a5,c0c8 <_fflush_r+0xc8>
    c0c0:	0084a403          	lw	s0,8(s1)
    c0c4:	f99ff06f          	j	c05c <_fflush_r+0x5c>
    c0c8:	0000d7b7          	lui	a5,0xd
    c0cc:	0fc78793          	addi	a5,a5,252 # d0fc <__sf_fake_stderr>
    c0d0:	f8f416e3          	bne	s0,a5,c05c <_fflush_r+0x5c>
    c0d4:	00c4a403          	lw	s0,12(s1)
    c0d8:	f85ff06f          	j	c05c <_fflush_r+0x5c>

0000c0dc <fiprintf>:
    c0dc:	fc010113          	addi	sp,sp,-64
    c0e0:	02f12a23          	sw	a5,52(sp)
    c0e4:	002137b7          	lui	a5,0x213
    c0e8:	02c12423          	sw	a2,40(sp)
    c0ec:	00058613          	mv	a2,a1
    c0f0:	00050593          	mv	a1,a0
    c0f4:	79c7a503          	lw	a0,1948(a5) # 21379c <_impure_ptr>
    c0f8:	02d12623          	sw	a3,44(sp)
    c0fc:	02810693          	addi	a3,sp,40
    c100:	00112e23          	sw	ra,28(sp)
    c104:	02e12823          	sw	a4,48(sp)
    c108:	03012c23          	sw	a6,56(sp)
    c10c:	03112e23          	sw	a7,60(sp)
    c110:	00d12623          	sw	a3,12(sp)
    c114:	becff0ef          	jal	ra,b500 <_vfiprintf_r>
    c118:	01c12083          	lw	ra,28(sp)
    c11c:	04010113          	addi	sp,sp,64
    c120:	00008067          	ret

0000c124 <_lseek_r>:
    c124:	ff010113          	addi	sp,sp,-16
    c128:	00812423          	sw	s0,8(sp)
    c12c:	00912223          	sw	s1,4(sp)
    c130:	00050413          	mv	s0,a0
    c134:	0000d4b7          	lui	s1,0xd
    c138:	00058513          	mv	a0,a1
    c13c:	00060593          	mv	a1,a2
    c140:	00068613          	mv	a2,a3
    c144:	00112623          	sw	ra,12(sp)
    c148:	2604a823          	sw	zero,624(s1) # d270 <errno>
    c14c:	be8f90ef          	jal	ra,5534 <_lseek>
    c150:	fff00793          	li	a5,-1
    c154:	00f51863          	bne	a0,a5,c164 <_lseek_r+0x40>
    c158:	2704a783          	lw	a5,624(s1)
    c15c:	00078463          	beqz	a5,c164 <_lseek_r+0x40>
    c160:	00f42023          	sw	a5,0(s0)
    c164:	00c12083          	lw	ra,12(sp)
    c168:	00812403          	lw	s0,8(sp)
    c16c:	00412483          	lw	s1,4(sp)
    c170:	01010113          	addi	sp,sp,16
    c174:	00008067          	ret

0000c178 <__swhatbuf_r>:
    c178:	f9010113          	addi	sp,sp,-112
    c17c:	07212023          	sw	s2,96(sp)
    c180:	00058913          	mv	s2,a1
    c184:	00e59583          	lh	a1,14(a1)
    c188:	06812423          	sw	s0,104(sp)
    c18c:	06912223          	sw	s1,100(sp)
    c190:	06112623          	sw	ra,108(sp)
    c194:	00060413          	mv	s0,a2
    c198:	00068493          	mv	s1,a3
    c19c:	0005de63          	bgez	a1,c1b8 <__swhatbuf_r+0x40>
    c1a0:	00c91783          	lh	a5,12(s2)
    c1a4:	0004a023          	sw	zero,0(s1)
    c1a8:	0807f793          	andi	a5,a5,128
    c1ac:	02079c63          	bnez	a5,c1e4 <__swhatbuf_r+0x6c>
    c1b0:	40000793          	li	a5,1024
    c1b4:	0340006f          	j	c1e8 <__swhatbuf_r+0x70>
    c1b8:	00810613          	addi	a2,sp,8
    c1bc:	234000ef          	jal	ra,c3f0 <_fstat_r>
    c1c0:	fe0540e3          	bltz	a0,c1a0 <__swhatbuf_r+0x28>
    c1c4:	00c12703          	lw	a4,12(sp)
    c1c8:	0000f7b7          	lui	a5,0xf
    c1cc:	00e7f7b3          	and	a5,a5,a4
    c1d0:	ffffe737          	lui	a4,0xffffe
    c1d4:	00e787b3          	add	a5,a5,a4
    c1d8:	0017b793          	seqz	a5,a5
    c1dc:	00f4a023          	sw	a5,0(s1)
    c1e0:	fd1ff06f          	j	c1b0 <__swhatbuf_r+0x38>
    c1e4:	04000793          	li	a5,64
    c1e8:	06c12083          	lw	ra,108(sp)
    c1ec:	00f42023          	sw	a5,0(s0)
    c1f0:	06812403          	lw	s0,104(sp)
    c1f4:	06412483          	lw	s1,100(sp)
    c1f8:	06012903          	lw	s2,96(sp)
    c1fc:	00000513          	li	a0,0
    c200:	07010113          	addi	sp,sp,112
    c204:	00008067          	ret

0000c208 <__smakebuf_r>:
    c208:	00c5d783          	lhu	a5,12(a1)
    c20c:	fe010113          	addi	sp,sp,-32
    c210:	00812c23          	sw	s0,24(sp)
    c214:	00112e23          	sw	ra,28(sp)
    c218:	00912a23          	sw	s1,20(sp)
    c21c:	01212823          	sw	s2,16(sp)
    c220:	0027f793          	andi	a5,a5,2
    c224:	00058413          	mv	s0,a1
    c228:	02078863          	beqz	a5,c258 <__smakebuf_r+0x50>
    c22c:	04740793          	addi	a5,s0,71
    c230:	00f42023          	sw	a5,0(s0)
    c234:	00f42823          	sw	a5,16(s0)
    c238:	00100793          	li	a5,1
    c23c:	00f42a23          	sw	a5,20(s0)
    c240:	01c12083          	lw	ra,28(sp)
    c244:	01812403          	lw	s0,24(sp)
    c248:	01412483          	lw	s1,20(sp)
    c24c:	01012903          	lw	s2,16(sp)
    c250:	02010113          	addi	sp,sp,32
    c254:	00008067          	ret
    c258:	00c10693          	addi	a3,sp,12
    c25c:	00810613          	addi	a2,sp,8
    c260:	00050913          	mv	s2,a0
    c264:	f15ff0ef          	jal	ra,c178 <__swhatbuf_r>
    c268:	00812583          	lw	a1,8(sp)
    c26c:	00050493          	mv	s1,a0
    c270:	00090513          	mv	a0,s2
    c274:	c1dfb0ef          	jal	ra,7e90 <_malloc_r>
    c278:	02051063          	bnez	a0,c298 <__smakebuf_r+0x90>
    c27c:	00c41783          	lh	a5,12(s0)
    c280:	2007f713          	andi	a4,a5,512
    c284:	fa071ee3          	bnez	a4,c240 <__smakebuf_r+0x38>
    c288:	ffc7f793          	andi	a5,a5,-4
    c28c:	0027e793          	ori	a5,a5,2
    c290:	00f41623          	sh	a5,12(s0)
    c294:	f99ff06f          	j	c22c <__smakebuf_r+0x24>
    c298:	0000a7b7          	lui	a5,0xa
    c29c:	40c78793          	addi	a5,a5,1036 # a40c <_cleanup_r>
    c2a0:	02f92423          	sw	a5,40(s2)
    c2a4:	00c45783          	lhu	a5,12(s0)
    c2a8:	00a42023          	sw	a0,0(s0)
    c2ac:	00a42823          	sw	a0,16(s0)
    c2b0:	0807e793          	ori	a5,a5,128
    c2b4:	00f41623          	sh	a5,12(s0)
    c2b8:	00812783          	lw	a5,8(sp)
    c2bc:	00f42a23          	sw	a5,20(s0)
    c2c0:	00c12783          	lw	a5,12(sp)
    c2c4:	02078263          	beqz	a5,c2e8 <__smakebuf_r+0xe0>
    c2c8:	00e41583          	lh	a1,14(s0)
    c2cc:	00090513          	mv	a0,s2
    c2d0:	170000ef          	jal	ra,c440 <_isatty_r>
    c2d4:	00050a63          	beqz	a0,c2e8 <__smakebuf_r+0xe0>
    c2d8:	00c45783          	lhu	a5,12(s0)
    c2dc:	ffc7f793          	andi	a5,a5,-4
    c2e0:	0017e793          	ori	a5,a5,1
    c2e4:	00f41623          	sh	a5,12(s0)
    c2e8:	00c45503          	lhu	a0,12(s0)
    c2ec:	00a4e4b3          	or	s1,s1,a0
    c2f0:	00941623          	sh	s1,12(s0)
    c2f4:	f4dff06f          	j	c240 <__smakebuf_r+0x38>

0000c2f8 <__ascii_mbtowc>:
    c2f8:	02059a63          	bnez	a1,c32c <__ascii_mbtowc+0x34>
    c2fc:	ff010113          	addi	sp,sp,-16
    c300:	00c10593          	addi	a1,sp,12
    c304:	00000513          	li	a0,0
    c308:	00060e63          	beqz	a2,c324 <__ascii_mbtowc+0x2c>
    c30c:	ffe00513          	li	a0,-2
    c310:	00068a63          	beqz	a3,c324 <__ascii_mbtowc+0x2c>
    c314:	00064783          	lbu	a5,0(a2)
    c318:	00f5a023          	sw	a5,0(a1)
    c31c:	00064503          	lbu	a0,0(a2)
    c320:	00a03533          	snez	a0,a0
    c324:	01010113          	addi	sp,sp,16
    c328:	00008067          	ret
    c32c:	00000513          	li	a0,0
    c330:	02060063          	beqz	a2,c350 <__ascii_mbtowc+0x58>
    c334:	ffe00513          	li	a0,-2
    c338:	00068c63          	beqz	a3,c350 <__ascii_mbtowc+0x58>
    c33c:	00064783          	lbu	a5,0(a2)
    c340:	00f5a023          	sw	a5,0(a1)
    c344:	00064503          	lbu	a0,0(a2)
    c348:	00a03533          	snez	a0,a0
    c34c:	00008067          	ret
    c350:	00008067          	ret

0000c354 <_read_r>:
    c354:	ff010113          	addi	sp,sp,-16
    c358:	00812423          	sw	s0,8(sp)
    c35c:	00912223          	sw	s1,4(sp)
    c360:	00050413          	mv	s0,a0
    c364:	0000d4b7          	lui	s1,0xd
    c368:	00058513          	mv	a0,a1
    c36c:	00060593          	mv	a1,a2
    c370:	00068613          	mv	a2,a3
    c374:	00112623          	sw	ra,12(sp)
    c378:	2604a823          	sw	zero,624(s1) # d270 <errno>
    c37c:	998f90ef          	jal	ra,5514 <_read>
    c380:	fff00793          	li	a5,-1
    c384:	00f51863          	bne	a0,a5,c394 <_read_r+0x40>
    c388:	2704a783          	lw	a5,624(s1)
    c38c:	00078463          	beqz	a5,c394 <_read_r+0x40>
    c390:	00f42023          	sw	a5,0(s0)
    c394:	00c12083          	lw	ra,12(sp)
    c398:	00812403          	lw	s0,8(sp)
    c39c:	00412483          	lw	s1,4(sp)
    c3a0:	01010113          	addi	sp,sp,16
    c3a4:	00008067          	ret

0000c3a8 <__ascii_wctomb>:
    c3a8:	02058463          	beqz	a1,c3d0 <__ascii_wctomb+0x28>
    c3ac:	0ff00793          	li	a5,255
    c3b0:	00c7fa63          	bgeu	a5,a2,c3c4 <__ascii_wctomb+0x1c>
    c3b4:	08a00793          	li	a5,138
    c3b8:	00f52023          	sw	a5,0(a0)
    c3bc:	fff00513          	li	a0,-1
    c3c0:	00008067          	ret
    c3c4:	00c58023          	sb	a2,0(a1)
    c3c8:	00100513          	li	a0,1
    c3cc:	00008067          	ret
    c3d0:	00000513          	li	a0,0
    c3d4:	00008067          	ret

0000c3d8 <abort>:
    c3d8:	ff010113          	addi	sp,sp,-16
    c3dc:	00600513          	li	a0,6
    c3e0:	00112623          	sw	ra,12(sp)
    c3e4:	158000ef          	jal	ra,c53c <raise>
    c3e8:	00100513          	li	a0,1
    c3ec:	978f90ef          	jal	ra,5564 <_exit>

0000c3f0 <_fstat_r>:
    c3f0:	ff010113          	addi	sp,sp,-16
    c3f4:	00812423          	sw	s0,8(sp)
    c3f8:	00912223          	sw	s1,4(sp)
    c3fc:	00050413          	mv	s0,a0
    c400:	0000d4b7          	lui	s1,0xd
    c404:	00058513          	mv	a0,a1
    c408:	00060593          	mv	a1,a2
    c40c:	00112623          	sw	ra,12(sp)
    c410:	2604a823          	sw	zero,624(s1) # d270 <errno>
    c414:	940f90ef          	jal	ra,5554 <_fstat>
    c418:	fff00793          	li	a5,-1
    c41c:	00f51863          	bne	a0,a5,c42c <_fstat_r+0x3c>
    c420:	2704a783          	lw	a5,624(s1)
    c424:	00078463          	beqz	a5,c42c <_fstat_r+0x3c>
    c428:	00f42023          	sw	a5,0(s0)
    c42c:	00c12083          	lw	ra,12(sp)
    c430:	00812403          	lw	s0,8(sp)
    c434:	00412483          	lw	s1,4(sp)
    c438:	01010113          	addi	sp,sp,16
    c43c:	00008067          	ret

0000c440 <_isatty_r>:
    c440:	ff010113          	addi	sp,sp,-16
    c444:	00812423          	sw	s0,8(sp)
    c448:	00912223          	sw	s1,4(sp)
    c44c:	00050413          	mv	s0,a0
    c450:	0000d4b7          	lui	s1,0xd
    c454:	00058513          	mv	a0,a1
    c458:	00112623          	sw	ra,12(sp)
    c45c:	2604a823          	sw	zero,624(s1) # d270 <errno>
    c460:	8dcf90ef          	jal	ra,553c <_isatty>
    c464:	fff00793          	li	a5,-1
    c468:	00f51863          	bne	a0,a5,c478 <_isatty_r+0x38>
    c46c:	2704a783          	lw	a5,624(s1)
    c470:	00078463          	beqz	a5,c478 <_isatty_r+0x38>
    c474:	00f42023          	sw	a5,0(s0)
    c478:	00c12083          	lw	ra,12(sp)
    c47c:	00812403          	lw	s0,8(sp)
    c480:	00412483          	lw	s1,4(sp)
    c484:	01010113          	addi	sp,sp,16
    c488:	00008067          	ret

0000c48c <_raise_r>:
    c48c:	fe010113          	addi	sp,sp,-32
    c490:	00812c23          	sw	s0,24(sp)
    c494:	00112e23          	sw	ra,28(sp)
    c498:	01f00793          	li	a5,31
    c49c:	00050413          	mv	s0,a0
    c4a0:	02b7f063          	bgeu	a5,a1,c4c0 <_raise_r+0x34>
    c4a4:	01600793          	li	a5,22
    c4a8:	00f52023          	sw	a5,0(a0)
    c4ac:	fff00513          	li	a0,-1
    c4b0:	01c12083          	lw	ra,28(sp)
    c4b4:	01812403          	lw	s0,24(sp)
    c4b8:	02010113          	addi	sp,sp,32
    c4bc:	00008067          	ret
    c4c0:	04452783          	lw	a5,68(a0)
    c4c4:	00058613          	mv	a2,a1
    c4c8:	00078a63          	beqz	a5,c4dc <_raise_r+0x50>
    c4cc:	00259713          	slli	a4,a1,0x2
    c4d0:	00e787b3          	add	a5,a5,a4
    c4d4:	0007a703          	lw	a4,0(a5)
    c4d8:	02071663          	bnez	a4,c504 <_raise_r+0x78>
    c4dc:	00040513          	mv	a0,s0
    c4e0:	00c12623          	sw	a2,12(sp)
    c4e4:	0b8000ef          	jal	ra,c59c <_getpid_r>
    c4e8:	00050593          	mv	a1,a0
    c4ec:	00040513          	mv	a0,s0
    c4f0:	01812403          	lw	s0,24(sp)
    c4f4:	00c12603          	lw	a2,12(sp)
    c4f8:	01c12083          	lw	ra,28(sp)
    c4fc:	02010113          	addi	sp,sp,32
    c500:	04c0006f          	j	c54c <_kill_r>
    c504:	00100693          	li	a3,1
    c508:	00000513          	li	a0,0
    c50c:	fad702e3          	beq	a4,a3,c4b0 <_raise_r+0x24>
    c510:	fff00693          	li	a3,-1
    c514:	00d71a63          	bne	a4,a3,c528 <_raise_r+0x9c>
    c518:	01600793          	li	a5,22
    c51c:	00f42023          	sw	a5,0(s0)
    c520:	00100513          	li	a0,1
    c524:	f8dff06f          	j	c4b0 <_raise_r+0x24>
    c528:	00058513          	mv	a0,a1
    c52c:	0007a023          	sw	zero,0(a5)
    c530:	000700e7          	jalr	a4 # ffffe000 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffffe001>
    c534:	00000513          	li	a0,0
    c538:	f79ff06f          	j	c4b0 <_raise_r+0x24>

0000c53c <raise>:
    c53c:	002137b7          	lui	a5,0x213
    c540:	00050593          	mv	a1,a0
    c544:	79c7a503          	lw	a0,1948(a5) # 21379c <_impure_ptr>
    c548:	f45ff06f          	j	c48c <_raise_r>

0000c54c <_kill_r>:
    c54c:	ff010113          	addi	sp,sp,-16
    c550:	00812423          	sw	s0,8(sp)
    c554:	00912223          	sw	s1,4(sp)
    c558:	00050413          	mv	s0,a0
    c55c:	0000d4b7          	lui	s1,0xd
    c560:	00058513          	mv	a0,a1
    c564:	00060593          	mv	a1,a2
    c568:	00112623          	sw	ra,12(sp)
    c56c:	2604a823          	sw	zero,624(s1) # d270 <errno>
    c570:	fd5f80ef          	jal	ra,5544 <_kill>
    c574:	fff00793          	li	a5,-1
    c578:	00f51863          	bne	a0,a5,c588 <_kill_r+0x3c>
    c57c:	2704a783          	lw	a5,624(s1)
    c580:	00078463          	beqz	a5,c588 <_kill_r+0x3c>
    c584:	00f42023          	sw	a5,0(s0)
    c588:	00c12083          	lw	ra,12(sp)
    c58c:	00812403          	lw	s0,8(sp)
    c590:	00412483          	lw	s1,4(sp)
    c594:	01010113          	addi	sp,sp,16
    c598:	00008067          	ret

0000c59c <_getpid_r>:
    c59c:	fb1f806f          	j	554c <_getpid>
